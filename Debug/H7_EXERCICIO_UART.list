
H7_EXERCICIO_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000610c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  080063ac  080063ac  000073ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080064c0  080064c0  000074c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080064c8  080064c8  000074c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080064cc  080064cc  000074cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  080064d0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000204  2400006c  0800653c  0000806c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000270  0800653c  00008270  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000f6d4  00000000  00000000  0000809a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000214b  00000000  00000000  0001776e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000b18  00000000  00000000  000198c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000871  00000000  00000000  0001a3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000375ba  00000000  00000000  0001ac49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000fbb8  00000000  00000000  00052203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015b1eb  00000000  00000000  00061dbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001bcfa6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000341c  00000000  00000000  001bcfec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  001c0408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400006c 	.word	0x2400006c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006394 	.word	0x08006394

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000070 	.word	0x24000070
 80002dc:	08006394 	.word	0x08006394

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	@ 0x28
 80006b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c2:	4b42      	ldr	r3, [pc, #264]	@ (80007cc <MX_GPIO_Init+0x120>)
 80006c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006c8:	4a40      	ldr	r2, [pc, #256]	@ (80007cc <MX_GPIO_Init+0x120>)
 80006ca:	f043 0304 	orr.w	r3, r3, #4
 80006ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006d2:	4b3e      	ldr	r3, [pc, #248]	@ (80007cc <MX_GPIO_Init+0x120>)
 80006d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d8:	f003 0304 	and.w	r3, r3, #4
 80006dc:	613b      	str	r3, [r7, #16]
 80006de:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e0:	4b3a      	ldr	r3, [pc, #232]	@ (80007cc <MX_GPIO_Init+0x120>)
 80006e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e6:	4a39      	ldr	r2, [pc, #228]	@ (80007cc <MX_GPIO_Init+0x120>)
 80006e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006f0:	4b36      	ldr	r3, [pc, #216]	@ (80007cc <MX_GPIO_Init+0x120>)
 80006f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fe:	4b33      	ldr	r3, [pc, #204]	@ (80007cc <MX_GPIO_Init+0x120>)
 8000700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000704:	4a31      	ldr	r2, [pc, #196]	@ (80007cc <MX_GPIO_Init+0x120>)
 8000706:	f043 0302 	orr.w	r3, r3, #2
 800070a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800070e:	4b2f      	ldr	r3, [pc, #188]	@ (80007cc <MX_GPIO_Init+0x120>)
 8000710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000714:	f003 0302 	and.w	r3, r3, #2
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800071c:	4b2b      	ldr	r3, [pc, #172]	@ (80007cc <MX_GPIO_Init+0x120>)
 800071e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000722:	4a2a      	ldr	r2, [pc, #168]	@ (80007cc <MX_GPIO_Init+0x120>)
 8000724:	f043 0308 	orr.w	r3, r3, #8
 8000728:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800072c:	4b27      	ldr	r3, [pc, #156]	@ (80007cc <MX_GPIO_Init+0x120>)
 800072e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000732:	f003 0308 	and.w	r3, r3, #8
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800073a:	4b24      	ldr	r3, [pc, #144]	@ (80007cc <MX_GPIO_Init+0x120>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000740:	4a22      	ldr	r2, [pc, #136]	@ (80007cc <MX_GPIO_Init+0x120>)
 8000742:	f043 0310 	orr.w	r3, r3, #16
 8000746:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800074a:	4b20      	ldr	r3, [pc, #128]	@ (80007cc <MX_GPIO_Init+0x120>)
 800074c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000750:	f003 0310 	and.w	r3, r3, #16
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	f244 0101 	movw	r1, #16385	@ 0x4001
 800075e:	481c      	ldr	r0, [pc, #112]	@ (80007d0 <MX_GPIO_Init+0x124>)
 8000760:	f000 febc 	bl	80014dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2102      	movs	r1, #2
 8000768:	481a      	ldr	r0, [pc, #104]	@ (80007d4 <MX_GPIO_Init+0x128>)
 800076a:	f000 feb7 	bl	80014dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800076e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000774:	2300      	movs	r3, #0
 8000776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4619      	mov	r1, r3
 8000782:	4815      	ldr	r0, [pc, #84]	@ (80007d8 <MX_GPIO_Init+0x12c>)
 8000784:	f000 fcfa 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000788:	f244 0301 	movw	r3, #16385	@ 0x4001
 800078c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078e:	2301      	movs	r3, #1
 8000790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000796:	2300      	movs	r3, #0
 8000798:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	4619      	mov	r1, r3
 80007a0:	480b      	ldr	r0, [pc, #44]	@ (80007d0 <MX_GPIO_Init+0x124>)
 80007a2:	f000 fceb 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007a6:	2302      	movs	r3, #2
 80007a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	4805      	ldr	r0, [pc, #20]	@ (80007d4 <MX_GPIO_Init+0x128>)
 80007be:	f000 fcdd 	bl	800117c <HAL_GPIO_Init>

}
 80007c2:	bf00      	nop
 80007c4:	3728      	adds	r7, #40	@ 0x28
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	58024400 	.word	0x58024400
 80007d0:	58020400 	.word	0x58020400
 80007d4:	58021000 	.word	0x58021000
 80007d8:	58020800 	.word	0x58020800

080007dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e0:	f000 fb26 	bl	8000e30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e4:	f000 f80c 	bl	8000800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e8:	f7ff ff60 	bl	80006ac <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007ec:	f000 fa28 	bl	8000c40 <MX_USART3_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Display_Menu();
 80007f0:	f000 f870 	bl	80008d4 <Display_Menu>
	  HAL_Delay(1000);
 80007f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007f8:	f000 fbac 	bl	8000f54 <HAL_Delay>
	  Display_Menu();
 80007fc:	bf00      	nop
 80007fe:	e7f7      	b.n	80007f0 <main+0x14>

08000800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b09c      	sub	sp, #112	@ 0x70
 8000804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800080a:	224c      	movs	r2, #76	@ 0x4c
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f005 f83e 	bl	8005890 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	2220      	movs	r2, #32
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f005 f838 	bl	8005890 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000820:	2002      	movs	r0, #2
 8000822:	f000 fe75 	bl	8001510 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000826:	2300      	movs	r3, #0
 8000828:	603b      	str	r3, [r7, #0]
 800082a:	4b28      	ldr	r3, [pc, #160]	@ (80008cc <SystemClock_Config+0xcc>)
 800082c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800082e:	4a27      	ldr	r2, [pc, #156]	@ (80008cc <SystemClock_Config+0xcc>)
 8000830:	f023 0301 	bic.w	r3, r3, #1
 8000834:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000836:	4b25      	ldr	r3, [pc, #148]	@ (80008cc <SystemClock_Config+0xcc>)
 8000838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	4b23      	ldr	r3, [pc, #140]	@ (80008d0 <SystemClock_Config+0xd0>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000848:	4a21      	ldr	r2, [pc, #132]	@ (80008d0 <SystemClock_Config+0xd0>)
 800084a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800084e:	6193      	str	r3, [r2, #24]
 8000850:	4b1f      	ldr	r3, [pc, #124]	@ (80008d0 <SystemClock_Config+0xd0>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800085c:	bf00      	nop
 800085e:	4b1c      	ldr	r3, [pc, #112]	@ (80008d0 <SystemClock_Config+0xd0>)
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000866:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800086a:	d1f8      	bne.n	800085e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800086c:	2302      	movs	r3, #2
 800086e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000870:	2301      	movs	r3, #1
 8000872:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000874:	2340      	movs	r3, #64	@ 0x40
 8000876:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000878:	2300      	movs	r3, #0
 800087a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000880:	4618      	mov	r0, r3
 8000882:	f000 fe7f 	bl	8001584 <HAL_RCC_OscConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800088c:	f000 f84a 	bl	8000924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000890:	233f      	movs	r3, #63	@ 0x3f
 8000892:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	2101      	movs	r1, #1
 80008b4:	4618      	mov	r0, r3
 80008b6:	f001 fabf 	bl	8001e38 <HAL_RCC_ClockConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008c0:	f000 f830 	bl	8000924 <Error_Handler>
  }
}
 80008c4:	bf00      	nop
 80008c6:	3770      	adds	r7, #112	@ 0x70
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	58000400 	.word	0x58000400
 80008d0:	58024800 	.word	0x58024800

080008d4 <Display_Menu>:
/* USER CODE BEGIN 4 */
/**
  * @brief Exibe o menu de opções via UART.
  * @retval None
  */
void Display_Menu(void) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
    printf("\r\n"); // Nova linha para melhor formatação
 80008d8:	480b      	ldr	r0, [pc, #44]	@ (8000908 <Display_Menu+0x34>)
 80008da:	f004 fef9 	bl	80056d0 <puts>
    printf("===== CONTROLE DE PWM =====\r\n");
 80008de:	480b      	ldr	r0, [pc, #44]	@ (800090c <Display_Menu+0x38>)
 80008e0:	f004 fef6 	bl	80056d0 <puts>
    printf("[1] Duty fixo 20%%\r\n");
 80008e4:	480a      	ldr	r0, [pc, #40]	@ (8000910 <Display_Menu+0x3c>)
 80008e6:	f004 fe8b 	bl	8005600 <iprintf>
    printf("[2] Duty fixo 80%%\r\n");
 80008ea:	480a      	ldr	r0, [pc, #40]	@ (8000914 <Display_Menu+0x40>)
 80008ec:	f004 fe88 	bl	8005600 <iprintf>
    printf("[3] Ramp 0-100%% em 5 s\r\n");
 80008f0:	4809      	ldr	r0, [pc, #36]	@ (8000918 <Display_Menu+0x44>)
 80008f2:	f004 fe85 	bl	8005600 <iprintf>
    printf("[4] +10%% por clique no botao\r\n");
 80008f6:	4809      	ldr	r0, [pc, #36]	@ (800091c <Display_Menu+0x48>)
 80008f8:	f004 fe82 	bl	8005600 <iprintf>
    printf("Selecione a opcao: \r\n");
 80008fc:	4808      	ldr	r0, [pc, #32]	@ (8000920 <Display_Menu+0x4c>)
 80008fe:	f004 fee7 	bl	80056d0 <puts>
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	080063ac 	.word	0x080063ac
 800090c:	080063b0 	.word	0x080063b0
 8000910:	080063d0 	.word	0x080063d0
 8000914:	080063e8 	.word	0x080063e8
 8000918:	08006400 	.word	0x08006400
 800091c:	0800641c 	.word	0x0800641c
 8000920:	0800643c 	.word	0x0800643c

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <Error_Handler+0x8>

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	4b0a      	ldr	r3, [pc, #40]	@ (8000960 <HAL_MspInit+0x30>)
 8000938:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800093c:	4a08      	ldr	r2, [pc, #32]	@ (8000960 <HAL_MspInit+0x30>)
 800093e:	f043 0302 	orr.w	r3, r3, #2
 8000942:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000946:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <HAL_MspInit+0x30>)
 8000948:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800094c:	f003 0302 	and.w	r3, r3, #2
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	58024400 	.word	0x58024400

08000964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <NMI_Handler+0x4>

0800096c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <HardFault_Handler+0x4>

08000974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <MemManage_Handler+0x4>

0800097c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <BusFault_Handler+0x4>

08000984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <UsageFault_Handler+0x4>

0800098c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ba:	f000 faab 	bl	8000f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b086      	sub	sp, #24
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	60f8      	str	r0, [r7, #12]
 80009ca:	60b9      	str	r1, [r7, #8]
 80009cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
 80009d2:	e00a      	b.n	80009ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009d4:	f3af 8000 	nop.w
 80009d8:	4601      	mov	r1, r0
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	1c5a      	adds	r2, r3, #1
 80009de:	60ba      	str	r2, [r7, #8]
 80009e0:	b2ca      	uxtb	r2, r1
 80009e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	3301      	adds	r3, #1
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	697a      	ldr	r2, [r7, #20]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	dbf0      	blt.n	80009d4 <_read+0x12>
  }

  return len;
 80009f2:	687b      	ldr	r3, [r7, #4]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3718      	adds	r7, #24
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <_close>:
  }
  return len;
}

int _close(int file)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a24:	605a      	str	r2, [r3, #4]
  return 0;
 8000a26:	2300      	movs	r3, #0
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <_isatty>:

int _isatty(int file)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a3c:	2301      	movs	r3, #1
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b085      	sub	sp, #20
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	60f8      	str	r0, [r7, #12]
 8000a52:	60b9      	str	r1, [r7, #8]
 8000a54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a56:	2300      	movs	r3, #0
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3714      	adds	r7, #20
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a6c:	4a14      	ldr	r2, [pc, #80]	@ (8000ac0 <_sbrk+0x5c>)
 8000a6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ac4 <_sbrk+0x60>)
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a78:	4b13      	ldr	r3, [pc, #76]	@ (8000ac8 <_sbrk+0x64>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d102      	bne.n	8000a86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a80:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <_sbrk+0x64>)
 8000a82:	4a12      	ldr	r2, [pc, #72]	@ (8000acc <_sbrk+0x68>)
 8000a84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a86:	4b10      	ldr	r3, [pc, #64]	@ (8000ac8 <_sbrk+0x64>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d207      	bcs.n	8000aa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a94:	f004 ff4a 	bl	800592c <__errno>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa2:	e009      	b.n	8000ab8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aa4:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <_sbrk+0x64>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aaa:	4b07      	ldr	r3, [pc, #28]	@ (8000ac8 <_sbrk+0x64>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4413      	add	r3, r2
 8000ab2:	4a05      	ldr	r2, [pc, #20]	@ (8000ac8 <_sbrk+0x64>)
 8000ab4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3718      	adds	r7, #24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	24080000 	.word	0x24080000
 8000ac4:	00000400 	.word	0x00000400
 8000ac8:	24000088 	.word	0x24000088
 8000acc:	24000270 	.word	0x24000270

08000ad0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ad4:	4b43      	ldr	r3, [pc, #268]	@ (8000be4 <SystemInit+0x114>)
 8000ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ada:	4a42      	ldr	r2, [pc, #264]	@ (8000be4 <SystemInit+0x114>)
 8000adc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ae0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ae4:	4b40      	ldr	r3, [pc, #256]	@ (8000be8 <SystemInit+0x118>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f003 030f 	and.w	r3, r3, #15
 8000aec:	2b06      	cmp	r3, #6
 8000aee:	d807      	bhi.n	8000b00 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000af0:	4b3d      	ldr	r3, [pc, #244]	@ (8000be8 <SystemInit+0x118>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f023 030f 	bic.w	r3, r3, #15
 8000af8:	4a3b      	ldr	r2, [pc, #236]	@ (8000be8 <SystemInit+0x118>)
 8000afa:	f043 0307 	orr.w	r3, r3, #7
 8000afe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b00:	4b3a      	ldr	r3, [pc, #232]	@ (8000bec <SystemInit+0x11c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a39      	ldr	r2, [pc, #228]	@ (8000bec <SystemInit+0x11c>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b0c:	4b37      	ldr	r3, [pc, #220]	@ (8000bec <SystemInit+0x11c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b12:	4b36      	ldr	r3, [pc, #216]	@ (8000bec <SystemInit+0x11c>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	4935      	ldr	r1, [pc, #212]	@ (8000bec <SystemInit+0x11c>)
 8000b18:	4b35      	ldr	r3, [pc, #212]	@ (8000bf0 <SystemInit+0x120>)
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b1e:	4b32      	ldr	r3, [pc, #200]	@ (8000be8 <SystemInit+0x118>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f003 0308 	and.w	r3, r3, #8
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d007      	beq.n	8000b3a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b2a:	4b2f      	ldr	r3, [pc, #188]	@ (8000be8 <SystemInit+0x118>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f023 030f 	bic.w	r3, r3, #15
 8000b32:	4a2d      	ldr	r2, [pc, #180]	@ (8000be8 <SystemInit+0x118>)
 8000b34:	f043 0307 	orr.w	r3, r3, #7
 8000b38:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b3a:	4b2c      	ldr	r3, [pc, #176]	@ (8000bec <SystemInit+0x11c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b40:	4b2a      	ldr	r3, [pc, #168]	@ (8000bec <SystemInit+0x11c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b46:	4b29      	ldr	r3, [pc, #164]	@ (8000bec <SystemInit+0x11c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b4c:	4b27      	ldr	r3, [pc, #156]	@ (8000bec <SystemInit+0x11c>)
 8000b4e:	4a29      	ldr	r2, [pc, #164]	@ (8000bf4 <SystemInit+0x124>)
 8000b50:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b52:	4b26      	ldr	r3, [pc, #152]	@ (8000bec <SystemInit+0x11c>)
 8000b54:	4a28      	ldr	r2, [pc, #160]	@ (8000bf8 <SystemInit+0x128>)
 8000b56:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b58:	4b24      	ldr	r3, [pc, #144]	@ (8000bec <SystemInit+0x11c>)
 8000b5a:	4a28      	ldr	r2, [pc, #160]	@ (8000bfc <SystemInit+0x12c>)
 8000b5c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b5e:	4b23      	ldr	r3, [pc, #140]	@ (8000bec <SystemInit+0x11c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b64:	4b21      	ldr	r3, [pc, #132]	@ (8000bec <SystemInit+0x11c>)
 8000b66:	4a25      	ldr	r2, [pc, #148]	@ (8000bfc <SystemInit+0x12c>)
 8000b68:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b6a:	4b20      	ldr	r3, [pc, #128]	@ (8000bec <SystemInit+0x11c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b70:	4b1e      	ldr	r3, [pc, #120]	@ (8000bec <SystemInit+0x11c>)
 8000b72:	4a22      	ldr	r2, [pc, #136]	@ (8000bfc <SystemInit+0x12c>)
 8000b74:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b76:	4b1d      	ldr	r3, [pc, #116]	@ (8000bec <SystemInit+0x11c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bec <SystemInit+0x11c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a1a      	ldr	r2, [pc, #104]	@ (8000bec <SystemInit+0x11c>)
 8000b82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b86:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b88:	4b18      	ldr	r3, [pc, #96]	@ (8000bec <SystemInit+0x11c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c00 <SystemInit+0x130>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	4b1c      	ldr	r3, [pc, #112]	@ (8000c04 <SystemInit+0x134>)
 8000b94:	4013      	ands	r3, r2
 8000b96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b9a:	d202      	bcs.n	8000ba2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c08 <SystemInit+0x138>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000ba2:	4b12      	ldr	r3, [pc, #72]	@ (8000bec <SystemInit+0x11c>)
 8000ba4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ba8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d113      	bne.n	8000bd8 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bec <SystemInit+0x11c>)
 8000bb2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000bb6:	4a0d      	ldr	r2, [pc, #52]	@ (8000bec <SystemInit+0x11c>)
 8000bb8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bbc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000bc0:	4b12      	ldr	r3, [pc, #72]	@ (8000c0c <SystemInit+0x13c>)
 8000bc2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000bc6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000bc8:	4b08      	ldr	r3, [pc, #32]	@ (8000bec <SystemInit+0x11c>)
 8000bca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000bce:	4a07      	ldr	r2, [pc, #28]	@ (8000bec <SystemInit+0x11c>)
 8000bd0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000bd4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000ed00 	.word	0xe000ed00
 8000be8:	52002000 	.word	0x52002000
 8000bec:	58024400 	.word	0x58024400
 8000bf0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000bf4:	02020200 	.word	0x02020200
 8000bf8:	01ff0000 	.word	0x01ff0000
 8000bfc:	01010280 	.word	0x01010280
 8000c00:	5c001000 	.word	0x5c001000
 8000c04:	ffff0000 	.word	0xffff0000
 8000c08:	51008108 	.word	0x51008108
 8000c0c:	52004000 	.word	0x52004000

08000c10 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000c14:	4b09      	ldr	r3, [pc, #36]	@ (8000c3c <ExitRun0Mode+0x2c>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	4a08      	ldr	r2, [pc, #32]	@ (8000c3c <ExitRun0Mode+0x2c>)
 8000c1a:	f043 0302 	orr.w	r3, r3, #2
 8000c1e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000c20:	bf00      	nop
 8000c22:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <ExitRun0Mode+0x2c>)
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d0f9      	beq.n	8000c22 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000c2e:	bf00      	nop
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	58024800 	.word	0x58024800

08000c40 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c44:	4b22      	ldr	r3, [pc, #136]	@ (8000cd0 <MX_USART3_UART_Init+0x90>)
 8000c46:	4a23      	ldr	r2, [pc, #140]	@ (8000cd4 <MX_USART3_UART_Init+0x94>)
 8000c48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c4a:	4b21      	ldr	r3, [pc, #132]	@ (8000cd0 <MX_USART3_UART_Init+0x90>)
 8000c4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c52:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd0 <MX_USART3_UART_Init+0x90>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c58:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd0 <MX_USART3_UART_Init+0x90>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd0 <MX_USART3_UART_Init+0x90>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c64:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd0 <MX_USART3_UART_Init+0x90>)
 8000c66:	220c      	movs	r2, #12
 8000c68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6a:	4b19      	ldr	r3, [pc, #100]	@ (8000cd0 <MX_USART3_UART_Init+0x90>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c70:	4b17      	ldr	r3, [pc, #92]	@ (8000cd0 <MX_USART3_UART_Init+0x90>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c76:	4b16      	ldr	r3, [pc, #88]	@ (8000cd0 <MX_USART3_UART_Init+0x90>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c7c:	4b14      	ldr	r3, [pc, #80]	@ (8000cd0 <MX_USART3_UART_Init+0x90>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c82:	4b13      	ldr	r3, [pc, #76]	@ (8000cd0 <MX_USART3_UART_Init+0x90>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c88:	4811      	ldr	r0, [pc, #68]	@ (8000cd0 <MX_USART3_UART_Init+0x90>)
 8000c8a:	f003 fa8d 	bl	80041a8 <HAL_UART_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c94:	f7ff fe46 	bl	8000924 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c98:	2100      	movs	r1, #0
 8000c9a:	480d      	ldr	r0, [pc, #52]	@ (8000cd0 <MX_USART3_UART_Init+0x90>)
 8000c9c:	f004 fb23 	bl	80052e6 <HAL_UARTEx_SetTxFifoThreshold>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ca6:	f7ff fe3d 	bl	8000924 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000caa:	2100      	movs	r1, #0
 8000cac:	4808      	ldr	r0, [pc, #32]	@ (8000cd0 <MX_USART3_UART_Init+0x90>)
 8000cae:	f004 fb58 	bl	8005362 <HAL_UARTEx_SetRxFifoThreshold>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000cb8:	f7ff fe34 	bl	8000924 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cbc:	4804      	ldr	r0, [pc, #16]	@ (8000cd0 <MX_USART3_UART_Init+0x90>)
 8000cbe:	f004 fad9 	bl	8005274 <HAL_UARTEx_DisableFifoMode>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000cc8:	f7ff fe2c 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	2400008c 	.word	0x2400008c
 8000cd4:	40004800 	.word	0x40004800

08000cd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b0ba      	sub	sp, #232	@ 0xe8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cf0:	f107 0310 	add.w	r3, r7, #16
 8000cf4:	22c0      	movs	r2, #192	@ 0xc0
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f004 fdc9 	bl	8005890 <memset>
  if(uartHandle->Instance==USART3)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a27      	ldr	r2, [pc, #156]	@ (8000da0 <HAL_UART_MspInit+0xc8>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d146      	bne.n	8000d96 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d08:	f04f 0202 	mov.w	r2, #2
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d1a:	f107 0310 	add.w	r3, r7, #16
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f001 fc16 	bl	8002550 <HAL_RCCEx_PeriphCLKConfig>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000d2a:	f7ff fdfb 	bl	8000924 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000da4 <HAL_UART_MspInit+0xcc>)
 8000d30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d34:	4a1b      	ldr	r2, [pc, #108]	@ (8000da4 <HAL_UART_MspInit+0xcc>)
 8000d36:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d3a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d3e:	4b19      	ldr	r3, [pc, #100]	@ (8000da4 <HAL_UART_MspInit+0xcc>)
 8000d40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d4c:	4b15      	ldr	r3, [pc, #84]	@ (8000da4 <HAL_UART_MspInit+0xcc>)
 8000d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d52:	4a14      	ldr	r2, [pc, #80]	@ (8000da4 <HAL_UART_MspInit+0xcc>)
 8000d54:	f043 0308 	orr.w	r3, r3, #8
 8000d58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d5c:	4b11      	ldr	r3, [pc, #68]	@ (8000da4 <HAL_UART_MspInit+0xcc>)
 8000d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d62:	f003 0308 	and.w	r3, r3, #8
 8000d66:	60bb      	str	r3, [r7, #8]
 8000d68:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d6a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d84:	2307      	movs	r3, #7
 8000d86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d8a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4805      	ldr	r0, [pc, #20]	@ (8000da8 <HAL_UART_MspInit+0xd0>)
 8000d92:	f000 f9f3 	bl	800117c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000d96:	bf00      	nop
 8000d98:	37e8      	adds	r7, #232	@ 0xe8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40004800 	.word	0x40004800
 8000da4:	58024400 	.word	0x58024400
 8000da8:	58020c00 	.word	0x58020c00

08000dac <_write>:
  }
}

/* USER CODE BEGIN 1 */
int _write(int file, char *ptr, int len)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *) ptr, len, 1000);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dc0:	68b9      	ldr	r1, [r7, #8]
 8000dc2:	4804      	ldr	r0, [pc, #16]	@ (8000dd4 <_write+0x28>)
 8000dc4:	f003 fa40 	bl	8004248 <HAL_UART_Transmit>
  return len;
 8000dc8:	687b      	ldr	r3, [r7, #4]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	2400008c 	.word	0x2400008c

08000dd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000dd8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000e14 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000ddc:	f7ff ff18 	bl	8000c10 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000de0:	f7ff fe76 	bl	8000ad0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000de4:	480c      	ldr	r0, [pc, #48]	@ (8000e18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000de6:	490d      	ldr	r1, [pc, #52]	@ (8000e1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000de8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dec:	e002      	b.n	8000df4 <LoopCopyDataInit>

08000dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df2:	3304      	adds	r3, #4

08000df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df8:	d3f9      	bcc.n	8000dee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000e24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dfc:	4c0a      	ldr	r4, [pc, #40]	@ (8000e28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e00:	e001      	b.n	8000e06 <LoopFillZerobss>

08000e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e04:	3204      	adds	r2, #4

08000e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e08:	d3fb      	bcc.n	8000e02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e0a:	f004 fd95 	bl	8005938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e0e:	f7ff fce5 	bl	80007dc <main>
  bx  lr
 8000e12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e14:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000e18:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e1c:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8000e20:	080064d0 	.word	0x080064d0
  ldr r2, =_sbss
 8000e24:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8000e28:	24000270 	.word	0x24000270

08000e2c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e2c:	e7fe      	b.n	8000e2c <ADC3_IRQHandler>
	...

08000e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e36:	2003      	movs	r0, #3
 8000e38:	f000 f96e 	bl	8001118 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e3c:	f001 f9b2 	bl	80021a4 <HAL_RCC_GetSysClockFreq>
 8000e40:	4602      	mov	r2, r0
 8000e42:	4b15      	ldr	r3, [pc, #84]	@ (8000e98 <HAL_Init+0x68>)
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	0a1b      	lsrs	r3, r3, #8
 8000e48:	f003 030f 	and.w	r3, r3, #15
 8000e4c:	4913      	ldr	r1, [pc, #76]	@ (8000e9c <HAL_Init+0x6c>)
 8000e4e:	5ccb      	ldrb	r3, [r1, r3]
 8000e50:	f003 031f 	and.w	r3, r3, #31
 8000e54:	fa22 f303 	lsr.w	r3, r2, r3
 8000e58:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e98 <HAL_Init+0x68>)
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	f003 030f 	and.w	r3, r3, #15
 8000e62:	4a0e      	ldr	r2, [pc, #56]	@ (8000e9c <HAL_Init+0x6c>)
 8000e64:	5cd3      	ldrb	r3, [r2, r3]
 8000e66:	f003 031f 	and.w	r3, r3, #31
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e70:	4a0b      	ldr	r2, [pc, #44]	@ (8000ea0 <HAL_Init+0x70>)
 8000e72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e74:	4a0b      	ldr	r2, [pc, #44]	@ (8000ea4 <HAL_Init+0x74>)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f000 f814 	bl	8000ea8 <HAL_InitTick>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e002      	b.n	8000e90 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e8a:	f7ff fd51 	bl	8000930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e8e:	2300      	movs	r3, #0
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	58024400 	.word	0x58024400
 8000e9c:	08006454 	.word	0x08006454
 8000ea0:	24000004 	.word	0x24000004
 8000ea4:	24000000 	.word	0x24000000

08000ea8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000eb0:	4b15      	ldr	r3, [pc, #84]	@ (8000f08 <HAL_InitTick+0x60>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d101      	bne.n	8000ebc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e021      	b.n	8000f00 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ebc:	4b13      	ldr	r3, [pc, #76]	@ (8000f0c <HAL_InitTick+0x64>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4b11      	ldr	r3, [pc, #68]	@ (8000f08 <HAL_InitTick+0x60>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 f945 	bl	8001162 <HAL_SYSTICK_Config>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00e      	b.n	8000f00 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b0f      	cmp	r3, #15
 8000ee6:	d80a      	bhi.n	8000efe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef0:	f000 f91d 	bl	800112e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ef4:	4a06      	ldr	r2, [pc, #24]	@ (8000f10 <HAL_InitTick+0x68>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000efa:	2300      	movs	r3, #0
 8000efc:	e000      	b.n	8000f00 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	2400000c 	.word	0x2400000c
 8000f0c:	24000000 	.word	0x24000000
 8000f10:	24000008 	.word	0x24000008

08000f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f18:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <HAL_IncTick+0x20>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <HAL_IncTick+0x24>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4413      	add	r3, r2
 8000f24:	4a04      	ldr	r2, [pc, #16]	@ (8000f38 <HAL_IncTick+0x24>)
 8000f26:	6013      	str	r3, [r2, #0]
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	2400000c 	.word	0x2400000c
 8000f38:	24000120 	.word	0x24000120

08000f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f40:	4b03      	ldr	r3, [pc, #12]	@ (8000f50 <HAL_GetTick+0x14>)
 8000f42:	681b      	ldr	r3, [r3, #0]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	24000120 	.word	0x24000120

08000f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f5c:	f7ff ffee 	bl	8000f3c <HAL_GetTick>
 8000f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f6c:	d005      	beq.n	8000f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f98 <HAL_Delay+0x44>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4413      	add	r3, r2
 8000f78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f7a:	bf00      	nop
 8000f7c:	f7ff ffde 	bl	8000f3c <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d8f7      	bhi.n	8000f7c <HAL_Delay+0x28>
  {
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	bf00      	nop
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	2400000c 	.word	0x2400000c

08000f9c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000fa0:	4b03      	ldr	r3, [pc, #12]	@ (8000fb0 <HAL_GetREVID+0x14>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	0c1b      	lsrs	r3, r3, #16
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	5c001000 	.word	0x5c001000

08000fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <__NVIC_SetPriorityGrouping+0x40>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fdc:	4b06      	ldr	r3, [pc, #24]	@ (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe2:	4a04      	ldr	r2, [pc, #16]	@ (8000ff4 <__NVIC_SetPriorityGrouping+0x40>)
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	60d3      	str	r3, [r2, #12]
}
 8000fe8:	bf00      	nop
 8000fea:	3714      	adds	r7, #20
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000ed00 	.word	0xe000ed00
 8000ff8:	05fa0000 	.word	0x05fa0000

08000ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001000:	4b04      	ldr	r3, [pc, #16]	@ (8001014 <__NVIC_GetPriorityGrouping+0x18>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	0a1b      	lsrs	r3, r3, #8
 8001006:	f003 0307 	and.w	r3, r3, #7
}
 800100a:	4618      	mov	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	6039      	str	r1, [r7, #0]
 8001022:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001024:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001028:	2b00      	cmp	r3, #0
 800102a:	db0a      	blt.n	8001042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	b2da      	uxtb	r2, r3
 8001030:	490c      	ldr	r1, [pc, #48]	@ (8001064 <__NVIC_SetPriority+0x4c>)
 8001032:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001036:	0112      	lsls	r2, r2, #4
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	440b      	add	r3, r1
 800103c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001040:	e00a      	b.n	8001058 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4908      	ldr	r1, [pc, #32]	@ (8001068 <__NVIC_SetPriority+0x50>)
 8001048:	88fb      	ldrh	r3, [r7, #6]
 800104a:	f003 030f 	and.w	r3, r3, #15
 800104e:	3b04      	subs	r3, #4
 8001050:	0112      	lsls	r2, r2, #4
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	440b      	add	r3, r1
 8001056:	761a      	strb	r2, [r3, #24]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000e100 	.word	0xe000e100
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800106c:	b480      	push	{r7}
 800106e:	b089      	sub	sp, #36	@ 0x24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	f1c3 0307 	rsb	r3, r3, #7
 8001086:	2b04      	cmp	r3, #4
 8001088:	bf28      	it	cs
 800108a:	2304      	movcs	r3, #4
 800108c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3304      	adds	r3, #4
 8001092:	2b06      	cmp	r3, #6
 8001094:	d902      	bls.n	800109c <NVIC_EncodePriority+0x30>
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3b03      	subs	r3, #3
 800109a:	e000      	b.n	800109e <NVIC_EncodePriority+0x32>
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	f04f 32ff 	mov.w	r2, #4294967295
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43da      	mvns	r2, r3
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	401a      	ands	r2, r3
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b4:	f04f 31ff 	mov.w	r1, #4294967295
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa01 f303 	lsl.w	r3, r1, r3
 80010be:	43d9      	mvns	r1, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c4:	4313      	orrs	r3, r2
         );
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3724      	adds	r7, #36	@ 0x24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
	...

080010d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010e4:	d301      	bcc.n	80010ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e6:	2301      	movs	r3, #1
 80010e8:	e00f      	b.n	800110a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001114 <SysTick_Config+0x40>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010f2:	210f      	movs	r1, #15
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295
 80010f8:	f7ff ff8e 	bl	8001018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010fc:	4b05      	ldr	r3, [pc, #20]	@ (8001114 <SysTick_Config+0x40>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001102:	4b04      	ldr	r3, [pc, #16]	@ (8001114 <SysTick_Config+0x40>)
 8001104:	2207      	movs	r2, #7
 8001106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	e000e010 	.word	0xe000e010

08001118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ff47 	bl	8000fb4 <__NVIC_SetPriorityGrouping>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b086      	sub	sp, #24
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	607a      	str	r2, [r7, #4]
 800113a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800113c:	f7ff ff5e 	bl	8000ffc <__NVIC_GetPriorityGrouping>
 8001140:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	68b9      	ldr	r1, [r7, #8]
 8001146:	6978      	ldr	r0, [r7, #20]
 8001148:	f7ff ff90 	bl	800106c <NVIC_EncodePriority>
 800114c:	4602      	mov	r2, r0
 800114e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001152:	4611      	mov	r1, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff5f 	bl	8001018 <__NVIC_SetPriority>
}
 800115a:	bf00      	nop
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff ffb2 	bl	80010d4 <SysTick_Config>
 8001170:	4603      	mov	r3, r0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800117c:	b480      	push	{r7}
 800117e:	b089      	sub	sp, #36	@ 0x24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800118a:	4b89      	ldr	r3, [pc, #548]	@ (80013b0 <HAL_GPIO_Init+0x234>)
 800118c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800118e:	e194      	b.n	80014ba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	2101      	movs	r1, #1
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	fa01 f303 	lsl.w	r3, r1, r3
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f000 8186 	beq.w	80014b4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d005      	beq.n	80011c0 <HAL_GPIO_Init+0x44>
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 0303 	and.w	r3, r3, #3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d130      	bne.n	8001222 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	2203      	movs	r2, #3
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	68da      	ldr	r2, [r3, #12]
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011f6:	2201      	movs	r2, #1
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	091b      	lsrs	r3, r3, #4
 800120c:	f003 0201 	and.w	r2, r3, #1
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	2b03      	cmp	r3, #3
 800122c:	d017      	beq.n	800125e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	2203      	movs	r2, #3
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4013      	ands	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	689a      	ldr	r2, [r3, #8]
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d123      	bne.n	80012b2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	08da      	lsrs	r2, r3, #3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3208      	adds	r2, #8
 8001272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001276:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	220f      	movs	r2, #15
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4013      	ands	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	691a      	ldr	r2, [r3, #16]
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	f003 0307 	and.w	r3, r3, #7
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	08da      	lsrs	r2, r3, #3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3208      	adds	r2, #8
 80012ac:	69b9      	ldr	r1, [r7, #24]
 80012ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	2203      	movs	r2, #3
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 0203 	and.w	r2, r3, #3
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 80e0 	beq.w	80014b4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f4:	4b2f      	ldr	r3, [pc, #188]	@ (80013b4 <HAL_GPIO_Init+0x238>)
 80012f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012fa:	4a2e      	ldr	r2, [pc, #184]	@ (80013b4 <HAL_GPIO_Init+0x238>)
 80012fc:	f043 0302 	orr.w	r3, r3, #2
 8001300:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001304:	4b2b      	ldr	r3, [pc, #172]	@ (80013b4 <HAL_GPIO_Init+0x238>)
 8001306:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001312:	4a29      	ldr	r2, [pc, #164]	@ (80013b8 <HAL_GPIO_Init+0x23c>)
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	089b      	lsrs	r3, r3, #2
 8001318:	3302      	adds	r3, #2
 800131a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	220f      	movs	r2, #15
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4013      	ands	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a20      	ldr	r2, [pc, #128]	@ (80013bc <HAL_GPIO_Init+0x240>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d052      	beq.n	80013e4 <HAL_GPIO_Init+0x268>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a1f      	ldr	r2, [pc, #124]	@ (80013c0 <HAL_GPIO_Init+0x244>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d031      	beq.n	80013aa <HAL_GPIO_Init+0x22e>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a1e      	ldr	r2, [pc, #120]	@ (80013c4 <HAL_GPIO_Init+0x248>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d02b      	beq.n	80013a6 <HAL_GPIO_Init+0x22a>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a1d      	ldr	r2, [pc, #116]	@ (80013c8 <HAL_GPIO_Init+0x24c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d025      	beq.n	80013a2 <HAL_GPIO_Init+0x226>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a1c      	ldr	r2, [pc, #112]	@ (80013cc <HAL_GPIO_Init+0x250>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d01f      	beq.n	800139e <HAL_GPIO_Init+0x222>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a1b      	ldr	r2, [pc, #108]	@ (80013d0 <HAL_GPIO_Init+0x254>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d019      	beq.n	800139a <HAL_GPIO_Init+0x21e>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a1a      	ldr	r2, [pc, #104]	@ (80013d4 <HAL_GPIO_Init+0x258>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d013      	beq.n	8001396 <HAL_GPIO_Init+0x21a>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a19      	ldr	r2, [pc, #100]	@ (80013d8 <HAL_GPIO_Init+0x25c>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d00d      	beq.n	8001392 <HAL_GPIO_Init+0x216>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a18      	ldr	r2, [pc, #96]	@ (80013dc <HAL_GPIO_Init+0x260>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d007      	beq.n	800138e <HAL_GPIO_Init+0x212>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a17      	ldr	r2, [pc, #92]	@ (80013e0 <HAL_GPIO_Init+0x264>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d101      	bne.n	800138a <HAL_GPIO_Init+0x20e>
 8001386:	2309      	movs	r3, #9
 8001388:	e02d      	b.n	80013e6 <HAL_GPIO_Init+0x26a>
 800138a:	230a      	movs	r3, #10
 800138c:	e02b      	b.n	80013e6 <HAL_GPIO_Init+0x26a>
 800138e:	2308      	movs	r3, #8
 8001390:	e029      	b.n	80013e6 <HAL_GPIO_Init+0x26a>
 8001392:	2307      	movs	r3, #7
 8001394:	e027      	b.n	80013e6 <HAL_GPIO_Init+0x26a>
 8001396:	2306      	movs	r3, #6
 8001398:	e025      	b.n	80013e6 <HAL_GPIO_Init+0x26a>
 800139a:	2305      	movs	r3, #5
 800139c:	e023      	b.n	80013e6 <HAL_GPIO_Init+0x26a>
 800139e:	2304      	movs	r3, #4
 80013a0:	e021      	b.n	80013e6 <HAL_GPIO_Init+0x26a>
 80013a2:	2303      	movs	r3, #3
 80013a4:	e01f      	b.n	80013e6 <HAL_GPIO_Init+0x26a>
 80013a6:	2302      	movs	r3, #2
 80013a8:	e01d      	b.n	80013e6 <HAL_GPIO_Init+0x26a>
 80013aa:	2301      	movs	r3, #1
 80013ac:	e01b      	b.n	80013e6 <HAL_GPIO_Init+0x26a>
 80013ae:	bf00      	nop
 80013b0:	58000080 	.word	0x58000080
 80013b4:	58024400 	.word	0x58024400
 80013b8:	58000400 	.word	0x58000400
 80013bc:	58020000 	.word	0x58020000
 80013c0:	58020400 	.word	0x58020400
 80013c4:	58020800 	.word	0x58020800
 80013c8:	58020c00 	.word	0x58020c00
 80013cc:	58021000 	.word	0x58021000
 80013d0:	58021400 	.word	0x58021400
 80013d4:	58021800 	.word	0x58021800
 80013d8:	58021c00 	.word	0x58021c00
 80013dc:	58022000 	.word	0x58022000
 80013e0:	58022400 	.word	0x58022400
 80013e4:	2300      	movs	r3, #0
 80013e6:	69fa      	ldr	r2, [r7, #28]
 80013e8:	f002 0203 	and.w	r2, r2, #3
 80013ec:	0092      	lsls	r2, r2, #2
 80013ee:	4093      	lsls	r3, r2
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013f6:	4938      	ldr	r1, [pc, #224]	@ (80014d8 <HAL_GPIO_Init+0x35c>)
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	089b      	lsrs	r3, r3, #2
 80013fc:	3302      	adds	r3, #2
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001404:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	43db      	mvns	r3, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4013      	ands	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800142a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001432:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001458:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	43db      	mvns	r3, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4013      	ands	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	3301      	adds	r3, #1
 80014b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	fa22 f303 	lsr.w	r3, r2, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	f47f ae63 	bne.w	8001190 <HAL_GPIO_Init+0x14>
  }
}
 80014ca:	bf00      	nop
 80014cc:	bf00      	nop
 80014ce:	3724      	adds	r7, #36	@ 0x24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	58000400 	.word	0x58000400

080014dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	460b      	mov	r3, r1
 80014e6:	807b      	strh	r3, [r7, #2]
 80014e8:	4613      	mov	r3, r2
 80014ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014ec:	787b      	ldrb	r3, [r7, #1]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014f2:	887a      	ldrh	r2, [r7, #2]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80014f8:	e003      	b.n	8001502 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80014fa:	887b      	ldrh	r3, [r7, #2]
 80014fc:	041a      	lsls	r2, r3, #16
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	619a      	str	r2, [r3, #24]
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
	...

08001510 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001518:	4b19      	ldr	r3, [pc, #100]	@ (8001580 <HAL_PWREx_ConfigSupply+0x70>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b04      	cmp	r3, #4
 8001522:	d00a      	beq.n	800153a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001524:	4b16      	ldr	r3, [pc, #88]	@ (8001580 <HAL_PWREx_ConfigSupply+0x70>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	429a      	cmp	r2, r3
 8001530:	d001      	beq.n	8001536 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e01f      	b.n	8001576 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	e01d      	b.n	8001576 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800153a:	4b11      	ldr	r3, [pc, #68]	@ (8001580 <HAL_PWREx_ConfigSupply+0x70>)
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	f023 0207 	bic.w	r2, r3, #7
 8001542:	490f      	ldr	r1, [pc, #60]	@ (8001580 <HAL_PWREx_ConfigSupply+0x70>)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4313      	orrs	r3, r2
 8001548:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800154a:	f7ff fcf7 	bl	8000f3c <HAL_GetTick>
 800154e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001550:	e009      	b.n	8001566 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001552:	f7ff fcf3 	bl	8000f3c <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001560:	d901      	bls.n	8001566 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e007      	b.n	8001576 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001566:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <HAL_PWREx_ConfigSupply+0x70>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800156e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001572:	d1ee      	bne.n	8001552 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	58024800 	.word	0x58024800

08001584 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08c      	sub	sp, #48	@ 0x30
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d102      	bne.n	8001598 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	f000 bc48 	b.w	8001e28 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f000 8088 	beq.w	80016b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015a6:	4b99      	ldr	r3, [pc, #612]	@ (800180c <HAL_RCC_OscConfig+0x288>)
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80015ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015b0:	4b96      	ldr	r3, [pc, #600]	@ (800180c <HAL_RCC_OscConfig+0x288>)
 80015b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80015b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015b8:	2b10      	cmp	r3, #16
 80015ba:	d007      	beq.n	80015cc <HAL_RCC_OscConfig+0x48>
 80015bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015be:	2b18      	cmp	r3, #24
 80015c0:	d111      	bne.n	80015e6 <HAL_RCC_OscConfig+0x62>
 80015c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d10c      	bne.n	80015e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015cc:	4b8f      	ldr	r3, [pc, #572]	@ (800180c <HAL_RCC_OscConfig+0x288>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d06d      	beq.n	80016b4 <HAL_RCC_OscConfig+0x130>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d169      	bne.n	80016b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	f000 bc21 	b.w	8001e28 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015ee:	d106      	bne.n	80015fe <HAL_RCC_OscConfig+0x7a>
 80015f0:	4b86      	ldr	r3, [pc, #536]	@ (800180c <HAL_RCC_OscConfig+0x288>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a85      	ldr	r2, [pc, #532]	@ (800180c <HAL_RCC_OscConfig+0x288>)
 80015f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015fa:	6013      	str	r3, [r2, #0]
 80015fc:	e02e      	b.n	800165c <HAL_RCC_OscConfig+0xd8>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d10c      	bne.n	8001620 <HAL_RCC_OscConfig+0x9c>
 8001606:	4b81      	ldr	r3, [pc, #516]	@ (800180c <HAL_RCC_OscConfig+0x288>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a80      	ldr	r2, [pc, #512]	@ (800180c <HAL_RCC_OscConfig+0x288>)
 800160c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	4b7e      	ldr	r3, [pc, #504]	@ (800180c <HAL_RCC_OscConfig+0x288>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a7d      	ldr	r2, [pc, #500]	@ (800180c <HAL_RCC_OscConfig+0x288>)
 8001618:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	e01d      	b.n	800165c <HAL_RCC_OscConfig+0xd8>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001628:	d10c      	bne.n	8001644 <HAL_RCC_OscConfig+0xc0>
 800162a:	4b78      	ldr	r3, [pc, #480]	@ (800180c <HAL_RCC_OscConfig+0x288>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a77      	ldr	r2, [pc, #476]	@ (800180c <HAL_RCC_OscConfig+0x288>)
 8001630:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	4b75      	ldr	r3, [pc, #468]	@ (800180c <HAL_RCC_OscConfig+0x288>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a74      	ldr	r2, [pc, #464]	@ (800180c <HAL_RCC_OscConfig+0x288>)
 800163c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	e00b      	b.n	800165c <HAL_RCC_OscConfig+0xd8>
 8001644:	4b71      	ldr	r3, [pc, #452]	@ (800180c <HAL_RCC_OscConfig+0x288>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a70      	ldr	r2, [pc, #448]	@ (800180c <HAL_RCC_OscConfig+0x288>)
 800164a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	4b6e      	ldr	r3, [pc, #440]	@ (800180c <HAL_RCC_OscConfig+0x288>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a6d      	ldr	r2, [pc, #436]	@ (800180c <HAL_RCC_OscConfig+0x288>)
 8001656:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800165a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d013      	beq.n	800168c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001664:	f7ff fc6a 	bl	8000f3c <HAL_GetTick>
 8001668:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800166c:	f7ff fc66 	bl	8000f3c <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b64      	cmp	r3, #100	@ 0x64
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e3d4      	b.n	8001e28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800167e:	4b63      	ldr	r3, [pc, #396]	@ (800180c <HAL_RCC_OscConfig+0x288>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0f0      	beq.n	800166c <HAL_RCC_OscConfig+0xe8>
 800168a:	e014      	b.n	80016b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168c:	f7ff fc56 	bl	8000f3c <HAL_GetTick>
 8001690:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001694:	f7ff fc52 	bl	8000f3c <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b64      	cmp	r3, #100	@ 0x64
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e3c0      	b.n	8001e28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016a6:	4b59      	ldr	r3, [pc, #356]	@ (800180c <HAL_RCC_OscConfig+0x288>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0x110>
 80016b2:	e000      	b.n	80016b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f000 80ca 	beq.w	8001858 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016c4:	4b51      	ldr	r3, [pc, #324]	@ (800180c <HAL_RCC_OscConfig+0x288>)
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80016cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016ce:	4b4f      	ldr	r3, [pc, #316]	@ (800180c <HAL_RCC_OscConfig+0x288>)
 80016d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016d2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80016d4:	6a3b      	ldr	r3, [r7, #32]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d007      	beq.n	80016ea <HAL_RCC_OscConfig+0x166>
 80016da:	6a3b      	ldr	r3, [r7, #32]
 80016dc:	2b18      	cmp	r3, #24
 80016de:	d156      	bne.n	800178e <HAL_RCC_OscConfig+0x20a>
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f003 0303 	and.w	r3, r3, #3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d151      	bne.n	800178e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016ea:	4b48      	ldr	r3, [pc, #288]	@ (800180c <HAL_RCC_OscConfig+0x288>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0304 	and.w	r3, r3, #4
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d005      	beq.n	8001702 <HAL_RCC_OscConfig+0x17e>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e392      	b.n	8001e28 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001702:	4b42      	ldr	r3, [pc, #264]	@ (800180c <HAL_RCC_OscConfig+0x288>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f023 0219 	bic.w	r2, r3, #25
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	493f      	ldr	r1, [pc, #252]	@ (800180c <HAL_RCC_OscConfig+0x288>)
 8001710:	4313      	orrs	r3, r2
 8001712:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001714:	f7ff fc12 	bl	8000f3c <HAL_GetTick>
 8001718:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800171c:	f7ff fc0e 	bl	8000f3c <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e37c      	b.n	8001e28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800172e:	4b37      	ldr	r3, [pc, #220]	@ (800180c <HAL_RCC_OscConfig+0x288>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0f0      	beq.n	800171c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800173a:	f7ff fc2f 	bl	8000f9c <HAL_GetREVID>
 800173e:	4603      	mov	r3, r0
 8001740:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001744:	4293      	cmp	r3, r2
 8001746:	d817      	bhi.n	8001778 <HAL_RCC_OscConfig+0x1f4>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	2b40      	cmp	r3, #64	@ 0x40
 800174e:	d108      	bne.n	8001762 <HAL_RCC_OscConfig+0x1de>
 8001750:	4b2e      	ldr	r3, [pc, #184]	@ (800180c <HAL_RCC_OscConfig+0x288>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001758:	4a2c      	ldr	r2, [pc, #176]	@ (800180c <HAL_RCC_OscConfig+0x288>)
 800175a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800175e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001760:	e07a      	b.n	8001858 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001762:	4b2a      	ldr	r3, [pc, #168]	@ (800180c <HAL_RCC_OscConfig+0x288>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	031b      	lsls	r3, r3, #12
 8001770:	4926      	ldr	r1, [pc, #152]	@ (800180c <HAL_RCC_OscConfig+0x288>)
 8001772:	4313      	orrs	r3, r2
 8001774:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001776:	e06f      	b.n	8001858 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001778:	4b24      	ldr	r3, [pc, #144]	@ (800180c <HAL_RCC_OscConfig+0x288>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	061b      	lsls	r3, r3, #24
 8001786:	4921      	ldr	r1, [pc, #132]	@ (800180c <HAL_RCC_OscConfig+0x288>)
 8001788:	4313      	orrs	r3, r2
 800178a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800178c:	e064      	b.n	8001858 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d047      	beq.n	8001826 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001796:	4b1d      	ldr	r3, [pc, #116]	@ (800180c <HAL_RCC_OscConfig+0x288>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f023 0219 	bic.w	r2, r3, #25
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	491a      	ldr	r1, [pc, #104]	@ (800180c <HAL_RCC_OscConfig+0x288>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a8:	f7ff fbc8 	bl	8000f3c <HAL_GetTick>
 80017ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b0:	f7ff fbc4 	bl	8000f3c <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e332      	b.n	8001e28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017c2:	4b12      	ldr	r3, [pc, #72]	@ (800180c <HAL_RCC_OscConfig+0x288>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0304 	and.w	r3, r3, #4
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0f0      	beq.n	80017b0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ce:	f7ff fbe5 	bl	8000f9c <HAL_GetREVID>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80017d8:	4293      	cmp	r3, r2
 80017da:	d819      	bhi.n	8001810 <HAL_RCC_OscConfig+0x28c>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	2b40      	cmp	r3, #64	@ 0x40
 80017e2:	d108      	bne.n	80017f6 <HAL_RCC_OscConfig+0x272>
 80017e4:	4b09      	ldr	r3, [pc, #36]	@ (800180c <HAL_RCC_OscConfig+0x288>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80017ec:	4a07      	ldr	r2, [pc, #28]	@ (800180c <HAL_RCC_OscConfig+0x288>)
 80017ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017f2:	6053      	str	r3, [r2, #4]
 80017f4:	e030      	b.n	8001858 <HAL_RCC_OscConfig+0x2d4>
 80017f6:	4b05      	ldr	r3, [pc, #20]	@ (800180c <HAL_RCC_OscConfig+0x288>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	031b      	lsls	r3, r3, #12
 8001804:	4901      	ldr	r1, [pc, #4]	@ (800180c <HAL_RCC_OscConfig+0x288>)
 8001806:	4313      	orrs	r3, r2
 8001808:	604b      	str	r3, [r1, #4]
 800180a:	e025      	b.n	8001858 <HAL_RCC_OscConfig+0x2d4>
 800180c:	58024400 	.word	0x58024400
 8001810:	4b9a      	ldr	r3, [pc, #616]	@ (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	061b      	lsls	r3, r3, #24
 800181e:	4997      	ldr	r1, [pc, #604]	@ (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 8001820:	4313      	orrs	r3, r2
 8001822:	604b      	str	r3, [r1, #4]
 8001824:	e018      	b.n	8001858 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001826:	4b95      	ldr	r3, [pc, #596]	@ (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a94      	ldr	r2, [pc, #592]	@ (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 800182c:	f023 0301 	bic.w	r3, r3, #1
 8001830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001832:	f7ff fb83 	bl	8000f3c <HAL_GetTick>
 8001836:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800183a:	f7ff fb7f 	bl	8000f3c <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e2ed      	b.n	8001e28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800184c:	4b8b      	ldr	r3, [pc, #556]	@ (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1f0      	bne.n	800183a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0310 	and.w	r3, r3, #16
 8001860:	2b00      	cmp	r3, #0
 8001862:	f000 80a9 	beq.w	80019b8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001866:	4b85      	ldr	r3, [pc, #532]	@ (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800186e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001870:	4b82      	ldr	r3, [pc, #520]	@ (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 8001872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001874:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	2b08      	cmp	r3, #8
 800187a:	d007      	beq.n	800188c <HAL_RCC_OscConfig+0x308>
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	2b18      	cmp	r3, #24
 8001880:	d13a      	bne.n	80018f8 <HAL_RCC_OscConfig+0x374>
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f003 0303 	and.w	r3, r3, #3
 8001888:	2b01      	cmp	r3, #1
 800188a:	d135      	bne.n	80018f8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800188c:	4b7b      	ldr	r3, [pc, #492]	@ (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001894:	2b00      	cmp	r3, #0
 8001896:	d005      	beq.n	80018a4 <HAL_RCC_OscConfig+0x320>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	2b80      	cmp	r3, #128	@ 0x80
 800189e:	d001      	beq.n	80018a4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e2c1      	b.n	8001e28 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018a4:	f7ff fb7a 	bl	8000f9c <HAL_GetREVID>
 80018a8:	4603      	mov	r3, r0
 80018aa:	f241 0203 	movw	r2, #4099	@ 0x1003
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d817      	bhi.n	80018e2 <HAL_RCC_OscConfig+0x35e>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a1b      	ldr	r3, [r3, #32]
 80018b6:	2b20      	cmp	r3, #32
 80018b8:	d108      	bne.n	80018cc <HAL_RCC_OscConfig+0x348>
 80018ba:	4b70      	ldr	r3, [pc, #448]	@ (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80018c2:	4a6e      	ldr	r2, [pc, #440]	@ (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 80018c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80018c8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018ca:	e075      	b.n	80019b8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018cc:	4b6b      	ldr	r3, [pc, #428]	@ (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	069b      	lsls	r3, r3, #26
 80018da:	4968      	ldr	r1, [pc, #416]	@ (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018e0:	e06a      	b.n	80019b8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018e2:	4b66      	ldr	r3, [pc, #408]	@ (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	061b      	lsls	r3, r3, #24
 80018f0:	4962      	ldr	r1, [pc, #392]	@ (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018f6:	e05f      	b.n	80019b8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69db      	ldr	r3, [r3, #28]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d042      	beq.n	8001986 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001900:	4b5e      	ldr	r3, [pc, #376]	@ (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a5d      	ldr	r2, [pc, #372]	@ (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 8001906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800190a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190c:	f7ff fb16 	bl	8000f3c <HAL_GetTick>
 8001910:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001914:	f7ff fb12 	bl	8000f3c <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e280      	b.n	8001e28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001926:	4b55      	ldr	r3, [pc, #340]	@ (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0f0      	beq.n	8001914 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001932:	f7ff fb33 	bl	8000f9c <HAL_GetREVID>
 8001936:	4603      	mov	r3, r0
 8001938:	f241 0203 	movw	r2, #4099	@ 0x1003
 800193c:	4293      	cmp	r3, r2
 800193e:	d817      	bhi.n	8001970 <HAL_RCC_OscConfig+0x3ec>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	2b20      	cmp	r3, #32
 8001946:	d108      	bne.n	800195a <HAL_RCC_OscConfig+0x3d6>
 8001948:	4b4c      	ldr	r3, [pc, #304]	@ (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001950:	4a4a      	ldr	r2, [pc, #296]	@ (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 8001952:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001956:	6053      	str	r3, [r2, #4]
 8001958:	e02e      	b.n	80019b8 <HAL_RCC_OscConfig+0x434>
 800195a:	4b48      	ldr	r3, [pc, #288]	@ (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	069b      	lsls	r3, r3, #26
 8001968:	4944      	ldr	r1, [pc, #272]	@ (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 800196a:	4313      	orrs	r3, r2
 800196c:	604b      	str	r3, [r1, #4]
 800196e:	e023      	b.n	80019b8 <HAL_RCC_OscConfig+0x434>
 8001970:	4b42      	ldr	r3, [pc, #264]	@ (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	061b      	lsls	r3, r3, #24
 800197e:	493f      	ldr	r1, [pc, #252]	@ (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 8001980:	4313      	orrs	r3, r2
 8001982:	60cb      	str	r3, [r1, #12]
 8001984:	e018      	b.n	80019b8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001986:	4b3d      	ldr	r3, [pc, #244]	@ (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a3c      	ldr	r2, [pc, #240]	@ (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 800198c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001990:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001992:	f7ff fad3 	bl	8000f3c <HAL_GetTick>
 8001996:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800199a:	f7ff facf 	bl	8000f3c <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e23d      	b.n	8001e28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80019ac:	4b33      	ldr	r3, [pc, #204]	@ (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1f0      	bne.n	800199a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0308 	and.w	r3, r3, #8
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d036      	beq.n	8001a32 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d019      	beq.n	8001a00 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019cc:	4b2b      	ldr	r3, [pc, #172]	@ (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 80019ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019d0:	4a2a      	ldr	r2, [pc, #168]	@ (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d8:	f7ff fab0 	bl	8000f3c <HAL_GetTick>
 80019dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e0:	f7ff faac 	bl	8000f3c <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e21a      	b.n	8001e28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019f2:	4b22      	ldr	r3, [pc, #136]	@ (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 80019f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0f0      	beq.n	80019e0 <HAL_RCC_OscConfig+0x45c>
 80019fe:	e018      	b.n	8001a32 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a00:	4b1e      	ldr	r3, [pc, #120]	@ (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 8001a02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a04:	4a1d      	ldr	r2, [pc, #116]	@ (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 8001a06:	f023 0301 	bic.w	r3, r3, #1
 8001a0a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0c:	f7ff fa96 	bl	8000f3c <HAL_GetTick>
 8001a10:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a14:	f7ff fa92 	bl	8000f3c <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e200      	b.n	8001e28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a26:	4b15      	ldr	r3, [pc, #84]	@ (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 8001a28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f0      	bne.n	8001a14 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0320 	and.w	r3, r3, #32
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d039      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d01c      	beq.n	8001a80 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a46:	4b0d      	ldr	r3, [pc, #52]	@ (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a0c      	ldr	r2, [pc, #48]	@ (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 8001a4c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a50:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a52:	f7ff fa73 	bl	8000f3c <HAL_GetTick>
 8001a56:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a5a:	f7ff fa6f 	bl	8000f3c <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e1dd      	b.n	8001e28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a6c:	4b03      	ldr	r3, [pc, #12]	@ (8001a7c <HAL_RCC_OscConfig+0x4f8>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0f0      	beq.n	8001a5a <HAL_RCC_OscConfig+0x4d6>
 8001a78:	e01b      	b.n	8001ab2 <HAL_RCC_OscConfig+0x52e>
 8001a7a:	bf00      	nop
 8001a7c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a80:	4b9b      	ldr	r3, [pc, #620]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a9a      	ldr	r2, [pc, #616]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001a86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001a8a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a8c:	f7ff fa56 	bl	8000f3c <HAL_GetTick>
 8001a90:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a94:	f7ff fa52 	bl	8000f3c <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e1c0      	b.n	8001e28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001aa6:	4b92      	ldr	r3, [pc, #584]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f0      	bne.n	8001a94 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0304 	and.w	r3, r3, #4
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 8081 	beq.w	8001bc2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ac0:	4b8c      	ldr	r3, [pc, #560]	@ (8001cf4 <HAL_RCC_OscConfig+0x770>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a8b      	ldr	r2, [pc, #556]	@ (8001cf4 <HAL_RCC_OscConfig+0x770>)
 8001ac6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001acc:	f7ff fa36 	bl	8000f3c <HAL_GetTick>
 8001ad0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad4:	f7ff fa32 	bl	8000f3c <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b64      	cmp	r3, #100	@ 0x64
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e1a0      	b.n	8001e28 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ae6:	4b83      	ldr	r3, [pc, #524]	@ (8001cf4 <HAL_RCC_OscConfig+0x770>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0f0      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d106      	bne.n	8001b08 <HAL_RCC_OscConfig+0x584>
 8001afa:	4b7d      	ldr	r3, [pc, #500]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001afe:	4a7c      	ldr	r2, [pc, #496]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b06:	e02d      	b.n	8001b64 <HAL_RCC_OscConfig+0x5e0>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d10c      	bne.n	8001b2a <HAL_RCC_OscConfig+0x5a6>
 8001b10:	4b77      	ldr	r3, [pc, #476]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b14:	4a76      	ldr	r2, [pc, #472]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001b16:	f023 0301 	bic.w	r3, r3, #1
 8001b1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b1c:	4b74      	ldr	r3, [pc, #464]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b20:	4a73      	ldr	r2, [pc, #460]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001b22:	f023 0304 	bic.w	r3, r3, #4
 8001b26:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b28:	e01c      	b.n	8001b64 <HAL_RCC_OscConfig+0x5e0>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	2b05      	cmp	r3, #5
 8001b30:	d10c      	bne.n	8001b4c <HAL_RCC_OscConfig+0x5c8>
 8001b32:	4b6f      	ldr	r3, [pc, #444]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b36:	4a6e      	ldr	r2, [pc, #440]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001b38:	f043 0304 	orr.w	r3, r3, #4
 8001b3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b3e:	4b6c      	ldr	r3, [pc, #432]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b42:	4a6b      	ldr	r2, [pc, #428]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b4a:	e00b      	b.n	8001b64 <HAL_RCC_OscConfig+0x5e0>
 8001b4c:	4b68      	ldr	r3, [pc, #416]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b50:	4a67      	ldr	r2, [pc, #412]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001b52:	f023 0301 	bic.w	r3, r3, #1
 8001b56:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b58:	4b65      	ldr	r3, [pc, #404]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b5c:	4a64      	ldr	r2, [pc, #400]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001b5e:	f023 0304 	bic.w	r3, r3, #4
 8001b62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d015      	beq.n	8001b98 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6c:	f7ff f9e6 	bl	8000f3c <HAL_GetTick>
 8001b70:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b72:	e00a      	b.n	8001b8a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b74:	f7ff f9e2 	bl	8000f3c <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e14e      	b.n	8001e28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b8a:	4b59      	ldr	r3, [pc, #356]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d0ee      	beq.n	8001b74 <HAL_RCC_OscConfig+0x5f0>
 8001b96:	e014      	b.n	8001bc2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b98:	f7ff f9d0 	bl	8000f3c <HAL_GetTick>
 8001b9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b9e:	e00a      	b.n	8001bb6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba0:	f7ff f9cc 	bl	8000f3c <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e138      	b.n	8001e28 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bb6:	4b4e      	ldr	r3, [pc, #312]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1ee      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f000 812d 	beq.w	8001e26 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001bcc:	4b48      	ldr	r3, [pc, #288]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001bd4:	2b18      	cmp	r3, #24
 8001bd6:	f000 80bd 	beq.w	8001d54 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	f040 809e 	bne.w	8001d20 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be4:	4b42      	ldr	r3, [pc, #264]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a41      	ldr	r2, [pc, #260]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001bea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf0:	f7ff f9a4 	bl	8000f3c <HAL_GetTick>
 8001bf4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf8:	f7ff f9a0 	bl	8000f3c <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e10e      	b.n	8001e28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c0a:	4b39      	ldr	r3, [pc, #228]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f0      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c16:	4b36      	ldr	r3, [pc, #216]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001c18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c1a:	4b37      	ldr	r3, [pc, #220]	@ (8001cf8 <HAL_RCC_OscConfig+0x774>)
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001c26:	0112      	lsls	r2, r2, #4
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	4931      	ldr	r1, [pc, #196]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	628b      	str	r3, [r1, #40]	@ 0x28
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c34:	3b01      	subs	r3, #1
 8001c36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	025b      	lsls	r3, r3, #9
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	431a      	orrs	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	041b      	lsls	r3, r3, #16
 8001c4e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001c52:	431a      	orrs	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	061b      	lsls	r3, r3, #24
 8001c5c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001c60:	4923      	ldr	r1, [pc, #140]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001c66:	4b22      	ldr	r3, [pc, #136]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c6a:	4a21      	ldr	r2, [pc, #132]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001c6c:	f023 0301 	bic.w	r3, r3, #1
 8001c70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c72:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001c74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c76:	4b21      	ldr	r3, [pc, #132]	@ (8001cfc <HAL_RCC_OscConfig+0x778>)
 8001c78:	4013      	ands	r3, r2
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001c7e:	00d2      	lsls	r2, r2, #3
 8001c80:	491b      	ldr	r1, [pc, #108]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001c86:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c8a:	f023 020c 	bic.w	r2, r3, #12
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c92:	4917      	ldr	r1, [pc, #92]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001c98:	4b15      	ldr	r3, [pc, #84]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c9c:	f023 0202 	bic.w	r2, r3, #2
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca4:	4912      	ldr	r1, [pc, #72]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001caa:	4b11      	ldr	r3, [pc, #68]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cae:	4a10      	ldr	r2, [pc, #64]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001cb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cba:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001cbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001cc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ccc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001cce:	4b08      	ldr	r3, [pc, #32]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd2:	4a07      	ldr	r2, [pc, #28]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cda:	4b05      	ldr	r3, [pc, #20]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a04      	ldr	r2, [pc, #16]	@ (8001cf0 <HAL_RCC_OscConfig+0x76c>)
 8001ce0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ce4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce6:	f7ff f929 	bl	8000f3c <HAL_GetTick>
 8001cea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001cec:	e011      	b.n	8001d12 <HAL_RCC_OscConfig+0x78e>
 8001cee:	bf00      	nop
 8001cf0:	58024400 	.word	0x58024400
 8001cf4:	58024800 	.word	0x58024800
 8001cf8:	fffffc0c 	.word	0xfffffc0c
 8001cfc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d00:	f7ff f91c 	bl	8000f3c <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e08a      	b.n	8001e28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d12:	4b47      	ldr	r3, [pc, #284]	@ (8001e30 <HAL_RCC_OscConfig+0x8ac>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0x77c>
 8001d1e:	e082      	b.n	8001e26 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d20:	4b43      	ldr	r3, [pc, #268]	@ (8001e30 <HAL_RCC_OscConfig+0x8ac>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a42      	ldr	r2, [pc, #264]	@ (8001e30 <HAL_RCC_OscConfig+0x8ac>)
 8001d26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d2c:	f7ff f906 	bl	8000f3c <HAL_GetTick>
 8001d30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d34:	f7ff f902 	bl	8000f3c <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e070      	b.n	8001e28 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d46:	4b3a      	ldr	r3, [pc, #232]	@ (8001e30 <HAL_RCC_OscConfig+0x8ac>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f0      	bne.n	8001d34 <HAL_RCC_OscConfig+0x7b0>
 8001d52:	e068      	b.n	8001e26 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001d54:	4b36      	ldr	r3, [pc, #216]	@ (8001e30 <HAL_RCC_OscConfig+0x8ac>)
 8001d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d58:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001d5a:	4b35      	ldr	r3, [pc, #212]	@ (8001e30 <HAL_RCC_OscConfig+0x8ac>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d031      	beq.n	8001dcc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	f003 0203 	and.w	r2, r3, #3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d12a      	bne.n	8001dcc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	091b      	lsrs	r3, r3, #4
 8001d7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d122      	bne.n	8001dcc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d90:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d11a      	bne.n	8001dcc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	0a5b      	lsrs	r3, r3, #9
 8001d9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001da2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d111      	bne.n	8001dcc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	0c1b      	lsrs	r3, r3, #16
 8001dac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001db4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d108      	bne.n	8001dcc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	0e1b      	lsrs	r3, r3, #24
 8001dbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dc6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d001      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e02b      	b.n	8001e28 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001dd0:	4b17      	ldr	r3, [pc, #92]	@ (8001e30 <HAL_RCC_OscConfig+0x8ac>)
 8001dd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dd4:	08db      	lsrs	r3, r3, #3
 8001dd6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001dda:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d01f      	beq.n	8001e26 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001de6:	4b12      	ldr	r3, [pc, #72]	@ (8001e30 <HAL_RCC_OscConfig+0x8ac>)
 8001de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dea:	4a11      	ldr	r2, [pc, #68]	@ (8001e30 <HAL_RCC_OscConfig+0x8ac>)
 8001dec:	f023 0301 	bic.w	r3, r3, #1
 8001df0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001df2:	f7ff f8a3 	bl	8000f3c <HAL_GetTick>
 8001df6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001df8:	bf00      	nop
 8001dfa:	f7ff f89f 	bl	8000f3c <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d0f9      	beq.n	8001dfa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e06:	4b0a      	ldr	r3, [pc, #40]	@ (8001e30 <HAL_RCC_OscConfig+0x8ac>)
 8001e08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e34 <HAL_RCC_OscConfig+0x8b0>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e12:	00d2      	lsls	r2, r2, #3
 8001e14:	4906      	ldr	r1, [pc, #24]	@ (8001e30 <HAL_RCC_OscConfig+0x8ac>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001e1a:	4b05      	ldr	r3, [pc, #20]	@ (8001e30 <HAL_RCC_OscConfig+0x8ac>)
 8001e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e1e:	4a04      	ldr	r2, [pc, #16]	@ (8001e30 <HAL_RCC_OscConfig+0x8ac>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3730      	adds	r7, #48	@ 0x30
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	58024400 	.word	0x58024400
 8001e34:	ffff0007 	.word	0xffff0007

08001e38 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e19c      	b.n	8002186 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e4c:	4b8a      	ldr	r3, [pc, #552]	@ (8002078 <HAL_RCC_ClockConfig+0x240>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 030f 	and.w	r3, r3, #15
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d910      	bls.n	8001e7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5a:	4b87      	ldr	r3, [pc, #540]	@ (8002078 <HAL_RCC_ClockConfig+0x240>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f023 020f 	bic.w	r2, r3, #15
 8001e62:	4985      	ldr	r1, [pc, #532]	@ (8002078 <HAL_RCC_ClockConfig+0x240>)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e6a:	4b83      	ldr	r3, [pc, #524]	@ (8002078 <HAL_RCC_ClockConfig+0x240>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d001      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e184      	b.n	8002186 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0304 	and.w	r3, r3, #4
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d010      	beq.n	8001eaa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691a      	ldr	r2, [r3, #16]
 8001e8c:	4b7b      	ldr	r3, [pc, #492]	@ (800207c <HAL_RCC_ClockConfig+0x244>)
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d908      	bls.n	8001eaa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e98:	4b78      	ldr	r3, [pc, #480]	@ (800207c <HAL_RCC_ClockConfig+0x244>)
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	4975      	ldr	r1, [pc, #468]	@ (800207c <HAL_RCC_ClockConfig+0x244>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d010      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	695a      	ldr	r2, [r3, #20]
 8001eba:	4b70      	ldr	r3, [pc, #448]	@ (800207c <HAL_RCC_ClockConfig+0x244>)
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d908      	bls.n	8001ed8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ec6:	4b6d      	ldr	r3, [pc, #436]	@ (800207c <HAL_RCC_ClockConfig+0x244>)
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	496a      	ldr	r1, [pc, #424]	@ (800207c <HAL_RCC_ClockConfig+0x244>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0310 	and.w	r3, r3, #16
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d010      	beq.n	8001f06 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	699a      	ldr	r2, [r3, #24]
 8001ee8:	4b64      	ldr	r3, [pc, #400]	@ (800207c <HAL_RCC_ClockConfig+0x244>)
 8001eea:	69db      	ldr	r3, [r3, #28]
 8001eec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d908      	bls.n	8001f06 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ef4:	4b61      	ldr	r3, [pc, #388]	@ (800207c <HAL_RCC_ClockConfig+0x244>)
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	495e      	ldr	r1, [pc, #376]	@ (800207c <HAL_RCC_ClockConfig+0x244>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0320 	and.w	r3, r3, #32
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d010      	beq.n	8001f34 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69da      	ldr	r2, [r3, #28]
 8001f16:	4b59      	ldr	r3, [pc, #356]	@ (800207c <HAL_RCC_ClockConfig+0x244>)
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d908      	bls.n	8001f34 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001f22:	4b56      	ldr	r3, [pc, #344]	@ (800207c <HAL_RCC_ClockConfig+0x244>)
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	4953      	ldr	r1, [pc, #332]	@ (800207c <HAL_RCC_ClockConfig+0x244>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d010      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	4b4d      	ldr	r3, [pc, #308]	@ (800207c <HAL_RCC_ClockConfig+0x244>)
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	f003 030f 	and.w	r3, r3, #15
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d908      	bls.n	8001f62 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f50:	4b4a      	ldr	r3, [pc, #296]	@ (800207c <HAL_RCC_ClockConfig+0x244>)
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	f023 020f 	bic.w	r2, r3, #15
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	4947      	ldr	r1, [pc, #284]	@ (800207c <HAL_RCC_ClockConfig+0x244>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d055      	beq.n	800201a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001f6e:	4b43      	ldr	r3, [pc, #268]	@ (800207c <HAL_RCC_ClockConfig+0x244>)
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	4940      	ldr	r1, [pc, #256]	@ (800207c <HAL_RCC_ClockConfig+0x244>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d107      	bne.n	8001f98 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f88:	4b3c      	ldr	r3, [pc, #240]	@ (800207c <HAL_RCC_ClockConfig+0x244>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d121      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e0f6      	b.n	8002186 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b03      	cmp	r3, #3
 8001f9e:	d107      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fa0:	4b36      	ldr	r3, [pc, #216]	@ (800207c <HAL_RCC_ClockConfig+0x244>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d115      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e0ea      	b.n	8002186 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d107      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001fb8:	4b30      	ldr	r3, [pc, #192]	@ (800207c <HAL_RCC_ClockConfig+0x244>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d109      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e0de      	b.n	8002186 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fc8:	4b2c      	ldr	r3, [pc, #176]	@ (800207c <HAL_RCC_ClockConfig+0x244>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0d6      	b.n	8002186 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fd8:	4b28      	ldr	r3, [pc, #160]	@ (800207c <HAL_RCC_ClockConfig+0x244>)
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	f023 0207 	bic.w	r2, r3, #7
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	4925      	ldr	r1, [pc, #148]	@ (800207c <HAL_RCC_ClockConfig+0x244>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fea:	f7fe ffa7 	bl	8000f3c <HAL_GetTick>
 8001fee:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff0:	e00a      	b.n	8002008 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff2:	f7fe ffa3 	bl	8000f3c <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002000:	4293      	cmp	r3, r2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e0be      	b.n	8002186 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002008:	4b1c      	ldr	r3, [pc, #112]	@ (800207c <HAL_RCC_ClockConfig+0x244>)
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	429a      	cmp	r2, r3
 8002018:	d1eb      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d010      	beq.n	8002048 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68da      	ldr	r2, [r3, #12]
 800202a:	4b14      	ldr	r3, [pc, #80]	@ (800207c <HAL_RCC_ClockConfig+0x244>)
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	f003 030f 	and.w	r3, r3, #15
 8002032:	429a      	cmp	r2, r3
 8002034:	d208      	bcs.n	8002048 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002036:	4b11      	ldr	r3, [pc, #68]	@ (800207c <HAL_RCC_ClockConfig+0x244>)
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	f023 020f 	bic.w	r2, r3, #15
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	490e      	ldr	r1, [pc, #56]	@ (800207c <HAL_RCC_ClockConfig+0x244>)
 8002044:	4313      	orrs	r3, r2
 8002046:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002048:	4b0b      	ldr	r3, [pc, #44]	@ (8002078 <HAL_RCC_ClockConfig+0x240>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 030f 	and.w	r3, r3, #15
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d214      	bcs.n	8002080 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002056:	4b08      	ldr	r3, [pc, #32]	@ (8002078 <HAL_RCC_ClockConfig+0x240>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f023 020f 	bic.w	r2, r3, #15
 800205e:	4906      	ldr	r1, [pc, #24]	@ (8002078 <HAL_RCC_ClockConfig+0x240>)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002066:	4b04      	ldr	r3, [pc, #16]	@ (8002078 <HAL_RCC_ClockConfig+0x240>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d005      	beq.n	8002080 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e086      	b.n	8002186 <HAL_RCC_ClockConfig+0x34e>
 8002078:	52002000 	.word	0x52002000
 800207c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	d010      	beq.n	80020ae <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	4b3f      	ldr	r3, [pc, #252]	@ (8002190 <HAL_RCC_ClockConfig+0x358>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002098:	429a      	cmp	r2, r3
 800209a:	d208      	bcs.n	80020ae <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800209c:	4b3c      	ldr	r3, [pc, #240]	@ (8002190 <HAL_RCC_ClockConfig+0x358>)
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	4939      	ldr	r1, [pc, #228]	@ (8002190 <HAL_RCC_ClockConfig+0x358>)
 80020aa:	4313      	orrs	r3, r2
 80020ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d010      	beq.n	80020dc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695a      	ldr	r2, [r3, #20]
 80020be:	4b34      	ldr	r3, [pc, #208]	@ (8002190 <HAL_RCC_ClockConfig+0x358>)
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d208      	bcs.n	80020dc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020ca:	4b31      	ldr	r3, [pc, #196]	@ (8002190 <HAL_RCC_ClockConfig+0x358>)
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	492e      	ldr	r1, [pc, #184]	@ (8002190 <HAL_RCC_ClockConfig+0x358>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0310 	and.w	r3, r3, #16
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d010      	beq.n	800210a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	699a      	ldr	r2, [r3, #24]
 80020ec:	4b28      	ldr	r3, [pc, #160]	@ (8002190 <HAL_RCC_ClockConfig+0x358>)
 80020ee:	69db      	ldr	r3, [r3, #28]
 80020f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d208      	bcs.n	800210a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80020f8:	4b25      	ldr	r3, [pc, #148]	@ (8002190 <HAL_RCC_ClockConfig+0x358>)
 80020fa:	69db      	ldr	r3, [r3, #28]
 80020fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	4922      	ldr	r1, [pc, #136]	@ (8002190 <HAL_RCC_ClockConfig+0x358>)
 8002106:	4313      	orrs	r3, r2
 8002108:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0320 	and.w	r3, r3, #32
 8002112:	2b00      	cmp	r3, #0
 8002114:	d010      	beq.n	8002138 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69da      	ldr	r2, [r3, #28]
 800211a:	4b1d      	ldr	r3, [pc, #116]	@ (8002190 <HAL_RCC_ClockConfig+0x358>)
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002122:	429a      	cmp	r2, r3
 8002124:	d208      	bcs.n	8002138 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002126:	4b1a      	ldr	r3, [pc, #104]	@ (8002190 <HAL_RCC_ClockConfig+0x358>)
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	4917      	ldr	r1, [pc, #92]	@ (8002190 <HAL_RCC_ClockConfig+0x358>)
 8002134:	4313      	orrs	r3, r2
 8002136:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002138:	f000 f834 	bl	80021a4 <HAL_RCC_GetSysClockFreq>
 800213c:	4602      	mov	r2, r0
 800213e:	4b14      	ldr	r3, [pc, #80]	@ (8002190 <HAL_RCC_ClockConfig+0x358>)
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	0a1b      	lsrs	r3, r3, #8
 8002144:	f003 030f 	and.w	r3, r3, #15
 8002148:	4912      	ldr	r1, [pc, #72]	@ (8002194 <HAL_RCC_ClockConfig+0x35c>)
 800214a:	5ccb      	ldrb	r3, [r1, r3]
 800214c:	f003 031f 	and.w	r3, r3, #31
 8002150:	fa22 f303 	lsr.w	r3, r2, r3
 8002154:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002156:	4b0e      	ldr	r3, [pc, #56]	@ (8002190 <HAL_RCC_ClockConfig+0x358>)
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	4a0d      	ldr	r2, [pc, #52]	@ (8002194 <HAL_RCC_ClockConfig+0x35c>)
 8002160:	5cd3      	ldrb	r3, [r2, r3]
 8002162:	f003 031f 	and.w	r3, r3, #31
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	fa22 f303 	lsr.w	r3, r2, r3
 800216c:	4a0a      	ldr	r2, [pc, #40]	@ (8002198 <HAL_RCC_ClockConfig+0x360>)
 800216e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002170:	4a0a      	ldr	r2, [pc, #40]	@ (800219c <HAL_RCC_ClockConfig+0x364>)
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002176:	4b0a      	ldr	r3, [pc, #40]	@ (80021a0 <HAL_RCC_ClockConfig+0x368>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe fe94 	bl	8000ea8 <HAL_InitTick>
 8002180:	4603      	mov	r3, r0
 8002182:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002184:	7bfb      	ldrb	r3, [r7, #15]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	58024400 	.word	0x58024400
 8002194:	08006454 	.word	0x08006454
 8002198:	24000004 	.word	0x24000004
 800219c:	24000000 	.word	0x24000000
 80021a0:	24000008 	.word	0x24000008

080021a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b089      	sub	sp, #36	@ 0x24
 80021a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021aa:	4bb3      	ldr	r3, [pc, #716]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80021b2:	2b18      	cmp	r3, #24
 80021b4:	f200 8155 	bhi.w	8002462 <HAL_RCC_GetSysClockFreq+0x2be>
 80021b8:	a201      	add	r2, pc, #4	@ (adr r2, 80021c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80021ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021be:	bf00      	nop
 80021c0:	08002225 	.word	0x08002225
 80021c4:	08002463 	.word	0x08002463
 80021c8:	08002463 	.word	0x08002463
 80021cc:	08002463 	.word	0x08002463
 80021d0:	08002463 	.word	0x08002463
 80021d4:	08002463 	.word	0x08002463
 80021d8:	08002463 	.word	0x08002463
 80021dc:	08002463 	.word	0x08002463
 80021e0:	0800224b 	.word	0x0800224b
 80021e4:	08002463 	.word	0x08002463
 80021e8:	08002463 	.word	0x08002463
 80021ec:	08002463 	.word	0x08002463
 80021f0:	08002463 	.word	0x08002463
 80021f4:	08002463 	.word	0x08002463
 80021f8:	08002463 	.word	0x08002463
 80021fc:	08002463 	.word	0x08002463
 8002200:	08002251 	.word	0x08002251
 8002204:	08002463 	.word	0x08002463
 8002208:	08002463 	.word	0x08002463
 800220c:	08002463 	.word	0x08002463
 8002210:	08002463 	.word	0x08002463
 8002214:	08002463 	.word	0x08002463
 8002218:	08002463 	.word	0x08002463
 800221c:	08002463 	.word	0x08002463
 8002220:	08002257 	.word	0x08002257
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002224:	4b94      	ldr	r3, [pc, #592]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0320 	and.w	r3, r3, #32
 800222c:	2b00      	cmp	r3, #0
 800222e:	d009      	beq.n	8002244 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002230:	4b91      	ldr	r3, [pc, #580]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	08db      	lsrs	r3, r3, #3
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	4a90      	ldr	r2, [pc, #576]	@ (800247c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800223c:	fa22 f303 	lsr.w	r3, r2, r3
 8002240:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002242:	e111      	b.n	8002468 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002244:	4b8d      	ldr	r3, [pc, #564]	@ (800247c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002246:	61bb      	str	r3, [r7, #24]
      break;
 8002248:	e10e      	b.n	8002468 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800224a:	4b8d      	ldr	r3, [pc, #564]	@ (8002480 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800224c:	61bb      	str	r3, [r7, #24]
      break;
 800224e:	e10b      	b.n	8002468 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002250:	4b8c      	ldr	r3, [pc, #560]	@ (8002484 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002252:	61bb      	str	r3, [r7, #24]
      break;
 8002254:	e108      	b.n	8002468 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002256:	4b88      	ldr	r3, [pc, #544]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002260:	4b85      	ldr	r3, [pc, #532]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002264:	091b      	lsrs	r3, r3, #4
 8002266:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800226a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800226c:	4b82      	ldr	r3, [pc, #520]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800226e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002276:	4b80      	ldr	r3, [pc, #512]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800227a:	08db      	lsrs	r3, r3, #3
 800227c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	fb02 f303 	mul.w	r3, r2, r3
 8002286:	ee07 3a90 	vmov	s15, r3
 800228a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800228e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 80e1 	beq.w	800245c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	2b02      	cmp	r3, #2
 800229e:	f000 8083 	beq.w	80023a8 <HAL_RCC_GetSysClockFreq+0x204>
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	f200 80a1 	bhi.w	80023ec <HAL_RCC_GetSysClockFreq+0x248>
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <HAL_RCC_GetSysClockFreq+0x114>
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d056      	beq.n	8002364 <HAL_RCC_GetSysClockFreq+0x1c0>
 80022b6:	e099      	b.n	80023ec <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022b8:	4b6f      	ldr	r3, [pc, #444]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0320 	and.w	r3, r3, #32
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d02d      	beq.n	8002320 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80022c4:	4b6c      	ldr	r3, [pc, #432]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	08db      	lsrs	r3, r3, #3
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	4a6b      	ldr	r2, [pc, #428]	@ (800247c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022d0:	fa22 f303 	lsr.w	r3, r2, r3
 80022d4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	ee07 3a90 	vmov	s15, r3
 80022dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	ee07 3a90 	vmov	s15, r3
 80022e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022ee:	4b62      	ldr	r3, [pc, #392]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022f6:	ee07 3a90 	vmov	s15, r3
 80022fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002302:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002488 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800230a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800230e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800231a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800231e:	e087      	b.n	8002430 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	ee07 3a90 	vmov	s15, r3
 8002326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800232a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800248c <HAL_RCC_GetSysClockFreq+0x2e8>
 800232e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002332:	4b51      	ldr	r3, [pc, #324]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800233a:	ee07 3a90 	vmov	s15, r3
 800233e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002342:	ed97 6a02 	vldr	s12, [r7, #8]
 8002346:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002488 <HAL_RCC_GetSysClockFreq+0x2e4>
 800234a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800234e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002352:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800235a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800235e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002362:	e065      	b.n	8002430 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	ee07 3a90 	vmov	s15, r3
 800236a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800236e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002490 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002376:	4b40      	ldr	r3, [pc, #256]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800237e:	ee07 3a90 	vmov	s15, r3
 8002382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002386:	ed97 6a02 	vldr	s12, [r7, #8]
 800238a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002488 <HAL_RCC_GetSysClockFreq+0x2e4>
 800238e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002396:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800239a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800239e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80023a6:	e043      	b.n	8002430 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	ee07 3a90 	vmov	s15, r3
 80023ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023b2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002494 <HAL_RCC_GetSysClockFreq+0x2f0>
 80023b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023ba:	4b2f      	ldr	r3, [pc, #188]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023c2:	ee07 3a90 	vmov	s15, r3
 80023c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80023ce:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002488 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80023de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80023ea:	e021      	b.n	8002430 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	ee07 3a90 	vmov	s15, r3
 80023f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023f6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002490 <HAL_RCC_GetSysClockFreq+0x2ec>
 80023fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002406:	ee07 3a90 	vmov	s15, r3
 800240a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800240e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002412:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002488 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800241a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800241e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800242a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800242e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002430:	4b11      	ldr	r3, [pc, #68]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002434:	0a5b      	lsrs	r3, r3, #9
 8002436:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800243a:	3301      	adds	r3, #1
 800243c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	ee07 3a90 	vmov	s15, r3
 8002444:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002448:	edd7 6a07 	vldr	s13, [r7, #28]
 800244c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002450:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002454:	ee17 3a90 	vmov	r3, s15
 8002458:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800245a:	e005      	b.n	8002468 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800245c:	2300      	movs	r3, #0
 800245e:	61bb      	str	r3, [r7, #24]
      break;
 8002460:	e002      	b.n	8002468 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002462:	4b07      	ldr	r3, [pc, #28]	@ (8002480 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002464:	61bb      	str	r3, [r7, #24]
      break;
 8002466:	bf00      	nop
  }

  return sysclockfreq;
 8002468:	69bb      	ldr	r3, [r7, #24]
}
 800246a:	4618      	mov	r0, r3
 800246c:	3724      	adds	r7, #36	@ 0x24
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	58024400 	.word	0x58024400
 800247c:	03d09000 	.word	0x03d09000
 8002480:	003d0900 	.word	0x003d0900
 8002484:	007a1200 	.word	0x007a1200
 8002488:	46000000 	.word	0x46000000
 800248c:	4c742400 	.word	0x4c742400
 8002490:	4a742400 	.word	0x4a742400
 8002494:	4af42400 	.word	0x4af42400

08002498 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800249e:	f7ff fe81 	bl	80021a4 <HAL_RCC_GetSysClockFreq>
 80024a2:	4602      	mov	r2, r0
 80024a4:	4b10      	ldr	r3, [pc, #64]	@ (80024e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	0a1b      	lsrs	r3, r3, #8
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	490f      	ldr	r1, [pc, #60]	@ (80024ec <HAL_RCC_GetHCLKFreq+0x54>)
 80024b0:	5ccb      	ldrb	r3, [r1, r3]
 80024b2:	f003 031f 	and.w	r3, r3, #31
 80024b6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024bc:	4b0a      	ldr	r3, [pc, #40]	@ (80024e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	f003 030f 	and.w	r3, r3, #15
 80024c4:	4a09      	ldr	r2, [pc, #36]	@ (80024ec <HAL_RCC_GetHCLKFreq+0x54>)
 80024c6:	5cd3      	ldrb	r3, [r2, r3]
 80024c8:	f003 031f 	and.w	r3, r3, #31
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	fa22 f303 	lsr.w	r3, r2, r3
 80024d2:	4a07      	ldr	r2, [pc, #28]	@ (80024f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80024d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024d6:	4a07      	ldr	r2, [pc, #28]	@ (80024f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80024dc:	4b04      	ldr	r3, [pc, #16]	@ (80024f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80024de:	681b      	ldr	r3, [r3, #0]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	58024400 	.word	0x58024400
 80024ec:	08006454 	.word	0x08006454
 80024f0:	24000004 	.word	0x24000004
 80024f4:	24000000 	.word	0x24000000

080024f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80024fc:	f7ff ffcc 	bl	8002498 <HAL_RCC_GetHCLKFreq>
 8002500:	4602      	mov	r2, r0
 8002502:	4b06      	ldr	r3, [pc, #24]	@ (800251c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	091b      	lsrs	r3, r3, #4
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	4904      	ldr	r1, [pc, #16]	@ (8002520 <HAL_RCC_GetPCLK1Freq+0x28>)
 800250e:	5ccb      	ldrb	r3, [r1, r3]
 8002510:	f003 031f 	and.w	r3, r3, #31
 8002514:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002518:	4618      	mov	r0, r3
 800251a:	bd80      	pop	{r7, pc}
 800251c:	58024400 	.word	0x58024400
 8002520:	08006454 	.word	0x08006454

08002524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002528:	f7ff ffb6 	bl	8002498 <HAL_RCC_GetHCLKFreq>
 800252c:	4602      	mov	r2, r0
 800252e:	4b06      	ldr	r3, [pc, #24]	@ (8002548 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	0a1b      	lsrs	r3, r3, #8
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	4904      	ldr	r1, [pc, #16]	@ (800254c <HAL_RCC_GetPCLK2Freq+0x28>)
 800253a:	5ccb      	ldrb	r3, [r1, r3]
 800253c:	f003 031f 	and.w	r3, r3, #31
 8002540:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002544:	4618      	mov	r0, r3
 8002546:	bd80      	pop	{r7, pc}
 8002548:	58024400 	.word	0x58024400
 800254c:	08006454 	.word	0x08006454

08002550 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002554:	b0ca      	sub	sp, #296	@ 0x128
 8002556:	af00      	add	r7, sp, #0
 8002558:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800255c:	2300      	movs	r3, #0
 800255e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002562:	2300      	movs	r3, #0
 8002564:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800256c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002570:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002574:	2500      	movs	r5, #0
 8002576:	ea54 0305 	orrs.w	r3, r4, r5
 800257a:	d049      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800257c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002580:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002582:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002586:	d02f      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002588:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800258c:	d828      	bhi.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800258e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002592:	d01a      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002594:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002598:	d822      	bhi.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800259e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025a2:	d007      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80025a4:	e01c      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025a6:	4bb8      	ldr	r3, [pc, #736]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025aa:	4ab7      	ldr	r2, [pc, #732]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80025b2:	e01a      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80025b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025b8:	3308      	adds	r3, #8
 80025ba:	2102      	movs	r1, #2
 80025bc:	4618      	mov	r0, r3
 80025be:	f001 fc8f 	bl	8003ee0 <RCCEx_PLL2_Config>
 80025c2:	4603      	mov	r3, r0
 80025c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80025c8:	e00f      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80025ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025ce:	3328      	adds	r3, #40	@ 0x28
 80025d0:	2102      	movs	r1, #2
 80025d2:	4618      	mov	r0, r3
 80025d4:	f001 fd36 	bl	8004044 <RCCEx_PLL3_Config>
 80025d8:	4603      	mov	r3, r0
 80025da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80025de:	e004      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80025e6:	e000      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80025e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10a      	bne.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80025f2:	4ba5      	ldr	r3, [pc, #660]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025f6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80025fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002600:	4aa1      	ldr	r2, [pc, #644]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002602:	430b      	orrs	r3, r1
 8002604:	6513      	str	r3, [r2, #80]	@ 0x50
 8002606:	e003      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002608:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800260c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002618:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800261c:	f04f 0900 	mov.w	r9, #0
 8002620:	ea58 0309 	orrs.w	r3, r8, r9
 8002624:	d047      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800262a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800262c:	2b04      	cmp	r3, #4
 800262e:	d82a      	bhi.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002630:	a201      	add	r2, pc, #4	@ (adr r2, 8002638 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002636:	bf00      	nop
 8002638:	0800264d 	.word	0x0800264d
 800263c:	0800265b 	.word	0x0800265b
 8002640:	08002671 	.word	0x08002671
 8002644:	0800268f 	.word	0x0800268f
 8002648:	0800268f 	.word	0x0800268f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800264c:	4b8e      	ldr	r3, [pc, #568]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800264e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002650:	4a8d      	ldr	r2, [pc, #564]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002652:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002656:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002658:	e01a      	b.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800265a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800265e:	3308      	adds	r3, #8
 8002660:	2100      	movs	r1, #0
 8002662:	4618      	mov	r0, r3
 8002664:	f001 fc3c 	bl	8003ee0 <RCCEx_PLL2_Config>
 8002668:	4603      	mov	r3, r0
 800266a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800266e:	e00f      	b.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002674:	3328      	adds	r3, #40	@ 0x28
 8002676:	2100      	movs	r1, #0
 8002678:	4618      	mov	r0, r3
 800267a:	f001 fce3 	bl	8004044 <RCCEx_PLL3_Config>
 800267e:	4603      	mov	r3, r0
 8002680:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002684:	e004      	b.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800268c:	e000      	b.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800268e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002690:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10a      	bne.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002698:	4b7b      	ldr	r3, [pc, #492]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800269a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800269c:	f023 0107 	bic.w	r1, r3, #7
 80026a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a6:	4a78      	ldr	r2, [pc, #480]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026a8:	430b      	orrs	r3, r1
 80026aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80026ac:	e003      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80026b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80026b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026be:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80026c2:	f04f 0b00 	mov.w	fp, #0
 80026c6:	ea5a 030b 	orrs.w	r3, sl, fp
 80026ca:	d04c      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80026cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026d6:	d030      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80026d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026dc:	d829      	bhi.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80026de:	2bc0      	cmp	r3, #192	@ 0xc0
 80026e0:	d02d      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80026e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80026e4:	d825      	bhi.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80026e6:	2b80      	cmp	r3, #128	@ 0x80
 80026e8:	d018      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80026ea:	2b80      	cmp	r3, #128	@ 0x80
 80026ec:	d821      	bhi.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d002      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80026f2:	2b40      	cmp	r3, #64	@ 0x40
 80026f4:	d007      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80026f6:	e01c      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026f8:	4b63      	ldr	r3, [pc, #396]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fc:	4a62      	ldr	r2, [pc, #392]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002702:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002704:	e01c      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800270a:	3308      	adds	r3, #8
 800270c:	2100      	movs	r1, #0
 800270e:	4618      	mov	r0, r3
 8002710:	f001 fbe6 	bl	8003ee0 <RCCEx_PLL2_Config>
 8002714:	4603      	mov	r3, r0
 8002716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800271a:	e011      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800271c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002720:	3328      	adds	r3, #40	@ 0x28
 8002722:	2100      	movs	r1, #0
 8002724:	4618      	mov	r0, r3
 8002726:	f001 fc8d 	bl	8004044 <RCCEx_PLL3_Config>
 800272a:	4603      	mov	r3, r0
 800272c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002730:	e006      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002738:	e002      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800273a:	bf00      	nop
 800273c:	e000      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800273e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002740:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10a      	bne.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002748:	4b4f      	ldr	r3, [pc, #316]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800274a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800274c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002756:	4a4c      	ldr	r2, [pc, #304]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002758:	430b      	orrs	r3, r1
 800275a:	6513      	str	r3, [r2, #80]	@ 0x50
 800275c:	e003      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800275e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002762:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800276a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002772:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002776:	2300      	movs	r3, #0
 8002778:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800277c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002780:	460b      	mov	r3, r1
 8002782:	4313      	orrs	r3, r2
 8002784:	d053      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800278a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800278e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002792:	d035      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002794:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002798:	d82e      	bhi.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800279a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800279e:	d031      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80027a0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80027a4:	d828      	bhi.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80027a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027aa:	d01a      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80027ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027b0:	d822      	bhi.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80027b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80027ba:	d007      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80027bc:	e01c      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027be:	4b32      	ldr	r3, [pc, #200]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c2:	4a31      	ldr	r2, [pc, #196]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027ca:	e01c      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80027cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027d0:	3308      	adds	r3, #8
 80027d2:	2100      	movs	r1, #0
 80027d4:	4618      	mov	r0, r3
 80027d6:	f001 fb83 	bl	8003ee0 <RCCEx_PLL2_Config>
 80027da:	4603      	mov	r3, r0
 80027dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80027e0:	e011      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027e6:	3328      	adds	r3, #40	@ 0x28
 80027e8:	2100      	movs	r1, #0
 80027ea:	4618      	mov	r0, r3
 80027ec:	f001 fc2a 	bl	8004044 <RCCEx_PLL3_Config>
 80027f0:	4603      	mov	r3, r0
 80027f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027f6:	e006      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80027fe:	e002      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002800:	bf00      	nop
 8002802:	e000      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002804:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002806:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10b      	bne.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800280e:	4b1e      	ldr	r3, [pc, #120]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002812:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800281a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800281e:	4a1a      	ldr	r2, [pc, #104]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002820:	430b      	orrs	r3, r1
 8002822:	6593      	str	r3, [r2, #88]	@ 0x58
 8002824:	e003      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002826:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800282a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800282e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002836:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800283a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800283e:	2300      	movs	r3, #0
 8002840:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002844:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002848:	460b      	mov	r3, r1
 800284a:	4313      	orrs	r3, r2
 800284c:	d056      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800284e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002852:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002856:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800285a:	d038      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800285c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002860:	d831      	bhi.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002862:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002866:	d034      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002868:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800286c:	d82b      	bhi.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800286e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002872:	d01d      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002874:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002878:	d825      	bhi.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800287a:	2b00      	cmp	r3, #0
 800287c:	d006      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800287e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002882:	d00a      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002884:	e01f      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002886:	bf00      	nop
 8002888:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800288c:	4ba2      	ldr	r3, [pc, #648]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800288e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002890:	4aa1      	ldr	r2, [pc, #644]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002892:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002896:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002898:	e01c      	b.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800289a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800289e:	3308      	adds	r3, #8
 80028a0:	2100      	movs	r1, #0
 80028a2:	4618      	mov	r0, r3
 80028a4:	f001 fb1c 	bl	8003ee0 <RCCEx_PLL2_Config>
 80028a8:	4603      	mov	r3, r0
 80028aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80028ae:	e011      	b.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80028b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028b4:	3328      	adds	r3, #40	@ 0x28
 80028b6:	2100      	movs	r1, #0
 80028b8:	4618      	mov	r0, r3
 80028ba:	f001 fbc3 	bl	8004044 <RCCEx_PLL3_Config>
 80028be:	4603      	mov	r3, r0
 80028c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80028c4:	e006      	b.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80028cc:	e002      	b.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80028ce:	bf00      	nop
 80028d0:	e000      	b.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80028d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10b      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80028dc:	4b8e      	ldr	r3, [pc, #568]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80028e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80028ec:	4a8a      	ldr	r2, [pc, #552]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028ee:	430b      	orrs	r3, r1
 80028f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80028f2:	e003      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80028fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002904:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002908:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800290c:	2300      	movs	r3, #0
 800290e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002912:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002916:	460b      	mov	r3, r1
 8002918:	4313      	orrs	r3, r2
 800291a:	d03a      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800291c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002922:	2b30      	cmp	r3, #48	@ 0x30
 8002924:	d01f      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002926:	2b30      	cmp	r3, #48	@ 0x30
 8002928:	d819      	bhi.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800292a:	2b20      	cmp	r3, #32
 800292c:	d00c      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800292e:	2b20      	cmp	r3, #32
 8002930:	d815      	bhi.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002932:	2b00      	cmp	r3, #0
 8002934:	d019      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002936:	2b10      	cmp	r3, #16
 8002938:	d111      	bne.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800293a:	4b77      	ldr	r3, [pc, #476]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800293c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293e:	4a76      	ldr	r2, [pc, #472]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002940:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002944:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002946:	e011      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800294c:	3308      	adds	r3, #8
 800294e:	2102      	movs	r1, #2
 8002950:	4618      	mov	r0, r3
 8002952:	f001 fac5 	bl	8003ee0 <RCCEx_PLL2_Config>
 8002956:	4603      	mov	r3, r0
 8002958:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800295c:	e006      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002964:	e002      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002966:	bf00      	nop
 8002968:	e000      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800296a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800296c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10a      	bne.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002974:	4b68      	ldr	r3, [pc, #416]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002978:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800297c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002982:	4a65      	ldr	r2, [pc, #404]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002984:	430b      	orrs	r3, r1
 8002986:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002988:	e003      	b.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800298a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800298e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800299e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80029a2:	2300      	movs	r3, #0
 80029a4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80029a8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80029ac:	460b      	mov	r3, r1
 80029ae:	4313      	orrs	r3, r2
 80029b0:	d051      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80029b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029bc:	d035      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80029be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029c2:	d82e      	bhi.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80029c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80029c8:	d031      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80029ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80029ce:	d828      	bhi.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80029d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029d4:	d01a      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80029d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029da:	d822      	bhi.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80029e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029e4:	d007      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80029e6:	e01c      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029e8:	4b4b      	ldr	r3, [pc, #300]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ec:	4a4a      	ldr	r2, [pc, #296]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80029f4:	e01c      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80029f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029fa:	3308      	adds	r3, #8
 80029fc:	2100      	movs	r1, #0
 80029fe:	4618      	mov	r0, r3
 8002a00:	f001 fa6e 	bl	8003ee0 <RCCEx_PLL2_Config>
 8002a04:	4603      	mov	r3, r0
 8002a06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a0a:	e011      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a10:	3328      	adds	r3, #40	@ 0x28
 8002a12:	2100      	movs	r1, #0
 8002a14:	4618      	mov	r0, r3
 8002a16:	f001 fb15 	bl	8004044 <RCCEx_PLL3_Config>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a20:	e006      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a28:	e002      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002a2a:	bf00      	nop
 8002a2c:	e000      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002a2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10a      	bne.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002a38:	4b37      	ldr	r3, [pc, #220]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a3c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a46:	4a34      	ldr	r2, [pc, #208]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a48:	430b      	orrs	r3, r1
 8002a4a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a4c:	e003      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002a62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002a66:	2300      	movs	r3, #0
 8002a68:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002a6c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002a70:	460b      	mov	r3, r1
 8002a72:	4313      	orrs	r3, r2
 8002a74:	d056      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a80:	d033      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002a82:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a86:	d82c      	bhi.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002a88:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a8c:	d02f      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002a8e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a92:	d826      	bhi.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002a94:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002a98:	d02b      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002a9a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002a9e:	d820      	bhi.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002aa0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002aa4:	d012      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002aa6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002aaa:	d81a      	bhi.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d022      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ab4:	d115      	bne.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aba:	3308      	adds	r3, #8
 8002abc:	2101      	movs	r1, #1
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f001 fa0e 	bl	8003ee0 <RCCEx_PLL2_Config>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002aca:	e015      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ad0:	3328      	adds	r3, #40	@ 0x28
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f001 fab5 	bl	8004044 <RCCEx_PLL3_Config>
 8002ada:	4603      	mov	r3, r0
 8002adc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002ae0:	e00a      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ae8:	e006      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002aea:	bf00      	nop
 8002aec:	e004      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002aee:	bf00      	nop
 8002af0:	e002      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002af2:	bf00      	nop
 8002af4:	e000      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002af6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002af8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10d      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002b00:	4b05      	ldr	r3, [pc, #20]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b04:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b0e:	4a02      	ldr	r2, [pc, #8]	@ (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b10:	430b      	orrs	r3, r1
 8002b12:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b14:	e006      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002b16:	bf00      	nop
 8002b18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002b30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002b34:	2300      	movs	r3, #0
 8002b36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002b3a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4313      	orrs	r3, r2
 8002b42:	d055      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b48:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002b4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b50:	d033      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002b52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b56:	d82c      	bhi.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002b58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b5c:	d02f      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b62:	d826      	bhi.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002b64:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002b68:	d02b      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002b6a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002b6e:	d820      	bhi.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002b70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b74:	d012      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002b76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b7a:	d81a      	bhi.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d022      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002b80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b84:	d115      	bne.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b8a:	3308      	adds	r3, #8
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f001 f9a6 	bl	8003ee0 <RCCEx_PLL2_Config>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002b9a:	e015      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ba0:	3328      	adds	r3, #40	@ 0x28
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f001 fa4d 	bl	8004044 <RCCEx_PLL3_Config>
 8002baa:	4603      	mov	r3, r0
 8002bac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002bb0:	e00a      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002bb8:	e006      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002bba:	bf00      	nop
 8002bbc:	e004      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002bbe:	bf00      	nop
 8002bc0:	e002      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002bc2:	bf00      	nop
 8002bc4:	e000      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002bc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10b      	bne.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002bd0:	4ba3      	ldr	r3, [pc, #652]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bdc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002be0:	4a9f      	ldr	r2, [pc, #636]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002be2:	430b      	orrs	r3, r1
 8002be4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002be6:	e003      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002bfc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002c00:	2300      	movs	r3, #0
 8002c02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002c06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	d037      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c1a:	d00e      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002c1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c20:	d816      	bhi.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d018      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002c26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c2a:	d111      	bne.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c2c:	4b8c      	ldr	r3, [pc, #560]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c30:	4a8b      	ldr	r2, [pc, #556]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002c38:	e00f      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c3e:	3308      	adds	r3, #8
 8002c40:	2101      	movs	r1, #1
 8002c42:	4618      	mov	r0, r3
 8002c44:	f001 f94c 	bl	8003ee0 <RCCEx_PLL2_Config>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002c4e:	e004      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c56:	e000      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002c58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10a      	bne.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c62:	4b7f      	ldr	r3, [pc, #508]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c66:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c70:	4a7b      	ldr	r2, [pc, #492]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c72:	430b      	orrs	r3, r1
 8002c74:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c76:	e003      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c88:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002c8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c90:	2300      	movs	r3, #0
 8002c92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002c96:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	d039      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ca4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	d81c      	bhi.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002caa:	a201      	add	r2, pc, #4	@ (adr r2, 8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb0:	08002ced 	.word	0x08002ced
 8002cb4:	08002cc1 	.word	0x08002cc1
 8002cb8:	08002ccf 	.word	0x08002ccf
 8002cbc:	08002ced 	.word	0x08002ced
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cc0:	4b67      	ldr	r3, [pc, #412]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc4:	4a66      	ldr	r2, [pc, #408]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002ccc:	e00f      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cd2:	3308      	adds	r3, #8
 8002cd4:	2102      	movs	r1, #2
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f001 f902 	bl	8003ee0 <RCCEx_PLL2_Config>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002ce2:	e004      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002cea:	e000      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002cec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10a      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002cf6:	4b5a      	ldr	r3, [pc, #360]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cfa:	f023 0103 	bic.w	r1, r3, #3
 8002cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d04:	4a56      	ldr	r2, [pc, #344]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d06:	430b      	orrs	r3, r1
 8002d08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d0a:	e003      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002d20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d24:	2300      	movs	r3, #0
 8002d26:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002d2a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f000 809f 	beq.w	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d36:	4b4b      	ldr	r3, [pc, #300]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a4a      	ldr	r2, [pc, #296]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002d3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d42:	f7fe f8fb 	bl	8000f3c <HAL_GetTick>
 8002d46:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d4a:	e00b      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d4c:	f7fe f8f6 	bl	8000f3c <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b64      	cmp	r3, #100	@ 0x64
 8002d5a:	d903      	bls.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d62:	e005      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d64:	4b3f      	ldr	r3, [pc, #252]	@ (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0ed      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002d70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d179      	bne.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002d78:	4b39      	ldr	r3, [pc, #228]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d7a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002d84:	4053      	eors	r3, r2
 8002d86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d015      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d8e:	4b34      	ldr	r3, [pc, #208]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d96:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d9a:	4b31      	ldr	r3, [pc, #196]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d9e:	4a30      	ldr	r2, [pc, #192]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002da0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002da4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002da6:	4b2e      	ldr	r3, [pc, #184]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002daa:	4a2d      	ldr	r2, [pc, #180]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002db0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002db2:	4a2b      	ldr	r2, [pc, #172]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002db4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002db8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dbe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002dc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dc6:	d118      	bne.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc8:	f7fe f8b8 	bl	8000f3c <HAL_GetTick>
 8002dcc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dd0:	e00d      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd2:	f7fe f8b3 	bl	8000f3c <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002ddc:	1ad2      	subs	r2, r2, r3
 8002dde:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d903      	bls.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8002dec:	e005      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dee:	4b1c      	ldr	r3, [pc, #112]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0eb      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002dfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d129      	bne.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002e0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e12:	d10e      	bne.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002e14:	4b12      	ldr	r3, [pc, #72]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e20:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002e24:	091a      	lsrs	r2, r3, #4
 8002e26:	4b10      	ldr	r3, [pc, #64]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	4a0d      	ldr	r2, [pc, #52]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e2c:	430b      	orrs	r3, r1
 8002e2e:	6113      	str	r3, [r2, #16]
 8002e30:	e005      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002e32:	4b0b      	ldr	r3, [pc, #44]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	4a0a      	ldr	r2, [pc, #40]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e38:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002e3c:	6113      	str	r3, [r2, #16]
 8002e3e:	4b08      	ldr	r3, [pc, #32]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e40:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002e4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e4e:	4a04      	ldr	r2, [pc, #16]	@ (8002e60 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e50:	430b      	orrs	r3, r1
 8002e52:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e54:	e00e      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8002e5e:	e009      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002e60:	58024400 	.word	0x58024400
 8002e64:	58024800 	.word	0x58024800
 8002e68:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7c:	f002 0301 	and.w	r3, r2, #1
 8002e80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e84:	2300      	movs	r3, #0
 8002e86:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002e8a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4313      	orrs	r3, r2
 8002e92:	f000 8089 	beq.w	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e9c:	2b28      	cmp	r3, #40	@ 0x28
 8002e9e:	d86b      	bhi.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea6:	bf00      	nop
 8002ea8:	08002f81 	.word	0x08002f81
 8002eac:	08002f79 	.word	0x08002f79
 8002eb0:	08002f79 	.word	0x08002f79
 8002eb4:	08002f79 	.word	0x08002f79
 8002eb8:	08002f79 	.word	0x08002f79
 8002ebc:	08002f79 	.word	0x08002f79
 8002ec0:	08002f79 	.word	0x08002f79
 8002ec4:	08002f79 	.word	0x08002f79
 8002ec8:	08002f4d 	.word	0x08002f4d
 8002ecc:	08002f79 	.word	0x08002f79
 8002ed0:	08002f79 	.word	0x08002f79
 8002ed4:	08002f79 	.word	0x08002f79
 8002ed8:	08002f79 	.word	0x08002f79
 8002edc:	08002f79 	.word	0x08002f79
 8002ee0:	08002f79 	.word	0x08002f79
 8002ee4:	08002f79 	.word	0x08002f79
 8002ee8:	08002f63 	.word	0x08002f63
 8002eec:	08002f79 	.word	0x08002f79
 8002ef0:	08002f79 	.word	0x08002f79
 8002ef4:	08002f79 	.word	0x08002f79
 8002ef8:	08002f79 	.word	0x08002f79
 8002efc:	08002f79 	.word	0x08002f79
 8002f00:	08002f79 	.word	0x08002f79
 8002f04:	08002f79 	.word	0x08002f79
 8002f08:	08002f81 	.word	0x08002f81
 8002f0c:	08002f79 	.word	0x08002f79
 8002f10:	08002f79 	.word	0x08002f79
 8002f14:	08002f79 	.word	0x08002f79
 8002f18:	08002f79 	.word	0x08002f79
 8002f1c:	08002f79 	.word	0x08002f79
 8002f20:	08002f79 	.word	0x08002f79
 8002f24:	08002f79 	.word	0x08002f79
 8002f28:	08002f81 	.word	0x08002f81
 8002f2c:	08002f79 	.word	0x08002f79
 8002f30:	08002f79 	.word	0x08002f79
 8002f34:	08002f79 	.word	0x08002f79
 8002f38:	08002f79 	.word	0x08002f79
 8002f3c:	08002f79 	.word	0x08002f79
 8002f40:	08002f79 	.word	0x08002f79
 8002f44:	08002f79 	.word	0x08002f79
 8002f48:	08002f81 	.word	0x08002f81
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f50:	3308      	adds	r3, #8
 8002f52:	2101      	movs	r1, #1
 8002f54:	4618      	mov	r0, r3
 8002f56:	f000 ffc3 	bl	8003ee0 <RCCEx_PLL2_Config>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002f60:	e00f      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f66:	3328      	adds	r3, #40	@ 0x28
 8002f68:	2101      	movs	r1, #1
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f001 f86a 	bl	8004044 <RCCEx_PLL3_Config>
 8002f70:	4603      	mov	r3, r0
 8002f72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002f76:	e004      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f7e:	e000      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8002f80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10a      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002f8a:	4bbf      	ldr	r3, [pc, #764]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f8e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f98:	4abb      	ldr	r2, [pc, #748]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002f9a:	430b      	orrs	r3, r1
 8002f9c:	6553      	str	r3, [r2, #84]	@ 0x54
 8002f9e:	e003      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fa4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb0:	f002 0302 	and.w	r3, r2, #2
 8002fb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002fbe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	d041      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002fce:	2b05      	cmp	r3, #5
 8002fd0:	d824      	bhi.n	800301c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8002fd2:	a201      	add	r2, pc, #4	@ (adr r2, 8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8002fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd8:	08003025 	.word	0x08003025
 8002fdc:	08002ff1 	.word	0x08002ff1
 8002fe0:	08003007 	.word	0x08003007
 8002fe4:	08003025 	.word	0x08003025
 8002fe8:	08003025 	.word	0x08003025
 8002fec:	08003025 	.word	0x08003025
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ff4:	3308      	adds	r3, #8
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 ff71 	bl	8003ee0 <RCCEx_PLL2_Config>
 8002ffe:	4603      	mov	r3, r0
 8003000:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003004:	e00f      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800300a:	3328      	adds	r3, #40	@ 0x28
 800300c:	2101      	movs	r1, #1
 800300e:	4618      	mov	r0, r3
 8003010:	f001 f818 	bl	8004044 <RCCEx_PLL3_Config>
 8003014:	4603      	mov	r3, r0
 8003016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800301a:	e004      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003022:	e000      	b.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003024:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003026:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10a      	bne.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800302e:	4b96      	ldr	r3, [pc, #600]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003032:	f023 0107 	bic.w	r1, r3, #7
 8003036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800303a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800303c:	4a92      	ldr	r2, [pc, #584]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800303e:	430b      	orrs	r3, r1
 8003040:	6553      	str	r3, [r2, #84]	@ 0x54
 8003042:	e003      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003044:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003048:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800304c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003054:	f002 0304 	and.w	r3, r2, #4
 8003058:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800305c:	2300      	movs	r3, #0
 800305e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003062:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003066:	460b      	mov	r3, r1
 8003068:	4313      	orrs	r3, r2
 800306a:	d044      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800306c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003070:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003074:	2b05      	cmp	r3, #5
 8003076:	d825      	bhi.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003078:	a201      	add	r2, pc, #4	@ (adr r2, 8003080 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800307a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307e:	bf00      	nop
 8003080:	080030cd 	.word	0x080030cd
 8003084:	08003099 	.word	0x08003099
 8003088:	080030af 	.word	0x080030af
 800308c:	080030cd 	.word	0x080030cd
 8003090:	080030cd 	.word	0x080030cd
 8003094:	080030cd 	.word	0x080030cd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800309c:	3308      	adds	r3, #8
 800309e:	2101      	movs	r1, #1
 80030a0:	4618      	mov	r0, r3
 80030a2:	f000 ff1d 	bl	8003ee0 <RCCEx_PLL2_Config>
 80030a6:	4603      	mov	r3, r0
 80030a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80030ac:	e00f      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030b2:	3328      	adds	r3, #40	@ 0x28
 80030b4:	2101      	movs	r1, #1
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 ffc4 	bl	8004044 <RCCEx_PLL3_Config>
 80030bc:	4603      	mov	r3, r0
 80030be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80030c2:	e004      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030ca:	e000      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80030cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10b      	bne.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030d6:	4b6c      	ldr	r3, [pc, #432]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80030d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030da:	f023 0107 	bic.w	r1, r3, #7
 80030de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030e6:	4a68      	ldr	r2, [pc, #416]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80030e8:	430b      	orrs	r3, r1
 80030ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80030ec:	e003      	b.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fe:	f002 0320 	and.w	r3, r2, #32
 8003102:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003106:	2300      	movs	r3, #0
 8003108:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800310c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003110:	460b      	mov	r3, r1
 8003112:	4313      	orrs	r3, r2
 8003114:	d055      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800311e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003122:	d033      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003124:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003128:	d82c      	bhi.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800312a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800312e:	d02f      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003130:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003134:	d826      	bhi.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003136:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800313a:	d02b      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800313c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003140:	d820      	bhi.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003142:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003146:	d012      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003148:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800314c:	d81a      	bhi.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800314e:	2b00      	cmp	r3, #0
 8003150:	d022      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003152:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003156:	d115      	bne.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800315c:	3308      	adds	r3, #8
 800315e:	2100      	movs	r1, #0
 8003160:	4618      	mov	r0, r3
 8003162:	f000 febd 	bl	8003ee0 <RCCEx_PLL2_Config>
 8003166:	4603      	mov	r3, r0
 8003168:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800316c:	e015      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800316e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003172:	3328      	adds	r3, #40	@ 0x28
 8003174:	2102      	movs	r1, #2
 8003176:	4618      	mov	r0, r3
 8003178:	f000 ff64 	bl	8004044 <RCCEx_PLL3_Config>
 800317c:	4603      	mov	r3, r0
 800317e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003182:	e00a      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800318a:	e006      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800318c:	bf00      	nop
 800318e:	e004      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003190:	bf00      	nop
 8003192:	e002      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003194:	bf00      	nop
 8003196:	e000      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003198:	bf00      	nop
    }

    if (ret == HAL_OK)
 800319a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10b      	bne.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031a2:	4b39      	ldr	r3, [pc, #228]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80031a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031a6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80031aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031b2:	4a35      	ldr	r2, [pc, #212]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80031b4:	430b      	orrs	r3, r1
 80031b6:	6553      	str	r3, [r2, #84]	@ 0x54
 80031b8:	e003      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80031c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ca:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80031ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80031d2:	2300      	movs	r3, #0
 80031d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80031d8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80031dc:	460b      	mov	r3, r1
 80031de:	4313      	orrs	r3, r2
 80031e0:	d058      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80031e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80031ea:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80031ee:	d033      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80031f0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80031f4:	d82c      	bhi.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80031f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031fa:	d02f      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80031fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003200:	d826      	bhi.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003202:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003206:	d02b      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003208:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800320c:	d820      	bhi.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800320e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003212:	d012      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003214:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003218:	d81a      	bhi.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800321a:	2b00      	cmp	r3, #0
 800321c:	d022      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800321e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003222:	d115      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003228:	3308      	adds	r3, #8
 800322a:	2100      	movs	r1, #0
 800322c:	4618      	mov	r0, r3
 800322e:	f000 fe57 	bl	8003ee0 <RCCEx_PLL2_Config>
 8003232:	4603      	mov	r3, r0
 8003234:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003238:	e015      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800323a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800323e:	3328      	adds	r3, #40	@ 0x28
 8003240:	2102      	movs	r1, #2
 8003242:	4618      	mov	r0, r3
 8003244:	f000 fefe 	bl	8004044 <RCCEx_PLL3_Config>
 8003248:	4603      	mov	r3, r0
 800324a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800324e:	e00a      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003256:	e006      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003258:	bf00      	nop
 800325a:	e004      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800325c:	bf00      	nop
 800325e:	e002      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003260:	bf00      	nop
 8003262:	e000      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003264:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003266:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10e      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800326e:	4b06      	ldr	r3, [pc, #24]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003272:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800327a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800327e:	4a02      	ldr	r2, [pc, #8]	@ (8003288 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003280:	430b      	orrs	r3, r1
 8003282:	6593      	str	r3, [r2, #88]	@ 0x58
 8003284:	e006      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003286:	bf00      	nop
 8003288:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800328c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003290:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80032a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80032a4:	2300      	movs	r3, #0
 80032a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80032aa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80032ae:	460b      	mov	r3, r1
 80032b0:	4313      	orrs	r3, r2
 80032b2:	d055      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80032b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80032bc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80032c0:	d033      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80032c2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80032c6:	d82c      	bhi.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80032c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032cc:	d02f      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80032ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032d2:	d826      	bhi.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80032d4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80032d8:	d02b      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80032da:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80032de:	d820      	bhi.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80032e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032e4:	d012      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80032e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032ea:	d81a      	bhi.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d022      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80032f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032f4:	d115      	bne.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032fa:	3308      	adds	r3, #8
 80032fc:	2100      	movs	r1, #0
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 fdee 	bl	8003ee0 <RCCEx_PLL2_Config>
 8003304:	4603      	mov	r3, r0
 8003306:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800330a:	e015      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800330c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003310:	3328      	adds	r3, #40	@ 0x28
 8003312:	2102      	movs	r1, #2
 8003314:	4618      	mov	r0, r3
 8003316:	f000 fe95 	bl	8004044 <RCCEx_PLL3_Config>
 800331a:	4603      	mov	r3, r0
 800331c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003320:	e00a      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003328:	e006      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800332a:	bf00      	nop
 800332c:	e004      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800332e:	bf00      	nop
 8003330:	e002      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003332:	bf00      	nop
 8003334:	e000      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003336:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003338:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10b      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003340:	4ba1      	ldr	r3, [pc, #644]	@ (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003344:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800334c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003350:	4a9d      	ldr	r2, [pc, #628]	@ (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003352:	430b      	orrs	r3, r1
 8003354:	6593      	str	r3, [r2, #88]	@ 0x58
 8003356:	e003      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003358:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800335c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003368:	f002 0308 	and.w	r3, r2, #8
 800336c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003370:	2300      	movs	r3, #0
 8003372:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003376:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800337a:	460b      	mov	r3, r1
 800337c:	4313      	orrs	r3, r2
 800337e:	d01e      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003384:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003388:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800338c:	d10c      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800338e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003392:	3328      	adds	r3, #40	@ 0x28
 8003394:	2102      	movs	r1, #2
 8003396:	4618      	mov	r0, r3
 8003398:	f000 fe54 	bl	8004044 <RCCEx_PLL3_Config>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d002      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80033a8:	4b87      	ldr	r3, [pc, #540]	@ (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80033aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ac:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80033b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033b8:	4a83      	ldr	r2, [pc, #524]	@ (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80033ba:	430b      	orrs	r3, r1
 80033bc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c6:	f002 0310 	and.w	r3, r2, #16
 80033ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80033ce:	2300      	movs	r3, #0
 80033d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80033d4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80033d8:	460b      	mov	r3, r1
 80033da:	4313      	orrs	r3, r2
 80033dc:	d01e      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80033de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033ea:	d10c      	bne.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80033ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033f0:	3328      	adds	r3, #40	@ 0x28
 80033f2:	2102      	movs	r1, #2
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 fe25 	bl	8004044 <RCCEx_PLL3_Config>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d002      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003406:	4b70      	ldr	r3, [pc, #448]	@ (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800340a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800340e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003412:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003416:	4a6c      	ldr	r2, [pc, #432]	@ (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003418:	430b      	orrs	r3, r1
 800341a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800341c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003424:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003428:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800342c:	2300      	movs	r3, #0
 800342e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003432:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003436:	460b      	mov	r3, r1
 8003438:	4313      	orrs	r3, r2
 800343a:	d03e      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800343c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003440:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003444:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003448:	d022      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800344a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800344e:	d81b      	bhi.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003454:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003458:	d00b      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800345a:	e015      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800345c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003460:	3308      	adds	r3, #8
 8003462:	2100      	movs	r1, #0
 8003464:	4618      	mov	r0, r3
 8003466:	f000 fd3b 	bl	8003ee0 <RCCEx_PLL2_Config>
 800346a:	4603      	mov	r3, r0
 800346c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003470:	e00f      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003476:	3328      	adds	r3, #40	@ 0x28
 8003478:	2102      	movs	r1, #2
 800347a:	4618      	mov	r0, r3
 800347c:	f000 fde2 	bl	8004044 <RCCEx_PLL3_Config>
 8003480:	4603      	mov	r3, r0
 8003482:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003486:	e004      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800348e:	e000      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003490:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003492:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10b      	bne.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800349a:	4b4b      	ldr	r3, [pc, #300]	@ (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800349c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800349e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80034a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80034aa:	4a47      	ldr	r2, [pc, #284]	@ (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034ac:	430b      	orrs	r3, r1
 80034ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80034b0:	e003      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80034c6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80034c8:	2300      	movs	r3, #0
 80034ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80034cc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80034d0:	460b      	mov	r3, r1
 80034d2:	4313      	orrs	r3, r2
 80034d4:	d03b      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80034d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034de:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80034e2:	d01f      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80034e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80034e8:	d818      	bhi.n	800351c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80034ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034ee:	d003      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80034f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034f4:	d007      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80034f6:	e011      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034f8:	4b33      	ldr	r3, [pc, #204]	@ (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034fc:	4a32      	ldr	r2, [pc, #200]	@ (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003502:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003504:	e00f      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800350a:	3328      	adds	r3, #40	@ 0x28
 800350c:	2101      	movs	r1, #1
 800350e:	4618      	mov	r0, r3
 8003510:	f000 fd98 	bl	8004044 <RCCEx_PLL3_Config>
 8003514:	4603      	mov	r3, r0
 8003516:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800351a:	e004      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003522:	e000      	b.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003524:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003526:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10b      	bne.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800352e:	4b26      	ldr	r3, [pc, #152]	@ (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003532:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800353a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800353e:	4a22      	ldr	r2, [pc, #136]	@ (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003540:	430b      	orrs	r3, r1
 8003542:	6553      	str	r3, [r2, #84]	@ 0x54
 8003544:	e003      	b.n	800354e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003546:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800354a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800354e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003556:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800355a:	673b      	str	r3, [r7, #112]	@ 0x70
 800355c:	2300      	movs	r3, #0
 800355e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003560:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003564:	460b      	mov	r3, r1
 8003566:	4313      	orrs	r3, r2
 8003568:	d034      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800356a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800356e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003574:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003578:	d007      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800357a:	e011      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800357c:	4b12      	ldr	r3, [pc, #72]	@ (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800357e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003580:	4a11      	ldr	r2, [pc, #68]	@ (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003582:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003586:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003588:	e00e      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800358a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800358e:	3308      	adds	r3, #8
 8003590:	2102      	movs	r1, #2
 8003592:	4618      	mov	r0, r3
 8003594:	f000 fca4 	bl	8003ee0 <RCCEx_PLL2_Config>
 8003598:	4603      	mov	r3, r0
 800359a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800359e:	e003      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10d      	bne.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80035b0:	4b05      	ldr	r3, [pc, #20]	@ (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035b4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80035b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035be:	4a02      	ldr	r2, [pc, #8]	@ (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035c0:	430b      	orrs	r3, r1
 80035c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035c4:	e006      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80035c6:	bf00      	nop
 80035c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80035d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035dc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80035e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035e2:	2300      	movs	r3, #0
 80035e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035e6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80035ea:	460b      	mov	r3, r1
 80035ec:	4313      	orrs	r3, r2
 80035ee:	d00c      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80035f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035f4:	3328      	adds	r3, #40	@ 0x28
 80035f6:	2102      	movs	r1, #2
 80035f8:	4618      	mov	r0, r3
 80035fa:	f000 fd23 	bl	8004044 <RCCEx_PLL3_Config>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800360a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800360e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003612:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003616:	663b      	str	r3, [r7, #96]	@ 0x60
 8003618:	2300      	movs	r3, #0
 800361a:	667b      	str	r3, [r7, #100]	@ 0x64
 800361c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003620:	460b      	mov	r3, r1
 8003622:	4313      	orrs	r3, r2
 8003624:	d038      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800362a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800362e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003632:	d018      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003634:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003638:	d811      	bhi.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800363a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800363e:	d014      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003640:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003644:	d80b      	bhi.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003646:	2b00      	cmp	r3, #0
 8003648:	d011      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800364a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800364e:	d106      	bne.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003650:	4bc3      	ldr	r3, [pc, #780]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003654:	4ac2      	ldr	r2, [pc, #776]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003656:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800365a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800365c:	e008      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003664:	e004      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003666:	bf00      	nop
 8003668:	e002      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800366a:	bf00      	nop
 800366c:	e000      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800366e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003670:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10b      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003678:	4bb9      	ldr	r3, [pc, #740]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800367a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800367c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003684:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003688:	4ab5      	ldr	r2, [pc, #724]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800368a:	430b      	orrs	r3, r1
 800368c:	6553      	str	r3, [r2, #84]	@ 0x54
 800368e:	e003      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003690:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003694:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800369c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80036a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80036a6:	2300      	movs	r3, #0
 80036a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80036aa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80036ae:	460b      	mov	r3, r1
 80036b0:	4313      	orrs	r3, r2
 80036b2:	d009      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036b4:	4baa      	ldr	r3, [pc, #680]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036b8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80036bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036c2:	4aa7      	ldr	r2, [pc, #668]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036c4:	430b      	orrs	r3, r1
 80036c6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80036c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80036d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80036d6:	2300      	movs	r3, #0
 80036d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80036da:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80036de:	460b      	mov	r3, r1
 80036e0:	4313      	orrs	r3, r2
 80036e2:	d00a      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80036e4:	4b9e      	ldr	r3, [pc, #632]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80036ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80036f4:	4a9a      	ldr	r2, [pc, #616]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036f6:	430b      	orrs	r3, r1
 80036f8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003702:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003706:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003708:	2300      	movs	r3, #0
 800370a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800370c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003710:	460b      	mov	r3, r1
 8003712:	4313      	orrs	r3, r2
 8003714:	d009      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003716:	4b92      	ldr	r3, [pc, #584]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003718:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800371a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800371e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003722:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003724:	4a8e      	ldr	r2, [pc, #568]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003726:	430b      	orrs	r3, r1
 8003728:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800372a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800372e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003732:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003736:	643b      	str	r3, [r7, #64]	@ 0x40
 8003738:	2300      	movs	r3, #0
 800373a:	647b      	str	r3, [r7, #68]	@ 0x44
 800373c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003740:	460b      	mov	r3, r1
 8003742:	4313      	orrs	r3, r2
 8003744:	d00e      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003746:	4b86      	ldr	r3, [pc, #536]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	4a85      	ldr	r2, [pc, #532]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800374c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003750:	6113      	str	r3, [r2, #16]
 8003752:	4b83      	ldr	r3, [pc, #524]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003754:	6919      	ldr	r1, [r3, #16]
 8003756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800375a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800375e:	4a80      	ldr	r2, [pc, #512]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003760:	430b      	orrs	r3, r1
 8003762:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003770:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003772:	2300      	movs	r3, #0
 8003774:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003776:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800377a:	460b      	mov	r3, r1
 800377c:	4313      	orrs	r3, r2
 800377e:	d009      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003780:	4b77      	ldr	r3, [pc, #476]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003784:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800378c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800378e:	4a74      	ldr	r2, [pc, #464]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003790:	430b      	orrs	r3, r1
 8003792:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80037a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80037a2:	2300      	movs	r3, #0
 80037a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80037a6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80037aa:	460b      	mov	r3, r1
 80037ac:	4313      	orrs	r3, r2
 80037ae:	d00a      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80037b0:	4b6b      	ldr	r3, [pc, #428]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037b4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80037b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80037c0:	4a67      	ldr	r2, [pc, #412]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037c2:	430b      	orrs	r3, r1
 80037c4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80037c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ce:	2100      	movs	r1, #0
 80037d0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037d8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80037dc:	460b      	mov	r3, r1
 80037de:	4313      	orrs	r3, r2
 80037e0:	d011      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e6:	3308      	adds	r3, #8
 80037e8:	2100      	movs	r1, #0
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 fb78 	bl	8003ee0 <RCCEx_PLL2_Config>
 80037f0:	4603      	mov	r3, r0
 80037f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80037f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003802:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800380a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380e:	2100      	movs	r1, #0
 8003810:	6239      	str	r1, [r7, #32]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	627b      	str	r3, [r7, #36]	@ 0x24
 8003818:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800381c:	460b      	mov	r3, r1
 800381e:	4313      	orrs	r3, r2
 8003820:	d011      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003826:	3308      	adds	r3, #8
 8003828:	2101      	movs	r1, #1
 800382a:	4618      	mov	r0, r3
 800382c:	f000 fb58 	bl	8003ee0 <RCCEx_PLL2_Config>
 8003830:	4603      	mov	r3, r0
 8003832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003836:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800383e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003842:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800384a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384e:	2100      	movs	r1, #0
 8003850:	61b9      	str	r1, [r7, #24]
 8003852:	f003 0304 	and.w	r3, r3, #4
 8003856:	61fb      	str	r3, [r7, #28]
 8003858:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800385c:	460b      	mov	r3, r1
 800385e:	4313      	orrs	r3, r2
 8003860:	d011      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003866:	3308      	adds	r3, #8
 8003868:	2102      	movs	r1, #2
 800386a:	4618      	mov	r0, r3
 800386c:	f000 fb38 	bl	8003ee0 <RCCEx_PLL2_Config>
 8003870:	4603      	mov	r3, r0
 8003872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800387a:	2b00      	cmp	r3, #0
 800387c:	d003      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800387e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003882:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800388a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388e:	2100      	movs	r1, #0
 8003890:	6139      	str	r1, [r7, #16]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	617b      	str	r3, [r7, #20]
 8003898:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800389c:	460b      	mov	r3, r1
 800389e:	4313      	orrs	r3, r2
 80038a0:	d011      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a6:	3328      	adds	r3, #40	@ 0x28
 80038a8:	2100      	movs	r1, #0
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 fbca 	bl	8004044 <RCCEx_PLL3_Config>
 80038b0:	4603      	mov	r3, r0
 80038b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80038b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80038c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ce:	2100      	movs	r1, #0
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	f003 0310 	and.w	r3, r3, #16
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80038dc:	460b      	mov	r3, r1
 80038de:	4313      	orrs	r3, r2
 80038e0:	d011      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e6:	3328      	adds	r3, #40	@ 0x28
 80038e8:	2101      	movs	r1, #1
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 fbaa 	bl	8004044 <RCCEx_PLL3_Config>
 80038f0:	4603      	mov	r3, r0
 80038f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80038f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003902:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800390a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390e:	2100      	movs	r1, #0
 8003910:	6039      	str	r1, [r7, #0]
 8003912:	f003 0320 	and.w	r3, r3, #32
 8003916:	607b      	str	r3, [r7, #4]
 8003918:	e9d7 1200 	ldrd	r1, r2, [r7]
 800391c:	460b      	mov	r3, r1
 800391e:	4313      	orrs	r3, r2
 8003920:	d011      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003926:	3328      	adds	r3, #40	@ 0x28
 8003928:	2102      	movs	r1, #2
 800392a:	4618      	mov	r0, r3
 800392c:	f000 fb8a 	bl	8004044 <RCCEx_PLL3_Config>
 8003930:	4603      	mov	r3, r0
 8003932:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003936:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800393e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003942:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003946:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800394e:	2300      	movs	r3, #0
 8003950:	e000      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
}
 8003954:	4618      	mov	r0, r3
 8003956:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800395a:	46bd      	mov	sp, r7
 800395c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003960:	58024400 	.word	0x58024400

08003964 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003968:	f7fe fd96 	bl	8002498 <HAL_RCC_GetHCLKFreq>
 800396c:	4602      	mov	r2, r0
 800396e:	4b06      	ldr	r3, [pc, #24]	@ (8003988 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	091b      	lsrs	r3, r3, #4
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	4904      	ldr	r1, [pc, #16]	@ (800398c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800397a:	5ccb      	ldrb	r3, [r1, r3]
 800397c:	f003 031f 	and.w	r3, r3, #31
 8003980:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003984:	4618      	mov	r0, r3
 8003986:	bd80      	pop	{r7, pc}
 8003988:	58024400 	.word	0x58024400
 800398c:	08006454 	.word	0x08006454

08003990 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003990:	b480      	push	{r7}
 8003992:	b089      	sub	sp, #36	@ 0x24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003998:	4ba1      	ldr	r3, [pc, #644]	@ (8003c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800399a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800399c:	f003 0303 	and.w	r3, r3, #3
 80039a0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80039a2:	4b9f      	ldr	r3, [pc, #636]	@ (8003c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a6:	0b1b      	lsrs	r3, r3, #12
 80039a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039ac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80039ae:	4b9c      	ldr	r3, [pc, #624]	@ (8003c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b2:	091b      	lsrs	r3, r3, #4
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80039ba:	4b99      	ldr	r3, [pc, #612]	@ (8003c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039be:	08db      	lsrs	r3, r3, #3
 80039c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	fb02 f303 	mul.w	r3, r2, r3
 80039ca:	ee07 3a90 	vmov	s15, r3
 80039ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 8111 	beq.w	8003c00 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	f000 8083 	beq.w	8003aec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	f200 80a1 	bhi.w	8003b30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d056      	beq.n	8003aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80039fa:	e099      	b.n	8003b30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039fc:	4b88      	ldr	r3, [pc, #544]	@ (8003c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0320 	and.w	r3, r3, #32
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d02d      	beq.n	8003a64 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a08:	4b85      	ldr	r3, [pc, #532]	@ (8003c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	08db      	lsrs	r3, r3, #3
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	4a84      	ldr	r2, [pc, #528]	@ (8003c24 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003a14:	fa22 f303 	lsr.w	r3, r2, r3
 8003a18:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	ee07 3a90 	vmov	s15, r3
 8003a20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	ee07 3a90 	vmov	s15, r3
 8003a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a32:	4b7b      	ldr	r3, [pc, #492]	@ (8003c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a3a:	ee07 3a90 	vmov	s15, r3
 8003a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a42:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a46:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003c28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a5e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003a62:	e087      	b.n	8003b74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	ee07 3a90 	vmov	s15, r3
 8003a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a6e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003c2c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a76:	4b6a      	ldr	r3, [pc, #424]	@ (8003c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a7e:	ee07 3a90 	vmov	s15, r3
 8003a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a86:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a8a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003c28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003aa6:	e065      	b.n	8003b74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	ee07 3a90 	vmov	s15, r3
 8003aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ab2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003c30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aba:	4b59      	ldr	r3, [pc, #356]	@ (8003c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac2:	ee07 3a90 	vmov	s15, r3
 8003ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aca:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ace:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003c28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ada:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003aea:	e043      	b.n	8003b74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	ee07 3a90 	vmov	s15, r3
 8003af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003af6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003afe:	4b48      	ldr	r3, [pc, #288]	@ (8003c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b06:	ee07 3a90 	vmov	s15, r3
 8003b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b12:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003c28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b2e:	e021      	b.n	8003b74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	ee07 3a90 	vmov	s15, r3
 8003b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b3a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003c30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b42:	4b37      	ldr	r3, [pc, #220]	@ (8003c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b4a:	ee07 3a90 	vmov	s15, r3
 8003b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b52:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b56:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003c28 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b72:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003b74:	4b2a      	ldr	r3, [pc, #168]	@ (8003c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b78:	0a5b      	lsrs	r3, r3, #9
 8003b7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b7e:	ee07 3a90 	vmov	s15, r3
 8003b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b9a:	ee17 2a90 	vmov	r2, s15
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003ba2:	4b1f      	ldr	r3, [pc, #124]	@ (8003c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba6:	0c1b      	lsrs	r3, r3, #16
 8003ba8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bac:	ee07 3a90 	vmov	s15, r3
 8003bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bb4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003bb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bc8:	ee17 2a90 	vmov	r2, s15
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003bd0:	4b13      	ldr	r3, [pc, #76]	@ (8003c20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd4:	0e1b      	lsrs	r3, r3, #24
 8003bd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bda:	ee07 3a90 	vmov	s15, r3
 8003bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003be2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003be6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bea:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bf6:	ee17 2a90 	vmov	r2, s15
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003bfe:	e008      	b.n	8003c12 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	609a      	str	r2, [r3, #8]
}
 8003c12:	bf00      	nop
 8003c14:	3724      	adds	r7, #36	@ 0x24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	58024400 	.word	0x58024400
 8003c24:	03d09000 	.word	0x03d09000
 8003c28:	46000000 	.word	0x46000000
 8003c2c:	4c742400 	.word	0x4c742400
 8003c30:	4a742400 	.word	0x4a742400
 8003c34:	4af42400 	.word	0x4af42400

08003c38 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b089      	sub	sp, #36	@ 0x24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c40:	4ba1      	ldr	r3, [pc, #644]	@ (8003ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c44:	f003 0303 	and.w	r3, r3, #3
 8003c48:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003c4a:	4b9f      	ldr	r3, [pc, #636]	@ (8003ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4e:	0d1b      	lsrs	r3, r3, #20
 8003c50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c54:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003c56:	4b9c      	ldr	r3, [pc, #624]	@ (8003ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c5a:	0a1b      	lsrs	r3, r3, #8
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003c62:	4b99      	ldr	r3, [pc, #612]	@ (8003ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c66:	08db      	lsrs	r3, r3, #3
 8003c68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	fb02 f303 	mul.w	r3, r2, r3
 8003c72:	ee07 3a90 	vmov	s15, r3
 8003c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 8111 	beq.w	8003ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	f000 8083 	beq.w	8003d94 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	f200 80a1 	bhi.w	8003dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d056      	beq.n	8003d50 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003ca2:	e099      	b.n	8003dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ca4:	4b88      	ldr	r3, [pc, #544]	@ (8003ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0320 	and.w	r3, r3, #32
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d02d      	beq.n	8003d0c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003cb0:	4b85      	ldr	r3, [pc, #532]	@ (8003ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	08db      	lsrs	r3, r3, #3
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	4a84      	ldr	r2, [pc, #528]	@ (8003ecc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	ee07 3a90 	vmov	s15, r3
 8003cc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	ee07 3a90 	vmov	s15, r3
 8003cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cda:	4b7b      	ldr	r3, [pc, #492]	@ (8003ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ce2:	ee07 3a90 	vmov	s15, r3
 8003ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cea:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d06:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003d0a:	e087      	b.n	8003e1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	ee07 3a90 	vmov	s15, r3
 8003d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d16:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d1e:	4b6a      	ldr	r3, [pc, #424]	@ (8003ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d26:	ee07 3a90 	vmov	s15, r3
 8003d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d32:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d4e:	e065      	b.n	8003e1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	ee07 3a90 	vmov	s15, r3
 8003d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d5a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d62:	4b59      	ldr	r3, [pc, #356]	@ (8003ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d6a:	ee07 3a90 	vmov	s15, r3
 8003d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d72:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d76:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d92:	e043      	b.n	8003e1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	ee07 3a90 	vmov	s15, r3
 8003d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d9e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003edc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003da6:	4b48      	ldr	r3, [pc, #288]	@ (8003ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dae:	ee07 3a90 	vmov	s15, r3
 8003db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003db6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dd6:	e021      	b.n	8003e1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	ee07 3a90 	vmov	s15, r3
 8003dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003de2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dea:	4b37      	ldr	r3, [pc, #220]	@ (8003ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003df2:	ee07 3a90 	vmov	s15, r3
 8003df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dfe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e1a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003e1c:	4b2a      	ldr	r3, [pc, #168]	@ (8003ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e20:	0a5b      	lsrs	r3, r3, #9
 8003e22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e26:	ee07 3a90 	vmov	s15, r3
 8003e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e36:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e42:	ee17 2a90 	vmov	r2, s15
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003e4a:	4b1f      	ldr	r3, [pc, #124]	@ (8003ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4e:	0c1b      	lsrs	r3, r3, #16
 8003e50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e54:	ee07 3a90 	vmov	s15, r3
 8003e58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e64:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e70:	ee17 2a90 	vmov	r2, s15
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003e78:	4b13      	ldr	r3, [pc, #76]	@ (8003ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7c:	0e1b      	lsrs	r3, r3, #24
 8003e7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e82:	ee07 3a90 	vmov	s15, r3
 8003e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e92:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e9e:	ee17 2a90 	vmov	r2, s15
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003ea6:	e008      	b.n	8003eba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	609a      	str	r2, [r3, #8]
}
 8003eba:	bf00      	nop
 8003ebc:	3724      	adds	r7, #36	@ 0x24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	58024400 	.word	0x58024400
 8003ecc:	03d09000 	.word	0x03d09000
 8003ed0:	46000000 	.word	0x46000000
 8003ed4:	4c742400 	.word	0x4c742400
 8003ed8:	4a742400 	.word	0x4a742400
 8003edc:	4af42400 	.word	0x4af42400

08003ee0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003eea:	2300      	movs	r3, #0
 8003eec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003eee:	4b53      	ldr	r3, [pc, #332]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	2b03      	cmp	r3, #3
 8003ef8:	d101      	bne.n	8003efe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e099      	b.n	8004032 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003efe:	4b4f      	ldr	r3, [pc, #316]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a4e      	ldr	r2, [pc, #312]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003f04:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f0a:	f7fd f817 	bl	8000f3c <HAL_GetTick>
 8003f0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f10:	e008      	b.n	8003f24 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f12:	f7fd f813 	bl	8000f3c <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d901      	bls.n	8003f24 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e086      	b.n	8004032 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f24:	4b45      	ldr	r3, [pc, #276]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1f0      	bne.n	8003f12 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003f30:	4b42      	ldr	r3, [pc, #264]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f34:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	031b      	lsls	r3, r3, #12
 8003f3e:	493f      	ldr	r1, [pc, #252]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	628b      	str	r3, [r1, #40]	@ 0x28
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	025b      	lsls	r3, r3, #9
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	041b      	lsls	r3, r3, #16
 8003f62:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	061b      	lsls	r3, r3, #24
 8003f70:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003f74:	4931      	ldr	r1, [pc, #196]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003f7a:	4b30      	ldr	r3, [pc, #192]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f7e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	492d      	ldr	r1, [pc, #180]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003f8c:	4b2b      	ldr	r3, [pc, #172]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f90:	f023 0220 	bic.w	r2, r3, #32
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	4928      	ldr	r1, [pc, #160]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003f9e:	4b27      	ldr	r3, [pc, #156]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa2:	4a26      	ldr	r2, [pc, #152]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003fa4:	f023 0310 	bic.w	r3, r3, #16
 8003fa8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003faa:	4b24      	ldr	r3, [pc, #144]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003fac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fae:	4b24      	ldr	r3, [pc, #144]	@ (8004040 <RCCEx_PLL2_Config+0x160>)
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	69d2      	ldr	r2, [r2, #28]
 8003fb6:	00d2      	lsls	r2, r2, #3
 8003fb8:	4920      	ldr	r1, [pc, #128]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003fbe:	4b1f      	ldr	r3, [pc, #124]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc2:	4a1e      	ldr	r2, [pc, #120]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003fc4:	f043 0310 	orr.w	r3, r3, #16
 8003fc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d106      	bne.n	8003fde <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd4:	4a19      	ldr	r2, [pc, #100]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003fd6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003fda:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003fdc:	e00f      	b.n	8003ffe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d106      	bne.n	8003ff2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003fe4:	4b15      	ldr	r3, [pc, #84]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe8:	4a14      	ldr	r2, [pc, #80]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003fea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003ff0:	e005      	b.n	8003ffe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003ff2:	4b12      	ldr	r3, [pc, #72]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff6:	4a11      	ldr	r2, [pc, #68]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8003ff8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003ffc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003ffe:	4b0f      	ldr	r3, [pc, #60]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a0e      	ldr	r2, [pc, #56]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8004004:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004008:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800400a:	f7fc ff97 	bl	8000f3c <HAL_GetTick>
 800400e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004010:	e008      	b.n	8004024 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004012:	f7fc ff93 	bl	8000f3c <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d901      	bls.n	8004024 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e006      	b.n	8004032 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004024:	4b05      	ldr	r3, [pc, #20]	@ (800403c <RCCEx_PLL2_Config+0x15c>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d0f0      	beq.n	8004012 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004030:	7bfb      	ldrb	r3, [r7, #15]
}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	58024400 	.word	0x58024400
 8004040:	ffff0007 	.word	0xffff0007

08004044 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800404e:	2300      	movs	r3, #0
 8004050:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004052:	4b53      	ldr	r3, [pc, #332]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 8004054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004056:	f003 0303 	and.w	r3, r3, #3
 800405a:	2b03      	cmp	r3, #3
 800405c:	d101      	bne.n	8004062 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e099      	b.n	8004196 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004062:	4b4f      	ldr	r3, [pc, #316]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a4e      	ldr	r2, [pc, #312]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 8004068:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800406c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800406e:	f7fc ff65 	bl	8000f3c <HAL_GetTick>
 8004072:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004074:	e008      	b.n	8004088 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004076:	f7fc ff61 	bl	8000f3c <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d901      	bls.n	8004088 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e086      	b.n	8004196 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004088:	4b45      	ldr	r3, [pc, #276]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1f0      	bne.n	8004076 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004094:	4b42      	ldr	r3, [pc, #264]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 8004096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004098:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	051b      	lsls	r3, r3, #20
 80040a2:	493f      	ldr	r1, [pc, #252]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	628b      	str	r3, [r1, #40]	@ 0x28
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	3b01      	subs	r3, #1
 80040ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	3b01      	subs	r3, #1
 80040b8:	025b      	lsls	r3, r3, #9
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	431a      	orrs	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	041b      	lsls	r3, r3, #16
 80040c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	3b01      	subs	r3, #1
 80040d2:	061b      	lsls	r3, r3, #24
 80040d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80040d8:	4931      	ldr	r1, [pc, #196]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80040de:	4b30      	ldr	r3, [pc, #192]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 80040e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	492d      	ldr	r1, [pc, #180]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80040f0:	4b2b      	ldr	r3, [pc, #172]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 80040f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	4928      	ldr	r1, [pc, #160]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004102:	4b27      	ldr	r3, [pc, #156]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 8004104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004106:	4a26      	ldr	r2, [pc, #152]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 8004108:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800410c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800410e:	4b24      	ldr	r3, [pc, #144]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 8004110:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004112:	4b24      	ldr	r3, [pc, #144]	@ (80041a4 <RCCEx_PLL3_Config+0x160>)
 8004114:	4013      	ands	r3, r2
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	69d2      	ldr	r2, [r2, #28]
 800411a:	00d2      	lsls	r2, r2, #3
 800411c:	4920      	ldr	r1, [pc, #128]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 800411e:	4313      	orrs	r3, r2
 8004120:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004122:	4b1f      	ldr	r3, [pc, #124]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 8004124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004126:	4a1e      	ldr	r2, [pc, #120]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 8004128:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800412c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d106      	bne.n	8004142 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004134:	4b1a      	ldr	r3, [pc, #104]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 8004136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004138:	4a19      	ldr	r2, [pc, #100]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 800413a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800413e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004140:	e00f      	b.n	8004162 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d106      	bne.n	8004156 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004148:	4b15      	ldr	r3, [pc, #84]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 800414a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800414c:	4a14      	ldr	r2, [pc, #80]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 800414e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004152:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004154:	e005      	b.n	8004162 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004156:	4b12      	ldr	r3, [pc, #72]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 8004158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415a:	4a11      	ldr	r2, [pc, #68]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 800415c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004160:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004162:	4b0f      	ldr	r3, [pc, #60]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a0e      	ldr	r2, [pc, #56]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 8004168:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800416c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800416e:	f7fc fee5 	bl	8000f3c <HAL_GetTick>
 8004172:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004174:	e008      	b.n	8004188 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004176:	f7fc fee1 	bl	8000f3c <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d901      	bls.n	8004188 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e006      	b.n	8004196 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004188:	4b05      	ldr	r3, [pc, #20]	@ (80041a0 <RCCEx_PLL3_Config+0x15c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d0f0      	beq.n	8004176 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004194:	7bfb      	ldrb	r3, [r7, #15]
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	58024400 	.word	0x58024400
 80041a4:	ffff0007 	.word	0xffff0007

080041a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e042      	b.n	8004240 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d106      	bne.n	80041d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f7fc fd83 	bl	8000cd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2224      	movs	r2, #36	@ 0x24
 80041d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0201 	bic.w	r2, r2, #1
 80041e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d002      	beq.n	80041f8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 fe1e 	bl	8004e34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f8b3 	bl	8004364 <UART_SetConfig>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b01      	cmp	r3, #1
 8004202:	d101      	bne.n	8004208 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e01b      	b.n	8004240 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004216:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689a      	ldr	r2, [r3, #8]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004226:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0201 	orr.w	r2, r2, #1
 8004236:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 fe9d 	bl	8004f78 <UART_CheckIdleState>
 800423e:	4603      	mov	r3, r0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08a      	sub	sp, #40	@ 0x28
 800424c:	af02      	add	r7, sp, #8
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	603b      	str	r3, [r7, #0]
 8004254:	4613      	mov	r3, r2
 8004256:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800425e:	2b20      	cmp	r3, #32
 8004260:	d17b      	bne.n	800435a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d002      	beq.n	800426e <HAL_UART_Transmit+0x26>
 8004268:	88fb      	ldrh	r3, [r7, #6]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e074      	b.n	800435c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2221      	movs	r2, #33	@ 0x21
 800427e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004282:	f7fc fe5b 	bl	8000f3c <HAL_GetTick>
 8004286:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	88fa      	ldrh	r2, [r7, #6]
 800428c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	88fa      	ldrh	r2, [r7, #6]
 8004294:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042a0:	d108      	bne.n	80042b4 <HAL_UART_Transmit+0x6c>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d104      	bne.n	80042b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80042aa:	2300      	movs	r3, #0
 80042ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	61bb      	str	r3, [r7, #24]
 80042b2:	e003      	b.n	80042bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042b8:	2300      	movs	r3, #0
 80042ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042bc:	e030      	b.n	8004320 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2200      	movs	r2, #0
 80042c6:	2180      	movs	r1, #128	@ 0x80
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 feff 	bl	80050cc <UART_WaitOnFlagUntilTimeout>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d005      	beq.n	80042e0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e03d      	b.n	800435c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10b      	bne.n	80042fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	881b      	ldrh	r3, [r3, #0]
 80042ea:	461a      	mov	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042f4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	3302      	adds	r3, #2
 80042fa:	61bb      	str	r3, [r7, #24]
 80042fc:	e007      	b.n	800430e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	781a      	ldrb	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	3301      	adds	r3, #1
 800430c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004314:	b29b      	uxth	r3, r3
 8004316:	3b01      	subs	r3, #1
 8004318:	b29a      	uxth	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004326:	b29b      	uxth	r3, r3
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1c8      	bne.n	80042be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	2200      	movs	r2, #0
 8004334:	2140      	movs	r1, #64	@ 0x40
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 fec8 	bl	80050cc <UART_WaitOnFlagUntilTimeout>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d005      	beq.n	800434e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2220      	movs	r2, #32
 8004346:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e006      	b.n	800435c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2220      	movs	r2, #32
 8004352:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004356:	2300      	movs	r3, #0
 8004358:	e000      	b.n	800435c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800435a:	2302      	movs	r3, #2
  }
}
 800435c:	4618      	mov	r0, r3
 800435e:	3720      	adds	r7, #32
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004368:	b092      	sub	sp, #72	@ 0x48
 800436a:	af00      	add	r7, sp, #0
 800436c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800436e:	2300      	movs	r3, #0
 8004370:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	431a      	orrs	r2, r3
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	431a      	orrs	r2, r3
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	4313      	orrs	r3, r2
 800438a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	4bbe      	ldr	r3, [pc, #760]	@ (800468c <UART_SetConfig+0x328>)
 8004394:	4013      	ands	r3, r2
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	6812      	ldr	r2, [r2, #0]
 800439a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800439c:	430b      	orrs	r3, r1
 800439e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4ab3      	ldr	r2, [pc, #716]	@ (8004690 <UART_SetConfig+0x32c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d004      	beq.n	80043d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043cc:	4313      	orrs	r3, r2
 80043ce:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	4baf      	ldr	r3, [pc, #700]	@ (8004694 <UART_SetConfig+0x330>)
 80043d8:	4013      	ands	r3, r2
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	6812      	ldr	r2, [r2, #0]
 80043de:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80043e0:	430b      	orrs	r3, r1
 80043e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ea:	f023 010f 	bic.w	r1, r3, #15
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	430a      	orrs	r2, r1
 80043f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4aa6      	ldr	r2, [pc, #664]	@ (8004698 <UART_SetConfig+0x334>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d177      	bne.n	80044f4 <UART_SetConfig+0x190>
 8004404:	4ba5      	ldr	r3, [pc, #660]	@ (800469c <UART_SetConfig+0x338>)
 8004406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004408:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800440c:	2b28      	cmp	r3, #40	@ 0x28
 800440e:	d86d      	bhi.n	80044ec <UART_SetConfig+0x188>
 8004410:	a201      	add	r2, pc, #4	@ (adr r2, 8004418 <UART_SetConfig+0xb4>)
 8004412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004416:	bf00      	nop
 8004418:	080044bd 	.word	0x080044bd
 800441c:	080044ed 	.word	0x080044ed
 8004420:	080044ed 	.word	0x080044ed
 8004424:	080044ed 	.word	0x080044ed
 8004428:	080044ed 	.word	0x080044ed
 800442c:	080044ed 	.word	0x080044ed
 8004430:	080044ed 	.word	0x080044ed
 8004434:	080044ed 	.word	0x080044ed
 8004438:	080044c5 	.word	0x080044c5
 800443c:	080044ed 	.word	0x080044ed
 8004440:	080044ed 	.word	0x080044ed
 8004444:	080044ed 	.word	0x080044ed
 8004448:	080044ed 	.word	0x080044ed
 800444c:	080044ed 	.word	0x080044ed
 8004450:	080044ed 	.word	0x080044ed
 8004454:	080044ed 	.word	0x080044ed
 8004458:	080044cd 	.word	0x080044cd
 800445c:	080044ed 	.word	0x080044ed
 8004460:	080044ed 	.word	0x080044ed
 8004464:	080044ed 	.word	0x080044ed
 8004468:	080044ed 	.word	0x080044ed
 800446c:	080044ed 	.word	0x080044ed
 8004470:	080044ed 	.word	0x080044ed
 8004474:	080044ed 	.word	0x080044ed
 8004478:	080044d5 	.word	0x080044d5
 800447c:	080044ed 	.word	0x080044ed
 8004480:	080044ed 	.word	0x080044ed
 8004484:	080044ed 	.word	0x080044ed
 8004488:	080044ed 	.word	0x080044ed
 800448c:	080044ed 	.word	0x080044ed
 8004490:	080044ed 	.word	0x080044ed
 8004494:	080044ed 	.word	0x080044ed
 8004498:	080044dd 	.word	0x080044dd
 800449c:	080044ed 	.word	0x080044ed
 80044a0:	080044ed 	.word	0x080044ed
 80044a4:	080044ed 	.word	0x080044ed
 80044a8:	080044ed 	.word	0x080044ed
 80044ac:	080044ed 	.word	0x080044ed
 80044b0:	080044ed 	.word	0x080044ed
 80044b4:	080044ed 	.word	0x080044ed
 80044b8:	080044e5 	.word	0x080044e5
 80044bc:	2301      	movs	r3, #1
 80044be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044c2:	e222      	b.n	800490a <UART_SetConfig+0x5a6>
 80044c4:	2304      	movs	r3, #4
 80044c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044ca:	e21e      	b.n	800490a <UART_SetConfig+0x5a6>
 80044cc:	2308      	movs	r3, #8
 80044ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044d2:	e21a      	b.n	800490a <UART_SetConfig+0x5a6>
 80044d4:	2310      	movs	r3, #16
 80044d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044da:	e216      	b.n	800490a <UART_SetConfig+0x5a6>
 80044dc:	2320      	movs	r3, #32
 80044de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044e2:	e212      	b.n	800490a <UART_SetConfig+0x5a6>
 80044e4:	2340      	movs	r3, #64	@ 0x40
 80044e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044ea:	e20e      	b.n	800490a <UART_SetConfig+0x5a6>
 80044ec:	2380      	movs	r3, #128	@ 0x80
 80044ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044f2:	e20a      	b.n	800490a <UART_SetConfig+0x5a6>
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a69      	ldr	r2, [pc, #420]	@ (80046a0 <UART_SetConfig+0x33c>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d130      	bne.n	8004560 <UART_SetConfig+0x1fc>
 80044fe:	4b67      	ldr	r3, [pc, #412]	@ (800469c <UART_SetConfig+0x338>)
 8004500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004502:	f003 0307 	and.w	r3, r3, #7
 8004506:	2b05      	cmp	r3, #5
 8004508:	d826      	bhi.n	8004558 <UART_SetConfig+0x1f4>
 800450a:	a201      	add	r2, pc, #4	@ (adr r2, 8004510 <UART_SetConfig+0x1ac>)
 800450c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004510:	08004529 	.word	0x08004529
 8004514:	08004531 	.word	0x08004531
 8004518:	08004539 	.word	0x08004539
 800451c:	08004541 	.word	0x08004541
 8004520:	08004549 	.word	0x08004549
 8004524:	08004551 	.word	0x08004551
 8004528:	2300      	movs	r3, #0
 800452a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800452e:	e1ec      	b.n	800490a <UART_SetConfig+0x5a6>
 8004530:	2304      	movs	r3, #4
 8004532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004536:	e1e8      	b.n	800490a <UART_SetConfig+0x5a6>
 8004538:	2308      	movs	r3, #8
 800453a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800453e:	e1e4      	b.n	800490a <UART_SetConfig+0x5a6>
 8004540:	2310      	movs	r3, #16
 8004542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004546:	e1e0      	b.n	800490a <UART_SetConfig+0x5a6>
 8004548:	2320      	movs	r3, #32
 800454a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800454e:	e1dc      	b.n	800490a <UART_SetConfig+0x5a6>
 8004550:	2340      	movs	r3, #64	@ 0x40
 8004552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004556:	e1d8      	b.n	800490a <UART_SetConfig+0x5a6>
 8004558:	2380      	movs	r3, #128	@ 0x80
 800455a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800455e:	e1d4      	b.n	800490a <UART_SetConfig+0x5a6>
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a4f      	ldr	r2, [pc, #316]	@ (80046a4 <UART_SetConfig+0x340>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d130      	bne.n	80045cc <UART_SetConfig+0x268>
 800456a:	4b4c      	ldr	r3, [pc, #304]	@ (800469c <UART_SetConfig+0x338>)
 800456c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800456e:	f003 0307 	and.w	r3, r3, #7
 8004572:	2b05      	cmp	r3, #5
 8004574:	d826      	bhi.n	80045c4 <UART_SetConfig+0x260>
 8004576:	a201      	add	r2, pc, #4	@ (adr r2, 800457c <UART_SetConfig+0x218>)
 8004578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800457c:	08004595 	.word	0x08004595
 8004580:	0800459d 	.word	0x0800459d
 8004584:	080045a5 	.word	0x080045a5
 8004588:	080045ad 	.word	0x080045ad
 800458c:	080045b5 	.word	0x080045b5
 8004590:	080045bd 	.word	0x080045bd
 8004594:	2300      	movs	r3, #0
 8004596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800459a:	e1b6      	b.n	800490a <UART_SetConfig+0x5a6>
 800459c:	2304      	movs	r3, #4
 800459e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045a2:	e1b2      	b.n	800490a <UART_SetConfig+0x5a6>
 80045a4:	2308      	movs	r3, #8
 80045a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045aa:	e1ae      	b.n	800490a <UART_SetConfig+0x5a6>
 80045ac:	2310      	movs	r3, #16
 80045ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045b2:	e1aa      	b.n	800490a <UART_SetConfig+0x5a6>
 80045b4:	2320      	movs	r3, #32
 80045b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045ba:	e1a6      	b.n	800490a <UART_SetConfig+0x5a6>
 80045bc:	2340      	movs	r3, #64	@ 0x40
 80045be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045c2:	e1a2      	b.n	800490a <UART_SetConfig+0x5a6>
 80045c4:	2380      	movs	r3, #128	@ 0x80
 80045c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045ca:	e19e      	b.n	800490a <UART_SetConfig+0x5a6>
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a35      	ldr	r2, [pc, #212]	@ (80046a8 <UART_SetConfig+0x344>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d130      	bne.n	8004638 <UART_SetConfig+0x2d4>
 80045d6:	4b31      	ldr	r3, [pc, #196]	@ (800469c <UART_SetConfig+0x338>)
 80045d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045da:	f003 0307 	and.w	r3, r3, #7
 80045de:	2b05      	cmp	r3, #5
 80045e0:	d826      	bhi.n	8004630 <UART_SetConfig+0x2cc>
 80045e2:	a201      	add	r2, pc, #4	@ (adr r2, 80045e8 <UART_SetConfig+0x284>)
 80045e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e8:	08004601 	.word	0x08004601
 80045ec:	08004609 	.word	0x08004609
 80045f0:	08004611 	.word	0x08004611
 80045f4:	08004619 	.word	0x08004619
 80045f8:	08004621 	.word	0x08004621
 80045fc:	08004629 	.word	0x08004629
 8004600:	2300      	movs	r3, #0
 8004602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004606:	e180      	b.n	800490a <UART_SetConfig+0x5a6>
 8004608:	2304      	movs	r3, #4
 800460a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800460e:	e17c      	b.n	800490a <UART_SetConfig+0x5a6>
 8004610:	2308      	movs	r3, #8
 8004612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004616:	e178      	b.n	800490a <UART_SetConfig+0x5a6>
 8004618:	2310      	movs	r3, #16
 800461a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800461e:	e174      	b.n	800490a <UART_SetConfig+0x5a6>
 8004620:	2320      	movs	r3, #32
 8004622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004626:	e170      	b.n	800490a <UART_SetConfig+0x5a6>
 8004628:	2340      	movs	r3, #64	@ 0x40
 800462a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800462e:	e16c      	b.n	800490a <UART_SetConfig+0x5a6>
 8004630:	2380      	movs	r3, #128	@ 0x80
 8004632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004636:	e168      	b.n	800490a <UART_SetConfig+0x5a6>
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a1b      	ldr	r2, [pc, #108]	@ (80046ac <UART_SetConfig+0x348>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d142      	bne.n	80046c8 <UART_SetConfig+0x364>
 8004642:	4b16      	ldr	r3, [pc, #88]	@ (800469c <UART_SetConfig+0x338>)
 8004644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004646:	f003 0307 	and.w	r3, r3, #7
 800464a:	2b05      	cmp	r3, #5
 800464c:	d838      	bhi.n	80046c0 <UART_SetConfig+0x35c>
 800464e:	a201      	add	r2, pc, #4	@ (adr r2, 8004654 <UART_SetConfig+0x2f0>)
 8004650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004654:	0800466d 	.word	0x0800466d
 8004658:	08004675 	.word	0x08004675
 800465c:	0800467d 	.word	0x0800467d
 8004660:	08004685 	.word	0x08004685
 8004664:	080046b1 	.word	0x080046b1
 8004668:	080046b9 	.word	0x080046b9
 800466c:	2300      	movs	r3, #0
 800466e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004672:	e14a      	b.n	800490a <UART_SetConfig+0x5a6>
 8004674:	2304      	movs	r3, #4
 8004676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800467a:	e146      	b.n	800490a <UART_SetConfig+0x5a6>
 800467c:	2308      	movs	r3, #8
 800467e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004682:	e142      	b.n	800490a <UART_SetConfig+0x5a6>
 8004684:	2310      	movs	r3, #16
 8004686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800468a:	e13e      	b.n	800490a <UART_SetConfig+0x5a6>
 800468c:	cfff69f3 	.word	0xcfff69f3
 8004690:	58000c00 	.word	0x58000c00
 8004694:	11fff4ff 	.word	0x11fff4ff
 8004698:	40011000 	.word	0x40011000
 800469c:	58024400 	.word	0x58024400
 80046a0:	40004400 	.word	0x40004400
 80046a4:	40004800 	.word	0x40004800
 80046a8:	40004c00 	.word	0x40004c00
 80046ac:	40005000 	.word	0x40005000
 80046b0:	2320      	movs	r3, #32
 80046b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046b6:	e128      	b.n	800490a <UART_SetConfig+0x5a6>
 80046b8:	2340      	movs	r3, #64	@ 0x40
 80046ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046be:	e124      	b.n	800490a <UART_SetConfig+0x5a6>
 80046c0:	2380      	movs	r3, #128	@ 0x80
 80046c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046c6:	e120      	b.n	800490a <UART_SetConfig+0x5a6>
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4acb      	ldr	r2, [pc, #812]	@ (80049fc <UART_SetConfig+0x698>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d176      	bne.n	80047c0 <UART_SetConfig+0x45c>
 80046d2:	4bcb      	ldr	r3, [pc, #812]	@ (8004a00 <UART_SetConfig+0x69c>)
 80046d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046da:	2b28      	cmp	r3, #40	@ 0x28
 80046dc:	d86c      	bhi.n	80047b8 <UART_SetConfig+0x454>
 80046de:	a201      	add	r2, pc, #4	@ (adr r2, 80046e4 <UART_SetConfig+0x380>)
 80046e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e4:	08004789 	.word	0x08004789
 80046e8:	080047b9 	.word	0x080047b9
 80046ec:	080047b9 	.word	0x080047b9
 80046f0:	080047b9 	.word	0x080047b9
 80046f4:	080047b9 	.word	0x080047b9
 80046f8:	080047b9 	.word	0x080047b9
 80046fc:	080047b9 	.word	0x080047b9
 8004700:	080047b9 	.word	0x080047b9
 8004704:	08004791 	.word	0x08004791
 8004708:	080047b9 	.word	0x080047b9
 800470c:	080047b9 	.word	0x080047b9
 8004710:	080047b9 	.word	0x080047b9
 8004714:	080047b9 	.word	0x080047b9
 8004718:	080047b9 	.word	0x080047b9
 800471c:	080047b9 	.word	0x080047b9
 8004720:	080047b9 	.word	0x080047b9
 8004724:	08004799 	.word	0x08004799
 8004728:	080047b9 	.word	0x080047b9
 800472c:	080047b9 	.word	0x080047b9
 8004730:	080047b9 	.word	0x080047b9
 8004734:	080047b9 	.word	0x080047b9
 8004738:	080047b9 	.word	0x080047b9
 800473c:	080047b9 	.word	0x080047b9
 8004740:	080047b9 	.word	0x080047b9
 8004744:	080047a1 	.word	0x080047a1
 8004748:	080047b9 	.word	0x080047b9
 800474c:	080047b9 	.word	0x080047b9
 8004750:	080047b9 	.word	0x080047b9
 8004754:	080047b9 	.word	0x080047b9
 8004758:	080047b9 	.word	0x080047b9
 800475c:	080047b9 	.word	0x080047b9
 8004760:	080047b9 	.word	0x080047b9
 8004764:	080047a9 	.word	0x080047a9
 8004768:	080047b9 	.word	0x080047b9
 800476c:	080047b9 	.word	0x080047b9
 8004770:	080047b9 	.word	0x080047b9
 8004774:	080047b9 	.word	0x080047b9
 8004778:	080047b9 	.word	0x080047b9
 800477c:	080047b9 	.word	0x080047b9
 8004780:	080047b9 	.word	0x080047b9
 8004784:	080047b1 	.word	0x080047b1
 8004788:	2301      	movs	r3, #1
 800478a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800478e:	e0bc      	b.n	800490a <UART_SetConfig+0x5a6>
 8004790:	2304      	movs	r3, #4
 8004792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004796:	e0b8      	b.n	800490a <UART_SetConfig+0x5a6>
 8004798:	2308      	movs	r3, #8
 800479a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800479e:	e0b4      	b.n	800490a <UART_SetConfig+0x5a6>
 80047a0:	2310      	movs	r3, #16
 80047a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047a6:	e0b0      	b.n	800490a <UART_SetConfig+0x5a6>
 80047a8:	2320      	movs	r3, #32
 80047aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047ae:	e0ac      	b.n	800490a <UART_SetConfig+0x5a6>
 80047b0:	2340      	movs	r3, #64	@ 0x40
 80047b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047b6:	e0a8      	b.n	800490a <UART_SetConfig+0x5a6>
 80047b8:	2380      	movs	r3, #128	@ 0x80
 80047ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047be:	e0a4      	b.n	800490a <UART_SetConfig+0x5a6>
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a8f      	ldr	r2, [pc, #572]	@ (8004a04 <UART_SetConfig+0x6a0>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d130      	bne.n	800482c <UART_SetConfig+0x4c8>
 80047ca:	4b8d      	ldr	r3, [pc, #564]	@ (8004a00 <UART_SetConfig+0x69c>)
 80047cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	2b05      	cmp	r3, #5
 80047d4:	d826      	bhi.n	8004824 <UART_SetConfig+0x4c0>
 80047d6:	a201      	add	r2, pc, #4	@ (adr r2, 80047dc <UART_SetConfig+0x478>)
 80047d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047dc:	080047f5 	.word	0x080047f5
 80047e0:	080047fd 	.word	0x080047fd
 80047e4:	08004805 	.word	0x08004805
 80047e8:	0800480d 	.word	0x0800480d
 80047ec:	08004815 	.word	0x08004815
 80047f0:	0800481d 	.word	0x0800481d
 80047f4:	2300      	movs	r3, #0
 80047f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047fa:	e086      	b.n	800490a <UART_SetConfig+0x5a6>
 80047fc:	2304      	movs	r3, #4
 80047fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004802:	e082      	b.n	800490a <UART_SetConfig+0x5a6>
 8004804:	2308      	movs	r3, #8
 8004806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800480a:	e07e      	b.n	800490a <UART_SetConfig+0x5a6>
 800480c:	2310      	movs	r3, #16
 800480e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004812:	e07a      	b.n	800490a <UART_SetConfig+0x5a6>
 8004814:	2320      	movs	r3, #32
 8004816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800481a:	e076      	b.n	800490a <UART_SetConfig+0x5a6>
 800481c:	2340      	movs	r3, #64	@ 0x40
 800481e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004822:	e072      	b.n	800490a <UART_SetConfig+0x5a6>
 8004824:	2380      	movs	r3, #128	@ 0x80
 8004826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800482a:	e06e      	b.n	800490a <UART_SetConfig+0x5a6>
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a75      	ldr	r2, [pc, #468]	@ (8004a08 <UART_SetConfig+0x6a4>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d130      	bne.n	8004898 <UART_SetConfig+0x534>
 8004836:	4b72      	ldr	r3, [pc, #456]	@ (8004a00 <UART_SetConfig+0x69c>)
 8004838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800483a:	f003 0307 	and.w	r3, r3, #7
 800483e:	2b05      	cmp	r3, #5
 8004840:	d826      	bhi.n	8004890 <UART_SetConfig+0x52c>
 8004842:	a201      	add	r2, pc, #4	@ (adr r2, 8004848 <UART_SetConfig+0x4e4>)
 8004844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004848:	08004861 	.word	0x08004861
 800484c:	08004869 	.word	0x08004869
 8004850:	08004871 	.word	0x08004871
 8004854:	08004879 	.word	0x08004879
 8004858:	08004881 	.word	0x08004881
 800485c:	08004889 	.word	0x08004889
 8004860:	2300      	movs	r3, #0
 8004862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004866:	e050      	b.n	800490a <UART_SetConfig+0x5a6>
 8004868:	2304      	movs	r3, #4
 800486a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800486e:	e04c      	b.n	800490a <UART_SetConfig+0x5a6>
 8004870:	2308      	movs	r3, #8
 8004872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004876:	e048      	b.n	800490a <UART_SetConfig+0x5a6>
 8004878:	2310      	movs	r3, #16
 800487a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800487e:	e044      	b.n	800490a <UART_SetConfig+0x5a6>
 8004880:	2320      	movs	r3, #32
 8004882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004886:	e040      	b.n	800490a <UART_SetConfig+0x5a6>
 8004888:	2340      	movs	r3, #64	@ 0x40
 800488a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800488e:	e03c      	b.n	800490a <UART_SetConfig+0x5a6>
 8004890:	2380      	movs	r3, #128	@ 0x80
 8004892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004896:	e038      	b.n	800490a <UART_SetConfig+0x5a6>
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a5b      	ldr	r2, [pc, #364]	@ (8004a0c <UART_SetConfig+0x6a8>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d130      	bne.n	8004904 <UART_SetConfig+0x5a0>
 80048a2:	4b57      	ldr	r3, [pc, #348]	@ (8004a00 <UART_SetConfig+0x69c>)
 80048a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048a6:	f003 0307 	and.w	r3, r3, #7
 80048aa:	2b05      	cmp	r3, #5
 80048ac:	d826      	bhi.n	80048fc <UART_SetConfig+0x598>
 80048ae:	a201      	add	r2, pc, #4	@ (adr r2, 80048b4 <UART_SetConfig+0x550>)
 80048b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b4:	080048cd 	.word	0x080048cd
 80048b8:	080048d5 	.word	0x080048d5
 80048bc:	080048dd 	.word	0x080048dd
 80048c0:	080048e5 	.word	0x080048e5
 80048c4:	080048ed 	.word	0x080048ed
 80048c8:	080048f5 	.word	0x080048f5
 80048cc:	2302      	movs	r3, #2
 80048ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048d2:	e01a      	b.n	800490a <UART_SetConfig+0x5a6>
 80048d4:	2304      	movs	r3, #4
 80048d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048da:	e016      	b.n	800490a <UART_SetConfig+0x5a6>
 80048dc:	2308      	movs	r3, #8
 80048de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048e2:	e012      	b.n	800490a <UART_SetConfig+0x5a6>
 80048e4:	2310      	movs	r3, #16
 80048e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048ea:	e00e      	b.n	800490a <UART_SetConfig+0x5a6>
 80048ec:	2320      	movs	r3, #32
 80048ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048f2:	e00a      	b.n	800490a <UART_SetConfig+0x5a6>
 80048f4:	2340      	movs	r3, #64	@ 0x40
 80048f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048fa:	e006      	b.n	800490a <UART_SetConfig+0x5a6>
 80048fc:	2380      	movs	r3, #128	@ 0x80
 80048fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004902:	e002      	b.n	800490a <UART_SetConfig+0x5a6>
 8004904:	2380      	movs	r3, #128	@ 0x80
 8004906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a3f      	ldr	r2, [pc, #252]	@ (8004a0c <UART_SetConfig+0x6a8>)
 8004910:	4293      	cmp	r3, r2
 8004912:	f040 80f8 	bne.w	8004b06 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004916:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800491a:	2b20      	cmp	r3, #32
 800491c:	dc46      	bgt.n	80049ac <UART_SetConfig+0x648>
 800491e:	2b02      	cmp	r3, #2
 8004920:	f2c0 8082 	blt.w	8004a28 <UART_SetConfig+0x6c4>
 8004924:	3b02      	subs	r3, #2
 8004926:	2b1e      	cmp	r3, #30
 8004928:	d87e      	bhi.n	8004a28 <UART_SetConfig+0x6c4>
 800492a:	a201      	add	r2, pc, #4	@ (adr r2, 8004930 <UART_SetConfig+0x5cc>)
 800492c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004930:	080049b3 	.word	0x080049b3
 8004934:	08004a29 	.word	0x08004a29
 8004938:	080049bb 	.word	0x080049bb
 800493c:	08004a29 	.word	0x08004a29
 8004940:	08004a29 	.word	0x08004a29
 8004944:	08004a29 	.word	0x08004a29
 8004948:	080049cb 	.word	0x080049cb
 800494c:	08004a29 	.word	0x08004a29
 8004950:	08004a29 	.word	0x08004a29
 8004954:	08004a29 	.word	0x08004a29
 8004958:	08004a29 	.word	0x08004a29
 800495c:	08004a29 	.word	0x08004a29
 8004960:	08004a29 	.word	0x08004a29
 8004964:	08004a29 	.word	0x08004a29
 8004968:	080049db 	.word	0x080049db
 800496c:	08004a29 	.word	0x08004a29
 8004970:	08004a29 	.word	0x08004a29
 8004974:	08004a29 	.word	0x08004a29
 8004978:	08004a29 	.word	0x08004a29
 800497c:	08004a29 	.word	0x08004a29
 8004980:	08004a29 	.word	0x08004a29
 8004984:	08004a29 	.word	0x08004a29
 8004988:	08004a29 	.word	0x08004a29
 800498c:	08004a29 	.word	0x08004a29
 8004990:	08004a29 	.word	0x08004a29
 8004994:	08004a29 	.word	0x08004a29
 8004998:	08004a29 	.word	0x08004a29
 800499c:	08004a29 	.word	0x08004a29
 80049a0:	08004a29 	.word	0x08004a29
 80049a4:	08004a29 	.word	0x08004a29
 80049a8:	08004a1b 	.word	0x08004a1b
 80049ac:	2b40      	cmp	r3, #64	@ 0x40
 80049ae:	d037      	beq.n	8004a20 <UART_SetConfig+0x6bc>
 80049b0:	e03a      	b.n	8004a28 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80049b2:	f7fe ffd7 	bl	8003964 <HAL_RCCEx_GetD3PCLK1Freq>
 80049b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80049b8:	e03c      	b.n	8004a34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80049be:	4618      	mov	r0, r3
 80049c0:	f7fe ffe6 	bl	8003990 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80049c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80049c8:	e034      	b.n	8004a34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049ca:	f107 0318 	add.w	r3, r7, #24
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7ff f932 	bl	8003c38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80049d8:	e02c      	b.n	8004a34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049da:	4b09      	ldr	r3, [pc, #36]	@ (8004a00 <UART_SetConfig+0x69c>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0320 	and.w	r3, r3, #32
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d016      	beq.n	8004a14 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80049e6:	4b06      	ldr	r3, [pc, #24]	@ (8004a00 <UART_SetConfig+0x69c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	08db      	lsrs	r3, r3, #3
 80049ec:	f003 0303 	and.w	r3, r3, #3
 80049f0:	4a07      	ldr	r2, [pc, #28]	@ (8004a10 <UART_SetConfig+0x6ac>)
 80049f2:	fa22 f303 	lsr.w	r3, r2, r3
 80049f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80049f8:	e01c      	b.n	8004a34 <UART_SetConfig+0x6d0>
 80049fa:	bf00      	nop
 80049fc:	40011400 	.word	0x40011400
 8004a00:	58024400 	.word	0x58024400
 8004a04:	40007800 	.word	0x40007800
 8004a08:	40007c00 	.word	0x40007c00
 8004a0c:	58000c00 	.word	0x58000c00
 8004a10:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004a14:	4b9d      	ldr	r3, [pc, #628]	@ (8004c8c <UART_SetConfig+0x928>)
 8004a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a18:	e00c      	b.n	8004a34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004a1a:	4b9d      	ldr	r3, [pc, #628]	@ (8004c90 <UART_SetConfig+0x92c>)
 8004a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a1e:	e009      	b.n	8004a34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a26:	e005      	b.n	8004a34 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004a32:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f000 81de 	beq.w	8004df8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a40:	4a94      	ldr	r2, [pc, #592]	@ (8004c94 <UART_SetConfig+0x930>)
 8004a42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a46:	461a      	mov	r2, r3
 8004a48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a4e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	4613      	mov	r3, r2
 8004a56:	005b      	lsls	r3, r3, #1
 8004a58:	4413      	add	r3, r2
 8004a5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d305      	bcc.n	8004a6c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d903      	bls.n	8004a74 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004a72:	e1c1      	b.n	8004df8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a76:	2200      	movs	r2, #0
 8004a78:	60bb      	str	r3, [r7, #8]
 8004a7a:	60fa      	str	r2, [r7, #12]
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a80:	4a84      	ldr	r2, [pc, #528]	@ (8004c94 <UART_SetConfig+0x930>)
 8004a82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	2200      	movs	r2, #0
 8004a8a:	603b      	str	r3, [r7, #0]
 8004a8c:	607a      	str	r2, [r7, #4]
 8004a8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a96:	f7fb fc73 	bl	8000380 <__aeabi_uldivmod>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	4610      	mov	r0, r2
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	f04f 0200 	mov.w	r2, #0
 8004aa6:	f04f 0300 	mov.w	r3, #0
 8004aaa:	020b      	lsls	r3, r1, #8
 8004aac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004ab0:	0202      	lsls	r2, r0, #8
 8004ab2:	6979      	ldr	r1, [r7, #20]
 8004ab4:	6849      	ldr	r1, [r1, #4]
 8004ab6:	0849      	lsrs	r1, r1, #1
 8004ab8:	2000      	movs	r0, #0
 8004aba:	460c      	mov	r4, r1
 8004abc:	4605      	mov	r5, r0
 8004abe:	eb12 0804 	adds.w	r8, r2, r4
 8004ac2:	eb43 0905 	adc.w	r9, r3, r5
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	469a      	mov	sl, r3
 8004ace:	4693      	mov	fp, r2
 8004ad0:	4652      	mov	r2, sl
 8004ad2:	465b      	mov	r3, fp
 8004ad4:	4640      	mov	r0, r8
 8004ad6:	4649      	mov	r1, r9
 8004ad8:	f7fb fc52 	bl	8000380 <__aeabi_uldivmod>
 8004adc:	4602      	mov	r2, r0
 8004ade:	460b      	mov	r3, r1
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ae6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004aea:	d308      	bcc.n	8004afe <UART_SetConfig+0x79a>
 8004aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004af2:	d204      	bcs.n	8004afe <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004afa:	60da      	str	r2, [r3, #12]
 8004afc:	e17c      	b.n	8004df8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004b04:	e178      	b.n	8004df8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	69db      	ldr	r3, [r3, #28]
 8004b0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b0e:	f040 80c5 	bne.w	8004c9c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004b12:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004b16:	2b20      	cmp	r3, #32
 8004b18:	dc48      	bgt.n	8004bac <UART_SetConfig+0x848>
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	db7b      	blt.n	8004c16 <UART_SetConfig+0x8b2>
 8004b1e:	2b20      	cmp	r3, #32
 8004b20:	d879      	bhi.n	8004c16 <UART_SetConfig+0x8b2>
 8004b22:	a201      	add	r2, pc, #4	@ (adr r2, 8004b28 <UART_SetConfig+0x7c4>)
 8004b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b28:	08004bb3 	.word	0x08004bb3
 8004b2c:	08004bbb 	.word	0x08004bbb
 8004b30:	08004c17 	.word	0x08004c17
 8004b34:	08004c17 	.word	0x08004c17
 8004b38:	08004bc3 	.word	0x08004bc3
 8004b3c:	08004c17 	.word	0x08004c17
 8004b40:	08004c17 	.word	0x08004c17
 8004b44:	08004c17 	.word	0x08004c17
 8004b48:	08004bd3 	.word	0x08004bd3
 8004b4c:	08004c17 	.word	0x08004c17
 8004b50:	08004c17 	.word	0x08004c17
 8004b54:	08004c17 	.word	0x08004c17
 8004b58:	08004c17 	.word	0x08004c17
 8004b5c:	08004c17 	.word	0x08004c17
 8004b60:	08004c17 	.word	0x08004c17
 8004b64:	08004c17 	.word	0x08004c17
 8004b68:	08004be3 	.word	0x08004be3
 8004b6c:	08004c17 	.word	0x08004c17
 8004b70:	08004c17 	.word	0x08004c17
 8004b74:	08004c17 	.word	0x08004c17
 8004b78:	08004c17 	.word	0x08004c17
 8004b7c:	08004c17 	.word	0x08004c17
 8004b80:	08004c17 	.word	0x08004c17
 8004b84:	08004c17 	.word	0x08004c17
 8004b88:	08004c17 	.word	0x08004c17
 8004b8c:	08004c17 	.word	0x08004c17
 8004b90:	08004c17 	.word	0x08004c17
 8004b94:	08004c17 	.word	0x08004c17
 8004b98:	08004c17 	.word	0x08004c17
 8004b9c:	08004c17 	.word	0x08004c17
 8004ba0:	08004c17 	.word	0x08004c17
 8004ba4:	08004c17 	.word	0x08004c17
 8004ba8:	08004c09 	.word	0x08004c09
 8004bac:	2b40      	cmp	r3, #64	@ 0x40
 8004bae:	d02e      	beq.n	8004c0e <UART_SetConfig+0x8aa>
 8004bb0:	e031      	b.n	8004c16 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bb2:	f7fd fca1 	bl	80024f8 <HAL_RCC_GetPCLK1Freq>
 8004bb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004bb8:	e033      	b.n	8004c22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bba:	f7fd fcb3 	bl	8002524 <HAL_RCC_GetPCLK2Freq>
 8004bbe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004bc0:	e02f      	b.n	8004c22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fe fee2 	bl	8003990 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004bd0:	e027      	b.n	8004c22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004bd2:	f107 0318 	add.w	r3, r7, #24
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7ff f82e 	bl	8003c38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004be0:	e01f      	b.n	8004c22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004be2:	4b2d      	ldr	r3, [pc, #180]	@ (8004c98 <UART_SetConfig+0x934>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0320 	and.w	r3, r3, #32
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d009      	beq.n	8004c02 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004bee:	4b2a      	ldr	r3, [pc, #168]	@ (8004c98 <UART_SetConfig+0x934>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	08db      	lsrs	r3, r3, #3
 8004bf4:	f003 0303 	and.w	r3, r3, #3
 8004bf8:	4a24      	ldr	r2, [pc, #144]	@ (8004c8c <UART_SetConfig+0x928>)
 8004bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8004bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c00:	e00f      	b.n	8004c22 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004c02:	4b22      	ldr	r3, [pc, #136]	@ (8004c8c <UART_SetConfig+0x928>)
 8004c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c06:	e00c      	b.n	8004c22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004c08:	4b21      	ldr	r3, [pc, #132]	@ (8004c90 <UART_SetConfig+0x92c>)
 8004c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c0c:	e009      	b.n	8004c22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c14:	e005      	b.n	8004c22 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004c16:	2300      	movs	r3, #0
 8004c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004c20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 80e7 	beq.w	8004df8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2e:	4a19      	ldr	r2, [pc, #100]	@ (8004c94 <UART_SetConfig+0x930>)
 8004c30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c34:	461a      	mov	r2, r3
 8004c36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c38:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c3c:	005a      	lsls	r2, r3, #1
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	085b      	lsrs	r3, r3, #1
 8004c44:	441a      	add	r2, r3
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c52:	2b0f      	cmp	r3, #15
 8004c54:	d916      	bls.n	8004c84 <UART_SetConfig+0x920>
 8004c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c5c:	d212      	bcs.n	8004c84 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	f023 030f 	bic.w	r3, r3, #15
 8004c66:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c6a:	085b      	lsrs	r3, r3, #1
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	f003 0307 	and.w	r3, r3, #7
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004c76:	4313      	orrs	r3, r2
 8004c78:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004c80:	60da      	str	r2, [r3, #12]
 8004c82:	e0b9      	b.n	8004df8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004c8a:	e0b5      	b.n	8004df8 <UART_SetConfig+0xa94>
 8004c8c:	03d09000 	.word	0x03d09000
 8004c90:	003d0900 	.word	0x003d0900
 8004c94:	08006464 	.word	0x08006464
 8004c98:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c9c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004ca0:	2b20      	cmp	r3, #32
 8004ca2:	dc49      	bgt.n	8004d38 <UART_SetConfig+0x9d4>
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	db7c      	blt.n	8004da2 <UART_SetConfig+0xa3e>
 8004ca8:	2b20      	cmp	r3, #32
 8004caa:	d87a      	bhi.n	8004da2 <UART_SetConfig+0xa3e>
 8004cac:	a201      	add	r2, pc, #4	@ (adr r2, 8004cb4 <UART_SetConfig+0x950>)
 8004cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb2:	bf00      	nop
 8004cb4:	08004d3f 	.word	0x08004d3f
 8004cb8:	08004d47 	.word	0x08004d47
 8004cbc:	08004da3 	.word	0x08004da3
 8004cc0:	08004da3 	.word	0x08004da3
 8004cc4:	08004d4f 	.word	0x08004d4f
 8004cc8:	08004da3 	.word	0x08004da3
 8004ccc:	08004da3 	.word	0x08004da3
 8004cd0:	08004da3 	.word	0x08004da3
 8004cd4:	08004d5f 	.word	0x08004d5f
 8004cd8:	08004da3 	.word	0x08004da3
 8004cdc:	08004da3 	.word	0x08004da3
 8004ce0:	08004da3 	.word	0x08004da3
 8004ce4:	08004da3 	.word	0x08004da3
 8004ce8:	08004da3 	.word	0x08004da3
 8004cec:	08004da3 	.word	0x08004da3
 8004cf0:	08004da3 	.word	0x08004da3
 8004cf4:	08004d6f 	.word	0x08004d6f
 8004cf8:	08004da3 	.word	0x08004da3
 8004cfc:	08004da3 	.word	0x08004da3
 8004d00:	08004da3 	.word	0x08004da3
 8004d04:	08004da3 	.word	0x08004da3
 8004d08:	08004da3 	.word	0x08004da3
 8004d0c:	08004da3 	.word	0x08004da3
 8004d10:	08004da3 	.word	0x08004da3
 8004d14:	08004da3 	.word	0x08004da3
 8004d18:	08004da3 	.word	0x08004da3
 8004d1c:	08004da3 	.word	0x08004da3
 8004d20:	08004da3 	.word	0x08004da3
 8004d24:	08004da3 	.word	0x08004da3
 8004d28:	08004da3 	.word	0x08004da3
 8004d2c:	08004da3 	.word	0x08004da3
 8004d30:	08004da3 	.word	0x08004da3
 8004d34:	08004d95 	.word	0x08004d95
 8004d38:	2b40      	cmp	r3, #64	@ 0x40
 8004d3a:	d02e      	beq.n	8004d9a <UART_SetConfig+0xa36>
 8004d3c:	e031      	b.n	8004da2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d3e:	f7fd fbdb 	bl	80024f8 <HAL_RCC_GetPCLK1Freq>
 8004d42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004d44:	e033      	b.n	8004dae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d46:	f7fd fbed 	bl	8002524 <HAL_RCC_GetPCLK2Freq>
 8004d4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004d4c:	e02f      	b.n	8004dae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fe fe1c 	bl	8003990 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d5c:	e027      	b.n	8004dae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d5e:	f107 0318 	add.w	r3, r7, #24
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fe ff68 	bl	8003c38 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d6c:	e01f      	b.n	8004dae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d6e:	4b2d      	ldr	r3, [pc, #180]	@ (8004e24 <UART_SetConfig+0xac0>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0320 	and.w	r3, r3, #32
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d009      	beq.n	8004d8e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004d7a:	4b2a      	ldr	r3, [pc, #168]	@ (8004e24 <UART_SetConfig+0xac0>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	08db      	lsrs	r3, r3, #3
 8004d80:	f003 0303 	and.w	r3, r3, #3
 8004d84:	4a28      	ldr	r2, [pc, #160]	@ (8004e28 <UART_SetConfig+0xac4>)
 8004d86:	fa22 f303 	lsr.w	r3, r2, r3
 8004d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004d8c:	e00f      	b.n	8004dae <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004d8e:	4b26      	ldr	r3, [pc, #152]	@ (8004e28 <UART_SetConfig+0xac4>)
 8004d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d92:	e00c      	b.n	8004dae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004d94:	4b25      	ldr	r3, [pc, #148]	@ (8004e2c <UART_SetConfig+0xac8>)
 8004d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d98:	e009      	b.n	8004dae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004da0:	e005      	b.n	8004dae <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004dac:	bf00      	nop
    }

    if (pclk != 0U)
 8004dae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d021      	beq.n	8004df8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db8:	4a1d      	ldr	r2, [pc, #116]	@ (8004e30 <UART_SetConfig+0xacc>)
 8004dba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dc2:	fbb3 f2f2 	udiv	r2, r3, r2
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	085b      	lsrs	r3, r3, #1
 8004dcc:	441a      	add	r2, r3
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dda:	2b0f      	cmp	r3, #15
 8004ddc:	d909      	bls.n	8004df2 <UART_SetConfig+0xa8e>
 8004dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004de0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004de4:	d205      	bcs.n	8004df2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	60da      	str	r2, [r3, #12]
 8004df0:	e002      	b.n	8004df8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2200      	movs	r2, #0
 8004e12:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004e14:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3748      	adds	r7, #72	@ 0x48
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e22:	bf00      	nop
 8004e24:	58024400 	.word	0x58024400
 8004e28:	03d09000 	.word	0x03d09000
 8004e2c:	003d0900 	.word	0x003d0900
 8004e30:	08006464 	.word	0x08006464

08004e34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e40:	f003 0308 	and.w	r3, r3, #8
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00a      	beq.n	8004e5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00a      	beq.n	8004e80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00a      	beq.n	8004ea2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea6:	f003 0304 	and.w	r3, r3, #4
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00a      	beq.n	8004ec4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec8:	f003 0310 	and.w	r3, r3, #16
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00a      	beq.n	8004ee6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eea:	f003 0320 	and.w	r3, r3, #32
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00a      	beq.n	8004f08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d01a      	beq.n	8004f4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f32:	d10a      	bne.n	8004f4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00a      	beq.n	8004f6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	605a      	str	r2, [r3, #4]
  }
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b098      	sub	sp, #96	@ 0x60
 8004f7c:	af02      	add	r7, sp, #8
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f88:	f7fb ffd8 	bl	8000f3c <HAL_GetTick>
 8004f8c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0308 	and.w	r3, r3, #8
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	d12f      	bne.n	8004ffc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f88e 	bl	80050cc <UART_WaitOnFlagUntilTimeout>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d022      	beq.n	8004ffc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fbe:	e853 3f00 	ldrex	r3, [r3]
 8004fc2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fca:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fd6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004fda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fdc:	e841 2300 	strex	r3, r2, [r1]
 8004fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004fe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1e6      	bne.n	8004fb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2220      	movs	r2, #32
 8004fec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e063      	b.n	80050c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0304 	and.w	r3, r3, #4
 8005006:	2b04      	cmp	r3, #4
 8005008:	d149      	bne.n	800509e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800500a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005012:	2200      	movs	r2, #0
 8005014:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 f857 	bl	80050cc <UART_WaitOnFlagUntilTimeout>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d03c      	beq.n	800509e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502c:	e853 3f00 	ldrex	r3, [r3]
 8005030:	623b      	str	r3, [r7, #32]
   return(result);
 8005032:	6a3b      	ldr	r3, [r7, #32]
 8005034:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005038:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	461a      	mov	r2, r3
 8005040:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005042:	633b      	str	r3, [r7, #48]	@ 0x30
 8005044:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005046:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005048:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800504a:	e841 2300 	strex	r3, r2, [r1]
 800504e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1e6      	bne.n	8005024 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	3308      	adds	r3, #8
 800505c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	e853 3f00 	ldrex	r3, [r3]
 8005064:	60fb      	str	r3, [r7, #12]
   return(result);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f023 0301 	bic.w	r3, r3, #1
 800506c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	3308      	adds	r3, #8
 8005074:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005076:	61fa      	str	r2, [r7, #28]
 8005078:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507a:	69b9      	ldr	r1, [r7, #24]
 800507c:	69fa      	ldr	r2, [r7, #28]
 800507e:	e841 2300 	strex	r3, r2, [r1]
 8005082:	617b      	str	r3, [r7, #20]
   return(result);
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1e5      	bne.n	8005056 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2220      	movs	r2, #32
 800508e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e012      	b.n	80050c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2220      	movs	r2, #32
 80050a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2220      	movs	r2, #32
 80050aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3758      	adds	r7, #88	@ 0x58
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	603b      	str	r3, [r7, #0]
 80050d8:	4613      	mov	r3, r2
 80050da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050dc:	e04f      	b.n	800517e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e4:	d04b      	beq.n	800517e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050e6:	f7fb ff29 	bl	8000f3c <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d302      	bcc.n	80050fc <UART_WaitOnFlagUntilTimeout+0x30>
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e04e      	b.n	800519e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0304 	and.w	r3, r3, #4
 800510a:	2b00      	cmp	r3, #0
 800510c:	d037      	beq.n	800517e <UART_WaitOnFlagUntilTimeout+0xb2>
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	2b80      	cmp	r3, #128	@ 0x80
 8005112:	d034      	beq.n	800517e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	2b40      	cmp	r3, #64	@ 0x40
 8005118:	d031      	beq.n	800517e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	f003 0308 	and.w	r3, r3, #8
 8005124:	2b08      	cmp	r3, #8
 8005126:	d110      	bne.n	800514a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2208      	movs	r2, #8
 800512e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f000 f839 	bl	80051a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2208      	movs	r2, #8
 800513a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e029      	b.n	800519e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	69db      	ldr	r3, [r3, #28]
 8005150:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005154:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005158:	d111      	bne.n	800517e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005162:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f000 f81f 	bl	80051a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2220      	movs	r2, #32
 800516e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e00f      	b.n	800519e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	69da      	ldr	r2, [r3, #28]
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	4013      	ands	r3, r2
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	429a      	cmp	r2, r3
 800518c:	bf0c      	ite	eq
 800518e:	2301      	moveq	r3, #1
 8005190:	2300      	movne	r3, #0
 8005192:	b2db      	uxtb	r3, r3
 8005194:	461a      	mov	r2, r3
 8005196:	79fb      	ldrb	r3, [r7, #7]
 8005198:	429a      	cmp	r2, r3
 800519a:	d0a0      	beq.n	80050de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
	...

080051a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b095      	sub	sp, #84	@ 0x54
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051b8:	e853 3f00 	ldrex	r3, [r3]
 80051bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	461a      	mov	r2, r3
 80051cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80051d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051d6:	e841 2300 	strex	r3, r2, [r1]
 80051da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1e6      	bne.n	80051b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	3308      	adds	r3, #8
 80051e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	e853 3f00 	ldrex	r3, [r3]
 80051f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80051f2:	69fa      	ldr	r2, [r7, #28]
 80051f4:	4b1e      	ldr	r3, [pc, #120]	@ (8005270 <UART_EndRxTransfer+0xc8>)
 80051f6:	4013      	ands	r3, r2
 80051f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	3308      	adds	r3, #8
 8005200:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005202:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005204:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005206:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005208:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800520a:	e841 2300 	strex	r3, r2, [r1]
 800520e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1e5      	bne.n	80051e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800521a:	2b01      	cmp	r3, #1
 800521c:	d118      	bne.n	8005250 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	e853 3f00 	ldrex	r3, [r3]
 800522a:	60bb      	str	r3, [r7, #8]
   return(result);
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	f023 0310 	bic.w	r3, r3, #16
 8005232:	647b      	str	r3, [r7, #68]	@ 0x44
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	461a      	mov	r2, r3
 800523a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800523c:	61bb      	str	r3, [r7, #24]
 800523e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005240:	6979      	ldr	r1, [r7, #20]
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	e841 2300 	strex	r3, r2, [r1]
 8005248:	613b      	str	r3, [r7, #16]
   return(result);
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1e6      	bne.n	800521e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2220      	movs	r2, #32
 8005254:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005264:	bf00      	nop
 8005266:	3754      	adds	r7, #84	@ 0x54
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	effffffe 	.word	0xeffffffe

08005274 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005282:	2b01      	cmp	r3, #1
 8005284:	d101      	bne.n	800528a <HAL_UARTEx_DisableFifoMode+0x16>
 8005286:	2302      	movs	r3, #2
 8005288:	e027      	b.n	80052da <HAL_UARTEx_DisableFifoMode+0x66>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2224      	movs	r2, #36	@ 0x24
 8005296:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f022 0201 	bic.w	r2, r2, #1
 80052b0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80052b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2220      	movs	r2, #32
 80052cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b084      	sub	sp, #16
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
 80052ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d101      	bne.n	80052fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80052fa:	2302      	movs	r3, #2
 80052fc:	e02d      	b.n	800535a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2224      	movs	r2, #36	@ 0x24
 800530a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f022 0201 	bic.w	r2, r2, #1
 8005324:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f850 	bl	80053e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2220      	movs	r2, #32
 800534c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b084      	sub	sp, #16
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
 800536a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005372:	2b01      	cmp	r3, #1
 8005374:	d101      	bne.n	800537a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005376:	2302      	movs	r3, #2
 8005378:	e02d      	b.n	80053d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2224      	movs	r2, #36	@ 0x24
 8005386:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f022 0201 	bic.w	r2, r2, #1
 80053a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f812 	bl	80053e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2220      	movs	r2, #32
 80053c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
	...

080053e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d108      	bne.n	8005402 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005400:	e031      	b.n	8005466 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005402:	2310      	movs	r3, #16
 8005404:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005406:	2310      	movs	r3, #16
 8005408:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	0e5b      	lsrs	r3, r3, #25
 8005412:	b2db      	uxtb	r3, r3
 8005414:	f003 0307 	and.w	r3, r3, #7
 8005418:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	0f5b      	lsrs	r3, r3, #29
 8005422:	b2db      	uxtb	r3, r3
 8005424:	f003 0307 	and.w	r3, r3, #7
 8005428:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800542a:	7bbb      	ldrb	r3, [r7, #14]
 800542c:	7b3a      	ldrb	r2, [r7, #12]
 800542e:	4911      	ldr	r1, [pc, #68]	@ (8005474 <UARTEx_SetNbDataToProcess+0x94>)
 8005430:	5c8a      	ldrb	r2, [r1, r2]
 8005432:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005436:	7b3a      	ldrb	r2, [r7, #12]
 8005438:	490f      	ldr	r1, [pc, #60]	@ (8005478 <UARTEx_SetNbDataToProcess+0x98>)
 800543a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800543c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005440:	b29a      	uxth	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005448:	7bfb      	ldrb	r3, [r7, #15]
 800544a:	7b7a      	ldrb	r2, [r7, #13]
 800544c:	4909      	ldr	r1, [pc, #36]	@ (8005474 <UARTEx_SetNbDataToProcess+0x94>)
 800544e:	5c8a      	ldrb	r2, [r1, r2]
 8005450:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005454:	7b7a      	ldrb	r2, [r7, #13]
 8005456:	4908      	ldr	r1, [pc, #32]	@ (8005478 <UARTEx_SetNbDataToProcess+0x98>)
 8005458:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800545a:	fb93 f3f2 	sdiv	r3, r3, r2
 800545e:	b29a      	uxth	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005466:	bf00      	nop
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	0800647c 	.word	0x0800647c
 8005478:	08006484 	.word	0x08006484

0800547c <std>:
 800547c:	2300      	movs	r3, #0
 800547e:	b510      	push	{r4, lr}
 8005480:	4604      	mov	r4, r0
 8005482:	e9c0 3300 	strd	r3, r3, [r0]
 8005486:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800548a:	6083      	str	r3, [r0, #8]
 800548c:	8181      	strh	r1, [r0, #12]
 800548e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005490:	81c2      	strh	r2, [r0, #14]
 8005492:	6183      	str	r3, [r0, #24]
 8005494:	4619      	mov	r1, r3
 8005496:	2208      	movs	r2, #8
 8005498:	305c      	adds	r0, #92	@ 0x5c
 800549a:	f000 f9f9 	bl	8005890 <memset>
 800549e:	4b0d      	ldr	r3, [pc, #52]	@ (80054d4 <std+0x58>)
 80054a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80054a2:	4b0d      	ldr	r3, [pc, #52]	@ (80054d8 <std+0x5c>)
 80054a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80054a6:	4b0d      	ldr	r3, [pc, #52]	@ (80054dc <std+0x60>)
 80054a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80054aa:	4b0d      	ldr	r3, [pc, #52]	@ (80054e0 <std+0x64>)
 80054ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80054ae:	4b0d      	ldr	r3, [pc, #52]	@ (80054e4 <std+0x68>)
 80054b0:	6224      	str	r4, [r4, #32]
 80054b2:	429c      	cmp	r4, r3
 80054b4:	d006      	beq.n	80054c4 <std+0x48>
 80054b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80054ba:	4294      	cmp	r4, r2
 80054bc:	d002      	beq.n	80054c4 <std+0x48>
 80054be:	33d0      	adds	r3, #208	@ 0xd0
 80054c0:	429c      	cmp	r4, r3
 80054c2:	d105      	bne.n	80054d0 <std+0x54>
 80054c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80054c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054cc:	f000 ba58 	b.w	8005980 <__retarget_lock_init_recursive>
 80054d0:	bd10      	pop	{r4, pc}
 80054d2:	bf00      	nop
 80054d4:	080056e1 	.word	0x080056e1
 80054d8:	08005703 	.word	0x08005703
 80054dc:	0800573b 	.word	0x0800573b
 80054e0:	0800575f 	.word	0x0800575f
 80054e4:	24000124 	.word	0x24000124

080054e8 <stdio_exit_handler>:
 80054e8:	4a02      	ldr	r2, [pc, #8]	@ (80054f4 <stdio_exit_handler+0xc>)
 80054ea:	4903      	ldr	r1, [pc, #12]	@ (80054f8 <stdio_exit_handler+0x10>)
 80054ec:	4803      	ldr	r0, [pc, #12]	@ (80054fc <stdio_exit_handler+0x14>)
 80054ee:	f000 b869 	b.w	80055c4 <_fwalk_sglue>
 80054f2:	bf00      	nop
 80054f4:	24000010 	.word	0x24000010
 80054f8:	0800621d 	.word	0x0800621d
 80054fc:	24000020 	.word	0x24000020

08005500 <cleanup_stdio>:
 8005500:	6841      	ldr	r1, [r0, #4]
 8005502:	4b0c      	ldr	r3, [pc, #48]	@ (8005534 <cleanup_stdio+0x34>)
 8005504:	4299      	cmp	r1, r3
 8005506:	b510      	push	{r4, lr}
 8005508:	4604      	mov	r4, r0
 800550a:	d001      	beq.n	8005510 <cleanup_stdio+0x10>
 800550c:	f000 fe86 	bl	800621c <_fflush_r>
 8005510:	68a1      	ldr	r1, [r4, #8]
 8005512:	4b09      	ldr	r3, [pc, #36]	@ (8005538 <cleanup_stdio+0x38>)
 8005514:	4299      	cmp	r1, r3
 8005516:	d002      	beq.n	800551e <cleanup_stdio+0x1e>
 8005518:	4620      	mov	r0, r4
 800551a:	f000 fe7f 	bl	800621c <_fflush_r>
 800551e:	68e1      	ldr	r1, [r4, #12]
 8005520:	4b06      	ldr	r3, [pc, #24]	@ (800553c <cleanup_stdio+0x3c>)
 8005522:	4299      	cmp	r1, r3
 8005524:	d004      	beq.n	8005530 <cleanup_stdio+0x30>
 8005526:	4620      	mov	r0, r4
 8005528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800552c:	f000 be76 	b.w	800621c <_fflush_r>
 8005530:	bd10      	pop	{r4, pc}
 8005532:	bf00      	nop
 8005534:	24000124 	.word	0x24000124
 8005538:	2400018c 	.word	0x2400018c
 800553c:	240001f4 	.word	0x240001f4

08005540 <global_stdio_init.part.0>:
 8005540:	b510      	push	{r4, lr}
 8005542:	4b0b      	ldr	r3, [pc, #44]	@ (8005570 <global_stdio_init.part.0+0x30>)
 8005544:	4c0b      	ldr	r4, [pc, #44]	@ (8005574 <global_stdio_init.part.0+0x34>)
 8005546:	4a0c      	ldr	r2, [pc, #48]	@ (8005578 <global_stdio_init.part.0+0x38>)
 8005548:	601a      	str	r2, [r3, #0]
 800554a:	4620      	mov	r0, r4
 800554c:	2200      	movs	r2, #0
 800554e:	2104      	movs	r1, #4
 8005550:	f7ff ff94 	bl	800547c <std>
 8005554:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005558:	2201      	movs	r2, #1
 800555a:	2109      	movs	r1, #9
 800555c:	f7ff ff8e 	bl	800547c <std>
 8005560:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005564:	2202      	movs	r2, #2
 8005566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800556a:	2112      	movs	r1, #18
 800556c:	f7ff bf86 	b.w	800547c <std>
 8005570:	2400025c 	.word	0x2400025c
 8005574:	24000124 	.word	0x24000124
 8005578:	080054e9 	.word	0x080054e9

0800557c <__sfp_lock_acquire>:
 800557c:	4801      	ldr	r0, [pc, #4]	@ (8005584 <__sfp_lock_acquire+0x8>)
 800557e:	f000 ba00 	b.w	8005982 <__retarget_lock_acquire_recursive>
 8005582:	bf00      	nop
 8005584:	24000265 	.word	0x24000265

08005588 <__sfp_lock_release>:
 8005588:	4801      	ldr	r0, [pc, #4]	@ (8005590 <__sfp_lock_release+0x8>)
 800558a:	f000 b9fb 	b.w	8005984 <__retarget_lock_release_recursive>
 800558e:	bf00      	nop
 8005590:	24000265 	.word	0x24000265

08005594 <__sinit>:
 8005594:	b510      	push	{r4, lr}
 8005596:	4604      	mov	r4, r0
 8005598:	f7ff fff0 	bl	800557c <__sfp_lock_acquire>
 800559c:	6a23      	ldr	r3, [r4, #32]
 800559e:	b11b      	cbz	r3, 80055a8 <__sinit+0x14>
 80055a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055a4:	f7ff bff0 	b.w	8005588 <__sfp_lock_release>
 80055a8:	4b04      	ldr	r3, [pc, #16]	@ (80055bc <__sinit+0x28>)
 80055aa:	6223      	str	r3, [r4, #32]
 80055ac:	4b04      	ldr	r3, [pc, #16]	@ (80055c0 <__sinit+0x2c>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1f5      	bne.n	80055a0 <__sinit+0xc>
 80055b4:	f7ff ffc4 	bl	8005540 <global_stdio_init.part.0>
 80055b8:	e7f2      	b.n	80055a0 <__sinit+0xc>
 80055ba:	bf00      	nop
 80055bc:	08005501 	.word	0x08005501
 80055c0:	2400025c 	.word	0x2400025c

080055c4 <_fwalk_sglue>:
 80055c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055c8:	4607      	mov	r7, r0
 80055ca:	4688      	mov	r8, r1
 80055cc:	4614      	mov	r4, r2
 80055ce:	2600      	movs	r6, #0
 80055d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80055d4:	f1b9 0901 	subs.w	r9, r9, #1
 80055d8:	d505      	bpl.n	80055e6 <_fwalk_sglue+0x22>
 80055da:	6824      	ldr	r4, [r4, #0]
 80055dc:	2c00      	cmp	r4, #0
 80055de:	d1f7      	bne.n	80055d0 <_fwalk_sglue+0xc>
 80055e0:	4630      	mov	r0, r6
 80055e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055e6:	89ab      	ldrh	r3, [r5, #12]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d907      	bls.n	80055fc <_fwalk_sglue+0x38>
 80055ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80055f0:	3301      	adds	r3, #1
 80055f2:	d003      	beq.n	80055fc <_fwalk_sglue+0x38>
 80055f4:	4629      	mov	r1, r5
 80055f6:	4638      	mov	r0, r7
 80055f8:	47c0      	blx	r8
 80055fa:	4306      	orrs	r6, r0
 80055fc:	3568      	adds	r5, #104	@ 0x68
 80055fe:	e7e9      	b.n	80055d4 <_fwalk_sglue+0x10>

08005600 <iprintf>:
 8005600:	b40f      	push	{r0, r1, r2, r3}
 8005602:	b507      	push	{r0, r1, r2, lr}
 8005604:	4906      	ldr	r1, [pc, #24]	@ (8005620 <iprintf+0x20>)
 8005606:	ab04      	add	r3, sp, #16
 8005608:	6808      	ldr	r0, [r1, #0]
 800560a:	f853 2b04 	ldr.w	r2, [r3], #4
 800560e:	6881      	ldr	r1, [r0, #8]
 8005610:	9301      	str	r3, [sp, #4]
 8005612:	f000 fadb 	bl	8005bcc <_vfiprintf_r>
 8005616:	b003      	add	sp, #12
 8005618:	f85d eb04 	ldr.w	lr, [sp], #4
 800561c:	b004      	add	sp, #16
 800561e:	4770      	bx	lr
 8005620:	2400001c 	.word	0x2400001c

08005624 <_puts_r>:
 8005624:	6a03      	ldr	r3, [r0, #32]
 8005626:	b570      	push	{r4, r5, r6, lr}
 8005628:	6884      	ldr	r4, [r0, #8]
 800562a:	4605      	mov	r5, r0
 800562c:	460e      	mov	r6, r1
 800562e:	b90b      	cbnz	r3, 8005634 <_puts_r+0x10>
 8005630:	f7ff ffb0 	bl	8005594 <__sinit>
 8005634:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005636:	07db      	lsls	r3, r3, #31
 8005638:	d405      	bmi.n	8005646 <_puts_r+0x22>
 800563a:	89a3      	ldrh	r3, [r4, #12]
 800563c:	0598      	lsls	r0, r3, #22
 800563e:	d402      	bmi.n	8005646 <_puts_r+0x22>
 8005640:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005642:	f000 f99e 	bl	8005982 <__retarget_lock_acquire_recursive>
 8005646:	89a3      	ldrh	r3, [r4, #12]
 8005648:	0719      	lsls	r1, r3, #28
 800564a:	d502      	bpl.n	8005652 <_puts_r+0x2e>
 800564c:	6923      	ldr	r3, [r4, #16]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d135      	bne.n	80056be <_puts_r+0x9a>
 8005652:	4621      	mov	r1, r4
 8005654:	4628      	mov	r0, r5
 8005656:	f000 f8c5 	bl	80057e4 <__swsetup_r>
 800565a:	b380      	cbz	r0, 80056be <_puts_r+0x9a>
 800565c:	f04f 35ff 	mov.w	r5, #4294967295
 8005660:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005662:	07da      	lsls	r2, r3, #31
 8005664:	d405      	bmi.n	8005672 <_puts_r+0x4e>
 8005666:	89a3      	ldrh	r3, [r4, #12]
 8005668:	059b      	lsls	r3, r3, #22
 800566a:	d402      	bmi.n	8005672 <_puts_r+0x4e>
 800566c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800566e:	f000 f989 	bl	8005984 <__retarget_lock_release_recursive>
 8005672:	4628      	mov	r0, r5
 8005674:	bd70      	pop	{r4, r5, r6, pc}
 8005676:	2b00      	cmp	r3, #0
 8005678:	da04      	bge.n	8005684 <_puts_r+0x60>
 800567a:	69a2      	ldr	r2, [r4, #24]
 800567c:	429a      	cmp	r2, r3
 800567e:	dc17      	bgt.n	80056b0 <_puts_r+0x8c>
 8005680:	290a      	cmp	r1, #10
 8005682:	d015      	beq.n	80056b0 <_puts_r+0x8c>
 8005684:	6823      	ldr	r3, [r4, #0]
 8005686:	1c5a      	adds	r2, r3, #1
 8005688:	6022      	str	r2, [r4, #0]
 800568a:	7019      	strb	r1, [r3, #0]
 800568c:	68a3      	ldr	r3, [r4, #8]
 800568e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005692:	3b01      	subs	r3, #1
 8005694:	60a3      	str	r3, [r4, #8]
 8005696:	2900      	cmp	r1, #0
 8005698:	d1ed      	bne.n	8005676 <_puts_r+0x52>
 800569a:	2b00      	cmp	r3, #0
 800569c:	da11      	bge.n	80056c2 <_puts_r+0x9e>
 800569e:	4622      	mov	r2, r4
 80056a0:	210a      	movs	r1, #10
 80056a2:	4628      	mov	r0, r5
 80056a4:	f000 f85f 	bl	8005766 <__swbuf_r>
 80056a8:	3001      	adds	r0, #1
 80056aa:	d0d7      	beq.n	800565c <_puts_r+0x38>
 80056ac:	250a      	movs	r5, #10
 80056ae:	e7d7      	b.n	8005660 <_puts_r+0x3c>
 80056b0:	4622      	mov	r2, r4
 80056b2:	4628      	mov	r0, r5
 80056b4:	f000 f857 	bl	8005766 <__swbuf_r>
 80056b8:	3001      	adds	r0, #1
 80056ba:	d1e7      	bne.n	800568c <_puts_r+0x68>
 80056bc:	e7ce      	b.n	800565c <_puts_r+0x38>
 80056be:	3e01      	subs	r6, #1
 80056c0:	e7e4      	b.n	800568c <_puts_r+0x68>
 80056c2:	6823      	ldr	r3, [r4, #0]
 80056c4:	1c5a      	adds	r2, r3, #1
 80056c6:	6022      	str	r2, [r4, #0]
 80056c8:	220a      	movs	r2, #10
 80056ca:	701a      	strb	r2, [r3, #0]
 80056cc:	e7ee      	b.n	80056ac <_puts_r+0x88>
	...

080056d0 <puts>:
 80056d0:	4b02      	ldr	r3, [pc, #8]	@ (80056dc <puts+0xc>)
 80056d2:	4601      	mov	r1, r0
 80056d4:	6818      	ldr	r0, [r3, #0]
 80056d6:	f7ff bfa5 	b.w	8005624 <_puts_r>
 80056da:	bf00      	nop
 80056dc:	2400001c 	.word	0x2400001c

080056e0 <__sread>:
 80056e0:	b510      	push	{r4, lr}
 80056e2:	460c      	mov	r4, r1
 80056e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056e8:	f000 f8fc 	bl	80058e4 <_read_r>
 80056ec:	2800      	cmp	r0, #0
 80056ee:	bfab      	itete	ge
 80056f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80056f2:	89a3      	ldrhlt	r3, [r4, #12]
 80056f4:	181b      	addge	r3, r3, r0
 80056f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80056fa:	bfac      	ite	ge
 80056fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80056fe:	81a3      	strhlt	r3, [r4, #12]
 8005700:	bd10      	pop	{r4, pc}

08005702 <__swrite>:
 8005702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005706:	461f      	mov	r7, r3
 8005708:	898b      	ldrh	r3, [r1, #12]
 800570a:	05db      	lsls	r3, r3, #23
 800570c:	4605      	mov	r5, r0
 800570e:	460c      	mov	r4, r1
 8005710:	4616      	mov	r6, r2
 8005712:	d505      	bpl.n	8005720 <__swrite+0x1e>
 8005714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005718:	2302      	movs	r3, #2
 800571a:	2200      	movs	r2, #0
 800571c:	f000 f8d0 	bl	80058c0 <_lseek_r>
 8005720:	89a3      	ldrh	r3, [r4, #12]
 8005722:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005726:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800572a:	81a3      	strh	r3, [r4, #12]
 800572c:	4632      	mov	r2, r6
 800572e:	463b      	mov	r3, r7
 8005730:	4628      	mov	r0, r5
 8005732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005736:	f000 b8e7 	b.w	8005908 <_write_r>

0800573a <__sseek>:
 800573a:	b510      	push	{r4, lr}
 800573c:	460c      	mov	r4, r1
 800573e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005742:	f000 f8bd 	bl	80058c0 <_lseek_r>
 8005746:	1c43      	adds	r3, r0, #1
 8005748:	89a3      	ldrh	r3, [r4, #12]
 800574a:	bf15      	itete	ne
 800574c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800574e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005752:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005756:	81a3      	strheq	r3, [r4, #12]
 8005758:	bf18      	it	ne
 800575a:	81a3      	strhne	r3, [r4, #12]
 800575c:	bd10      	pop	{r4, pc}

0800575e <__sclose>:
 800575e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005762:	f000 b89d 	b.w	80058a0 <_close_r>

08005766 <__swbuf_r>:
 8005766:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005768:	460e      	mov	r6, r1
 800576a:	4614      	mov	r4, r2
 800576c:	4605      	mov	r5, r0
 800576e:	b118      	cbz	r0, 8005778 <__swbuf_r+0x12>
 8005770:	6a03      	ldr	r3, [r0, #32]
 8005772:	b90b      	cbnz	r3, 8005778 <__swbuf_r+0x12>
 8005774:	f7ff ff0e 	bl	8005594 <__sinit>
 8005778:	69a3      	ldr	r3, [r4, #24]
 800577a:	60a3      	str	r3, [r4, #8]
 800577c:	89a3      	ldrh	r3, [r4, #12]
 800577e:	071a      	lsls	r2, r3, #28
 8005780:	d501      	bpl.n	8005786 <__swbuf_r+0x20>
 8005782:	6923      	ldr	r3, [r4, #16]
 8005784:	b943      	cbnz	r3, 8005798 <__swbuf_r+0x32>
 8005786:	4621      	mov	r1, r4
 8005788:	4628      	mov	r0, r5
 800578a:	f000 f82b 	bl	80057e4 <__swsetup_r>
 800578e:	b118      	cbz	r0, 8005798 <__swbuf_r+0x32>
 8005790:	f04f 37ff 	mov.w	r7, #4294967295
 8005794:	4638      	mov	r0, r7
 8005796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005798:	6823      	ldr	r3, [r4, #0]
 800579a:	6922      	ldr	r2, [r4, #16]
 800579c:	1a98      	subs	r0, r3, r2
 800579e:	6963      	ldr	r3, [r4, #20]
 80057a0:	b2f6      	uxtb	r6, r6
 80057a2:	4283      	cmp	r3, r0
 80057a4:	4637      	mov	r7, r6
 80057a6:	dc05      	bgt.n	80057b4 <__swbuf_r+0x4e>
 80057a8:	4621      	mov	r1, r4
 80057aa:	4628      	mov	r0, r5
 80057ac:	f000 fd36 	bl	800621c <_fflush_r>
 80057b0:	2800      	cmp	r0, #0
 80057b2:	d1ed      	bne.n	8005790 <__swbuf_r+0x2a>
 80057b4:	68a3      	ldr	r3, [r4, #8]
 80057b6:	3b01      	subs	r3, #1
 80057b8:	60a3      	str	r3, [r4, #8]
 80057ba:	6823      	ldr	r3, [r4, #0]
 80057bc:	1c5a      	adds	r2, r3, #1
 80057be:	6022      	str	r2, [r4, #0]
 80057c0:	701e      	strb	r6, [r3, #0]
 80057c2:	6962      	ldr	r2, [r4, #20]
 80057c4:	1c43      	adds	r3, r0, #1
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d004      	beq.n	80057d4 <__swbuf_r+0x6e>
 80057ca:	89a3      	ldrh	r3, [r4, #12]
 80057cc:	07db      	lsls	r3, r3, #31
 80057ce:	d5e1      	bpl.n	8005794 <__swbuf_r+0x2e>
 80057d0:	2e0a      	cmp	r6, #10
 80057d2:	d1df      	bne.n	8005794 <__swbuf_r+0x2e>
 80057d4:	4621      	mov	r1, r4
 80057d6:	4628      	mov	r0, r5
 80057d8:	f000 fd20 	bl	800621c <_fflush_r>
 80057dc:	2800      	cmp	r0, #0
 80057de:	d0d9      	beq.n	8005794 <__swbuf_r+0x2e>
 80057e0:	e7d6      	b.n	8005790 <__swbuf_r+0x2a>
	...

080057e4 <__swsetup_r>:
 80057e4:	b538      	push	{r3, r4, r5, lr}
 80057e6:	4b29      	ldr	r3, [pc, #164]	@ (800588c <__swsetup_r+0xa8>)
 80057e8:	4605      	mov	r5, r0
 80057ea:	6818      	ldr	r0, [r3, #0]
 80057ec:	460c      	mov	r4, r1
 80057ee:	b118      	cbz	r0, 80057f8 <__swsetup_r+0x14>
 80057f0:	6a03      	ldr	r3, [r0, #32]
 80057f2:	b90b      	cbnz	r3, 80057f8 <__swsetup_r+0x14>
 80057f4:	f7ff fece 	bl	8005594 <__sinit>
 80057f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057fc:	0719      	lsls	r1, r3, #28
 80057fe:	d422      	bmi.n	8005846 <__swsetup_r+0x62>
 8005800:	06da      	lsls	r2, r3, #27
 8005802:	d407      	bmi.n	8005814 <__swsetup_r+0x30>
 8005804:	2209      	movs	r2, #9
 8005806:	602a      	str	r2, [r5, #0]
 8005808:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800580c:	81a3      	strh	r3, [r4, #12]
 800580e:	f04f 30ff 	mov.w	r0, #4294967295
 8005812:	e033      	b.n	800587c <__swsetup_r+0x98>
 8005814:	0758      	lsls	r0, r3, #29
 8005816:	d512      	bpl.n	800583e <__swsetup_r+0x5a>
 8005818:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800581a:	b141      	cbz	r1, 800582e <__swsetup_r+0x4a>
 800581c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005820:	4299      	cmp	r1, r3
 8005822:	d002      	beq.n	800582a <__swsetup_r+0x46>
 8005824:	4628      	mov	r0, r5
 8005826:	f000 f8af 	bl	8005988 <_free_r>
 800582a:	2300      	movs	r3, #0
 800582c:	6363      	str	r3, [r4, #52]	@ 0x34
 800582e:	89a3      	ldrh	r3, [r4, #12]
 8005830:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005834:	81a3      	strh	r3, [r4, #12]
 8005836:	2300      	movs	r3, #0
 8005838:	6063      	str	r3, [r4, #4]
 800583a:	6923      	ldr	r3, [r4, #16]
 800583c:	6023      	str	r3, [r4, #0]
 800583e:	89a3      	ldrh	r3, [r4, #12]
 8005840:	f043 0308 	orr.w	r3, r3, #8
 8005844:	81a3      	strh	r3, [r4, #12]
 8005846:	6923      	ldr	r3, [r4, #16]
 8005848:	b94b      	cbnz	r3, 800585e <__swsetup_r+0x7a>
 800584a:	89a3      	ldrh	r3, [r4, #12]
 800584c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005850:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005854:	d003      	beq.n	800585e <__swsetup_r+0x7a>
 8005856:	4621      	mov	r1, r4
 8005858:	4628      	mov	r0, r5
 800585a:	f000 fd2d 	bl	80062b8 <__smakebuf_r>
 800585e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005862:	f013 0201 	ands.w	r2, r3, #1
 8005866:	d00a      	beq.n	800587e <__swsetup_r+0x9a>
 8005868:	2200      	movs	r2, #0
 800586a:	60a2      	str	r2, [r4, #8]
 800586c:	6962      	ldr	r2, [r4, #20]
 800586e:	4252      	negs	r2, r2
 8005870:	61a2      	str	r2, [r4, #24]
 8005872:	6922      	ldr	r2, [r4, #16]
 8005874:	b942      	cbnz	r2, 8005888 <__swsetup_r+0xa4>
 8005876:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800587a:	d1c5      	bne.n	8005808 <__swsetup_r+0x24>
 800587c:	bd38      	pop	{r3, r4, r5, pc}
 800587e:	0799      	lsls	r1, r3, #30
 8005880:	bf58      	it	pl
 8005882:	6962      	ldrpl	r2, [r4, #20]
 8005884:	60a2      	str	r2, [r4, #8]
 8005886:	e7f4      	b.n	8005872 <__swsetup_r+0x8e>
 8005888:	2000      	movs	r0, #0
 800588a:	e7f7      	b.n	800587c <__swsetup_r+0x98>
 800588c:	2400001c 	.word	0x2400001c

08005890 <memset>:
 8005890:	4402      	add	r2, r0
 8005892:	4603      	mov	r3, r0
 8005894:	4293      	cmp	r3, r2
 8005896:	d100      	bne.n	800589a <memset+0xa>
 8005898:	4770      	bx	lr
 800589a:	f803 1b01 	strb.w	r1, [r3], #1
 800589e:	e7f9      	b.n	8005894 <memset+0x4>

080058a0 <_close_r>:
 80058a0:	b538      	push	{r3, r4, r5, lr}
 80058a2:	4d06      	ldr	r5, [pc, #24]	@ (80058bc <_close_r+0x1c>)
 80058a4:	2300      	movs	r3, #0
 80058a6:	4604      	mov	r4, r0
 80058a8:	4608      	mov	r0, r1
 80058aa:	602b      	str	r3, [r5, #0]
 80058ac:	f7fb f8a6 	bl	80009fc <_close>
 80058b0:	1c43      	adds	r3, r0, #1
 80058b2:	d102      	bne.n	80058ba <_close_r+0x1a>
 80058b4:	682b      	ldr	r3, [r5, #0]
 80058b6:	b103      	cbz	r3, 80058ba <_close_r+0x1a>
 80058b8:	6023      	str	r3, [r4, #0]
 80058ba:	bd38      	pop	{r3, r4, r5, pc}
 80058bc:	24000260 	.word	0x24000260

080058c0 <_lseek_r>:
 80058c0:	b538      	push	{r3, r4, r5, lr}
 80058c2:	4d07      	ldr	r5, [pc, #28]	@ (80058e0 <_lseek_r+0x20>)
 80058c4:	4604      	mov	r4, r0
 80058c6:	4608      	mov	r0, r1
 80058c8:	4611      	mov	r1, r2
 80058ca:	2200      	movs	r2, #0
 80058cc:	602a      	str	r2, [r5, #0]
 80058ce:	461a      	mov	r2, r3
 80058d0:	f7fb f8bb 	bl	8000a4a <_lseek>
 80058d4:	1c43      	adds	r3, r0, #1
 80058d6:	d102      	bne.n	80058de <_lseek_r+0x1e>
 80058d8:	682b      	ldr	r3, [r5, #0]
 80058da:	b103      	cbz	r3, 80058de <_lseek_r+0x1e>
 80058dc:	6023      	str	r3, [r4, #0]
 80058de:	bd38      	pop	{r3, r4, r5, pc}
 80058e0:	24000260 	.word	0x24000260

080058e4 <_read_r>:
 80058e4:	b538      	push	{r3, r4, r5, lr}
 80058e6:	4d07      	ldr	r5, [pc, #28]	@ (8005904 <_read_r+0x20>)
 80058e8:	4604      	mov	r4, r0
 80058ea:	4608      	mov	r0, r1
 80058ec:	4611      	mov	r1, r2
 80058ee:	2200      	movs	r2, #0
 80058f0:	602a      	str	r2, [r5, #0]
 80058f2:	461a      	mov	r2, r3
 80058f4:	f7fb f865 	bl	80009c2 <_read>
 80058f8:	1c43      	adds	r3, r0, #1
 80058fa:	d102      	bne.n	8005902 <_read_r+0x1e>
 80058fc:	682b      	ldr	r3, [r5, #0]
 80058fe:	b103      	cbz	r3, 8005902 <_read_r+0x1e>
 8005900:	6023      	str	r3, [r4, #0]
 8005902:	bd38      	pop	{r3, r4, r5, pc}
 8005904:	24000260 	.word	0x24000260

08005908 <_write_r>:
 8005908:	b538      	push	{r3, r4, r5, lr}
 800590a:	4d07      	ldr	r5, [pc, #28]	@ (8005928 <_write_r+0x20>)
 800590c:	4604      	mov	r4, r0
 800590e:	4608      	mov	r0, r1
 8005910:	4611      	mov	r1, r2
 8005912:	2200      	movs	r2, #0
 8005914:	602a      	str	r2, [r5, #0]
 8005916:	461a      	mov	r2, r3
 8005918:	f7fb fa48 	bl	8000dac <_write>
 800591c:	1c43      	adds	r3, r0, #1
 800591e:	d102      	bne.n	8005926 <_write_r+0x1e>
 8005920:	682b      	ldr	r3, [r5, #0]
 8005922:	b103      	cbz	r3, 8005926 <_write_r+0x1e>
 8005924:	6023      	str	r3, [r4, #0]
 8005926:	bd38      	pop	{r3, r4, r5, pc}
 8005928:	24000260 	.word	0x24000260

0800592c <__errno>:
 800592c:	4b01      	ldr	r3, [pc, #4]	@ (8005934 <__errno+0x8>)
 800592e:	6818      	ldr	r0, [r3, #0]
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	2400001c 	.word	0x2400001c

08005938 <__libc_init_array>:
 8005938:	b570      	push	{r4, r5, r6, lr}
 800593a:	4d0d      	ldr	r5, [pc, #52]	@ (8005970 <__libc_init_array+0x38>)
 800593c:	4c0d      	ldr	r4, [pc, #52]	@ (8005974 <__libc_init_array+0x3c>)
 800593e:	1b64      	subs	r4, r4, r5
 8005940:	10a4      	asrs	r4, r4, #2
 8005942:	2600      	movs	r6, #0
 8005944:	42a6      	cmp	r6, r4
 8005946:	d109      	bne.n	800595c <__libc_init_array+0x24>
 8005948:	4d0b      	ldr	r5, [pc, #44]	@ (8005978 <__libc_init_array+0x40>)
 800594a:	4c0c      	ldr	r4, [pc, #48]	@ (800597c <__libc_init_array+0x44>)
 800594c:	f000 fd22 	bl	8006394 <_init>
 8005950:	1b64      	subs	r4, r4, r5
 8005952:	10a4      	asrs	r4, r4, #2
 8005954:	2600      	movs	r6, #0
 8005956:	42a6      	cmp	r6, r4
 8005958:	d105      	bne.n	8005966 <__libc_init_array+0x2e>
 800595a:	bd70      	pop	{r4, r5, r6, pc}
 800595c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005960:	4798      	blx	r3
 8005962:	3601      	adds	r6, #1
 8005964:	e7ee      	b.n	8005944 <__libc_init_array+0xc>
 8005966:	f855 3b04 	ldr.w	r3, [r5], #4
 800596a:	4798      	blx	r3
 800596c:	3601      	adds	r6, #1
 800596e:	e7f2      	b.n	8005956 <__libc_init_array+0x1e>
 8005970:	080064c8 	.word	0x080064c8
 8005974:	080064c8 	.word	0x080064c8
 8005978:	080064c8 	.word	0x080064c8
 800597c:	080064cc 	.word	0x080064cc

08005980 <__retarget_lock_init_recursive>:
 8005980:	4770      	bx	lr

08005982 <__retarget_lock_acquire_recursive>:
 8005982:	4770      	bx	lr

08005984 <__retarget_lock_release_recursive>:
 8005984:	4770      	bx	lr
	...

08005988 <_free_r>:
 8005988:	b538      	push	{r3, r4, r5, lr}
 800598a:	4605      	mov	r5, r0
 800598c:	2900      	cmp	r1, #0
 800598e:	d041      	beq.n	8005a14 <_free_r+0x8c>
 8005990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005994:	1f0c      	subs	r4, r1, #4
 8005996:	2b00      	cmp	r3, #0
 8005998:	bfb8      	it	lt
 800599a:	18e4      	addlt	r4, r4, r3
 800599c:	f000 f8e0 	bl	8005b60 <__malloc_lock>
 80059a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005a18 <_free_r+0x90>)
 80059a2:	6813      	ldr	r3, [r2, #0]
 80059a4:	b933      	cbnz	r3, 80059b4 <_free_r+0x2c>
 80059a6:	6063      	str	r3, [r4, #4]
 80059a8:	6014      	str	r4, [r2, #0]
 80059aa:	4628      	mov	r0, r5
 80059ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059b0:	f000 b8dc 	b.w	8005b6c <__malloc_unlock>
 80059b4:	42a3      	cmp	r3, r4
 80059b6:	d908      	bls.n	80059ca <_free_r+0x42>
 80059b8:	6820      	ldr	r0, [r4, #0]
 80059ba:	1821      	adds	r1, r4, r0
 80059bc:	428b      	cmp	r3, r1
 80059be:	bf01      	itttt	eq
 80059c0:	6819      	ldreq	r1, [r3, #0]
 80059c2:	685b      	ldreq	r3, [r3, #4]
 80059c4:	1809      	addeq	r1, r1, r0
 80059c6:	6021      	streq	r1, [r4, #0]
 80059c8:	e7ed      	b.n	80059a6 <_free_r+0x1e>
 80059ca:	461a      	mov	r2, r3
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	b10b      	cbz	r3, 80059d4 <_free_r+0x4c>
 80059d0:	42a3      	cmp	r3, r4
 80059d2:	d9fa      	bls.n	80059ca <_free_r+0x42>
 80059d4:	6811      	ldr	r1, [r2, #0]
 80059d6:	1850      	adds	r0, r2, r1
 80059d8:	42a0      	cmp	r0, r4
 80059da:	d10b      	bne.n	80059f4 <_free_r+0x6c>
 80059dc:	6820      	ldr	r0, [r4, #0]
 80059de:	4401      	add	r1, r0
 80059e0:	1850      	adds	r0, r2, r1
 80059e2:	4283      	cmp	r3, r0
 80059e4:	6011      	str	r1, [r2, #0]
 80059e6:	d1e0      	bne.n	80059aa <_free_r+0x22>
 80059e8:	6818      	ldr	r0, [r3, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	6053      	str	r3, [r2, #4]
 80059ee:	4408      	add	r0, r1
 80059f0:	6010      	str	r0, [r2, #0]
 80059f2:	e7da      	b.n	80059aa <_free_r+0x22>
 80059f4:	d902      	bls.n	80059fc <_free_r+0x74>
 80059f6:	230c      	movs	r3, #12
 80059f8:	602b      	str	r3, [r5, #0]
 80059fa:	e7d6      	b.n	80059aa <_free_r+0x22>
 80059fc:	6820      	ldr	r0, [r4, #0]
 80059fe:	1821      	adds	r1, r4, r0
 8005a00:	428b      	cmp	r3, r1
 8005a02:	bf04      	itt	eq
 8005a04:	6819      	ldreq	r1, [r3, #0]
 8005a06:	685b      	ldreq	r3, [r3, #4]
 8005a08:	6063      	str	r3, [r4, #4]
 8005a0a:	bf04      	itt	eq
 8005a0c:	1809      	addeq	r1, r1, r0
 8005a0e:	6021      	streq	r1, [r4, #0]
 8005a10:	6054      	str	r4, [r2, #4]
 8005a12:	e7ca      	b.n	80059aa <_free_r+0x22>
 8005a14:	bd38      	pop	{r3, r4, r5, pc}
 8005a16:	bf00      	nop
 8005a18:	2400026c 	.word	0x2400026c

08005a1c <sbrk_aligned>:
 8005a1c:	b570      	push	{r4, r5, r6, lr}
 8005a1e:	4e0f      	ldr	r6, [pc, #60]	@ (8005a5c <sbrk_aligned+0x40>)
 8005a20:	460c      	mov	r4, r1
 8005a22:	6831      	ldr	r1, [r6, #0]
 8005a24:	4605      	mov	r5, r0
 8005a26:	b911      	cbnz	r1, 8005a2e <sbrk_aligned+0x12>
 8005a28:	f000 fca4 	bl	8006374 <_sbrk_r>
 8005a2c:	6030      	str	r0, [r6, #0]
 8005a2e:	4621      	mov	r1, r4
 8005a30:	4628      	mov	r0, r5
 8005a32:	f000 fc9f 	bl	8006374 <_sbrk_r>
 8005a36:	1c43      	adds	r3, r0, #1
 8005a38:	d103      	bne.n	8005a42 <sbrk_aligned+0x26>
 8005a3a:	f04f 34ff 	mov.w	r4, #4294967295
 8005a3e:	4620      	mov	r0, r4
 8005a40:	bd70      	pop	{r4, r5, r6, pc}
 8005a42:	1cc4      	adds	r4, r0, #3
 8005a44:	f024 0403 	bic.w	r4, r4, #3
 8005a48:	42a0      	cmp	r0, r4
 8005a4a:	d0f8      	beq.n	8005a3e <sbrk_aligned+0x22>
 8005a4c:	1a21      	subs	r1, r4, r0
 8005a4e:	4628      	mov	r0, r5
 8005a50:	f000 fc90 	bl	8006374 <_sbrk_r>
 8005a54:	3001      	adds	r0, #1
 8005a56:	d1f2      	bne.n	8005a3e <sbrk_aligned+0x22>
 8005a58:	e7ef      	b.n	8005a3a <sbrk_aligned+0x1e>
 8005a5a:	bf00      	nop
 8005a5c:	24000268 	.word	0x24000268

08005a60 <_malloc_r>:
 8005a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a64:	1ccd      	adds	r5, r1, #3
 8005a66:	f025 0503 	bic.w	r5, r5, #3
 8005a6a:	3508      	adds	r5, #8
 8005a6c:	2d0c      	cmp	r5, #12
 8005a6e:	bf38      	it	cc
 8005a70:	250c      	movcc	r5, #12
 8005a72:	2d00      	cmp	r5, #0
 8005a74:	4606      	mov	r6, r0
 8005a76:	db01      	blt.n	8005a7c <_malloc_r+0x1c>
 8005a78:	42a9      	cmp	r1, r5
 8005a7a:	d904      	bls.n	8005a86 <_malloc_r+0x26>
 8005a7c:	230c      	movs	r3, #12
 8005a7e:	6033      	str	r3, [r6, #0]
 8005a80:	2000      	movs	r0, #0
 8005a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005b5c <_malloc_r+0xfc>
 8005a8a:	f000 f869 	bl	8005b60 <__malloc_lock>
 8005a8e:	f8d8 3000 	ldr.w	r3, [r8]
 8005a92:	461c      	mov	r4, r3
 8005a94:	bb44      	cbnz	r4, 8005ae8 <_malloc_r+0x88>
 8005a96:	4629      	mov	r1, r5
 8005a98:	4630      	mov	r0, r6
 8005a9a:	f7ff ffbf 	bl	8005a1c <sbrk_aligned>
 8005a9e:	1c43      	adds	r3, r0, #1
 8005aa0:	4604      	mov	r4, r0
 8005aa2:	d158      	bne.n	8005b56 <_malloc_r+0xf6>
 8005aa4:	f8d8 4000 	ldr.w	r4, [r8]
 8005aa8:	4627      	mov	r7, r4
 8005aaa:	2f00      	cmp	r7, #0
 8005aac:	d143      	bne.n	8005b36 <_malloc_r+0xd6>
 8005aae:	2c00      	cmp	r4, #0
 8005ab0:	d04b      	beq.n	8005b4a <_malloc_r+0xea>
 8005ab2:	6823      	ldr	r3, [r4, #0]
 8005ab4:	4639      	mov	r1, r7
 8005ab6:	4630      	mov	r0, r6
 8005ab8:	eb04 0903 	add.w	r9, r4, r3
 8005abc:	f000 fc5a 	bl	8006374 <_sbrk_r>
 8005ac0:	4581      	cmp	r9, r0
 8005ac2:	d142      	bne.n	8005b4a <_malloc_r+0xea>
 8005ac4:	6821      	ldr	r1, [r4, #0]
 8005ac6:	1a6d      	subs	r5, r5, r1
 8005ac8:	4629      	mov	r1, r5
 8005aca:	4630      	mov	r0, r6
 8005acc:	f7ff ffa6 	bl	8005a1c <sbrk_aligned>
 8005ad0:	3001      	adds	r0, #1
 8005ad2:	d03a      	beq.n	8005b4a <_malloc_r+0xea>
 8005ad4:	6823      	ldr	r3, [r4, #0]
 8005ad6:	442b      	add	r3, r5
 8005ad8:	6023      	str	r3, [r4, #0]
 8005ada:	f8d8 3000 	ldr.w	r3, [r8]
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	bb62      	cbnz	r2, 8005b3c <_malloc_r+0xdc>
 8005ae2:	f8c8 7000 	str.w	r7, [r8]
 8005ae6:	e00f      	b.n	8005b08 <_malloc_r+0xa8>
 8005ae8:	6822      	ldr	r2, [r4, #0]
 8005aea:	1b52      	subs	r2, r2, r5
 8005aec:	d420      	bmi.n	8005b30 <_malloc_r+0xd0>
 8005aee:	2a0b      	cmp	r2, #11
 8005af0:	d917      	bls.n	8005b22 <_malloc_r+0xc2>
 8005af2:	1961      	adds	r1, r4, r5
 8005af4:	42a3      	cmp	r3, r4
 8005af6:	6025      	str	r5, [r4, #0]
 8005af8:	bf18      	it	ne
 8005afa:	6059      	strne	r1, [r3, #4]
 8005afc:	6863      	ldr	r3, [r4, #4]
 8005afe:	bf08      	it	eq
 8005b00:	f8c8 1000 	streq.w	r1, [r8]
 8005b04:	5162      	str	r2, [r4, r5]
 8005b06:	604b      	str	r3, [r1, #4]
 8005b08:	4630      	mov	r0, r6
 8005b0a:	f000 f82f 	bl	8005b6c <__malloc_unlock>
 8005b0e:	f104 000b 	add.w	r0, r4, #11
 8005b12:	1d23      	adds	r3, r4, #4
 8005b14:	f020 0007 	bic.w	r0, r0, #7
 8005b18:	1ac2      	subs	r2, r0, r3
 8005b1a:	bf1c      	itt	ne
 8005b1c:	1a1b      	subne	r3, r3, r0
 8005b1e:	50a3      	strne	r3, [r4, r2]
 8005b20:	e7af      	b.n	8005a82 <_malloc_r+0x22>
 8005b22:	6862      	ldr	r2, [r4, #4]
 8005b24:	42a3      	cmp	r3, r4
 8005b26:	bf0c      	ite	eq
 8005b28:	f8c8 2000 	streq.w	r2, [r8]
 8005b2c:	605a      	strne	r2, [r3, #4]
 8005b2e:	e7eb      	b.n	8005b08 <_malloc_r+0xa8>
 8005b30:	4623      	mov	r3, r4
 8005b32:	6864      	ldr	r4, [r4, #4]
 8005b34:	e7ae      	b.n	8005a94 <_malloc_r+0x34>
 8005b36:	463c      	mov	r4, r7
 8005b38:	687f      	ldr	r7, [r7, #4]
 8005b3a:	e7b6      	b.n	8005aaa <_malloc_r+0x4a>
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	42a3      	cmp	r3, r4
 8005b42:	d1fb      	bne.n	8005b3c <_malloc_r+0xdc>
 8005b44:	2300      	movs	r3, #0
 8005b46:	6053      	str	r3, [r2, #4]
 8005b48:	e7de      	b.n	8005b08 <_malloc_r+0xa8>
 8005b4a:	230c      	movs	r3, #12
 8005b4c:	6033      	str	r3, [r6, #0]
 8005b4e:	4630      	mov	r0, r6
 8005b50:	f000 f80c 	bl	8005b6c <__malloc_unlock>
 8005b54:	e794      	b.n	8005a80 <_malloc_r+0x20>
 8005b56:	6005      	str	r5, [r0, #0]
 8005b58:	e7d6      	b.n	8005b08 <_malloc_r+0xa8>
 8005b5a:	bf00      	nop
 8005b5c:	2400026c 	.word	0x2400026c

08005b60 <__malloc_lock>:
 8005b60:	4801      	ldr	r0, [pc, #4]	@ (8005b68 <__malloc_lock+0x8>)
 8005b62:	f7ff bf0e 	b.w	8005982 <__retarget_lock_acquire_recursive>
 8005b66:	bf00      	nop
 8005b68:	24000264 	.word	0x24000264

08005b6c <__malloc_unlock>:
 8005b6c:	4801      	ldr	r0, [pc, #4]	@ (8005b74 <__malloc_unlock+0x8>)
 8005b6e:	f7ff bf09 	b.w	8005984 <__retarget_lock_release_recursive>
 8005b72:	bf00      	nop
 8005b74:	24000264 	.word	0x24000264

08005b78 <__sfputc_r>:
 8005b78:	6893      	ldr	r3, [r2, #8]
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	b410      	push	{r4}
 8005b80:	6093      	str	r3, [r2, #8]
 8005b82:	da08      	bge.n	8005b96 <__sfputc_r+0x1e>
 8005b84:	6994      	ldr	r4, [r2, #24]
 8005b86:	42a3      	cmp	r3, r4
 8005b88:	db01      	blt.n	8005b8e <__sfputc_r+0x16>
 8005b8a:	290a      	cmp	r1, #10
 8005b8c:	d103      	bne.n	8005b96 <__sfputc_r+0x1e>
 8005b8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b92:	f7ff bde8 	b.w	8005766 <__swbuf_r>
 8005b96:	6813      	ldr	r3, [r2, #0]
 8005b98:	1c58      	adds	r0, r3, #1
 8005b9a:	6010      	str	r0, [r2, #0]
 8005b9c:	7019      	strb	r1, [r3, #0]
 8005b9e:	4608      	mov	r0, r1
 8005ba0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ba4:	4770      	bx	lr

08005ba6 <__sfputs_r>:
 8005ba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ba8:	4606      	mov	r6, r0
 8005baa:	460f      	mov	r7, r1
 8005bac:	4614      	mov	r4, r2
 8005bae:	18d5      	adds	r5, r2, r3
 8005bb0:	42ac      	cmp	r4, r5
 8005bb2:	d101      	bne.n	8005bb8 <__sfputs_r+0x12>
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	e007      	b.n	8005bc8 <__sfputs_r+0x22>
 8005bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bbc:	463a      	mov	r2, r7
 8005bbe:	4630      	mov	r0, r6
 8005bc0:	f7ff ffda 	bl	8005b78 <__sfputc_r>
 8005bc4:	1c43      	adds	r3, r0, #1
 8005bc6:	d1f3      	bne.n	8005bb0 <__sfputs_r+0xa>
 8005bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005bcc <_vfiprintf_r>:
 8005bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd0:	460d      	mov	r5, r1
 8005bd2:	b09d      	sub	sp, #116	@ 0x74
 8005bd4:	4614      	mov	r4, r2
 8005bd6:	4698      	mov	r8, r3
 8005bd8:	4606      	mov	r6, r0
 8005bda:	b118      	cbz	r0, 8005be4 <_vfiprintf_r+0x18>
 8005bdc:	6a03      	ldr	r3, [r0, #32]
 8005bde:	b90b      	cbnz	r3, 8005be4 <_vfiprintf_r+0x18>
 8005be0:	f7ff fcd8 	bl	8005594 <__sinit>
 8005be4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005be6:	07d9      	lsls	r1, r3, #31
 8005be8:	d405      	bmi.n	8005bf6 <_vfiprintf_r+0x2a>
 8005bea:	89ab      	ldrh	r3, [r5, #12]
 8005bec:	059a      	lsls	r2, r3, #22
 8005bee:	d402      	bmi.n	8005bf6 <_vfiprintf_r+0x2a>
 8005bf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005bf2:	f7ff fec6 	bl	8005982 <__retarget_lock_acquire_recursive>
 8005bf6:	89ab      	ldrh	r3, [r5, #12]
 8005bf8:	071b      	lsls	r3, r3, #28
 8005bfa:	d501      	bpl.n	8005c00 <_vfiprintf_r+0x34>
 8005bfc:	692b      	ldr	r3, [r5, #16]
 8005bfe:	b99b      	cbnz	r3, 8005c28 <_vfiprintf_r+0x5c>
 8005c00:	4629      	mov	r1, r5
 8005c02:	4630      	mov	r0, r6
 8005c04:	f7ff fdee 	bl	80057e4 <__swsetup_r>
 8005c08:	b170      	cbz	r0, 8005c28 <_vfiprintf_r+0x5c>
 8005c0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c0c:	07dc      	lsls	r4, r3, #31
 8005c0e:	d504      	bpl.n	8005c1a <_vfiprintf_r+0x4e>
 8005c10:	f04f 30ff 	mov.w	r0, #4294967295
 8005c14:	b01d      	add	sp, #116	@ 0x74
 8005c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c1a:	89ab      	ldrh	r3, [r5, #12]
 8005c1c:	0598      	lsls	r0, r3, #22
 8005c1e:	d4f7      	bmi.n	8005c10 <_vfiprintf_r+0x44>
 8005c20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c22:	f7ff feaf 	bl	8005984 <__retarget_lock_release_recursive>
 8005c26:	e7f3      	b.n	8005c10 <_vfiprintf_r+0x44>
 8005c28:	2300      	movs	r3, #0
 8005c2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c2c:	2320      	movs	r3, #32
 8005c2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005c32:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c36:	2330      	movs	r3, #48	@ 0x30
 8005c38:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005de8 <_vfiprintf_r+0x21c>
 8005c3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005c40:	f04f 0901 	mov.w	r9, #1
 8005c44:	4623      	mov	r3, r4
 8005c46:	469a      	mov	sl, r3
 8005c48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c4c:	b10a      	cbz	r2, 8005c52 <_vfiprintf_r+0x86>
 8005c4e:	2a25      	cmp	r2, #37	@ 0x25
 8005c50:	d1f9      	bne.n	8005c46 <_vfiprintf_r+0x7a>
 8005c52:	ebba 0b04 	subs.w	fp, sl, r4
 8005c56:	d00b      	beq.n	8005c70 <_vfiprintf_r+0xa4>
 8005c58:	465b      	mov	r3, fp
 8005c5a:	4622      	mov	r2, r4
 8005c5c:	4629      	mov	r1, r5
 8005c5e:	4630      	mov	r0, r6
 8005c60:	f7ff ffa1 	bl	8005ba6 <__sfputs_r>
 8005c64:	3001      	adds	r0, #1
 8005c66:	f000 80a7 	beq.w	8005db8 <_vfiprintf_r+0x1ec>
 8005c6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c6c:	445a      	add	r2, fp
 8005c6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c70:	f89a 3000 	ldrb.w	r3, [sl]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f000 809f 	beq.w	8005db8 <_vfiprintf_r+0x1ec>
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c84:	f10a 0a01 	add.w	sl, sl, #1
 8005c88:	9304      	str	r3, [sp, #16]
 8005c8a:	9307      	str	r3, [sp, #28]
 8005c8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005c90:	931a      	str	r3, [sp, #104]	@ 0x68
 8005c92:	4654      	mov	r4, sl
 8005c94:	2205      	movs	r2, #5
 8005c96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c9a:	4853      	ldr	r0, [pc, #332]	@ (8005de8 <_vfiprintf_r+0x21c>)
 8005c9c:	f7fa fb20 	bl	80002e0 <memchr>
 8005ca0:	9a04      	ldr	r2, [sp, #16]
 8005ca2:	b9d8      	cbnz	r0, 8005cdc <_vfiprintf_r+0x110>
 8005ca4:	06d1      	lsls	r1, r2, #27
 8005ca6:	bf44      	itt	mi
 8005ca8:	2320      	movmi	r3, #32
 8005caa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005cae:	0713      	lsls	r3, r2, #28
 8005cb0:	bf44      	itt	mi
 8005cb2:	232b      	movmi	r3, #43	@ 0x2b
 8005cb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005cb8:	f89a 3000 	ldrb.w	r3, [sl]
 8005cbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cbe:	d015      	beq.n	8005cec <_vfiprintf_r+0x120>
 8005cc0:	9a07      	ldr	r2, [sp, #28]
 8005cc2:	4654      	mov	r4, sl
 8005cc4:	2000      	movs	r0, #0
 8005cc6:	f04f 0c0a 	mov.w	ip, #10
 8005cca:	4621      	mov	r1, r4
 8005ccc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cd0:	3b30      	subs	r3, #48	@ 0x30
 8005cd2:	2b09      	cmp	r3, #9
 8005cd4:	d94b      	bls.n	8005d6e <_vfiprintf_r+0x1a2>
 8005cd6:	b1b0      	cbz	r0, 8005d06 <_vfiprintf_r+0x13a>
 8005cd8:	9207      	str	r2, [sp, #28]
 8005cda:	e014      	b.n	8005d06 <_vfiprintf_r+0x13a>
 8005cdc:	eba0 0308 	sub.w	r3, r0, r8
 8005ce0:	fa09 f303 	lsl.w	r3, r9, r3
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	9304      	str	r3, [sp, #16]
 8005ce8:	46a2      	mov	sl, r4
 8005cea:	e7d2      	b.n	8005c92 <_vfiprintf_r+0xc6>
 8005cec:	9b03      	ldr	r3, [sp, #12]
 8005cee:	1d19      	adds	r1, r3, #4
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	9103      	str	r1, [sp, #12]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	bfbb      	ittet	lt
 8005cf8:	425b      	neglt	r3, r3
 8005cfa:	f042 0202 	orrlt.w	r2, r2, #2
 8005cfe:	9307      	strge	r3, [sp, #28]
 8005d00:	9307      	strlt	r3, [sp, #28]
 8005d02:	bfb8      	it	lt
 8005d04:	9204      	strlt	r2, [sp, #16]
 8005d06:	7823      	ldrb	r3, [r4, #0]
 8005d08:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d0a:	d10a      	bne.n	8005d22 <_vfiprintf_r+0x156>
 8005d0c:	7863      	ldrb	r3, [r4, #1]
 8005d0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d10:	d132      	bne.n	8005d78 <_vfiprintf_r+0x1ac>
 8005d12:	9b03      	ldr	r3, [sp, #12]
 8005d14:	1d1a      	adds	r2, r3, #4
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	9203      	str	r2, [sp, #12]
 8005d1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d1e:	3402      	adds	r4, #2
 8005d20:	9305      	str	r3, [sp, #20]
 8005d22:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005df8 <_vfiprintf_r+0x22c>
 8005d26:	7821      	ldrb	r1, [r4, #0]
 8005d28:	2203      	movs	r2, #3
 8005d2a:	4650      	mov	r0, sl
 8005d2c:	f7fa fad8 	bl	80002e0 <memchr>
 8005d30:	b138      	cbz	r0, 8005d42 <_vfiprintf_r+0x176>
 8005d32:	9b04      	ldr	r3, [sp, #16]
 8005d34:	eba0 000a 	sub.w	r0, r0, sl
 8005d38:	2240      	movs	r2, #64	@ 0x40
 8005d3a:	4082      	lsls	r2, r0
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	3401      	adds	r4, #1
 8005d40:	9304      	str	r3, [sp, #16]
 8005d42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d46:	4829      	ldr	r0, [pc, #164]	@ (8005dec <_vfiprintf_r+0x220>)
 8005d48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005d4c:	2206      	movs	r2, #6
 8005d4e:	f7fa fac7 	bl	80002e0 <memchr>
 8005d52:	2800      	cmp	r0, #0
 8005d54:	d03f      	beq.n	8005dd6 <_vfiprintf_r+0x20a>
 8005d56:	4b26      	ldr	r3, [pc, #152]	@ (8005df0 <_vfiprintf_r+0x224>)
 8005d58:	bb1b      	cbnz	r3, 8005da2 <_vfiprintf_r+0x1d6>
 8005d5a:	9b03      	ldr	r3, [sp, #12]
 8005d5c:	3307      	adds	r3, #7
 8005d5e:	f023 0307 	bic.w	r3, r3, #7
 8005d62:	3308      	adds	r3, #8
 8005d64:	9303      	str	r3, [sp, #12]
 8005d66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d68:	443b      	add	r3, r7
 8005d6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d6c:	e76a      	b.n	8005c44 <_vfiprintf_r+0x78>
 8005d6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d72:	460c      	mov	r4, r1
 8005d74:	2001      	movs	r0, #1
 8005d76:	e7a8      	b.n	8005cca <_vfiprintf_r+0xfe>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	3401      	adds	r4, #1
 8005d7c:	9305      	str	r3, [sp, #20]
 8005d7e:	4619      	mov	r1, r3
 8005d80:	f04f 0c0a 	mov.w	ip, #10
 8005d84:	4620      	mov	r0, r4
 8005d86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d8a:	3a30      	subs	r2, #48	@ 0x30
 8005d8c:	2a09      	cmp	r2, #9
 8005d8e:	d903      	bls.n	8005d98 <_vfiprintf_r+0x1cc>
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d0c6      	beq.n	8005d22 <_vfiprintf_r+0x156>
 8005d94:	9105      	str	r1, [sp, #20]
 8005d96:	e7c4      	b.n	8005d22 <_vfiprintf_r+0x156>
 8005d98:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d9c:	4604      	mov	r4, r0
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e7f0      	b.n	8005d84 <_vfiprintf_r+0x1b8>
 8005da2:	ab03      	add	r3, sp, #12
 8005da4:	9300      	str	r3, [sp, #0]
 8005da6:	462a      	mov	r2, r5
 8005da8:	4b12      	ldr	r3, [pc, #72]	@ (8005df4 <_vfiprintf_r+0x228>)
 8005daa:	a904      	add	r1, sp, #16
 8005dac:	4630      	mov	r0, r6
 8005dae:	f3af 8000 	nop.w
 8005db2:	4607      	mov	r7, r0
 8005db4:	1c78      	adds	r0, r7, #1
 8005db6:	d1d6      	bne.n	8005d66 <_vfiprintf_r+0x19a>
 8005db8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005dba:	07d9      	lsls	r1, r3, #31
 8005dbc:	d405      	bmi.n	8005dca <_vfiprintf_r+0x1fe>
 8005dbe:	89ab      	ldrh	r3, [r5, #12]
 8005dc0:	059a      	lsls	r2, r3, #22
 8005dc2:	d402      	bmi.n	8005dca <_vfiprintf_r+0x1fe>
 8005dc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005dc6:	f7ff fddd 	bl	8005984 <__retarget_lock_release_recursive>
 8005dca:	89ab      	ldrh	r3, [r5, #12]
 8005dcc:	065b      	lsls	r3, r3, #25
 8005dce:	f53f af1f 	bmi.w	8005c10 <_vfiprintf_r+0x44>
 8005dd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005dd4:	e71e      	b.n	8005c14 <_vfiprintf_r+0x48>
 8005dd6:	ab03      	add	r3, sp, #12
 8005dd8:	9300      	str	r3, [sp, #0]
 8005dda:	462a      	mov	r2, r5
 8005ddc:	4b05      	ldr	r3, [pc, #20]	@ (8005df4 <_vfiprintf_r+0x228>)
 8005dde:	a904      	add	r1, sp, #16
 8005de0:	4630      	mov	r0, r6
 8005de2:	f000 f879 	bl	8005ed8 <_printf_i>
 8005de6:	e7e4      	b.n	8005db2 <_vfiprintf_r+0x1e6>
 8005de8:	0800648c 	.word	0x0800648c
 8005dec:	08006496 	.word	0x08006496
 8005df0:	00000000 	.word	0x00000000
 8005df4:	08005ba7 	.word	0x08005ba7
 8005df8:	08006492 	.word	0x08006492

08005dfc <_printf_common>:
 8005dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e00:	4616      	mov	r6, r2
 8005e02:	4698      	mov	r8, r3
 8005e04:	688a      	ldr	r2, [r1, #8]
 8005e06:	690b      	ldr	r3, [r1, #16]
 8005e08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	bfb8      	it	lt
 8005e10:	4613      	movlt	r3, r2
 8005e12:	6033      	str	r3, [r6, #0]
 8005e14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e18:	4607      	mov	r7, r0
 8005e1a:	460c      	mov	r4, r1
 8005e1c:	b10a      	cbz	r2, 8005e22 <_printf_common+0x26>
 8005e1e:	3301      	adds	r3, #1
 8005e20:	6033      	str	r3, [r6, #0]
 8005e22:	6823      	ldr	r3, [r4, #0]
 8005e24:	0699      	lsls	r1, r3, #26
 8005e26:	bf42      	ittt	mi
 8005e28:	6833      	ldrmi	r3, [r6, #0]
 8005e2a:	3302      	addmi	r3, #2
 8005e2c:	6033      	strmi	r3, [r6, #0]
 8005e2e:	6825      	ldr	r5, [r4, #0]
 8005e30:	f015 0506 	ands.w	r5, r5, #6
 8005e34:	d106      	bne.n	8005e44 <_printf_common+0x48>
 8005e36:	f104 0a19 	add.w	sl, r4, #25
 8005e3a:	68e3      	ldr	r3, [r4, #12]
 8005e3c:	6832      	ldr	r2, [r6, #0]
 8005e3e:	1a9b      	subs	r3, r3, r2
 8005e40:	42ab      	cmp	r3, r5
 8005e42:	dc26      	bgt.n	8005e92 <_printf_common+0x96>
 8005e44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005e48:	6822      	ldr	r2, [r4, #0]
 8005e4a:	3b00      	subs	r3, #0
 8005e4c:	bf18      	it	ne
 8005e4e:	2301      	movne	r3, #1
 8005e50:	0692      	lsls	r2, r2, #26
 8005e52:	d42b      	bmi.n	8005eac <_printf_common+0xb0>
 8005e54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e58:	4641      	mov	r1, r8
 8005e5a:	4638      	mov	r0, r7
 8005e5c:	47c8      	blx	r9
 8005e5e:	3001      	adds	r0, #1
 8005e60:	d01e      	beq.n	8005ea0 <_printf_common+0xa4>
 8005e62:	6823      	ldr	r3, [r4, #0]
 8005e64:	6922      	ldr	r2, [r4, #16]
 8005e66:	f003 0306 	and.w	r3, r3, #6
 8005e6a:	2b04      	cmp	r3, #4
 8005e6c:	bf02      	ittt	eq
 8005e6e:	68e5      	ldreq	r5, [r4, #12]
 8005e70:	6833      	ldreq	r3, [r6, #0]
 8005e72:	1aed      	subeq	r5, r5, r3
 8005e74:	68a3      	ldr	r3, [r4, #8]
 8005e76:	bf0c      	ite	eq
 8005e78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e7c:	2500      	movne	r5, #0
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	bfc4      	itt	gt
 8005e82:	1a9b      	subgt	r3, r3, r2
 8005e84:	18ed      	addgt	r5, r5, r3
 8005e86:	2600      	movs	r6, #0
 8005e88:	341a      	adds	r4, #26
 8005e8a:	42b5      	cmp	r5, r6
 8005e8c:	d11a      	bne.n	8005ec4 <_printf_common+0xc8>
 8005e8e:	2000      	movs	r0, #0
 8005e90:	e008      	b.n	8005ea4 <_printf_common+0xa8>
 8005e92:	2301      	movs	r3, #1
 8005e94:	4652      	mov	r2, sl
 8005e96:	4641      	mov	r1, r8
 8005e98:	4638      	mov	r0, r7
 8005e9a:	47c8      	blx	r9
 8005e9c:	3001      	adds	r0, #1
 8005e9e:	d103      	bne.n	8005ea8 <_printf_common+0xac>
 8005ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ea8:	3501      	adds	r5, #1
 8005eaa:	e7c6      	b.n	8005e3a <_printf_common+0x3e>
 8005eac:	18e1      	adds	r1, r4, r3
 8005eae:	1c5a      	adds	r2, r3, #1
 8005eb0:	2030      	movs	r0, #48	@ 0x30
 8005eb2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005eb6:	4422      	add	r2, r4
 8005eb8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ebc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ec0:	3302      	adds	r3, #2
 8005ec2:	e7c7      	b.n	8005e54 <_printf_common+0x58>
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	4622      	mov	r2, r4
 8005ec8:	4641      	mov	r1, r8
 8005eca:	4638      	mov	r0, r7
 8005ecc:	47c8      	blx	r9
 8005ece:	3001      	adds	r0, #1
 8005ed0:	d0e6      	beq.n	8005ea0 <_printf_common+0xa4>
 8005ed2:	3601      	adds	r6, #1
 8005ed4:	e7d9      	b.n	8005e8a <_printf_common+0x8e>
	...

08005ed8 <_printf_i>:
 8005ed8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005edc:	7e0f      	ldrb	r7, [r1, #24]
 8005ede:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005ee0:	2f78      	cmp	r7, #120	@ 0x78
 8005ee2:	4691      	mov	r9, r2
 8005ee4:	4680      	mov	r8, r0
 8005ee6:	460c      	mov	r4, r1
 8005ee8:	469a      	mov	sl, r3
 8005eea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005eee:	d807      	bhi.n	8005f00 <_printf_i+0x28>
 8005ef0:	2f62      	cmp	r7, #98	@ 0x62
 8005ef2:	d80a      	bhi.n	8005f0a <_printf_i+0x32>
 8005ef4:	2f00      	cmp	r7, #0
 8005ef6:	f000 80d1 	beq.w	800609c <_printf_i+0x1c4>
 8005efa:	2f58      	cmp	r7, #88	@ 0x58
 8005efc:	f000 80b8 	beq.w	8006070 <_printf_i+0x198>
 8005f00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f08:	e03a      	b.n	8005f80 <_printf_i+0xa8>
 8005f0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f0e:	2b15      	cmp	r3, #21
 8005f10:	d8f6      	bhi.n	8005f00 <_printf_i+0x28>
 8005f12:	a101      	add	r1, pc, #4	@ (adr r1, 8005f18 <_printf_i+0x40>)
 8005f14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f18:	08005f71 	.word	0x08005f71
 8005f1c:	08005f85 	.word	0x08005f85
 8005f20:	08005f01 	.word	0x08005f01
 8005f24:	08005f01 	.word	0x08005f01
 8005f28:	08005f01 	.word	0x08005f01
 8005f2c:	08005f01 	.word	0x08005f01
 8005f30:	08005f85 	.word	0x08005f85
 8005f34:	08005f01 	.word	0x08005f01
 8005f38:	08005f01 	.word	0x08005f01
 8005f3c:	08005f01 	.word	0x08005f01
 8005f40:	08005f01 	.word	0x08005f01
 8005f44:	08006083 	.word	0x08006083
 8005f48:	08005faf 	.word	0x08005faf
 8005f4c:	0800603d 	.word	0x0800603d
 8005f50:	08005f01 	.word	0x08005f01
 8005f54:	08005f01 	.word	0x08005f01
 8005f58:	080060a5 	.word	0x080060a5
 8005f5c:	08005f01 	.word	0x08005f01
 8005f60:	08005faf 	.word	0x08005faf
 8005f64:	08005f01 	.word	0x08005f01
 8005f68:	08005f01 	.word	0x08005f01
 8005f6c:	08006045 	.word	0x08006045
 8005f70:	6833      	ldr	r3, [r6, #0]
 8005f72:	1d1a      	adds	r2, r3, #4
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	6032      	str	r2, [r6, #0]
 8005f78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005f80:	2301      	movs	r3, #1
 8005f82:	e09c      	b.n	80060be <_printf_i+0x1e6>
 8005f84:	6833      	ldr	r3, [r6, #0]
 8005f86:	6820      	ldr	r0, [r4, #0]
 8005f88:	1d19      	adds	r1, r3, #4
 8005f8a:	6031      	str	r1, [r6, #0]
 8005f8c:	0606      	lsls	r6, r0, #24
 8005f8e:	d501      	bpl.n	8005f94 <_printf_i+0xbc>
 8005f90:	681d      	ldr	r5, [r3, #0]
 8005f92:	e003      	b.n	8005f9c <_printf_i+0xc4>
 8005f94:	0645      	lsls	r5, r0, #25
 8005f96:	d5fb      	bpl.n	8005f90 <_printf_i+0xb8>
 8005f98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005f9c:	2d00      	cmp	r5, #0
 8005f9e:	da03      	bge.n	8005fa8 <_printf_i+0xd0>
 8005fa0:	232d      	movs	r3, #45	@ 0x2d
 8005fa2:	426d      	negs	r5, r5
 8005fa4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fa8:	4858      	ldr	r0, [pc, #352]	@ (800610c <_printf_i+0x234>)
 8005faa:	230a      	movs	r3, #10
 8005fac:	e011      	b.n	8005fd2 <_printf_i+0xfa>
 8005fae:	6821      	ldr	r1, [r4, #0]
 8005fb0:	6833      	ldr	r3, [r6, #0]
 8005fb2:	0608      	lsls	r0, r1, #24
 8005fb4:	f853 5b04 	ldr.w	r5, [r3], #4
 8005fb8:	d402      	bmi.n	8005fc0 <_printf_i+0xe8>
 8005fba:	0649      	lsls	r1, r1, #25
 8005fbc:	bf48      	it	mi
 8005fbe:	b2ad      	uxthmi	r5, r5
 8005fc0:	2f6f      	cmp	r7, #111	@ 0x6f
 8005fc2:	4852      	ldr	r0, [pc, #328]	@ (800610c <_printf_i+0x234>)
 8005fc4:	6033      	str	r3, [r6, #0]
 8005fc6:	bf14      	ite	ne
 8005fc8:	230a      	movne	r3, #10
 8005fca:	2308      	moveq	r3, #8
 8005fcc:	2100      	movs	r1, #0
 8005fce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005fd2:	6866      	ldr	r6, [r4, #4]
 8005fd4:	60a6      	str	r6, [r4, #8]
 8005fd6:	2e00      	cmp	r6, #0
 8005fd8:	db05      	blt.n	8005fe6 <_printf_i+0x10e>
 8005fda:	6821      	ldr	r1, [r4, #0]
 8005fdc:	432e      	orrs	r6, r5
 8005fde:	f021 0104 	bic.w	r1, r1, #4
 8005fe2:	6021      	str	r1, [r4, #0]
 8005fe4:	d04b      	beq.n	800607e <_printf_i+0x1a6>
 8005fe6:	4616      	mov	r6, r2
 8005fe8:	fbb5 f1f3 	udiv	r1, r5, r3
 8005fec:	fb03 5711 	mls	r7, r3, r1, r5
 8005ff0:	5dc7      	ldrb	r7, [r0, r7]
 8005ff2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ff6:	462f      	mov	r7, r5
 8005ff8:	42bb      	cmp	r3, r7
 8005ffa:	460d      	mov	r5, r1
 8005ffc:	d9f4      	bls.n	8005fe8 <_printf_i+0x110>
 8005ffe:	2b08      	cmp	r3, #8
 8006000:	d10b      	bne.n	800601a <_printf_i+0x142>
 8006002:	6823      	ldr	r3, [r4, #0]
 8006004:	07df      	lsls	r7, r3, #31
 8006006:	d508      	bpl.n	800601a <_printf_i+0x142>
 8006008:	6923      	ldr	r3, [r4, #16]
 800600a:	6861      	ldr	r1, [r4, #4]
 800600c:	4299      	cmp	r1, r3
 800600e:	bfde      	ittt	le
 8006010:	2330      	movle	r3, #48	@ 0x30
 8006012:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006016:	f106 36ff 	addle.w	r6, r6, #4294967295
 800601a:	1b92      	subs	r2, r2, r6
 800601c:	6122      	str	r2, [r4, #16]
 800601e:	f8cd a000 	str.w	sl, [sp]
 8006022:	464b      	mov	r3, r9
 8006024:	aa03      	add	r2, sp, #12
 8006026:	4621      	mov	r1, r4
 8006028:	4640      	mov	r0, r8
 800602a:	f7ff fee7 	bl	8005dfc <_printf_common>
 800602e:	3001      	adds	r0, #1
 8006030:	d14a      	bne.n	80060c8 <_printf_i+0x1f0>
 8006032:	f04f 30ff 	mov.w	r0, #4294967295
 8006036:	b004      	add	sp, #16
 8006038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800603c:	6823      	ldr	r3, [r4, #0]
 800603e:	f043 0320 	orr.w	r3, r3, #32
 8006042:	6023      	str	r3, [r4, #0]
 8006044:	4832      	ldr	r0, [pc, #200]	@ (8006110 <_printf_i+0x238>)
 8006046:	2778      	movs	r7, #120	@ 0x78
 8006048:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800604c:	6823      	ldr	r3, [r4, #0]
 800604e:	6831      	ldr	r1, [r6, #0]
 8006050:	061f      	lsls	r7, r3, #24
 8006052:	f851 5b04 	ldr.w	r5, [r1], #4
 8006056:	d402      	bmi.n	800605e <_printf_i+0x186>
 8006058:	065f      	lsls	r7, r3, #25
 800605a:	bf48      	it	mi
 800605c:	b2ad      	uxthmi	r5, r5
 800605e:	6031      	str	r1, [r6, #0]
 8006060:	07d9      	lsls	r1, r3, #31
 8006062:	bf44      	itt	mi
 8006064:	f043 0320 	orrmi.w	r3, r3, #32
 8006068:	6023      	strmi	r3, [r4, #0]
 800606a:	b11d      	cbz	r5, 8006074 <_printf_i+0x19c>
 800606c:	2310      	movs	r3, #16
 800606e:	e7ad      	b.n	8005fcc <_printf_i+0xf4>
 8006070:	4826      	ldr	r0, [pc, #152]	@ (800610c <_printf_i+0x234>)
 8006072:	e7e9      	b.n	8006048 <_printf_i+0x170>
 8006074:	6823      	ldr	r3, [r4, #0]
 8006076:	f023 0320 	bic.w	r3, r3, #32
 800607a:	6023      	str	r3, [r4, #0]
 800607c:	e7f6      	b.n	800606c <_printf_i+0x194>
 800607e:	4616      	mov	r6, r2
 8006080:	e7bd      	b.n	8005ffe <_printf_i+0x126>
 8006082:	6833      	ldr	r3, [r6, #0]
 8006084:	6825      	ldr	r5, [r4, #0]
 8006086:	6961      	ldr	r1, [r4, #20]
 8006088:	1d18      	adds	r0, r3, #4
 800608a:	6030      	str	r0, [r6, #0]
 800608c:	062e      	lsls	r6, r5, #24
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	d501      	bpl.n	8006096 <_printf_i+0x1be>
 8006092:	6019      	str	r1, [r3, #0]
 8006094:	e002      	b.n	800609c <_printf_i+0x1c4>
 8006096:	0668      	lsls	r0, r5, #25
 8006098:	d5fb      	bpl.n	8006092 <_printf_i+0x1ba>
 800609a:	8019      	strh	r1, [r3, #0]
 800609c:	2300      	movs	r3, #0
 800609e:	6123      	str	r3, [r4, #16]
 80060a0:	4616      	mov	r6, r2
 80060a2:	e7bc      	b.n	800601e <_printf_i+0x146>
 80060a4:	6833      	ldr	r3, [r6, #0]
 80060a6:	1d1a      	adds	r2, r3, #4
 80060a8:	6032      	str	r2, [r6, #0]
 80060aa:	681e      	ldr	r6, [r3, #0]
 80060ac:	6862      	ldr	r2, [r4, #4]
 80060ae:	2100      	movs	r1, #0
 80060b0:	4630      	mov	r0, r6
 80060b2:	f7fa f915 	bl	80002e0 <memchr>
 80060b6:	b108      	cbz	r0, 80060bc <_printf_i+0x1e4>
 80060b8:	1b80      	subs	r0, r0, r6
 80060ba:	6060      	str	r0, [r4, #4]
 80060bc:	6863      	ldr	r3, [r4, #4]
 80060be:	6123      	str	r3, [r4, #16]
 80060c0:	2300      	movs	r3, #0
 80060c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060c6:	e7aa      	b.n	800601e <_printf_i+0x146>
 80060c8:	6923      	ldr	r3, [r4, #16]
 80060ca:	4632      	mov	r2, r6
 80060cc:	4649      	mov	r1, r9
 80060ce:	4640      	mov	r0, r8
 80060d0:	47d0      	blx	sl
 80060d2:	3001      	adds	r0, #1
 80060d4:	d0ad      	beq.n	8006032 <_printf_i+0x15a>
 80060d6:	6823      	ldr	r3, [r4, #0]
 80060d8:	079b      	lsls	r3, r3, #30
 80060da:	d413      	bmi.n	8006104 <_printf_i+0x22c>
 80060dc:	68e0      	ldr	r0, [r4, #12]
 80060de:	9b03      	ldr	r3, [sp, #12]
 80060e0:	4298      	cmp	r0, r3
 80060e2:	bfb8      	it	lt
 80060e4:	4618      	movlt	r0, r3
 80060e6:	e7a6      	b.n	8006036 <_printf_i+0x15e>
 80060e8:	2301      	movs	r3, #1
 80060ea:	4632      	mov	r2, r6
 80060ec:	4649      	mov	r1, r9
 80060ee:	4640      	mov	r0, r8
 80060f0:	47d0      	blx	sl
 80060f2:	3001      	adds	r0, #1
 80060f4:	d09d      	beq.n	8006032 <_printf_i+0x15a>
 80060f6:	3501      	adds	r5, #1
 80060f8:	68e3      	ldr	r3, [r4, #12]
 80060fa:	9903      	ldr	r1, [sp, #12]
 80060fc:	1a5b      	subs	r3, r3, r1
 80060fe:	42ab      	cmp	r3, r5
 8006100:	dcf2      	bgt.n	80060e8 <_printf_i+0x210>
 8006102:	e7eb      	b.n	80060dc <_printf_i+0x204>
 8006104:	2500      	movs	r5, #0
 8006106:	f104 0619 	add.w	r6, r4, #25
 800610a:	e7f5      	b.n	80060f8 <_printf_i+0x220>
 800610c:	0800649d 	.word	0x0800649d
 8006110:	080064ae 	.word	0x080064ae

08006114 <__sflush_r>:
 8006114:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800611c:	0716      	lsls	r6, r2, #28
 800611e:	4605      	mov	r5, r0
 8006120:	460c      	mov	r4, r1
 8006122:	d454      	bmi.n	80061ce <__sflush_r+0xba>
 8006124:	684b      	ldr	r3, [r1, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	dc02      	bgt.n	8006130 <__sflush_r+0x1c>
 800612a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800612c:	2b00      	cmp	r3, #0
 800612e:	dd48      	ble.n	80061c2 <__sflush_r+0xae>
 8006130:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006132:	2e00      	cmp	r6, #0
 8006134:	d045      	beq.n	80061c2 <__sflush_r+0xae>
 8006136:	2300      	movs	r3, #0
 8006138:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800613c:	682f      	ldr	r7, [r5, #0]
 800613e:	6a21      	ldr	r1, [r4, #32]
 8006140:	602b      	str	r3, [r5, #0]
 8006142:	d030      	beq.n	80061a6 <__sflush_r+0x92>
 8006144:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006146:	89a3      	ldrh	r3, [r4, #12]
 8006148:	0759      	lsls	r1, r3, #29
 800614a:	d505      	bpl.n	8006158 <__sflush_r+0x44>
 800614c:	6863      	ldr	r3, [r4, #4]
 800614e:	1ad2      	subs	r2, r2, r3
 8006150:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006152:	b10b      	cbz	r3, 8006158 <__sflush_r+0x44>
 8006154:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006156:	1ad2      	subs	r2, r2, r3
 8006158:	2300      	movs	r3, #0
 800615a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800615c:	6a21      	ldr	r1, [r4, #32]
 800615e:	4628      	mov	r0, r5
 8006160:	47b0      	blx	r6
 8006162:	1c43      	adds	r3, r0, #1
 8006164:	89a3      	ldrh	r3, [r4, #12]
 8006166:	d106      	bne.n	8006176 <__sflush_r+0x62>
 8006168:	6829      	ldr	r1, [r5, #0]
 800616a:	291d      	cmp	r1, #29
 800616c:	d82b      	bhi.n	80061c6 <__sflush_r+0xb2>
 800616e:	4a2a      	ldr	r2, [pc, #168]	@ (8006218 <__sflush_r+0x104>)
 8006170:	40ca      	lsrs	r2, r1
 8006172:	07d6      	lsls	r6, r2, #31
 8006174:	d527      	bpl.n	80061c6 <__sflush_r+0xb2>
 8006176:	2200      	movs	r2, #0
 8006178:	6062      	str	r2, [r4, #4]
 800617a:	04d9      	lsls	r1, r3, #19
 800617c:	6922      	ldr	r2, [r4, #16]
 800617e:	6022      	str	r2, [r4, #0]
 8006180:	d504      	bpl.n	800618c <__sflush_r+0x78>
 8006182:	1c42      	adds	r2, r0, #1
 8006184:	d101      	bne.n	800618a <__sflush_r+0x76>
 8006186:	682b      	ldr	r3, [r5, #0]
 8006188:	b903      	cbnz	r3, 800618c <__sflush_r+0x78>
 800618a:	6560      	str	r0, [r4, #84]	@ 0x54
 800618c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800618e:	602f      	str	r7, [r5, #0]
 8006190:	b1b9      	cbz	r1, 80061c2 <__sflush_r+0xae>
 8006192:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006196:	4299      	cmp	r1, r3
 8006198:	d002      	beq.n	80061a0 <__sflush_r+0x8c>
 800619a:	4628      	mov	r0, r5
 800619c:	f7ff fbf4 	bl	8005988 <_free_r>
 80061a0:	2300      	movs	r3, #0
 80061a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80061a4:	e00d      	b.n	80061c2 <__sflush_r+0xae>
 80061a6:	2301      	movs	r3, #1
 80061a8:	4628      	mov	r0, r5
 80061aa:	47b0      	blx	r6
 80061ac:	4602      	mov	r2, r0
 80061ae:	1c50      	adds	r0, r2, #1
 80061b0:	d1c9      	bne.n	8006146 <__sflush_r+0x32>
 80061b2:	682b      	ldr	r3, [r5, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d0c6      	beq.n	8006146 <__sflush_r+0x32>
 80061b8:	2b1d      	cmp	r3, #29
 80061ba:	d001      	beq.n	80061c0 <__sflush_r+0xac>
 80061bc:	2b16      	cmp	r3, #22
 80061be:	d11e      	bne.n	80061fe <__sflush_r+0xea>
 80061c0:	602f      	str	r7, [r5, #0]
 80061c2:	2000      	movs	r0, #0
 80061c4:	e022      	b.n	800620c <__sflush_r+0xf8>
 80061c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061ca:	b21b      	sxth	r3, r3
 80061cc:	e01b      	b.n	8006206 <__sflush_r+0xf2>
 80061ce:	690f      	ldr	r7, [r1, #16]
 80061d0:	2f00      	cmp	r7, #0
 80061d2:	d0f6      	beq.n	80061c2 <__sflush_r+0xae>
 80061d4:	0793      	lsls	r3, r2, #30
 80061d6:	680e      	ldr	r6, [r1, #0]
 80061d8:	bf08      	it	eq
 80061da:	694b      	ldreq	r3, [r1, #20]
 80061dc:	600f      	str	r7, [r1, #0]
 80061de:	bf18      	it	ne
 80061e0:	2300      	movne	r3, #0
 80061e2:	eba6 0807 	sub.w	r8, r6, r7
 80061e6:	608b      	str	r3, [r1, #8]
 80061e8:	f1b8 0f00 	cmp.w	r8, #0
 80061ec:	dde9      	ble.n	80061c2 <__sflush_r+0xae>
 80061ee:	6a21      	ldr	r1, [r4, #32]
 80061f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80061f2:	4643      	mov	r3, r8
 80061f4:	463a      	mov	r2, r7
 80061f6:	4628      	mov	r0, r5
 80061f8:	47b0      	blx	r6
 80061fa:	2800      	cmp	r0, #0
 80061fc:	dc08      	bgt.n	8006210 <__sflush_r+0xfc>
 80061fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006202:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006206:	81a3      	strh	r3, [r4, #12]
 8006208:	f04f 30ff 	mov.w	r0, #4294967295
 800620c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006210:	4407      	add	r7, r0
 8006212:	eba8 0800 	sub.w	r8, r8, r0
 8006216:	e7e7      	b.n	80061e8 <__sflush_r+0xd4>
 8006218:	20400001 	.word	0x20400001

0800621c <_fflush_r>:
 800621c:	b538      	push	{r3, r4, r5, lr}
 800621e:	690b      	ldr	r3, [r1, #16]
 8006220:	4605      	mov	r5, r0
 8006222:	460c      	mov	r4, r1
 8006224:	b913      	cbnz	r3, 800622c <_fflush_r+0x10>
 8006226:	2500      	movs	r5, #0
 8006228:	4628      	mov	r0, r5
 800622a:	bd38      	pop	{r3, r4, r5, pc}
 800622c:	b118      	cbz	r0, 8006236 <_fflush_r+0x1a>
 800622e:	6a03      	ldr	r3, [r0, #32]
 8006230:	b90b      	cbnz	r3, 8006236 <_fflush_r+0x1a>
 8006232:	f7ff f9af 	bl	8005594 <__sinit>
 8006236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d0f3      	beq.n	8006226 <_fflush_r+0xa>
 800623e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006240:	07d0      	lsls	r0, r2, #31
 8006242:	d404      	bmi.n	800624e <_fflush_r+0x32>
 8006244:	0599      	lsls	r1, r3, #22
 8006246:	d402      	bmi.n	800624e <_fflush_r+0x32>
 8006248:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800624a:	f7ff fb9a 	bl	8005982 <__retarget_lock_acquire_recursive>
 800624e:	4628      	mov	r0, r5
 8006250:	4621      	mov	r1, r4
 8006252:	f7ff ff5f 	bl	8006114 <__sflush_r>
 8006256:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006258:	07da      	lsls	r2, r3, #31
 800625a:	4605      	mov	r5, r0
 800625c:	d4e4      	bmi.n	8006228 <_fflush_r+0xc>
 800625e:	89a3      	ldrh	r3, [r4, #12]
 8006260:	059b      	lsls	r3, r3, #22
 8006262:	d4e1      	bmi.n	8006228 <_fflush_r+0xc>
 8006264:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006266:	f7ff fb8d 	bl	8005984 <__retarget_lock_release_recursive>
 800626a:	e7dd      	b.n	8006228 <_fflush_r+0xc>

0800626c <__swhatbuf_r>:
 800626c:	b570      	push	{r4, r5, r6, lr}
 800626e:	460c      	mov	r4, r1
 8006270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006274:	2900      	cmp	r1, #0
 8006276:	b096      	sub	sp, #88	@ 0x58
 8006278:	4615      	mov	r5, r2
 800627a:	461e      	mov	r6, r3
 800627c:	da0d      	bge.n	800629a <__swhatbuf_r+0x2e>
 800627e:	89a3      	ldrh	r3, [r4, #12]
 8006280:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006284:	f04f 0100 	mov.w	r1, #0
 8006288:	bf14      	ite	ne
 800628a:	2340      	movne	r3, #64	@ 0x40
 800628c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006290:	2000      	movs	r0, #0
 8006292:	6031      	str	r1, [r6, #0]
 8006294:	602b      	str	r3, [r5, #0]
 8006296:	b016      	add	sp, #88	@ 0x58
 8006298:	bd70      	pop	{r4, r5, r6, pc}
 800629a:	466a      	mov	r2, sp
 800629c:	f000 f848 	bl	8006330 <_fstat_r>
 80062a0:	2800      	cmp	r0, #0
 80062a2:	dbec      	blt.n	800627e <__swhatbuf_r+0x12>
 80062a4:	9901      	ldr	r1, [sp, #4]
 80062a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80062aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80062ae:	4259      	negs	r1, r3
 80062b0:	4159      	adcs	r1, r3
 80062b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80062b6:	e7eb      	b.n	8006290 <__swhatbuf_r+0x24>

080062b8 <__smakebuf_r>:
 80062b8:	898b      	ldrh	r3, [r1, #12]
 80062ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062bc:	079d      	lsls	r5, r3, #30
 80062be:	4606      	mov	r6, r0
 80062c0:	460c      	mov	r4, r1
 80062c2:	d507      	bpl.n	80062d4 <__smakebuf_r+0x1c>
 80062c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80062c8:	6023      	str	r3, [r4, #0]
 80062ca:	6123      	str	r3, [r4, #16]
 80062cc:	2301      	movs	r3, #1
 80062ce:	6163      	str	r3, [r4, #20]
 80062d0:	b003      	add	sp, #12
 80062d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062d4:	ab01      	add	r3, sp, #4
 80062d6:	466a      	mov	r2, sp
 80062d8:	f7ff ffc8 	bl	800626c <__swhatbuf_r>
 80062dc:	9f00      	ldr	r7, [sp, #0]
 80062de:	4605      	mov	r5, r0
 80062e0:	4639      	mov	r1, r7
 80062e2:	4630      	mov	r0, r6
 80062e4:	f7ff fbbc 	bl	8005a60 <_malloc_r>
 80062e8:	b948      	cbnz	r0, 80062fe <__smakebuf_r+0x46>
 80062ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062ee:	059a      	lsls	r2, r3, #22
 80062f0:	d4ee      	bmi.n	80062d0 <__smakebuf_r+0x18>
 80062f2:	f023 0303 	bic.w	r3, r3, #3
 80062f6:	f043 0302 	orr.w	r3, r3, #2
 80062fa:	81a3      	strh	r3, [r4, #12]
 80062fc:	e7e2      	b.n	80062c4 <__smakebuf_r+0xc>
 80062fe:	89a3      	ldrh	r3, [r4, #12]
 8006300:	6020      	str	r0, [r4, #0]
 8006302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006306:	81a3      	strh	r3, [r4, #12]
 8006308:	9b01      	ldr	r3, [sp, #4]
 800630a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800630e:	b15b      	cbz	r3, 8006328 <__smakebuf_r+0x70>
 8006310:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006314:	4630      	mov	r0, r6
 8006316:	f000 f81d 	bl	8006354 <_isatty_r>
 800631a:	b128      	cbz	r0, 8006328 <__smakebuf_r+0x70>
 800631c:	89a3      	ldrh	r3, [r4, #12]
 800631e:	f023 0303 	bic.w	r3, r3, #3
 8006322:	f043 0301 	orr.w	r3, r3, #1
 8006326:	81a3      	strh	r3, [r4, #12]
 8006328:	89a3      	ldrh	r3, [r4, #12]
 800632a:	431d      	orrs	r5, r3
 800632c:	81a5      	strh	r5, [r4, #12]
 800632e:	e7cf      	b.n	80062d0 <__smakebuf_r+0x18>

08006330 <_fstat_r>:
 8006330:	b538      	push	{r3, r4, r5, lr}
 8006332:	4d07      	ldr	r5, [pc, #28]	@ (8006350 <_fstat_r+0x20>)
 8006334:	2300      	movs	r3, #0
 8006336:	4604      	mov	r4, r0
 8006338:	4608      	mov	r0, r1
 800633a:	4611      	mov	r1, r2
 800633c:	602b      	str	r3, [r5, #0]
 800633e:	f7fa fb69 	bl	8000a14 <_fstat>
 8006342:	1c43      	adds	r3, r0, #1
 8006344:	d102      	bne.n	800634c <_fstat_r+0x1c>
 8006346:	682b      	ldr	r3, [r5, #0]
 8006348:	b103      	cbz	r3, 800634c <_fstat_r+0x1c>
 800634a:	6023      	str	r3, [r4, #0]
 800634c:	bd38      	pop	{r3, r4, r5, pc}
 800634e:	bf00      	nop
 8006350:	24000260 	.word	0x24000260

08006354 <_isatty_r>:
 8006354:	b538      	push	{r3, r4, r5, lr}
 8006356:	4d06      	ldr	r5, [pc, #24]	@ (8006370 <_isatty_r+0x1c>)
 8006358:	2300      	movs	r3, #0
 800635a:	4604      	mov	r4, r0
 800635c:	4608      	mov	r0, r1
 800635e:	602b      	str	r3, [r5, #0]
 8006360:	f7fa fb68 	bl	8000a34 <_isatty>
 8006364:	1c43      	adds	r3, r0, #1
 8006366:	d102      	bne.n	800636e <_isatty_r+0x1a>
 8006368:	682b      	ldr	r3, [r5, #0]
 800636a:	b103      	cbz	r3, 800636e <_isatty_r+0x1a>
 800636c:	6023      	str	r3, [r4, #0]
 800636e:	bd38      	pop	{r3, r4, r5, pc}
 8006370:	24000260 	.word	0x24000260

08006374 <_sbrk_r>:
 8006374:	b538      	push	{r3, r4, r5, lr}
 8006376:	4d06      	ldr	r5, [pc, #24]	@ (8006390 <_sbrk_r+0x1c>)
 8006378:	2300      	movs	r3, #0
 800637a:	4604      	mov	r4, r0
 800637c:	4608      	mov	r0, r1
 800637e:	602b      	str	r3, [r5, #0]
 8006380:	f7fa fb70 	bl	8000a64 <_sbrk>
 8006384:	1c43      	adds	r3, r0, #1
 8006386:	d102      	bne.n	800638e <_sbrk_r+0x1a>
 8006388:	682b      	ldr	r3, [r5, #0]
 800638a:	b103      	cbz	r3, 800638e <_sbrk_r+0x1a>
 800638c:	6023      	str	r3, [r4, #0]
 800638e:	bd38      	pop	{r3, r4, r5, pc}
 8006390:	24000260 	.word	0x24000260

08006394 <_init>:
 8006394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006396:	bf00      	nop
 8006398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800639a:	bc08      	pop	{r3}
 800639c:	469e      	mov	lr, r3
 800639e:	4770      	bx	lr

080063a0 <_fini>:
 80063a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063a2:	bf00      	nop
 80063a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063a6:	bc08      	pop	{r3}
 80063a8:	469e      	mov	lr, r3
 80063aa:	4770      	bx	lr

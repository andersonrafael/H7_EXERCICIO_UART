
H7_EXERCICIO_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006314  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  080065b4  080065b4  000075b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006784  08006784  00007784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800678c  0800678c  0000778c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006790  08006790  00007790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  08006794  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000208  2400006c  08006800  0000806c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000274  08006800  00008274  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000fe22  00000000  00000000  0000809a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002191  00000000  00000000  00017ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000b18  00000000  00000000  0001a050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000872  00000000  00000000  0001ab68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038471  00000000  00000000  0001b3da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000fe7f  00000000  00000000  0005384b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00165cec  00000000  00000000  000636ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c93b6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000341c  00000000  00000000  001c93fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  001cc818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400006c 	.word	0x2400006c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800659c 	.word	0x0800659c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000070 	.word	0x24000070
 80002dc:	0800659c 	.word	0x0800659c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	@ 0x28
 80006b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c2:	4b42      	ldr	r3, [pc, #264]	@ (80007cc <MX_GPIO_Init+0x120>)
 80006c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006c8:	4a40      	ldr	r2, [pc, #256]	@ (80007cc <MX_GPIO_Init+0x120>)
 80006ca:	f043 0304 	orr.w	r3, r3, #4
 80006ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006d2:	4b3e      	ldr	r3, [pc, #248]	@ (80007cc <MX_GPIO_Init+0x120>)
 80006d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d8:	f003 0304 	and.w	r3, r3, #4
 80006dc:	613b      	str	r3, [r7, #16]
 80006de:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e0:	4b3a      	ldr	r3, [pc, #232]	@ (80007cc <MX_GPIO_Init+0x120>)
 80006e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e6:	4a39      	ldr	r2, [pc, #228]	@ (80007cc <MX_GPIO_Init+0x120>)
 80006e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006f0:	4b36      	ldr	r3, [pc, #216]	@ (80007cc <MX_GPIO_Init+0x120>)
 80006f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fe:	4b33      	ldr	r3, [pc, #204]	@ (80007cc <MX_GPIO_Init+0x120>)
 8000700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000704:	4a31      	ldr	r2, [pc, #196]	@ (80007cc <MX_GPIO_Init+0x120>)
 8000706:	f043 0302 	orr.w	r3, r3, #2
 800070a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800070e:	4b2f      	ldr	r3, [pc, #188]	@ (80007cc <MX_GPIO_Init+0x120>)
 8000710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000714:	f003 0302 	and.w	r3, r3, #2
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800071c:	4b2b      	ldr	r3, [pc, #172]	@ (80007cc <MX_GPIO_Init+0x120>)
 800071e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000722:	4a2a      	ldr	r2, [pc, #168]	@ (80007cc <MX_GPIO_Init+0x120>)
 8000724:	f043 0310 	orr.w	r3, r3, #16
 8000728:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800072c:	4b27      	ldr	r3, [pc, #156]	@ (80007cc <MX_GPIO_Init+0x120>)
 800072e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000732:	f003 0310 	and.w	r3, r3, #16
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073a:	4b24      	ldr	r3, [pc, #144]	@ (80007cc <MX_GPIO_Init+0x120>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000740:	4a22      	ldr	r2, [pc, #136]	@ (80007cc <MX_GPIO_Init+0x120>)
 8000742:	f043 0308 	orr.w	r3, r3, #8
 8000746:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800074a:	4b20      	ldr	r3, [pc, #128]	@ (80007cc <MX_GPIO_Init+0x120>)
 800074c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000750:	f003 0308 	and.w	r3, r3, #8
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	f244 0101 	movw	r1, #16385	@ 0x4001
 800075e:	481c      	ldr	r0, [pc, #112]	@ (80007d0 <MX_GPIO_Init+0x124>)
 8000760:	f000 fef8 	bl	8001554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2102      	movs	r1, #2
 8000768:	481a      	ldr	r0, [pc, #104]	@ (80007d4 <MX_GPIO_Init+0x128>)
 800076a:	f000 fef3 	bl	8001554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800076e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000774:	2300      	movs	r3, #0
 8000776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4619      	mov	r1, r3
 8000782:	4815      	ldr	r0, [pc, #84]	@ (80007d8 <MX_GPIO_Init+0x12c>)
 8000784:	f000 fd36 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000788:	f244 0301 	movw	r3, #16385	@ 0x4001
 800078c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078e:	2301      	movs	r3, #1
 8000790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000796:	2300      	movs	r3, #0
 8000798:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	4619      	mov	r1, r3
 80007a0:	480b      	ldr	r0, [pc, #44]	@ (80007d0 <MX_GPIO_Init+0x124>)
 80007a2:	f000 fd27 	bl	80011f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007a6:	2302      	movs	r3, #2
 80007a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	4805      	ldr	r0, [pc, #20]	@ (80007d4 <MX_GPIO_Init+0x128>)
 80007be:	f000 fd19 	bl	80011f4 <HAL_GPIO_Init>

}
 80007c2:	bf00      	nop
 80007c4:	3728      	adds	r7, #40	@ 0x28
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	58024400 	.word	0x58024400
 80007d0:	58020400 	.word	0x58020400
 80007d4:	58021000 	.word	0x58021000
 80007d8:	58020800 	.word	0x58020800

080007dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e0:	f000 fb62 	bl	8000ea8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e4:	f000 f848 	bl	8000878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e8:	f7ff ff60 	bl	80006ac <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007ec:	f000 fa64 	bl	8000cb8 <MX_USART3_UART_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while (1)
	  {
	    Display_Menu();
 80007f0:	f000 f8ac 	bl	800094c <Display_Menu>

	    // Aguarda entrada do usuário
	    if (HAL_UART_Receive(&huart3, &rx_data, 1, HAL_MAX_DELAY) == HAL_OK)
 80007f4:	f04f 33ff 	mov.w	r3, #4294967295
 80007f8:	2201      	movs	r2, #1
 80007fa:	4918      	ldr	r1, [pc, #96]	@ (800085c <main+0x80>)
 80007fc:	4818      	ldr	r0, [pc, #96]	@ (8000860 <main+0x84>)
 80007fe:	f003 fded 	bl	80043dc <HAL_UART_Receive>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d123      	bne.n	8000850 <main+0x74>
	    {
	      switch (rx_data)
 8000808:	4b14      	ldr	r3, [pc, #80]	@ (800085c <main+0x80>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	3b31      	subs	r3, #49	@ 0x31
 800080e:	2b03      	cmp	r3, #3
 8000810:	d81a      	bhi.n	8000848 <main+0x6c>
 8000812:	a201      	add	r2, pc, #4	@ (adr r2, 8000818 <main+0x3c>)
 8000814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000818:	08000829 	.word	0x08000829
 800081c:	08000831 	.word	0x08000831
 8000820:	08000839 	.word	0x08000839
 8000824:	08000841 	.word	0x08000841
	      {
	        case '1':
	          printf(">> Duty fixo 20%% selecionado.\r\n");
 8000828:	480e      	ldr	r0, [pc, #56]	@ (8000864 <main+0x88>)
 800082a:	f004 ffed 	bl	8005808 <iprintf>
	          // Chame aqui a função que ajusta o PWM para 20%
	          break;
 800082e:	e00f      	b.n	8000850 <main+0x74>

	        case '2':
	          printf(">> Duty fixo 80%% selecionado.\r\n");
 8000830:	480d      	ldr	r0, [pc, #52]	@ (8000868 <main+0x8c>)
 8000832:	f004 ffe9 	bl	8005808 <iprintf>
	          // Função para PWM 80%
	          break;
 8000836:	e00b      	b.n	8000850 <main+0x74>

	        case '3':
	          printf(">> Ramp 0-100%% em 5s selecionado.\r\n");
 8000838:	480c      	ldr	r0, [pc, #48]	@ (800086c <main+0x90>)
 800083a:	f004 ffe5 	bl	8005808 <iprintf>
	          // Ramp function
	          break;
 800083e:	e007      	b.n	8000850 <main+0x74>

	        case '4':
	          printf(">> Incremento de 10%% por botão.\r\n");
 8000840:	480b      	ldr	r0, [pc, #44]	@ (8000870 <main+0x94>)
 8000842:	f004 ffe1 	bl	8005808 <iprintf>
	          // Botão handler
	          break;
 8000846:	e003      	b.n	8000850 <main+0x74>

	        default:
	          printf(">> Opcao invalida. Tente novamente.\r\n");
 8000848:	480a      	ldr	r0, [pc, #40]	@ (8000874 <main+0x98>)
 800084a:	f005 f845 	bl	80058d8 <puts>
	          break;
 800084e:	bf00      	nop
	      }
	    }

	    HAL_Delay(1000); // Pequeno delay para estabilidade
 8000850:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000854:	f000 fbba 	bl	8000fcc <HAL_Delay>
	    Display_Menu();
 8000858:	e7ca      	b.n	80007f0 <main+0x14>
 800085a:	bf00      	nop
 800085c:	24000088 	.word	0x24000088
 8000860:	24000090 	.word	0x24000090
 8000864:	080065b4 	.word	0x080065b4
 8000868:	080065d8 	.word	0x080065d8
 800086c:	080065fc 	.word	0x080065fc
 8000870:	08006624 	.word	0x08006624
 8000874:	08006648 	.word	0x08006648

08000878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b09c      	sub	sp, #112	@ 0x70
 800087c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000882:	224c      	movs	r2, #76	@ 0x4c
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f005 f906 	bl	8005a98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2220      	movs	r2, #32
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f005 f900 	bl	8005a98 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000898:	2002      	movs	r0, #2
 800089a:	f000 fe75 	bl	8001588 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800089e:	2300      	movs	r3, #0
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	4b28      	ldr	r3, [pc, #160]	@ (8000944 <SystemClock_Config+0xcc>)
 80008a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008a6:	4a27      	ldr	r2, [pc, #156]	@ (8000944 <SystemClock_Config+0xcc>)
 80008a8:	f023 0301 	bic.w	r3, r3, #1
 80008ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008ae:	4b25      	ldr	r3, [pc, #148]	@ (8000944 <SystemClock_Config+0xcc>)
 80008b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	4b23      	ldr	r3, [pc, #140]	@ (8000948 <SystemClock_Config+0xd0>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008c0:	4a21      	ldr	r2, [pc, #132]	@ (8000948 <SystemClock_Config+0xd0>)
 80008c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008c6:	6193      	str	r3, [r2, #24]
 80008c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000948 <SystemClock_Config+0xd0>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008d0:	603b      	str	r3, [r7, #0]
 80008d2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008d4:	bf00      	nop
 80008d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000948 <SystemClock_Config+0xd0>)
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008e2:	d1f8      	bne.n	80008d6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008e4:	2302      	movs	r3, #2
 80008e6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008e8:	2301      	movs	r3, #1
 80008ea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ec:	2340      	movs	r3, #64	@ 0x40
 80008ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008f8:	4618      	mov	r0, r3
 80008fa:	f000 fe7f 	bl	80015fc <HAL_RCC_OscConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000904:	f000 f84a 	bl	800099c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000908:	233f      	movs	r3, #63	@ 0x3f
 800090a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800090c:	2300      	movs	r3, #0
 800090e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	2101      	movs	r1, #1
 800092c:	4618      	mov	r0, r3
 800092e:	f001 fabf 	bl	8001eb0 <HAL_RCC_ClockConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000938:	f000 f830 	bl	800099c <Error_Handler>
  }
}
 800093c:	bf00      	nop
 800093e:	3770      	adds	r7, #112	@ 0x70
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	58000400 	.word	0x58000400
 8000948:	58024800 	.word	0x58024800

0800094c <Display_Menu>:
/* USER CODE BEGIN 4 */
/**
  * @brief Exibe o menu de opções via UART.
  * @retval None
  */
void Display_Menu(void) {
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
    printf("\r\n"); // Nova linha para melhor formatação
 8000950:	480b      	ldr	r0, [pc, #44]	@ (8000980 <Display_Menu+0x34>)
 8000952:	f004 ffc1 	bl	80058d8 <puts>
    printf("===== CONTROLE DE PWM =====\r\n");
 8000956:	480b      	ldr	r0, [pc, #44]	@ (8000984 <Display_Menu+0x38>)
 8000958:	f004 ffbe 	bl	80058d8 <puts>
    printf("[1] Duty fixo 20%%\r\n");
 800095c:	480a      	ldr	r0, [pc, #40]	@ (8000988 <Display_Menu+0x3c>)
 800095e:	f004 ff53 	bl	8005808 <iprintf>
    printf("[2] Duty fixo 80%%\r\n");
 8000962:	480a      	ldr	r0, [pc, #40]	@ (800098c <Display_Menu+0x40>)
 8000964:	f004 ff50 	bl	8005808 <iprintf>
    printf("[3] Ramp 0-100%% em 5 s\r\n");
 8000968:	4809      	ldr	r0, [pc, #36]	@ (8000990 <Display_Menu+0x44>)
 800096a:	f004 ff4d 	bl	8005808 <iprintf>
    printf("[4] +10%% por clique no botao\r\n");
 800096e:	4809      	ldr	r0, [pc, #36]	@ (8000994 <Display_Menu+0x48>)
 8000970:	f004 ff4a 	bl	8005808 <iprintf>
    printf("Selecione a opcao: \r\n");
 8000974:	4808      	ldr	r0, [pc, #32]	@ (8000998 <Display_Menu+0x4c>)
 8000976:	f004 ffaf 	bl	80058d8 <puts>
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	08006670 	.word	0x08006670
 8000984:	08006674 	.word	0x08006674
 8000988:	08006694 	.word	0x08006694
 800098c:	080066ac 	.word	0x080066ac
 8000990:	080066c4 	.word	0x080066c4
 8000994:	080066e0 	.word	0x080066e0
 8000998:	08006700 	.word	0x08006700

0800099c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a0:	b672      	cpsid	i
}
 80009a2:	bf00      	nop
  __disable_irq();


    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <Error_Handler+0x8>

080009a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ae:	4b0a      	ldr	r3, [pc, #40]	@ (80009d8 <HAL_MspInit+0x30>)
 80009b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009b4:	4a08      	ldr	r2, [pc, #32]	@ (80009d8 <HAL_MspInit+0x30>)
 80009b6:	f043 0302 	orr.w	r3, r3, #2
 80009ba:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80009be:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <HAL_MspInit+0x30>)
 80009c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009c4:	f003 0302 	and.w	r3, r3, #2
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	58024400 	.word	0x58024400

080009dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <NMI_Handler+0x4>

080009e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <HardFault_Handler+0x4>

080009ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <MemManage_Handler+0x4>

080009f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <BusFault_Handler+0x4>

080009fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <UsageFault_Handler+0x4>

08000a04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a32:	f000 faab 	bl	8000f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b086      	sub	sp, #24
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	60f8      	str	r0, [r7, #12]
 8000a42:	60b9      	str	r1, [r7, #8]
 8000a44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
 8000a4a:	e00a      	b.n	8000a62 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a4c:	f3af 8000 	nop.w
 8000a50:	4601      	mov	r1, r0
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	1c5a      	adds	r2, r3, #1
 8000a56:	60ba      	str	r2, [r7, #8]
 8000a58:	b2ca      	uxtb	r2, r1
 8000a5a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	617b      	str	r3, [r7, #20]
 8000a62:	697a      	ldr	r2, [r7, #20]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	dbf0      	blt.n	8000a4c <_read+0x12>
  }

  return len;
 8000a6a:	687b      	ldr	r3, [r7, #4]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3718      	adds	r7, #24
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a9c:	605a      	str	r2, [r3, #4]
  return 0;
 8000a9e:	2300      	movs	r3, #0
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <_isatty>:

int _isatty(int file)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ab4:	2301      	movs	r3, #1
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	b085      	sub	sp, #20
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	60f8      	str	r0, [r7, #12]
 8000aca:	60b9      	str	r1, [r7, #8]
 8000acc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ace:	2300      	movs	r3, #0
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae4:	4a14      	ldr	r2, [pc, #80]	@ (8000b38 <_sbrk+0x5c>)
 8000ae6:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <_sbrk+0x60>)
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af0:	4b13      	ldr	r3, [pc, #76]	@ (8000b40 <_sbrk+0x64>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d102      	bne.n	8000afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000af8:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <_sbrk+0x64>)
 8000afa:	4a12      	ldr	r2, [pc, #72]	@ (8000b44 <_sbrk+0x68>)
 8000afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000afe:	4b10      	ldr	r3, [pc, #64]	@ (8000b40 <_sbrk+0x64>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4413      	add	r3, r2
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d207      	bcs.n	8000b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b0c:	f005 f812 	bl	8005b34 <__errno>
 8000b10:	4603      	mov	r3, r0
 8000b12:	220c      	movs	r2, #12
 8000b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1a:	e009      	b.n	8000b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b1c:	4b08      	ldr	r3, [pc, #32]	@ (8000b40 <_sbrk+0x64>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b22:	4b07      	ldr	r3, [pc, #28]	@ (8000b40 <_sbrk+0x64>)
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	4a05      	ldr	r2, [pc, #20]	@ (8000b40 <_sbrk+0x64>)
 8000b2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3718      	adds	r7, #24
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	24080000 	.word	0x24080000
 8000b3c:	00000400 	.word	0x00000400
 8000b40:	2400008c 	.word	0x2400008c
 8000b44:	24000278 	.word	0x24000278

08000b48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b4c:	4b43      	ldr	r3, [pc, #268]	@ (8000c5c <SystemInit+0x114>)
 8000b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b52:	4a42      	ldr	r2, [pc, #264]	@ (8000c5c <SystemInit+0x114>)
 8000b54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b5c:	4b40      	ldr	r3, [pc, #256]	@ (8000c60 <SystemInit+0x118>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f003 030f 	and.w	r3, r3, #15
 8000b64:	2b06      	cmp	r3, #6
 8000b66:	d807      	bhi.n	8000b78 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b68:	4b3d      	ldr	r3, [pc, #244]	@ (8000c60 <SystemInit+0x118>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f023 030f 	bic.w	r3, r3, #15
 8000b70:	4a3b      	ldr	r2, [pc, #236]	@ (8000c60 <SystemInit+0x118>)
 8000b72:	f043 0307 	orr.w	r3, r3, #7
 8000b76:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b78:	4b3a      	ldr	r3, [pc, #232]	@ (8000c64 <SystemInit+0x11c>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a39      	ldr	r2, [pc, #228]	@ (8000c64 <SystemInit+0x11c>)
 8000b7e:	f043 0301 	orr.w	r3, r3, #1
 8000b82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b84:	4b37      	ldr	r3, [pc, #220]	@ (8000c64 <SystemInit+0x11c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b8a:	4b36      	ldr	r3, [pc, #216]	@ (8000c64 <SystemInit+0x11c>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	4935      	ldr	r1, [pc, #212]	@ (8000c64 <SystemInit+0x11c>)
 8000b90:	4b35      	ldr	r3, [pc, #212]	@ (8000c68 <SystemInit+0x120>)
 8000b92:	4013      	ands	r3, r2
 8000b94:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b96:	4b32      	ldr	r3, [pc, #200]	@ (8000c60 <SystemInit+0x118>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f003 0308 	and.w	r3, r3, #8
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d007      	beq.n	8000bb2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ba2:	4b2f      	ldr	r3, [pc, #188]	@ (8000c60 <SystemInit+0x118>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f023 030f 	bic.w	r3, r3, #15
 8000baa:	4a2d      	ldr	r2, [pc, #180]	@ (8000c60 <SystemInit+0x118>)
 8000bac:	f043 0307 	orr.w	r3, r3, #7
 8000bb0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000bb2:	4b2c      	ldr	r3, [pc, #176]	@ (8000c64 <SystemInit+0x11c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000bb8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c64 <SystemInit+0x11c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000bbe:	4b29      	ldr	r3, [pc, #164]	@ (8000c64 <SystemInit+0x11c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000bc4:	4b27      	ldr	r3, [pc, #156]	@ (8000c64 <SystemInit+0x11c>)
 8000bc6:	4a29      	ldr	r2, [pc, #164]	@ (8000c6c <SystemInit+0x124>)
 8000bc8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000bca:	4b26      	ldr	r3, [pc, #152]	@ (8000c64 <SystemInit+0x11c>)
 8000bcc:	4a28      	ldr	r2, [pc, #160]	@ (8000c70 <SystemInit+0x128>)
 8000bce:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000bd0:	4b24      	ldr	r3, [pc, #144]	@ (8000c64 <SystemInit+0x11c>)
 8000bd2:	4a28      	ldr	r2, [pc, #160]	@ (8000c74 <SystemInit+0x12c>)
 8000bd4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000bd6:	4b23      	ldr	r3, [pc, #140]	@ (8000c64 <SystemInit+0x11c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000bdc:	4b21      	ldr	r3, [pc, #132]	@ (8000c64 <SystemInit+0x11c>)
 8000bde:	4a25      	ldr	r2, [pc, #148]	@ (8000c74 <SystemInit+0x12c>)
 8000be0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000be2:	4b20      	ldr	r3, [pc, #128]	@ (8000c64 <SystemInit+0x11c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000be8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c64 <SystemInit+0x11c>)
 8000bea:	4a22      	ldr	r2, [pc, #136]	@ (8000c74 <SystemInit+0x12c>)
 8000bec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000bee:	4b1d      	ldr	r3, [pc, #116]	@ (8000c64 <SystemInit+0x11c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c64 <SystemInit+0x11c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a1a      	ldr	r2, [pc, #104]	@ (8000c64 <SystemInit+0x11c>)
 8000bfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bfe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c00:	4b18      	ldr	r3, [pc, #96]	@ (8000c64 <SystemInit+0x11c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c06:	4b1c      	ldr	r3, [pc, #112]	@ (8000c78 <SystemInit+0x130>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c7c <SystemInit+0x134>)
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c12:	d202      	bcs.n	8000c1a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c14:	4b1a      	ldr	r3, [pc, #104]	@ (8000c80 <SystemInit+0x138>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000c1a:	4b12      	ldr	r3, [pc, #72]	@ (8000c64 <SystemInit+0x11c>)
 8000c1c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d113      	bne.n	8000c50 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000c28:	4b0e      	ldr	r3, [pc, #56]	@ (8000c64 <SystemInit+0x11c>)
 8000c2a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c2e:	4a0d      	ldr	r2, [pc, #52]	@ (8000c64 <SystemInit+0x11c>)
 8000c30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c34:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c38:	4b12      	ldr	r3, [pc, #72]	@ (8000c84 <SystemInit+0x13c>)
 8000c3a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000c3e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000c40:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <SystemInit+0x11c>)
 8000c42:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c46:	4a07      	ldr	r2, [pc, #28]	@ (8000c64 <SystemInit+0x11c>)
 8000c48:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c4c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000ed00 	.word	0xe000ed00
 8000c60:	52002000 	.word	0x52002000
 8000c64:	58024400 	.word	0x58024400
 8000c68:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c6c:	02020200 	.word	0x02020200
 8000c70:	01ff0000 	.word	0x01ff0000
 8000c74:	01010280 	.word	0x01010280
 8000c78:	5c001000 	.word	0x5c001000
 8000c7c:	ffff0000 	.word	0xffff0000
 8000c80:	51008108 	.word	0x51008108
 8000c84:	52004000 	.word	0x52004000

08000c88 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	@ (8000cb4 <ExitRun0Mode+0x2c>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	4a08      	ldr	r2, [pc, #32]	@ (8000cb4 <ExitRun0Mode+0x2c>)
 8000c92:	f043 0302 	orr.w	r3, r3, #2
 8000c96:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000c98:	bf00      	nop
 8000c9a:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <ExitRun0Mode+0x2c>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d0f9      	beq.n	8000c9a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000ca6:	bf00      	nop
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	58024800 	.word	0x58024800

08000cb8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cbc:	4b22      	ldr	r3, [pc, #136]	@ (8000d48 <MX_USART3_UART_Init+0x90>)
 8000cbe:	4a23      	ldr	r2, [pc, #140]	@ (8000d4c <MX_USART3_UART_Init+0x94>)
 8000cc0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cc2:	4b21      	ldr	r3, [pc, #132]	@ (8000d48 <MX_USART3_UART_Init+0x90>)
 8000cc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cc8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cca:	4b1f      	ldr	r3, [pc, #124]	@ (8000d48 <MX_USART3_UART_Init+0x90>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d48 <MX_USART3_UART_Init+0x90>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d48 <MX_USART3_UART_Init+0x90>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cdc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d48 <MX_USART3_UART_Init+0x90>)
 8000cde:	220c      	movs	r2, #12
 8000ce0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce2:	4b19      	ldr	r3, [pc, #100]	@ (8000d48 <MX_USART3_UART_Init+0x90>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce8:	4b17      	ldr	r3, [pc, #92]	@ (8000d48 <MX_USART3_UART_Init+0x90>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cee:	4b16      	ldr	r3, [pc, #88]	@ (8000d48 <MX_USART3_UART_Init+0x90>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cf4:	4b14      	ldr	r3, [pc, #80]	@ (8000d48 <MX_USART3_UART_Init+0x90>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cfa:	4b13      	ldr	r3, [pc, #76]	@ (8000d48 <MX_USART3_UART_Init+0x90>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d00:	4811      	ldr	r0, [pc, #68]	@ (8000d48 <MX_USART3_UART_Init+0x90>)
 8000d02:	f003 fa8d 	bl	8004220 <HAL_UART_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d0c:	f7ff fe46 	bl	800099c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d10:	2100      	movs	r1, #0
 8000d12:	480d      	ldr	r0, [pc, #52]	@ (8000d48 <MX_USART3_UART_Init+0x90>)
 8000d14:	f004 fbeb 	bl	80054ee <HAL_UARTEx_SetTxFifoThreshold>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d1e:	f7ff fe3d 	bl	800099c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d22:	2100      	movs	r1, #0
 8000d24:	4808      	ldr	r0, [pc, #32]	@ (8000d48 <MX_USART3_UART_Init+0x90>)
 8000d26:	f004 fc20 	bl	800556a <HAL_UARTEx_SetRxFifoThreshold>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d30:	f7ff fe34 	bl	800099c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d34:	4804      	ldr	r0, [pc, #16]	@ (8000d48 <MX_USART3_UART_Init+0x90>)
 8000d36:	f004 fba1 	bl	800547c <HAL_UARTEx_DisableFifoMode>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d40:	f7ff fe2c 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	24000090 	.word	0x24000090
 8000d4c:	40004800 	.word	0x40004800

08000d50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b0ba      	sub	sp, #232	@ 0xe8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d68:	f107 0310 	add.w	r3, r7, #16
 8000d6c:	22c0      	movs	r2, #192	@ 0xc0
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4618      	mov	r0, r3
 8000d72:	f004 fe91 	bl	8005a98 <memset>
  if(uartHandle->Instance==USART3)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a27      	ldr	r2, [pc, #156]	@ (8000e18 <HAL_UART_MspInit+0xc8>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d146      	bne.n	8000e0e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d80:	f04f 0202 	mov.w	r2, #2
 8000d84:	f04f 0300 	mov.w	r3, #0
 8000d88:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d92:	f107 0310 	add.w	r3, r7, #16
 8000d96:	4618      	mov	r0, r3
 8000d98:	f001 fc16 	bl	80025c8 <HAL_RCCEx_PeriphCLKConfig>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000da2:	f7ff fdfb 	bl	800099c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000da6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e1c <HAL_UART_MspInit+0xcc>)
 8000da8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000dac:	4a1b      	ldr	r2, [pc, #108]	@ (8000e1c <HAL_UART_MspInit+0xcc>)
 8000dae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000db2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000db6:	4b19      	ldr	r3, [pc, #100]	@ (8000e1c <HAL_UART_MspInit+0xcc>)
 8000db8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000dbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc4:	4b15      	ldr	r3, [pc, #84]	@ (8000e1c <HAL_UART_MspInit+0xcc>)
 8000dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dca:	4a14      	ldr	r2, [pc, #80]	@ (8000e1c <HAL_UART_MspInit+0xcc>)
 8000dcc:	f043 0308 	orr.w	r3, r3, #8
 8000dd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dd4:	4b11      	ldr	r3, [pc, #68]	@ (8000e1c <HAL_UART_MspInit+0xcc>)
 8000dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dda:	f003 0308 	and.w	r3, r3, #8
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000de2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000de6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dfc:	2307      	movs	r3, #7
 8000dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e02:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e06:	4619      	mov	r1, r3
 8000e08:	4805      	ldr	r0, [pc, #20]	@ (8000e20 <HAL_UART_MspInit+0xd0>)
 8000e0a:	f000 f9f3 	bl	80011f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e0e:	bf00      	nop
 8000e10:	37e8      	adds	r7, #232	@ 0xe8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40004800 	.word	0x40004800
 8000e1c:	58024400 	.word	0x58024400
 8000e20:	58020c00 	.word	0x58020c00

08000e24 <_write>:
  }
}

/* USER CODE BEGIN 1 */
int _write(int file, char *ptr, int len)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	60f8      	str	r0, [r7, #12]
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *) ptr, len, 1000);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e38:	68b9      	ldr	r1, [r7, #8]
 8000e3a:	4804      	ldr	r0, [pc, #16]	@ (8000e4c <_write+0x28>)
 8000e3c:	f003 fa40 	bl	80042c0 <HAL_UART_Transmit>
  return len;
 8000e40:	687b      	ldr	r3, [r7, #4]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	24000090 	.word	0x24000090

08000e50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e50:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000e8c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000e54:	f7ff ff18 	bl	8000c88 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e58:	f7ff fe76 	bl	8000b48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e5c:	480c      	ldr	r0, [pc, #48]	@ (8000e90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e5e:	490d      	ldr	r1, [pc, #52]	@ (8000e94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e60:	4a0d      	ldr	r2, [pc, #52]	@ (8000e98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e64:	e002      	b.n	8000e6c <LoopCopyDataInit>

08000e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6a:	3304      	adds	r3, #4

08000e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e70:	d3f9      	bcc.n	8000e66 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e72:	4a0a      	ldr	r2, [pc, #40]	@ (8000e9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e74:	4c0a      	ldr	r4, [pc, #40]	@ (8000ea0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e78:	e001      	b.n	8000e7e <LoopFillZerobss>

08000e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e7c:	3204      	adds	r2, #4

08000e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e80:	d3fb      	bcc.n	8000e7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e82:	f004 fe5d 	bl	8005b40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e86:	f7ff fca9 	bl	80007dc <main>
  bx  lr
 8000e8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e8c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000e90:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e94:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8000e98:	08006794 	.word	0x08006794
  ldr r2, =_sbss
 8000e9c:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8000ea0:	24000274 	.word	0x24000274

08000ea4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea4:	e7fe      	b.n	8000ea4 <ADC3_IRQHandler>
	...

08000ea8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eae:	2003      	movs	r0, #3
 8000eb0:	f000 f96e 	bl	8001190 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000eb4:	f001 f9b2 	bl	800221c <HAL_RCC_GetSysClockFreq>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	4b15      	ldr	r3, [pc, #84]	@ (8000f10 <HAL_Init+0x68>)
 8000ebc:	699b      	ldr	r3, [r3, #24]
 8000ebe:	0a1b      	lsrs	r3, r3, #8
 8000ec0:	f003 030f 	and.w	r3, r3, #15
 8000ec4:	4913      	ldr	r1, [pc, #76]	@ (8000f14 <HAL_Init+0x6c>)
 8000ec6:	5ccb      	ldrb	r3, [r1, r3]
 8000ec8:	f003 031f 	and.w	r3, r3, #31
 8000ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ed0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f10 <HAL_Init+0x68>)
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	f003 030f 	and.w	r3, r3, #15
 8000eda:	4a0e      	ldr	r2, [pc, #56]	@ (8000f14 <HAL_Init+0x6c>)
 8000edc:	5cd3      	ldrb	r3, [r2, r3]
 8000ede:	f003 031f 	and.w	r3, r3, #31
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee8:	4a0b      	ldr	r2, [pc, #44]	@ (8000f18 <HAL_Init+0x70>)
 8000eea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000eec:	4a0b      	ldr	r2, [pc, #44]	@ (8000f1c <HAL_Init+0x74>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f000 f814 	bl	8000f20 <HAL_InitTick>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e002      	b.n	8000f08 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f02:	f7ff fd51 	bl	80009a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	58024400 	.word	0x58024400
 8000f14:	08006718 	.word	0x08006718
 8000f18:	24000004 	.word	0x24000004
 8000f1c:	24000000 	.word	0x24000000

08000f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f28:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <HAL_InitTick+0x60>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d101      	bne.n	8000f34 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e021      	b.n	8000f78 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f34:	4b13      	ldr	r3, [pc, #76]	@ (8000f84 <HAL_InitTick+0x64>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b11      	ldr	r3, [pc, #68]	@ (8000f80 <HAL_InitTick+0x60>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 f945 	bl	80011da <HAL_SYSTICK_Config>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e00e      	b.n	8000f78 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b0f      	cmp	r3, #15
 8000f5e:	d80a      	bhi.n	8000f76 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f60:	2200      	movs	r2, #0
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295
 8000f68:	f000 f91d 	bl	80011a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f6c:	4a06      	ldr	r2, [pc, #24]	@ (8000f88 <HAL_InitTick+0x68>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f72:	2300      	movs	r3, #0
 8000f74:	e000      	b.n	8000f78 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	2400000c 	.word	0x2400000c
 8000f84:	24000000 	.word	0x24000000
 8000f88:	24000008 	.word	0x24000008

08000f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f90:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <HAL_IncTick+0x20>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <HAL_IncTick+0x24>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4a04      	ldr	r2, [pc, #16]	@ (8000fb0 <HAL_IncTick+0x24>)
 8000f9e:	6013      	str	r3, [r2, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	2400000c 	.word	0x2400000c
 8000fb0:	24000124 	.word	0x24000124

08000fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb8:	4b03      	ldr	r3, [pc, #12]	@ (8000fc8 <HAL_GetTick+0x14>)
 8000fba:	681b      	ldr	r3, [r3, #0]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	24000124 	.word	0x24000124

08000fcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd4:	f7ff ffee 	bl	8000fb4 <HAL_GetTick>
 8000fd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe4:	d005      	beq.n	8000ff2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8001010 <HAL_Delay+0x44>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4413      	add	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ff2:	bf00      	nop
 8000ff4:	f7ff ffde 	bl	8000fb4 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	429a      	cmp	r2, r3
 8001002:	d8f7      	bhi.n	8000ff4 <HAL_Delay+0x28>
  {
  }
}
 8001004:	bf00      	nop
 8001006:	bf00      	nop
 8001008:	3710      	adds	r7, #16
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	2400000c 	.word	0x2400000c

08001014 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001018:	4b03      	ldr	r3, [pc, #12]	@ (8001028 <HAL_GetREVID+0x14>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	0c1b      	lsrs	r3, r3, #16
}
 800101e:	4618      	mov	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	5c001000 	.word	0x5c001000

0800102c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800103c:	4b0b      	ldr	r3, [pc, #44]	@ (800106c <__NVIC_SetPriorityGrouping+0x40>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001048:	4013      	ands	r3, r2
 800104a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001054:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <__NVIC_SetPriorityGrouping+0x44>)
 8001056:	4313      	orrs	r3, r2
 8001058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105a:	4a04      	ldr	r2, [pc, #16]	@ (800106c <__NVIC_SetPriorityGrouping+0x40>)
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60d3      	str	r3, [r2, #12]
}
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000ed00 	.word	0xe000ed00
 8001070:	05fa0000 	.word	0x05fa0000

08001074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001078:	4b04      	ldr	r3, [pc, #16]	@ (800108c <__NVIC_GetPriorityGrouping+0x18>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	0a1b      	lsrs	r3, r3, #8
 800107e:	f003 0307 	and.w	r3, r3, #7
}
 8001082:	4618      	mov	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800109c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	db0a      	blt.n	80010ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	490c      	ldr	r1, [pc, #48]	@ (80010dc <__NVIC_SetPriority+0x4c>)
 80010aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ae:	0112      	lsls	r2, r2, #4
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	440b      	add	r3, r1
 80010b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b8:	e00a      	b.n	80010d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4908      	ldr	r1, [pc, #32]	@ (80010e0 <__NVIC_SetPriority+0x50>)
 80010c0:	88fb      	ldrh	r3, [r7, #6]
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	3b04      	subs	r3, #4
 80010c8:	0112      	lsls	r2, r2, #4
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	440b      	add	r3, r1
 80010ce:	761a      	strb	r2, [r3, #24]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000e100 	.word	0xe000e100
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b089      	sub	sp, #36	@ 0x24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f1c3 0307 	rsb	r3, r3, #7
 80010fe:	2b04      	cmp	r3, #4
 8001100:	bf28      	it	cs
 8001102:	2304      	movcs	r3, #4
 8001104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3304      	adds	r3, #4
 800110a:	2b06      	cmp	r3, #6
 800110c:	d902      	bls.n	8001114 <NVIC_EncodePriority+0x30>
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3b03      	subs	r3, #3
 8001112:	e000      	b.n	8001116 <NVIC_EncodePriority+0x32>
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	f04f 32ff 	mov.w	r2, #4294967295
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43da      	mvns	r2, r3
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	401a      	ands	r2, r3
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800112c:	f04f 31ff 	mov.w	r1, #4294967295
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	fa01 f303 	lsl.w	r3, r1, r3
 8001136:	43d9      	mvns	r1, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	4313      	orrs	r3, r2
         );
}
 800113e:	4618      	mov	r0, r3
 8001140:	3724      	adds	r7, #36	@ 0x24
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800115c:	d301      	bcc.n	8001162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800115e:	2301      	movs	r3, #1
 8001160:	e00f      	b.n	8001182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001162:	4a0a      	ldr	r2, [pc, #40]	@ (800118c <SysTick_Config+0x40>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3b01      	subs	r3, #1
 8001168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116a:	210f      	movs	r1, #15
 800116c:	f04f 30ff 	mov.w	r0, #4294967295
 8001170:	f7ff ff8e 	bl	8001090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001174:	4b05      	ldr	r3, [pc, #20]	@ (800118c <SysTick_Config+0x40>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117a:	4b04      	ldr	r3, [pc, #16]	@ (800118c <SysTick_Config+0x40>)
 800117c:	2207      	movs	r2, #7
 800117e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	e000e010 	.word	0xe000e010

08001190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ff47 	bl	800102c <__NVIC_SetPriorityGrouping>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b086      	sub	sp, #24
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011b4:	f7ff ff5e 	bl	8001074 <__NVIC_GetPriorityGrouping>
 80011b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	68b9      	ldr	r1, [r7, #8]
 80011be:	6978      	ldr	r0, [r7, #20]
 80011c0:	f7ff ff90 	bl	80010e4 <NVIC_EncodePriority>
 80011c4:	4602      	mov	r2, r0
 80011c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011ca:	4611      	mov	r1, r2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff5f 	bl	8001090 <__NVIC_SetPriority>
}
 80011d2:	bf00      	nop
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff ffb2 	bl	800114c <SysTick_Config>
 80011e8:	4603      	mov	r3, r0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b089      	sub	sp, #36	@ 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001202:	4b89      	ldr	r3, [pc, #548]	@ (8001428 <HAL_GPIO_Init+0x234>)
 8001204:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001206:	e194      	b.n	8001532 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	2101      	movs	r1, #1
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	fa01 f303 	lsl.w	r3, r1, r3
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	2b00      	cmp	r3, #0
 800121c:	f000 8186 	beq.w	800152c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	2b01      	cmp	r3, #1
 800122a:	d005      	beq.n	8001238 <HAL_GPIO_Init+0x44>
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d130      	bne.n	800129a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	2203      	movs	r2, #3
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	68da      	ldr	r2, [r3, #12]
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800126e:	2201      	movs	r2, #1
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43db      	mvns	r3, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4013      	ands	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	091b      	lsrs	r3, r3, #4
 8001284:	f003 0201 	and.w	r2, r3, #1
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 0303 	and.w	r3, r3, #3
 80012a2:	2b03      	cmp	r3, #3
 80012a4:	d017      	beq.n	80012d6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	2203      	movs	r2, #3
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	689a      	ldr	r2, [r3, #8]
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d123      	bne.n	800132a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	08da      	lsrs	r2, r3, #3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3208      	adds	r2, #8
 80012ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	220f      	movs	r2, #15
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4013      	ands	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	691a      	ldr	r2, [r3, #16]
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	08da      	lsrs	r2, r3, #3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3208      	adds	r2, #8
 8001324:	69b9      	ldr	r1, [r7, #24]
 8001326:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	2203      	movs	r2, #3
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f003 0203 	and.w	r2, r3, #3
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001366:	2b00      	cmp	r3, #0
 8001368:	f000 80e0 	beq.w	800152c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136c:	4b2f      	ldr	r3, [pc, #188]	@ (800142c <HAL_GPIO_Init+0x238>)
 800136e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001372:	4a2e      	ldr	r2, [pc, #184]	@ (800142c <HAL_GPIO_Init+0x238>)
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800137c:	4b2b      	ldr	r3, [pc, #172]	@ (800142c <HAL_GPIO_Init+0x238>)
 800137e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800138a:	4a29      	ldr	r2, [pc, #164]	@ (8001430 <HAL_GPIO_Init+0x23c>)
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	089b      	lsrs	r3, r3, #2
 8001390:	3302      	adds	r3, #2
 8001392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	220f      	movs	r2, #15
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a20      	ldr	r2, [pc, #128]	@ (8001434 <HAL_GPIO_Init+0x240>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d052      	beq.n	800145c <HAL_GPIO_Init+0x268>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a1f      	ldr	r2, [pc, #124]	@ (8001438 <HAL_GPIO_Init+0x244>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d031      	beq.n	8001422 <HAL_GPIO_Init+0x22e>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a1e      	ldr	r2, [pc, #120]	@ (800143c <HAL_GPIO_Init+0x248>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d02b      	beq.n	800141e <HAL_GPIO_Init+0x22a>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001440 <HAL_GPIO_Init+0x24c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d025      	beq.n	800141a <HAL_GPIO_Init+0x226>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a1c      	ldr	r2, [pc, #112]	@ (8001444 <HAL_GPIO_Init+0x250>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d01f      	beq.n	8001416 <HAL_GPIO_Init+0x222>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001448 <HAL_GPIO_Init+0x254>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d019      	beq.n	8001412 <HAL_GPIO_Init+0x21e>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a1a      	ldr	r2, [pc, #104]	@ (800144c <HAL_GPIO_Init+0x258>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d013      	beq.n	800140e <HAL_GPIO_Init+0x21a>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a19      	ldr	r2, [pc, #100]	@ (8001450 <HAL_GPIO_Init+0x25c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d00d      	beq.n	800140a <HAL_GPIO_Init+0x216>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a18      	ldr	r2, [pc, #96]	@ (8001454 <HAL_GPIO_Init+0x260>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d007      	beq.n	8001406 <HAL_GPIO_Init+0x212>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a17      	ldr	r2, [pc, #92]	@ (8001458 <HAL_GPIO_Init+0x264>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d101      	bne.n	8001402 <HAL_GPIO_Init+0x20e>
 80013fe:	2309      	movs	r3, #9
 8001400:	e02d      	b.n	800145e <HAL_GPIO_Init+0x26a>
 8001402:	230a      	movs	r3, #10
 8001404:	e02b      	b.n	800145e <HAL_GPIO_Init+0x26a>
 8001406:	2308      	movs	r3, #8
 8001408:	e029      	b.n	800145e <HAL_GPIO_Init+0x26a>
 800140a:	2307      	movs	r3, #7
 800140c:	e027      	b.n	800145e <HAL_GPIO_Init+0x26a>
 800140e:	2306      	movs	r3, #6
 8001410:	e025      	b.n	800145e <HAL_GPIO_Init+0x26a>
 8001412:	2305      	movs	r3, #5
 8001414:	e023      	b.n	800145e <HAL_GPIO_Init+0x26a>
 8001416:	2304      	movs	r3, #4
 8001418:	e021      	b.n	800145e <HAL_GPIO_Init+0x26a>
 800141a:	2303      	movs	r3, #3
 800141c:	e01f      	b.n	800145e <HAL_GPIO_Init+0x26a>
 800141e:	2302      	movs	r3, #2
 8001420:	e01d      	b.n	800145e <HAL_GPIO_Init+0x26a>
 8001422:	2301      	movs	r3, #1
 8001424:	e01b      	b.n	800145e <HAL_GPIO_Init+0x26a>
 8001426:	bf00      	nop
 8001428:	58000080 	.word	0x58000080
 800142c:	58024400 	.word	0x58024400
 8001430:	58000400 	.word	0x58000400
 8001434:	58020000 	.word	0x58020000
 8001438:	58020400 	.word	0x58020400
 800143c:	58020800 	.word	0x58020800
 8001440:	58020c00 	.word	0x58020c00
 8001444:	58021000 	.word	0x58021000
 8001448:	58021400 	.word	0x58021400
 800144c:	58021800 	.word	0x58021800
 8001450:	58021c00 	.word	0x58021c00
 8001454:	58022000 	.word	0x58022000
 8001458:	58022400 	.word	0x58022400
 800145c:	2300      	movs	r3, #0
 800145e:	69fa      	ldr	r2, [r7, #28]
 8001460:	f002 0203 	and.w	r2, r2, #3
 8001464:	0092      	lsls	r2, r2, #2
 8001466:	4093      	lsls	r3, r2
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800146e:	4938      	ldr	r1, [pc, #224]	@ (8001550 <HAL_GPIO_Init+0x35c>)
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	089b      	lsrs	r3, r3, #2
 8001474:	3302      	adds	r3, #2
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800147c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	43db      	mvns	r3, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4013      	ands	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80014a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80014aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d003      	beq.n	80014d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80014d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d003      	beq.n	80014fc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	43db      	mvns	r3, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4013      	ands	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	4313      	orrs	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	3301      	adds	r3, #1
 8001530:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	fa22 f303 	lsr.w	r3, r2, r3
 800153c:	2b00      	cmp	r3, #0
 800153e:	f47f ae63 	bne.w	8001208 <HAL_GPIO_Init+0x14>
  }
}
 8001542:	bf00      	nop
 8001544:	bf00      	nop
 8001546:	3724      	adds	r7, #36	@ 0x24
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	58000400 	.word	0x58000400

08001554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	807b      	strh	r3, [r7, #2]
 8001560:	4613      	mov	r3, r2
 8001562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001564:	787b      	ldrb	r3, [r7, #1]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800156a:	887a      	ldrh	r2, [r7, #2]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001570:	e003      	b.n	800157a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001572:	887b      	ldrh	r3, [r7, #2]
 8001574:	041a      	lsls	r2, r3, #16
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	619a      	str	r2, [r3, #24]
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
	...

08001588 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001590:	4b19      	ldr	r3, [pc, #100]	@ (80015f8 <HAL_PWREx_ConfigSupply+0x70>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b04      	cmp	r3, #4
 800159a:	d00a      	beq.n	80015b2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800159c:	4b16      	ldr	r3, [pc, #88]	@ (80015f8 <HAL_PWREx_ConfigSupply+0x70>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	f003 0307 	and.w	r3, r3, #7
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d001      	beq.n	80015ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e01f      	b.n	80015ee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80015ae:	2300      	movs	r3, #0
 80015b0:	e01d      	b.n	80015ee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80015b2:	4b11      	ldr	r3, [pc, #68]	@ (80015f8 <HAL_PWREx_ConfigSupply+0x70>)
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	f023 0207 	bic.w	r2, r3, #7
 80015ba:	490f      	ldr	r1, [pc, #60]	@ (80015f8 <HAL_PWREx_ConfigSupply+0x70>)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4313      	orrs	r3, r2
 80015c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80015c2:	f7ff fcf7 	bl	8000fb4 <HAL_GetTick>
 80015c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80015c8:	e009      	b.n	80015de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80015ca:	f7ff fcf3 	bl	8000fb4 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015d8:	d901      	bls.n	80015de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e007      	b.n	80015ee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80015de:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <HAL_PWREx_ConfigSupply+0x70>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80015ea:	d1ee      	bne.n	80015ca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	58024800 	.word	0x58024800

080015fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b08c      	sub	sp, #48	@ 0x30
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d102      	bne.n	8001610 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	f000 bc48 	b.w	8001ea0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	2b00      	cmp	r3, #0
 800161a:	f000 8088 	beq.w	800172e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800161e:	4b99      	ldr	r3, [pc, #612]	@ (8001884 <HAL_RCC_OscConfig+0x288>)
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001626:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001628:	4b96      	ldr	r3, [pc, #600]	@ (8001884 <HAL_RCC_OscConfig+0x288>)
 800162a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800162c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800162e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001630:	2b10      	cmp	r3, #16
 8001632:	d007      	beq.n	8001644 <HAL_RCC_OscConfig+0x48>
 8001634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001636:	2b18      	cmp	r3, #24
 8001638:	d111      	bne.n	800165e <HAL_RCC_OscConfig+0x62>
 800163a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800163c:	f003 0303 	and.w	r3, r3, #3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d10c      	bne.n	800165e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001644:	4b8f      	ldr	r3, [pc, #572]	@ (8001884 <HAL_RCC_OscConfig+0x288>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d06d      	beq.n	800172c <HAL_RCC_OscConfig+0x130>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d169      	bne.n	800172c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	f000 bc21 	b.w	8001ea0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001666:	d106      	bne.n	8001676 <HAL_RCC_OscConfig+0x7a>
 8001668:	4b86      	ldr	r3, [pc, #536]	@ (8001884 <HAL_RCC_OscConfig+0x288>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a85      	ldr	r2, [pc, #532]	@ (8001884 <HAL_RCC_OscConfig+0x288>)
 800166e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	e02e      	b.n	80016d4 <HAL_RCC_OscConfig+0xd8>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d10c      	bne.n	8001698 <HAL_RCC_OscConfig+0x9c>
 800167e:	4b81      	ldr	r3, [pc, #516]	@ (8001884 <HAL_RCC_OscConfig+0x288>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a80      	ldr	r2, [pc, #512]	@ (8001884 <HAL_RCC_OscConfig+0x288>)
 8001684:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	4b7e      	ldr	r3, [pc, #504]	@ (8001884 <HAL_RCC_OscConfig+0x288>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a7d      	ldr	r2, [pc, #500]	@ (8001884 <HAL_RCC_OscConfig+0x288>)
 8001690:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	e01d      	b.n	80016d4 <HAL_RCC_OscConfig+0xd8>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016a0:	d10c      	bne.n	80016bc <HAL_RCC_OscConfig+0xc0>
 80016a2:	4b78      	ldr	r3, [pc, #480]	@ (8001884 <HAL_RCC_OscConfig+0x288>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a77      	ldr	r2, [pc, #476]	@ (8001884 <HAL_RCC_OscConfig+0x288>)
 80016a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	4b75      	ldr	r3, [pc, #468]	@ (8001884 <HAL_RCC_OscConfig+0x288>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a74      	ldr	r2, [pc, #464]	@ (8001884 <HAL_RCC_OscConfig+0x288>)
 80016b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	e00b      	b.n	80016d4 <HAL_RCC_OscConfig+0xd8>
 80016bc:	4b71      	ldr	r3, [pc, #452]	@ (8001884 <HAL_RCC_OscConfig+0x288>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a70      	ldr	r2, [pc, #448]	@ (8001884 <HAL_RCC_OscConfig+0x288>)
 80016c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	4b6e      	ldr	r3, [pc, #440]	@ (8001884 <HAL_RCC_OscConfig+0x288>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a6d      	ldr	r2, [pc, #436]	@ (8001884 <HAL_RCC_OscConfig+0x288>)
 80016ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d013      	beq.n	8001704 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016dc:	f7ff fc6a 	bl	8000fb4 <HAL_GetTick>
 80016e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e4:	f7ff fc66 	bl	8000fb4 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b64      	cmp	r3, #100	@ 0x64
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e3d4      	b.n	8001ea0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016f6:	4b63      	ldr	r3, [pc, #396]	@ (8001884 <HAL_RCC_OscConfig+0x288>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0f0      	beq.n	80016e4 <HAL_RCC_OscConfig+0xe8>
 8001702:	e014      	b.n	800172e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001704:	f7ff fc56 	bl	8000fb4 <HAL_GetTick>
 8001708:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800170c:	f7ff fc52 	bl	8000fb4 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b64      	cmp	r3, #100	@ 0x64
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e3c0      	b.n	8001ea0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800171e:	4b59      	ldr	r3, [pc, #356]	@ (8001884 <HAL_RCC_OscConfig+0x288>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x110>
 800172a:	e000      	b.n	800172e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800172c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 80ca 	beq.w	80018d0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800173c:	4b51      	ldr	r3, [pc, #324]	@ (8001884 <HAL_RCC_OscConfig+0x288>)
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001744:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001746:	4b4f      	ldr	r3, [pc, #316]	@ (8001884 <HAL_RCC_OscConfig+0x288>)
 8001748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800174a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800174c:	6a3b      	ldr	r3, [r7, #32]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d007      	beq.n	8001762 <HAL_RCC_OscConfig+0x166>
 8001752:	6a3b      	ldr	r3, [r7, #32]
 8001754:	2b18      	cmp	r3, #24
 8001756:	d156      	bne.n	8001806 <HAL_RCC_OscConfig+0x20a>
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d151      	bne.n	8001806 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001762:	4b48      	ldr	r3, [pc, #288]	@ (8001884 <HAL_RCC_OscConfig+0x288>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0304 	and.w	r3, r3, #4
 800176a:	2b00      	cmp	r3, #0
 800176c:	d005      	beq.n	800177a <HAL_RCC_OscConfig+0x17e>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e392      	b.n	8001ea0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800177a:	4b42      	ldr	r3, [pc, #264]	@ (8001884 <HAL_RCC_OscConfig+0x288>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f023 0219 	bic.w	r2, r3, #25
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	493f      	ldr	r1, [pc, #252]	@ (8001884 <HAL_RCC_OscConfig+0x288>)
 8001788:	4313      	orrs	r3, r2
 800178a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178c:	f7ff fc12 	bl	8000fb4 <HAL_GetTick>
 8001790:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001794:	f7ff fc0e 	bl	8000fb4 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e37c      	b.n	8001ea0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017a6:	4b37      	ldr	r3, [pc, #220]	@ (8001884 <HAL_RCC_OscConfig+0x288>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0f0      	beq.n	8001794 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b2:	f7ff fc2f 	bl	8001014 <HAL_GetREVID>
 80017b6:	4603      	mov	r3, r0
 80017b8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80017bc:	4293      	cmp	r3, r2
 80017be:	d817      	bhi.n	80017f0 <HAL_RCC_OscConfig+0x1f4>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	2b40      	cmp	r3, #64	@ 0x40
 80017c6:	d108      	bne.n	80017da <HAL_RCC_OscConfig+0x1de>
 80017c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001884 <HAL_RCC_OscConfig+0x288>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80017d0:	4a2c      	ldr	r2, [pc, #176]	@ (8001884 <HAL_RCC_OscConfig+0x288>)
 80017d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017d6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017d8:	e07a      	b.n	80018d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017da:	4b2a      	ldr	r3, [pc, #168]	@ (8001884 <HAL_RCC_OscConfig+0x288>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	031b      	lsls	r3, r3, #12
 80017e8:	4926      	ldr	r1, [pc, #152]	@ (8001884 <HAL_RCC_OscConfig+0x288>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017ee:	e06f      	b.n	80018d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f0:	4b24      	ldr	r3, [pc, #144]	@ (8001884 <HAL_RCC_OscConfig+0x288>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	061b      	lsls	r3, r3, #24
 80017fe:	4921      	ldr	r1, [pc, #132]	@ (8001884 <HAL_RCC_OscConfig+0x288>)
 8001800:	4313      	orrs	r3, r2
 8001802:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001804:	e064      	b.n	80018d0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d047      	beq.n	800189e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800180e:	4b1d      	ldr	r3, [pc, #116]	@ (8001884 <HAL_RCC_OscConfig+0x288>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f023 0219 	bic.w	r2, r3, #25
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	491a      	ldr	r1, [pc, #104]	@ (8001884 <HAL_RCC_OscConfig+0x288>)
 800181c:	4313      	orrs	r3, r2
 800181e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001820:	f7ff fbc8 	bl	8000fb4 <HAL_GetTick>
 8001824:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001828:	f7ff fbc4 	bl	8000fb4 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e332      	b.n	8001ea0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800183a:	4b12      	ldr	r3, [pc, #72]	@ (8001884 <HAL_RCC_OscConfig+0x288>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0304 	and.w	r3, r3, #4
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f0      	beq.n	8001828 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001846:	f7ff fbe5 	bl	8001014 <HAL_GetREVID>
 800184a:	4603      	mov	r3, r0
 800184c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001850:	4293      	cmp	r3, r2
 8001852:	d819      	bhi.n	8001888 <HAL_RCC_OscConfig+0x28c>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	2b40      	cmp	r3, #64	@ 0x40
 800185a:	d108      	bne.n	800186e <HAL_RCC_OscConfig+0x272>
 800185c:	4b09      	ldr	r3, [pc, #36]	@ (8001884 <HAL_RCC_OscConfig+0x288>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001864:	4a07      	ldr	r2, [pc, #28]	@ (8001884 <HAL_RCC_OscConfig+0x288>)
 8001866:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800186a:	6053      	str	r3, [r2, #4]
 800186c:	e030      	b.n	80018d0 <HAL_RCC_OscConfig+0x2d4>
 800186e:	4b05      	ldr	r3, [pc, #20]	@ (8001884 <HAL_RCC_OscConfig+0x288>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	031b      	lsls	r3, r3, #12
 800187c:	4901      	ldr	r1, [pc, #4]	@ (8001884 <HAL_RCC_OscConfig+0x288>)
 800187e:	4313      	orrs	r3, r2
 8001880:	604b      	str	r3, [r1, #4]
 8001882:	e025      	b.n	80018d0 <HAL_RCC_OscConfig+0x2d4>
 8001884:	58024400 	.word	0x58024400
 8001888:	4b9a      	ldr	r3, [pc, #616]	@ (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	061b      	lsls	r3, r3, #24
 8001896:	4997      	ldr	r1, [pc, #604]	@ (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 8001898:	4313      	orrs	r3, r2
 800189a:	604b      	str	r3, [r1, #4]
 800189c:	e018      	b.n	80018d0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800189e:	4b95      	ldr	r3, [pc, #596]	@ (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a94      	ldr	r2, [pc, #592]	@ (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 80018a4:	f023 0301 	bic.w	r3, r3, #1
 80018a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018aa:	f7ff fb83 	bl	8000fb4 <HAL_GetTick>
 80018ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018b2:	f7ff fb7f 	bl	8000fb4 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e2ed      	b.n	8001ea0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018c4:	4b8b      	ldr	r3, [pc, #556]	@ (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1f0      	bne.n	80018b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0310 	and.w	r3, r3, #16
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 80a9 	beq.w	8001a30 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018de:	4b85      	ldr	r3, [pc, #532]	@ (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018e6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018e8:	4b82      	ldr	r3, [pc, #520]	@ (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 80018ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ec:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	2b08      	cmp	r3, #8
 80018f2:	d007      	beq.n	8001904 <HAL_RCC_OscConfig+0x308>
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	2b18      	cmp	r3, #24
 80018f8:	d13a      	bne.n	8001970 <HAL_RCC_OscConfig+0x374>
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	2b01      	cmp	r3, #1
 8001902:	d135      	bne.n	8001970 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001904:	4b7b      	ldr	r3, [pc, #492]	@ (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800190c:	2b00      	cmp	r3, #0
 800190e:	d005      	beq.n	800191c <HAL_RCC_OscConfig+0x320>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69db      	ldr	r3, [r3, #28]
 8001914:	2b80      	cmp	r3, #128	@ 0x80
 8001916:	d001      	beq.n	800191c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e2c1      	b.n	8001ea0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800191c:	f7ff fb7a 	bl	8001014 <HAL_GetREVID>
 8001920:	4603      	mov	r3, r0
 8001922:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001926:	4293      	cmp	r3, r2
 8001928:	d817      	bhi.n	800195a <HAL_RCC_OscConfig+0x35e>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a1b      	ldr	r3, [r3, #32]
 800192e:	2b20      	cmp	r3, #32
 8001930:	d108      	bne.n	8001944 <HAL_RCC_OscConfig+0x348>
 8001932:	4b70      	ldr	r3, [pc, #448]	@ (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800193a:	4a6e      	ldr	r2, [pc, #440]	@ (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 800193c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001940:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001942:	e075      	b.n	8001a30 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001944:	4b6b      	ldr	r3, [pc, #428]	@ (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	069b      	lsls	r3, r3, #26
 8001952:	4968      	ldr	r1, [pc, #416]	@ (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 8001954:	4313      	orrs	r3, r2
 8001956:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001958:	e06a      	b.n	8001a30 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800195a:	4b66      	ldr	r3, [pc, #408]	@ (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	061b      	lsls	r3, r3, #24
 8001968:	4962      	ldr	r1, [pc, #392]	@ (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 800196a:	4313      	orrs	r3, r2
 800196c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800196e:	e05f      	b.n	8001a30 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	69db      	ldr	r3, [r3, #28]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d042      	beq.n	80019fe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001978:	4b5e      	ldr	r3, [pc, #376]	@ (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a5d      	ldr	r2, [pc, #372]	@ (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 800197e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001982:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001984:	f7ff fb16 	bl	8000fb4 <HAL_GetTick>
 8001988:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800198c:	f7ff fb12 	bl	8000fb4 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e280      	b.n	8001ea0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800199e:	4b55      	ldr	r3, [pc, #340]	@ (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f0      	beq.n	800198c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019aa:	f7ff fb33 	bl	8001014 <HAL_GetREVID>
 80019ae:	4603      	mov	r3, r0
 80019b0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d817      	bhi.n	80019e8 <HAL_RCC_OscConfig+0x3ec>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	2b20      	cmp	r3, #32
 80019be:	d108      	bne.n	80019d2 <HAL_RCC_OscConfig+0x3d6>
 80019c0:	4b4c      	ldr	r3, [pc, #304]	@ (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80019c8:	4a4a      	ldr	r2, [pc, #296]	@ (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 80019ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80019ce:	6053      	str	r3, [r2, #4]
 80019d0:	e02e      	b.n	8001a30 <HAL_RCC_OscConfig+0x434>
 80019d2:	4b48      	ldr	r3, [pc, #288]	@ (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	069b      	lsls	r3, r3, #26
 80019e0:	4944      	ldr	r1, [pc, #272]	@ (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	604b      	str	r3, [r1, #4]
 80019e6:	e023      	b.n	8001a30 <HAL_RCC_OscConfig+0x434>
 80019e8:	4b42      	ldr	r3, [pc, #264]	@ (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	061b      	lsls	r3, r3, #24
 80019f6:	493f      	ldr	r1, [pc, #252]	@ (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	60cb      	str	r3, [r1, #12]
 80019fc:	e018      	b.n	8001a30 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80019fe:	4b3d      	ldr	r3, [pc, #244]	@ (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a3c      	ldr	r2, [pc, #240]	@ (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 8001a04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0a:	f7ff fad3 	bl	8000fb4 <HAL_GetTick>
 8001a0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001a12:	f7ff facf 	bl	8000fb4 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e23d      	b.n	8001ea0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a24:	4b33      	ldr	r3, [pc, #204]	@ (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1f0      	bne.n	8001a12 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d036      	beq.n	8001aaa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d019      	beq.n	8001a78 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a44:	4b2b      	ldr	r3, [pc, #172]	@ (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 8001a46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a48:	4a2a      	ldr	r2, [pc, #168]	@ (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a50:	f7ff fab0 	bl	8000fb4 <HAL_GetTick>
 8001a54:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a58:	f7ff faac 	bl	8000fb4 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e21a      	b.n	8001ea0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a6a:	4b22      	ldr	r3, [pc, #136]	@ (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 8001a6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0f0      	beq.n	8001a58 <HAL_RCC_OscConfig+0x45c>
 8001a76:	e018      	b.n	8001aaa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a78:	4b1e      	ldr	r3, [pc, #120]	@ (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 8001a7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 8001a7e:	f023 0301 	bic.w	r3, r3, #1
 8001a82:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a84:	f7ff fa96 	bl	8000fb4 <HAL_GetTick>
 8001a88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a8c:	f7ff fa92 	bl	8000fb4 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e200      	b.n	8001ea0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a9e:	4b15      	ldr	r3, [pc, #84]	@ (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 8001aa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f0      	bne.n	8001a8c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0320 	and.w	r3, r3, #32
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d039      	beq.n	8001b2a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d01c      	beq.n	8001af8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001abe:	4b0d      	ldr	r3, [pc, #52]	@ (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a0c      	ldr	r2, [pc, #48]	@ (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 8001ac4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ac8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001aca:	f7ff fa73 	bl	8000fb4 <HAL_GetTick>
 8001ace:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ad2:	f7ff fa6f 	bl	8000fb4 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e1dd      	b.n	8001ea0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ae4:	4b03      	ldr	r3, [pc, #12]	@ (8001af4 <HAL_RCC_OscConfig+0x4f8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0f0      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x4d6>
 8001af0:	e01b      	b.n	8001b2a <HAL_RCC_OscConfig+0x52e>
 8001af2:	bf00      	nop
 8001af4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001af8:	4b9b      	ldr	r3, [pc, #620]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a9a      	ldr	r2, [pc, #616]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001afe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001b02:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b04:	f7ff fa56 	bl	8000fb4 <HAL_GetTick>
 8001b08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b0c:	f7ff fa52 	bl	8000fb4 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e1c0      	b.n	8001ea0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b1e:	4b92      	ldr	r3, [pc, #584]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f0      	bne.n	8001b0c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 8081 	beq.w	8001c3a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b38:	4b8c      	ldr	r3, [pc, #560]	@ (8001d6c <HAL_RCC_OscConfig+0x770>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a8b      	ldr	r2, [pc, #556]	@ (8001d6c <HAL_RCC_OscConfig+0x770>)
 8001b3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b44:	f7ff fa36 	bl	8000fb4 <HAL_GetTick>
 8001b48:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b4c:	f7ff fa32 	bl	8000fb4 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b64      	cmp	r3, #100	@ 0x64
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e1a0      	b.n	8001ea0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b5e:	4b83      	ldr	r3, [pc, #524]	@ (8001d6c <HAL_RCC_OscConfig+0x770>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d106      	bne.n	8001b80 <HAL_RCC_OscConfig+0x584>
 8001b72:	4b7d      	ldr	r3, [pc, #500]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b76:	4a7c      	ldr	r2, [pc, #496]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b7e:	e02d      	b.n	8001bdc <HAL_RCC_OscConfig+0x5e0>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d10c      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x5a6>
 8001b88:	4b77      	ldr	r3, [pc, #476]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b8c:	4a76      	ldr	r2, [pc, #472]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001b8e:	f023 0301 	bic.w	r3, r3, #1
 8001b92:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b94:	4b74      	ldr	r3, [pc, #464]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b98:	4a73      	ldr	r2, [pc, #460]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001b9a:	f023 0304 	bic.w	r3, r3, #4
 8001b9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ba0:	e01c      	b.n	8001bdc <HAL_RCC_OscConfig+0x5e0>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	2b05      	cmp	r3, #5
 8001ba8:	d10c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x5c8>
 8001baa:	4b6f      	ldr	r3, [pc, #444]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bae:	4a6e      	ldr	r2, [pc, #440]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001bb0:	f043 0304 	orr.w	r3, r3, #4
 8001bb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bb6:	4b6c      	ldr	r3, [pc, #432]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bba:	4a6b      	ldr	r2, [pc, #428]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bc2:	e00b      	b.n	8001bdc <HAL_RCC_OscConfig+0x5e0>
 8001bc4:	4b68      	ldr	r3, [pc, #416]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001bc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bc8:	4a67      	ldr	r2, [pc, #412]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001bca:	f023 0301 	bic.w	r3, r3, #1
 8001bce:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bd0:	4b65      	ldr	r3, [pc, #404]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bd4:	4a64      	ldr	r2, [pc, #400]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001bd6:	f023 0304 	bic.w	r3, r3, #4
 8001bda:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d015      	beq.n	8001c10 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be4:	f7ff f9e6 	bl	8000fb4 <HAL_GetTick>
 8001be8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bea:	e00a      	b.n	8001c02 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bec:	f7ff f9e2 	bl	8000fb4 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e14e      	b.n	8001ea0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c02:	4b59      	ldr	r3, [pc, #356]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0ee      	beq.n	8001bec <HAL_RCC_OscConfig+0x5f0>
 8001c0e:	e014      	b.n	8001c3a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c10:	f7ff f9d0 	bl	8000fb4 <HAL_GetTick>
 8001c14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c16:	e00a      	b.n	8001c2e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c18:	f7ff f9cc 	bl	8000fb4 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e138      	b.n	8001ea0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c2e:	4b4e      	ldr	r3, [pc, #312]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1ee      	bne.n	8001c18 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f000 812d 	beq.w	8001e9e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001c44:	4b48      	ldr	r3, [pc, #288]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c4c:	2b18      	cmp	r3, #24
 8001c4e:	f000 80bd 	beq.w	8001dcc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	f040 809e 	bne.w	8001d98 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5c:	4b42      	ldr	r3, [pc, #264]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a41      	ldr	r2, [pc, #260]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001c62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c68:	f7ff f9a4 	bl	8000fb4 <HAL_GetTick>
 8001c6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c70:	f7ff f9a0 	bl	8000fb4 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e10e      	b.n	8001ea0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c82:	4b39      	ldr	r3, [pc, #228]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f0      	bne.n	8001c70 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c8e:	4b36      	ldr	r3, [pc, #216]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001c90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c92:	4b37      	ldr	r3, [pc, #220]	@ (8001d70 <HAL_RCC_OscConfig+0x774>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001c9e:	0112      	lsls	r2, r2, #4
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	4931      	ldr	r1, [pc, #196]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	628b      	str	r3, [r1, #40]	@ 0x28
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cac:	3b01      	subs	r3, #1
 8001cae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	025b      	lsls	r3, r3, #9
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	041b      	lsls	r3, r3, #16
 8001cc6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	061b      	lsls	r3, r3, #24
 8001cd4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001cd8:	4923      	ldr	r1, [pc, #140]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001cde:	4b22      	ldr	r3, [pc, #136]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce2:	4a21      	ldr	r2, [pc, #132]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001ce4:	f023 0301 	bic.w	r3, r3, #1
 8001ce8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001cea:	4b1f      	ldr	r3, [pc, #124]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001cec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cee:	4b21      	ldr	r3, [pc, #132]	@ (8001d74 <HAL_RCC_OscConfig+0x778>)
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001cf6:	00d2      	lsls	r2, r2, #3
 8001cf8:	491b      	ldr	r1, [pc, #108]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d02:	f023 020c 	bic.w	r2, r3, #12
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0a:	4917      	ldr	r1, [pc, #92]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001d10:	4b15      	ldr	r3, [pc, #84]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d14:	f023 0202 	bic.w	r2, r3, #2
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1c:	4912      	ldr	r1, [pc, #72]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001d22:	4b11      	ldr	r3, [pc, #68]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d26:	4a10      	ldr	r2, [pc, #64]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001d28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d32:	4a0d      	ldr	r2, [pc, #52]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001d34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001d40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001d46:	4b08      	ldr	r3, [pc, #32]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d4a:	4a07      	ldr	r2, [pc, #28]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d52:	4b05      	ldr	r3, [pc, #20]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a04      	ldr	r2, [pc, #16]	@ (8001d68 <HAL_RCC_OscConfig+0x76c>)
 8001d58:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5e:	f7ff f929 	bl	8000fb4 <HAL_GetTick>
 8001d62:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d64:	e011      	b.n	8001d8a <HAL_RCC_OscConfig+0x78e>
 8001d66:	bf00      	nop
 8001d68:	58024400 	.word	0x58024400
 8001d6c:	58024800 	.word	0x58024800
 8001d70:	fffffc0c 	.word	0xfffffc0c
 8001d74:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d78:	f7ff f91c 	bl	8000fb4 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e08a      	b.n	8001ea0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d8a:	4b47      	ldr	r3, [pc, #284]	@ (8001ea8 <HAL_RCC_OscConfig+0x8ac>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0f0      	beq.n	8001d78 <HAL_RCC_OscConfig+0x77c>
 8001d96:	e082      	b.n	8001e9e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d98:	4b43      	ldr	r3, [pc, #268]	@ (8001ea8 <HAL_RCC_OscConfig+0x8ac>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a42      	ldr	r2, [pc, #264]	@ (8001ea8 <HAL_RCC_OscConfig+0x8ac>)
 8001d9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001da2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da4:	f7ff f906 	bl	8000fb4 <HAL_GetTick>
 8001da8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dac:	f7ff f902 	bl	8000fb4 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e070      	b.n	8001ea0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dbe:	4b3a      	ldr	r3, [pc, #232]	@ (8001ea8 <HAL_RCC_OscConfig+0x8ac>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f0      	bne.n	8001dac <HAL_RCC_OscConfig+0x7b0>
 8001dca:	e068      	b.n	8001e9e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001dcc:	4b36      	ldr	r3, [pc, #216]	@ (8001ea8 <HAL_RCC_OscConfig+0x8ac>)
 8001dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001dd2:	4b35      	ldr	r3, [pc, #212]	@ (8001ea8 <HAL_RCC_OscConfig+0x8ac>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d031      	beq.n	8001e44 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	f003 0203 	and.w	r2, r3, #3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d12a      	bne.n	8001e44 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	091b      	lsrs	r3, r3, #4
 8001df2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d122      	bne.n	8001e44 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e08:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d11a      	bne.n	8001e44 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	0a5b      	lsrs	r3, r3, #9
 8001e12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e1a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d111      	bne.n	8001e44 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	0c1b      	lsrs	r3, r3, #16
 8001e24:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e2c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d108      	bne.n	8001e44 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	0e1b      	lsrs	r3, r3, #24
 8001e36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e3e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d001      	beq.n	8001e48 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e02b      	b.n	8001ea0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001e48:	4b17      	ldr	r3, [pc, #92]	@ (8001ea8 <HAL_RCC_OscConfig+0x8ac>)
 8001e4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e4c:	08db      	lsrs	r3, r3, #3
 8001e4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e52:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d01f      	beq.n	8001e9e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001e5e:	4b12      	ldr	r3, [pc, #72]	@ (8001ea8 <HAL_RCC_OscConfig+0x8ac>)
 8001e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e62:	4a11      	ldr	r2, [pc, #68]	@ (8001ea8 <HAL_RCC_OscConfig+0x8ac>)
 8001e64:	f023 0301 	bic.w	r3, r3, #1
 8001e68:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e6a:	f7ff f8a3 	bl	8000fb4 <HAL_GetTick>
 8001e6e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001e70:	bf00      	nop
 8001e72:	f7ff f89f 	bl	8000fb4 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d0f9      	beq.n	8001e72 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea8 <HAL_RCC_OscConfig+0x8ac>)
 8001e80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e82:	4b0a      	ldr	r3, [pc, #40]	@ (8001eac <HAL_RCC_OscConfig+0x8b0>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e8a:	00d2      	lsls	r2, r2, #3
 8001e8c:	4906      	ldr	r1, [pc, #24]	@ (8001ea8 <HAL_RCC_OscConfig+0x8ac>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001e92:	4b05      	ldr	r3, [pc, #20]	@ (8001ea8 <HAL_RCC_OscConfig+0x8ac>)
 8001e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e96:	4a04      	ldr	r2, [pc, #16]	@ (8001ea8 <HAL_RCC_OscConfig+0x8ac>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3730      	adds	r7, #48	@ 0x30
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	58024400 	.word	0x58024400
 8001eac:	ffff0007 	.word	0xffff0007

08001eb0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e19c      	b.n	80021fe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec4:	4b8a      	ldr	r3, [pc, #552]	@ (80020f0 <HAL_RCC_ClockConfig+0x240>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 030f 	and.w	r3, r3, #15
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d910      	bls.n	8001ef4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed2:	4b87      	ldr	r3, [pc, #540]	@ (80020f0 <HAL_RCC_ClockConfig+0x240>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f023 020f 	bic.w	r2, r3, #15
 8001eda:	4985      	ldr	r1, [pc, #532]	@ (80020f0 <HAL_RCC_ClockConfig+0x240>)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee2:	4b83      	ldr	r3, [pc, #524]	@ (80020f0 <HAL_RCC_ClockConfig+0x240>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d001      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e184      	b.n	80021fe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d010      	beq.n	8001f22 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	4b7b      	ldr	r3, [pc, #492]	@ (80020f4 <HAL_RCC_ClockConfig+0x244>)
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d908      	bls.n	8001f22 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f10:	4b78      	ldr	r3, [pc, #480]	@ (80020f4 <HAL_RCC_ClockConfig+0x244>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	4975      	ldr	r1, [pc, #468]	@ (80020f4 <HAL_RCC_ClockConfig+0x244>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d010      	beq.n	8001f50 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	695a      	ldr	r2, [r3, #20]
 8001f32:	4b70      	ldr	r3, [pc, #448]	@ (80020f4 <HAL_RCC_ClockConfig+0x244>)
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d908      	bls.n	8001f50 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f3e:	4b6d      	ldr	r3, [pc, #436]	@ (80020f4 <HAL_RCC_ClockConfig+0x244>)
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	496a      	ldr	r1, [pc, #424]	@ (80020f4 <HAL_RCC_ClockConfig+0x244>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0310 	and.w	r3, r3, #16
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d010      	beq.n	8001f7e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	699a      	ldr	r2, [r3, #24]
 8001f60:	4b64      	ldr	r3, [pc, #400]	@ (80020f4 <HAL_RCC_ClockConfig+0x244>)
 8001f62:	69db      	ldr	r3, [r3, #28]
 8001f64:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d908      	bls.n	8001f7e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f6c:	4b61      	ldr	r3, [pc, #388]	@ (80020f4 <HAL_RCC_ClockConfig+0x244>)
 8001f6e:	69db      	ldr	r3, [r3, #28]
 8001f70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	495e      	ldr	r1, [pc, #376]	@ (80020f4 <HAL_RCC_ClockConfig+0x244>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0320 	and.w	r3, r3, #32
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d010      	beq.n	8001fac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69da      	ldr	r2, [r3, #28]
 8001f8e:	4b59      	ldr	r3, [pc, #356]	@ (80020f4 <HAL_RCC_ClockConfig+0x244>)
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d908      	bls.n	8001fac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001f9a:	4b56      	ldr	r3, [pc, #344]	@ (80020f4 <HAL_RCC_ClockConfig+0x244>)
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	4953      	ldr	r1, [pc, #332]	@ (80020f4 <HAL_RCC_ClockConfig+0x244>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d010      	beq.n	8001fda <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68da      	ldr	r2, [r3, #12]
 8001fbc:	4b4d      	ldr	r3, [pc, #308]	@ (80020f4 <HAL_RCC_ClockConfig+0x244>)
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	f003 030f 	and.w	r3, r3, #15
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d908      	bls.n	8001fda <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc8:	4b4a      	ldr	r3, [pc, #296]	@ (80020f4 <HAL_RCC_ClockConfig+0x244>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f023 020f 	bic.w	r2, r3, #15
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	4947      	ldr	r1, [pc, #284]	@ (80020f4 <HAL_RCC_ClockConfig+0x244>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d055      	beq.n	8002092 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001fe6:	4b43      	ldr	r3, [pc, #268]	@ (80020f4 <HAL_RCC_ClockConfig+0x244>)
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	4940      	ldr	r1, [pc, #256]	@ (80020f4 <HAL_RCC_ClockConfig+0x244>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d107      	bne.n	8002010 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002000:	4b3c      	ldr	r3, [pc, #240]	@ (80020f4 <HAL_RCC_ClockConfig+0x244>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d121      	bne.n	8002050 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0f6      	b.n	80021fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b03      	cmp	r3, #3
 8002016:	d107      	bne.n	8002028 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002018:	4b36      	ldr	r3, [pc, #216]	@ (80020f4 <HAL_RCC_ClockConfig+0x244>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d115      	bne.n	8002050 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e0ea      	b.n	80021fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d107      	bne.n	8002040 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002030:	4b30      	ldr	r3, [pc, #192]	@ (80020f4 <HAL_RCC_ClockConfig+0x244>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002038:	2b00      	cmp	r3, #0
 800203a:	d109      	bne.n	8002050 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e0de      	b.n	80021fe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002040:	4b2c      	ldr	r3, [pc, #176]	@ (80020f4 <HAL_RCC_ClockConfig+0x244>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0d6      	b.n	80021fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002050:	4b28      	ldr	r3, [pc, #160]	@ (80020f4 <HAL_RCC_ClockConfig+0x244>)
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	f023 0207 	bic.w	r2, r3, #7
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	4925      	ldr	r1, [pc, #148]	@ (80020f4 <HAL_RCC_ClockConfig+0x244>)
 800205e:	4313      	orrs	r3, r2
 8002060:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002062:	f7fe ffa7 	bl	8000fb4 <HAL_GetTick>
 8002066:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002068:	e00a      	b.n	8002080 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800206a:	f7fe ffa3 	bl	8000fb4 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002078:	4293      	cmp	r3, r2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e0be      	b.n	80021fe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002080:	4b1c      	ldr	r3, [pc, #112]	@ (80020f4 <HAL_RCC_ClockConfig+0x244>)
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	429a      	cmp	r2, r3
 8002090:	d1eb      	bne.n	800206a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d010      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	4b14      	ldr	r3, [pc, #80]	@ (80020f4 <HAL_RCC_ClockConfig+0x244>)
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d208      	bcs.n	80020c0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ae:	4b11      	ldr	r3, [pc, #68]	@ (80020f4 <HAL_RCC_ClockConfig+0x244>)
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	f023 020f 	bic.w	r2, r3, #15
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	490e      	ldr	r1, [pc, #56]	@ (80020f4 <HAL_RCC_ClockConfig+0x244>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020c0:	4b0b      	ldr	r3, [pc, #44]	@ (80020f0 <HAL_RCC_ClockConfig+0x240>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 030f 	and.w	r3, r3, #15
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d214      	bcs.n	80020f8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ce:	4b08      	ldr	r3, [pc, #32]	@ (80020f0 <HAL_RCC_ClockConfig+0x240>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f023 020f 	bic.w	r2, r3, #15
 80020d6:	4906      	ldr	r1, [pc, #24]	@ (80020f0 <HAL_RCC_ClockConfig+0x240>)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	4313      	orrs	r3, r2
 80020dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020de:	4b04      	ldr	r3, [pc, #16]	@ (80020f0 <HAL_RCC_ClockConfig+0x240>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d005      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e086      	b.n	80021fe <HAL_RCC_ClockConfig+0x34e>
 80020f0:	52002000 	.word	0x52002000
 80020f4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	d010      	beq.n	8002126 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	4b3f      	ldr	r3, [pc, #252]	@ (8002208 <HAL_RCC_ClockConfig+0x358>)
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002110:	429a      	cmp	r2, r3
 8002112:	d208      	bcs.n	8002126 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002114:	4b3c      	ldr	r3, [pc, #240]	@ (8002208 <HAL_RCC_ClockConfig+0x358>)
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	4939      	ldr	r1, [pc, #228]	@ (8002208 <HAL_RCC_ClockConfig+0x358>)
 8002122:	4313      	orrs	r3, r2
 8002124:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b00      	cmp	r3, #0
 8002130:	d010      	beq.n	8002154 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	695a      	ldr	r2, [r3, #20]
 8002136:	4b34      	ldr	r3, [pc, #208]	@ (8002208 <HAL_RCC_ClockConfig+0x358>)
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800213e:	429a      	cmp	r2, r3
 8002140:	d208      	bcs.n	8002154 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002142:	4b31      	ldr	r3, [pc, #196]	@ (8002208 <HAL_RCC_ClockConfig+0x358>)
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	492e      	ldr	r1, [pc, #184]	@ (8002208 <HAL_RCC_ClockConfig+0x358>)
 8002150:	4313      	orrs	r3, r2
 8002152:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0310 	and.w	r3, r3, #16
 800215c:	2b00      	cmp	r3, #0
 800215e:	d010      	beq.n	8002182 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	699a      	ldr	r2, [r3, #24]
 8002164:	4b28      	ldr	r3, [pc, #160]	@ (8002208 <HAL_RCC_ClockConfig+0x358>)
 8002166:	69db      	ldr	r3, [r3, #28]
 8002168:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800216c:	429a      	cmp	r2, r3
 800216e:	d208      	bcs.n	8002182 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002170:	4b25      	ldr	r3, [pc, #148]	@ (8002208 <HAL_RCC_ClockConfig+0x358>)
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	4922      	ldr	r1, [pc, #136]	@ (8002208 <HAL_RCC_ClockConfig+0x358>)
 800217e:	4313      	orrs	r3, r2
 8002180:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0320 	and.w	r3, r3, #32
 800218a:	2b00      	cmp	r3, #0
 800218c:	d010      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69da      	ldr	r2, [r3, #28]
 8002192:	4b1d      	ldr	r3, [pc, #116]	@ (8002208 <HAL_RCC_ClockConfig+0x358>)
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800219a:	429a      	cmp	r2, r3
 800219c:	d208      	bcs.n	80021b0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800219e:	4b1a      	ldr	r3, [pc, #104]	@ (8002208 <HAL_RCC_ClockConfig+0x358>)
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	4917      	ldr	r1, [pc, #92]	@ (8002208 <HAL_RCC_ClockConfig+0x358>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80021b0:	f000 f834 	bl	800221c <HAL_RCC_GetSysClockFreq>
 80021b4:	4602      	mov	r2, r0
 80021b6:	4b14      	ldr	r3, [pc, #80]	@ (8002208 <HAL_RCC_ClockConfig+0x358>)
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	0a1b      	lsrs	r3, r3, #8
 80021bc:	f003 030f 	and.w	r3, r3, #15
 80021c0:	4912      	ldr	r1, [pc, #72]	@ (800220c <HAL_RCC_ClockConfig+0x35c>)
 80021c2:	5ccb      	ldrb	r3, [r1, r3]
 80021c4:	f003 031f 	and.w	r3, r3, #31
 80021c8:	fa22 f303 	lsr.w	r3, r2, r3
 80021cc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80021ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002208 <HAL_RCC_ClockConfig+0x358>)
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	4a0d      	ldr	r2, [pc, #52]	@ (800220c <HAL_RCC_ClockConfig+0x35c>)
 80021d8:	5cd3      	ldrb	r3, [r2, r3]
 80021da:	f003 031f 	and.w	r3, r3, #31
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	fa22 f303 	lsr.w	r3, r2, r3
 80021e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002210 <HAL_RCC_ClockConfig+0x360>)
 80021e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80021e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002214 <HAL_RCC_ClockConfig+0x364>)
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80021ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002218 <HAL_RCC_ClockConfig+0x368>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe fe94 	bl	8000f20 <HAL_InitTick>
 80021f8:	4603      	mov	r3, r0
 80021fa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	58024400 	.word	0x58024400
 800220c:	08006718 	.word	0x08006718
 8002210:	24000004 	.word	0x24000004
 8002214:	24000000 	.word	0x24000000
 8002218:	24000008 	.word	0x24000008

0800221c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800221c:	b480      	push	{r7}
 800221e:	b089      	sub	sp, #36	@ 0x24
 8002220:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002222:	4bb3      	ldr	r3, [pc, #716]	@ (80024f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800222a:	2b18      	cmp	r3, #24
 800222c:	f200 8155 	bhi.w	80024da <HAL_RCC_GetSysClockFreq+0x2be>
 8002230:	a201      	add	r2, pc, #4	@ (adr r2, 8002238 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002236:	bf00      	nop
 8002238:	0800229d 	.word	0x0800229d
 800223c:	080024db 	.word	0x080024db
 8002240:	080024db 	.word	0x080024db
 8002244:	080024db 	.word	0x080024db
 8002248:	080024db 	.word	0x080024db
 800224c:	080024db 	.word	0x080024db
 8002250:	080024db 	.word	0x080024db
 8002254:	080024db 	.word	0x080024db
 8002258:	080022c3 	.word	0x080022c3
 800225c:	080024db 	.word	0x080024db
 8002260:	080024db 	.word	0x080024db
 8002264:	080024db 	.word	0x080024db
 8002268:	080024db 	.word	0x080024db
 800226c:	080024db 	.word	0x080024db
 8002270:	080024db 	.word	0x080024db
 8002274:	080024db 	.word	0x080024db
 8002278:	080022c9 	.word	0x080022c9
 800227c:	080024db 	.word	0x080024db
 8002280:	080024db 	.word	0x080024db
 8002284:	080024db 	.word	0x080024db
 8002288:	080024db 	.word	0x080024db
 800228c:	080024db 	.word	0x080024db
 8002290:	080024db 	.word	0x080024db
 8002294:	080024db 	.word	0x080024db
 8002298:	080022cf 	.word	0x080022cf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800229c:	4b94      	ldr	r3, [pc, #592]	@ (80024f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0320 	and.w	r3, r3, #32
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d009      	beq.n	80022bc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80022a8:	4b91      	ldr	r3, [pc, #580]	@ (80024f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	08db      	lsrs	r3, r3, #3
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	4a90      	ldr	r2, [pc, #576]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022b4:	fa22 f303 	lsr.w	r3, r2, r3
 80022b8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80022ba:	e111      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80022bc:	4b8d      	ldr	r3, [pc, #564]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022be:	61bb      	str	r3, [r7, #24]
      break;
 80022c0:	e10e      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80022c2:	4b8d      	ldr	r3, [pc, #564]	@ (80024f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80022c4:	61bb      	str	r3, [r7, #24]
      break;
 80022c6:	e10b      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80022c8:	4b8c      	ldr	r3, [pc, #560]	@ (80024fc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80022ca:	61bb      	str	r3, [r7, #24]
      break;
 80022cc:	e108      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80022ce:	4b88      	ldr	r3, [pc, #544]	@ (80024f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d2:	f003 0303 	and.w	r3, r3, #3
 80022d6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80022d8:	4b85      	ldr	r3, [pc, #532]	@ (80024f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022dc:	091b      	lsrs	r3, r3, #4
 80022de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022e2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80022e4:	4b82      	ldr	r3, [pc, #520]	@ (80024f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80022ee:	4b80      	ldr	r3, [pc, #512]	@ (80024f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022f2:	08db      	lsrs	r3, r3, #3
 80022f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	fb02 f303 	mul.w	r3, r2, r3
 80022fe:	ee07 3a90 	vmov	s15, r3
 8002302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002306:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 80e1 	beq.w	80024d4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	2b02      	cmp	r3, #2
 8002316:	f000 8083 	beq.w	8002420 <HAL_RCC_GetSysClockFreq+0x204>
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	2b02      	cmp	r3, #2
 800231e:	f200 80a1 	bhi.w	8002464 <HAL_RCC_GetSysClockFreq+0x248>
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <HAL_RCC_GetSysClockFreq+0x114>
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d056      	beq.n	80023dc <HAL_RCC_GetSysClockFreq+0x1c0>
 800232e:	e099      	b.n	8002464 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002330:	4b6f      	ldr	r3, [pc, #444]	@ (80024f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0320 	and.w	r3, r3, #32
 8002338:	2b00      	cmp	r3, #0
 800233a:	d02d      	beq.n	8002398 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800233c:	4b6c      	ldr	r3, [pc, #432]	@ (80024f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	08db      	lsrs	r3, r3, #3
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	4a6b      	ldr	r2, [pc, #428]	@ (80024f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002348:	fa22 f303 	lsr.w	r3, r2, r3
 800234c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	ee07 3a90 	vmov	s15, r3
 8002354:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	ee07 3a90 	vmov	s15, r3
 800235e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002366:	4b62      	ldr	r3, [pc, #392]	@ (80024f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800236e:	ee07 3a90 	vmov	s15, r3
 8002372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002376:	ed97 6a02 	vldr	s12, [r7, #8]
 800237a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002500 <HAL_RCC_GetSysClockFreq+0x2e4>
 800237e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002386:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800238a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800238e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002392:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002396:	e087      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	ee07 3a90 	vmov	s15, r3
 800239e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023a2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002504 <HAL_RCC_GetSysClockFreq+0x2e8>
 80023a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023aa:	4b51      	ldr	r3, [pc, #324]	@ (80024f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023b2:	ee07 3a90 	vmov	s15, r3
 80023b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80023be:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002500 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80023ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80023da:	e065      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	ee07 3a90 	vmov	s15, r3
 80023e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023e6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002508 <HAL_RCC_GetSysClockFreq+0x2ec>
 80023ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023ee:	4b40      	ldr	r3, [pc, #256]	@ (80024f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023f6:	ee07 3a90 	vmov	s15, r3
 80023fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002402:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002500 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800240a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800240e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800241a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800241e:	e043      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	ee07 3a90 	vmov	s15, r3
 8002426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800242a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800250c <HAL_RCC_GetSysClockFreq+0x2f0>
 800242e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002432:	4b2f      	ldr	r3, [pc, #188]	@ (80024f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800243a:	ee07 3a90 	vmov	s15, r3
 800243e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002442:	ed97 6a02 	vldr	s12, [r7, #8]
 8002446:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002500 <HAL_RCC_GetSysClockFreq+0x2e4>
 800244a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800244e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002452:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800245a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800245e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002462:	e021      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	ee07 3a90 	vmov	s15, r3
 800246a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800246e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002508 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002476:	4b1e      	ldr	r3, [pc, #120]	@ (80024f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800247e:	ee07 3a90 	vmov	s15, r3
 8002482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002486:	ed97 6a02 	vldr	s12, [r7, #8]
 800248a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002500 <HAL_RCC_GetSysClockFreq+0x2e4>
 800248e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002496:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800249a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800249e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80024a6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80024a8:	4b11      	ldr	r3, [pc, #68]	@ (80024f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ac:	0a5b      	lsrs	r3, r3, #9
 80024ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024b2:	3301      	adds	r3, #1
 80024b4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	ee07 3a90 	vmov	s15, r3
 80024bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80024c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024cc:	ee17 3a90 	vmov	r3, s15
 80024d0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80024d2:	e005      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	61bb      	str	r3, [r7, #24]
      break;
 80024d8:	e002      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80024da:	4b07      	ldr	r3, [pc, #28]	@ (80024f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80024dc:	61bb      	str	r3, [r7, #24]
      break;
 80024de:	bf00      	nop
  }

  return sysclockfreq;
 80024e0:	69bb      	ldr	r3, [r7, #24]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3724      	adds	r7, #36	@ 0x24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	58024400 	.word	0x58024400
 80024f4:	03d09000 	.word	0x03d09000
 80024f8:	003d0900 	.word	0x003d0900
 80024fc:	007a1200 	.word	0x007a1200
 8002500:	46000000 	.word	0x46000000
 8002504:	4c742400 	.word	0x4c742400
 8002508:	4a742400 	.word	0x4a742400
 800250c:	4af42400 	.word	0x4af42400

08002510 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002516:	f7ff fe81 	bl	800221c <HAL_RCC_GetSysClockFreq>
 800251a:	4602      	mov	r2, r0
 800251c:	4b10      	ldr	r3, [pc, #64]	@ (8002560 <HAL_RCC_GetHCLKFreq+0x50>)
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	0a1b      	lsrs	r3, r3, #8
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	490f      	ldr	r1, [pc, #60]	@ (8002564 <HAL_RCC_GetHCLKFreq+0x54>)
 8002528:	5ccb      	ldrb	r3, [r1, r3]
 800252a:	f003 031f 	and.w	r3, r3, #31
 800252e:	fa22 f303 	lsr.w	r3, r2, r3
 8002532:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002534:	4b0a      	ldr	r3, [pc, #40]	@ (8002560 <HAL_RCC_GetHCLKFreq+0x50>)
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	f003 030f 	and.w	r3, r3, #15
 800253c:	4a09      	ldr	r2, [pc, #36]	@ (8002564 <HAL_RCC_GetHCLKFreq+0x54>)
 800253e:	5cd3      	ldrb	r3, [r2, r3]
 8002540:	f003 031f 	and.w	r3, r3, #31
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	fa22 f303 	lsr.w	r3, r2, r3
 800254a:	4a07      	ldr	r2, [pc, #28]	@ (8002568 <HAL_RCC_GetHCLKFreq+0x58>)
 800254c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800254e:	4a07      	ldr	r2, [pc, #28]	@ (800256c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002554:	4b04      	ldr	r3, [pc, #16]	@ (8002568 <HAL_RCC_GetHCLKFreq+0x58>)
 8002556:	681b      	ldr	r3, [r3, #0]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	58024400 	.word	0x58024400
 8002564:	08006718 	.word	0x08006718
 8002568:	24000004 	.word	0x24000004
 800256c:	24000000 	.word	0x24000000

08002570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002574:	f7ff ffcc 	bl	8002510 <HAL_RCC_GetHCLKFreq>
 8002578:	4602      	mov	r2, r0
 800257a:	4b06      	ldr	r3, [pc, #24]	@ (8002594 <HAL_RCC_GetPCLK1Freq+0x24>)
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	091b      	lsrs	r3, r3, #4
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	4904      	ldr	r1, [pc, #16]	@ (8002598 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002586:	5ccb      	ldrb	r3, [r1, r3]
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002590:	4618      	mov	r0, r3
 8002592:	bd80      	pop	{r7, pc}
 8002594:	58024400 	.word	0x58024400
 8002598:	08006718 	.word	0x08006718

0800259c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80025a0:	f7ff ffb6 	bl	8002510 <HAL_RCC_GetHCLKFreq>
 80025a4:	4602      	mov	r2, r0
 80025a6:	4b06      	ldr	r3, [pc, #24]	@ (80025c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	0a1b      	lsrs	r3, r3, #8
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	4904      	ldr	r1, [pc, #16]	@ (80025c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025b2:	5ccb      	ldrb	r3, [r1, r3]
 80025b4:	f003 031f 	and.w	r3, r3, #31
 80025b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80025bc:	4618      	mov	r0, r3
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	58024400 	.word	0x58024400
 80025c4:	08006718 	.word	0x08006718

080025c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025cc:	b0ca      	sub	sp, #296	@ 0x128
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025d4:	2300      	movs	r3, #0
 80025d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025da:	2300      	movs	r3, #0
 80025dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80025ec:	2500      	movs	r5, #0
 80025ee:	ea54 0305 	orrs.w	r3, r4, r5
 80025f2:	d049      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80025f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80025fe:	d02f      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002600:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002604:	d828      	bhi.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002606:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800260a:	d01a      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800260c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002610:	d822      	bhi.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002616:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800261a:	d007      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800261c:	e01c      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800261e:	4bb8      	ldr	r3, [pc, #736]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002622:	4ab7      	ldr	r2, [pc, #732]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002624:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002628:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800262a:	e01a      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800262c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002630:	3308      	adds	r3, #8
 8002632:	2102      	movs	r1, #2
 8002634:	4618      	mov	r0, r3
 8002636:	f001 fc8f 	bl	8003f58 <RCCEx_PLL2_Config>
 800263a:	4603      	mov	r3, r0
 800263c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002640:	e00f      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002646:	3328      	adds	r3, #40	@ 0x28
 8002648:	2102      	movs	r1, #2
 800264a:	4618      	mov	r0, r3
 800264c:	f001 fd36 	bl	80040bc <RCCEx_PLL3_Config>
 8002650:	4603      	mov	r3, r0
 8002652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002656:	e004      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800265e:	e000      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002660:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002662:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10a      	bne.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800266a:	4ba5      	ldr	r3, [pc, #660]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800266c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800266e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002676:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002678:	4aa1      	ldr	r2, [pc, #644]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800267a:	430b      	orrs	r3, r1
 800267c:	6513      	str	r3, [r2, #80]	@ 0x50
 800267e:	e003      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002680:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002684:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800268c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002690:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002694:	f04f 0900 	mov.w	r9, #0
 8002698:	ea58 0309 	orrs.w	r3, r8, r9
 800269c:	d047      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800269e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a4:	2b04      	cmp	r3, #4
 80026a6:	d82a      	bhi.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x136>
 80026a8:	a201      	add	r2, pc, #4	@ (adr r2, 80026b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80026aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ae:	bf00      	nop
 80026b0:	080026c5 	.word	0x080026c5
 80026b4:	080026d3 	.word	0x080026d3
 80026b8:	080026e9 	.word	0x080026e9
 80026bc:	08002707 	.word	0x08002707
 80026c0:	08002707 	.word	0x08002707
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026c4:	4b8e      	ldr	r3, [pc, #568]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c8:	4a8d      	ldr	r2, [pc, #564]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026d0:	e01a      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80026d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026d6:	3308      	adds	r3, #8
 80026d8:	2100      	movs	r1, #0
 80026da:	4618      	mov	r0, r3
 80026dc:	f001 fc3c 	bl	8003f58 <RCCEx_PLL2_Config>
 80026e0:	4603      	mov	r3, r0
 80026e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026e6:	e00f      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80026e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026ec:	3328      	adds	r3, #40	@ 0x28
 80026ee:	2100      	movs	r1, #0
 80026f0:	4618      	mov	r0, r3
 80026f2:	f001 fce3 	bl	80040bc <RCCEx_PLL3_Config>
 80026f6:	4603      	mov	r3, r0
 80026f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026fc:	e004      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002704:	e000      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002706:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002708:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10a      	bne.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002710:	4b7b      	ldr	r3, [pc, #492]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002712:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002714:	f023 0107 	bic.w	r1, r3, #7
 8002718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800271c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800271e:	4a78      	ldr	r2, [pc, #480]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002720:	430b      	orrs	r3, r1
 8002722:	6513      	str	r3, [r2, #80]	@ 0x50
 8002724:	e003      	b.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002726:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800272a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800272e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002736:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800273a:	f04f 0b00 	mov.w	fp, #0
 800273e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002742:	d04c      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800274a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800274e:	d030      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002750:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002754:	d829      	bhi.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002756:	2bc0      	cmp	r3, #192	@ 0xc0
 8002758:	d02d      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800275a:	2bc0      	cmp	r3, #192	@ 0xc0
 800275c:	d825      	bhi.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800275e:	2b80      	cmp	r3, #128	@ 0x80
 8002760:	d018      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002762:	2b80      	cmp	r3, #128	@ 0x80
 8002764:	d821      	bhi.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002766:	2b00      	cmp	r3, #0
 8002768:	d002      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800276a:	2b40      	cmp	r3, #64	@ 0x40
 800276c:	d007      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800276e:	e01c      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002770:	4b63      	ldr	r3, [pc, #396]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002774:	4a62      	ldr	r2, [pc, #392]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002776:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800277a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800277c:	e01c      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800277e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002782:	3308      	adds	r3, #8
 8002784:	2100      	movs	r1, #0
 8002786:	4618      	mov	r0, r3
 8002788:	f001 fbe6 	bl	8003f58 <RCCEx_PLL2_Config>
 800278c:	4603      	mov	r3, r0
 800278e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002792:	e011      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002798:	3328      	adds	r3, #40	@ 0x28
 800279a:	2100      	movs	r1, #0
 800279c:	4618      	mov	r0, r3
 800279e:	f001 fc8d 	bl	80040bc <RCCEx_PLL3_Config>
 80027a2:	4603      	mov	r3, r0
 80027a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80027a8:	e006      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80027b0:	e002      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80027b2:	bf00      	nop
 80027b4:	e000      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80027b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10a      	bne.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80027c0:	4b4f      	ldr	r3, [pc, #316]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027c4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80027c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ce:	4a4c      	ldr	r2, [pc, #304]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027d0:	430b      	orrs	r3, r1
 80027d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80027d4:	e003      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80027da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80027de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80027ea:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80027ee:	2300      	movs	r3, #0
 80027f0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80027f4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80027f8:	460b      	mov	r3, r1
 80027fa:	4313      	orrs	r3, r2
 80027fc:	d053      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80027fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002802:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002806:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800280a:	d035      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800280c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002810:	d82e      	bhi.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002812:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002816:	d031      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002818:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800281c:	d828      	bhi.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800281e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002822:	d01a      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002824:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002828:	d822      	bhi.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800282e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002832:	d007      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002834:	e01c      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002836:	4b32      	ldr	r3, [pc, #200]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800283a:	4a31      	ldr	r2, [pc, #196]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800283c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002840:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002842:	e01c      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002848:	3308      	adds	r3, #8
 800284a:	2100      	movs	r1, #0
 800284c:	4618      	mov	r0, r3
 800284e:	f001 fb83 	bl	8003f58 <RCCEx_PLL2_Config>
 8002852:	4603      	mov	r3, r0
 8002854:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002858:	e011      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800285a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800285e:	3328      	adds	r3, #40	@ 0x28
 8002860:	2100      	movs	r1, #0
 8002862:	4618      	mov	r0, r3
 8002864:	f001 fc2a 	bl	80040bc <RCCEx_PLL3_Config>
 8002868:	4603      	mov	r3, r0
 800286a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800286e:	e006      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002876:	e002      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002878:	bf00      	nop
 800287a:	e000      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800287c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800287e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10b      	bne.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002886:	4b1e      	ldr	r3, [pc, #120]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800288a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800288e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002892:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002896:	4a1a      	ldr	r2, [pc, #104]	@ (8002900 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002898:	430b      	orrs	r3, r1
 800289a:	6593      	str	r3, [r2, #88]	@ 0x58
 800289c:	e003      	b.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800289e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80028a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ae:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80028b2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80028b6:	2300      	movs	r3, #0
 80028b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80028bc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80028c0:	460b      	mov	r3, r1
 80028c2:	4313      	orrs	r3, r2
 80028c4:	d056      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80028c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80028ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028d2:	d038      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80028d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028d8:	d831      	bhi.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80028da:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80028de:	d034      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80028e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80028e4:	d82b      	bhi.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80028e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80028ea:	d01d      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80028ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80028f0:	d825      	bhi.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d006      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80028f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028fa:	d00a      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80028fc:	e01f      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80028fe:	bf00      	nop
 8002900:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002904:	4ba2      	ldr	r3, [pc, #648]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002908:	4aa1      	ldr	r2, [pc, #644]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800290a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800290e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002910:	e01c      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002916:	3308      	adds	r3, #8
 8002918:	2100      	movs	r1, #0
 800291a:	4618      	mov	r0, r3
 800291c:	f001 fb1c 	bl	8003f58 <RCCEx_PLL2_Config>
 8002920:	4603      	mov	r3, r0
 8002922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002926:	e011      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800292c:	3328      	adds	r3, #40	@ 0x28
 800292e:	2100      	movs	r1, #0
 8002930:	4618      	mov	r0, r3
 8002932:	f001 fbc3 	bl	80040bc <RCCEx_PLL3_Config>
 8002936:	4603      	mov	r3, r0
 8002938:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800293c:	e006      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002944:	e002      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002946:	bf00      	nop
 8002948:	e000      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800294a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800294c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10b      	bne.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002954:	4b8e      	ldr	r3, [pc, #568]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002958:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800295c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002960:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002964:	4a8a      	ldr	r2, [pc, #552]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002966:	430b      	orrs	r3, r1
 8002968:	6593      	str	r3, [r2, #88]	@ 0x58
 800296a:	e003      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800296c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002970:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002980:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002984:	2300      	movs	r3, #0
 8002986:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800298a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800298e:	460b      	mov	r3, r1
 8002990:	4313      	orrs	r3, r2
 8002992:	d03a      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800299a:	2b30      	cmp	r3, #48	@ 0x30
 800299c:	d01f      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x416>
 800299e:	2b30      	cmp	r3, #48	@ 0x30
 80029a0:	d819      	bhi.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80029a2:	2b20      	cmp	r3, #32
 80029a4:	d00c      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80029a6:	2b20      	cmp	r3, #32
 80029a8:	d815      	bhi.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d019      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80029ae:	2b10      	cmp	r3, #16
 80029b0:	d111      	bne.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029b2:	4b77      	ldr	r3, [pc, #476]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b6:	4a76      	ldr	r2, [pc, #472]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80029be:	e011      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80029c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029c4:	3308      	adds	r3, #8
 80029c6:	2102      	movs	r1, #2
 80029c8:	4618      	mov	r0, r3
 80029ca:	f001 fac5 	bl	8003f58 <RCCEx_PLL2_Config>
 80029ce:	4603      	mov	r3, r0
 80029d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80029d4:	e006      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80029dc:	e002      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80029de:	bf00      	nop
 80029e0:	e000      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80029e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10a      	bne.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80029ec:	4b68      	ldr	r3, [pc, #416]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029f0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80029f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029fa:	4a65      	ldr	r2, [pc, #404]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029fc:	430b      	orrs	r3, r1
 80029fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a00:	e003      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a12:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002a16:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002a20:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002a24:	460b      	mov	r3, r1
 8002a26:	4313      	orrs	r3, r2
 8002a28:	d051      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a34:	d035      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002a36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a3a:	d82e      	bhi.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002a3c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002a40:	d031      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002a42:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002a46:	d828      	bhi.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002a48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a4c:	d01a      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002a4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a52:	d822      	bhi.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002a58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a5c:	d007      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002a5e:	e01c      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a60:	4b4b      	ldr	r3, [pc, #300]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a64:	4a4a      	ldr	r2, [pc, #296]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a6c:	e01c      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a72:	3308      	adds	r3, #8
 8002a74:	2100      	movs	r1, #0
 8002a76:	4618      	mov	r0, r3
 8002a78:	f001 fa6e 	bl	8003f58 <RCCEx_PLL2_Config>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a82:	e011      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a88:	3328      	adds	r3, #40	@ 0x28
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f001 fb15 	bl	80040bc <RCCEx_PLL3_Config>
 8002a92:	4603      	mov	r3, r0
 8002a94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a98:	e006      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002aa0:	e002      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002aa2:	bf00      	nop
 8002aa4:	e000      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002aa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002aa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10a      	bne.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002ab0:	4b37      	ldr	r3, [pc, #220]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ab2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ab4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002abe:	4a34      	ldr	r2, [pc, #208]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ac0:	430b      	orrs	r3, r1
 8002ac2:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ac4:	e003      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002aca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002ada:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002ade:	2300      	movs	r3, #0
 8002ae0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002ae4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002ae8:	460b      	mov	r3, r1
 8002aea:	4313      	orrs	r3, r2
 8002aec:	d056      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002af2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002af4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002af8:	d033      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002afa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002afe:	d82c      	bhi.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002b00:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b04:	d02f      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002b06:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b0a:	d826      	bhi.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002b0c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002b10:	d02b      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002b12:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002b16:	d820      	bhi.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002b18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b1c:	d012      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002b1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b22:	d81a      	bhi.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d022      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002b28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b2c:	d115      	bne.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b32:	3308      	adds	r3, #8
 8002b34:	2101      	movs	r1, #1
 8002b36:	4618      	mov	r0, r3
 8002b38:	f001 fa0e 	bl	8003f58 <RCCEx_PLL2_Config>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002b42:	e015      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b48:	3328      	adds	r3, #40	@ 0x28
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f001 fab5 	bl	80040bc <RCCEx_PLL3_Config>
 8002b52:	4603      	mov	r3, r0
 8002b54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002b58:	e00a      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b60:	e006      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002b62:	bf00      	nop
 8002b64:	e004      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002b66:	bf00      	nop
 8002b68:	e002      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002b6a:	bf00      	nop
 8002b6c:	e000      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002b6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10d      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002b78:	4b05      	ldr	r3, [pc, #20]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b7c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b86:	4a02      	ldr	r2, [pc, #8]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b88:	430b      	orrs	r3, r1
 8002b8a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b8c:	e006      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002b8e:	bf00      	nop
 8002b90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002ba8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002bac:	2300      	movs	r3, #0
 8002bae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002bb2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	d055      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002bc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bc8:	d033      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002bca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bce:	d82c      	bhi.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bd4:	d02f      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bda:	d826      	bhi.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002bdc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002be0:	d02b      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002be2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002be6:	d820      	bhi.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002be8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bec:	d012      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002bee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bf2:	d81a      	bhi.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d022      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002bf8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002bfc:	d115      	bne.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c02:	3308      	adds	r3, #8
 8002c04:	2101      	movs	r1, #1
 8002c06:	4618      	mov	r0, r3
 8002c08:	f001 f9a6 	bl	8003f58 <RCCEx_PLL2_Config>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002c12:	e015      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c18:	3328      	adds	r3, #40	@ 0x28
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f001 fa4d 	bl	80040bc <RCCEx_PLL3_Config>
 8002c22:	4603      	mov	r3, r0
 8002c24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002c28:	e00a      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c30:	e006      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002c32:	bf00      	nop
 8002c34:	e004      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002c36:	bf00      	nop
 8002c38:	e002      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002c3a:	bf00      	nop
 8002c3c:	e000      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002c3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10b      	bne.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002c48:	4ba3      	ldr	r3, [pc, #652]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c4c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002c58:	4a9f      	ldr	r2, [pc, #636]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c5a:	430b      	orrs	r3, r1
 8002c5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c5e:	e003      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c70:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002c74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002c78:	2300      	movs	r3, #0
 8002c7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002c7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002c82:	460b      	mov	r3, r1
 8002c84:	4313      	orrs	r3, r2
 8002c86:	d037      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c92:	d00e      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002c94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c98:	d816      	bhi.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d018      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002c9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ca2:	d111      	bne.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ca4:	4b8c      	ldr	r3, [pc, #560]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca8:	4a8b      	ldr	r2, [pc, #556]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002caa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002cb0:	e00f      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cb6:	3308      	adds	r3, #8
 8002cb8:	2101      	movs	r1, #1
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f001 f94c 	bl	8003f58 <RCCEx_PLL2_Config>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002cc6:	e004      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002cce:	e000      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002cd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10a      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002cda:	4b7f      	ldr	r3, [pc, #508]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cde:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce8:	4a7b      	ldr	r2, [pc, #492]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cea:	430b      	orrs	r3, r1
 8002cec:	6513      	str	r3, [r2, #80]	@ 0x50
 8002cee:	e003      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cf4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d00:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002d04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d08:	2300      	movs	r3, #0
 8002d0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002d0e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4313      	orrs	r3, r2
 8002d16:	d039      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d1e:	2b03      	cmp	r3, #3
 8002d20:	d81c      	bhi.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002d22:	a201      	add	r2, pc, #4	@ (adr r2, 8002d28 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d28:	08002d65 	.word	0x08002d65
 8002d2c:	08002d39 	.word	0x08002d39
 8002d30:	08002d47 	.word	0x08002d47
 8002d34:	08002d65 	.word	0x08002d65
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d38:	4b67      	ldr	r3, [pc, #412]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3c:	4a66      	ldr	r2, [pc, #408]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002d44:	e00f      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d4a:	3308      	adds	r3, #8
 8002d4c:	2102      	movs	r1, #2
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f001 f902 	bl	8003f58 <RCCEx_PLL2_Config>
 8002d54:	4603      	mov	r3, r0
 8002d56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002d5a:	e004      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d62:	e000      	b.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002d64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10a      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002d6e:	4b5a      	ldr	r3, [pc, #360]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d72:	f023 0103 	bic.w	r1, r3, #3
 8002d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d7c:	4a56      	ldr	r2, [pc, #344]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d7e:	430b      	orrs	r3, r1
 8002d80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d82:	e003      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d94:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002d98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002da2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002da6:	460b      	mov	r3, r1
 8002da8:	4313      	orrs	r3, r2
 8002daa:	f000 809f 	beq.w	8002eec <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dae:	4b4b      	ldr	r3, [pc, #300]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a4a      	ldr	r2, [pc, #296]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002db4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002db8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dba:	f7fe f8fb 	bl	8000fb4 <HAL_GetTick>
 8002dbe:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dc2:	e00b      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc4:	f7fe f8f6 	bl	8000fb4 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b64      	cmp	r3, #100	@ 0x64
 8002dd2:	d903      	bls.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002dda:	e005      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ddc:	4b3f      	ldr	r3, [pc, #252]	@ (8002edc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0ed      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002de8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d179      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002df0:	4b39      	ldr	r3, [pc, #228]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002df2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002df8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002dfc:	4053      	eors	r3, r2
 8002dfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d015      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e06:	4b34      	ldr	r3, [pc, #208]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e0e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e12:	4b31      	ldr	r3, [pc, #196]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e16:	4a30      	ldr	r2, [pc, #192]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e1c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e1e:	4b2e      	ldr	r3, [pc, #184]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e22:	4a2d      	ldr	r2, [pc, #180]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e28:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002e2a:	4a2b      	ldr	r2, [pc, #172]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e30:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002e3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e3e:	d118      	bne.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e40:	f7fe f8b8 	bl	8000fb4 <HAL_GetTick>
 8002e44:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e48:	e00d      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e4a:	f7fe f8b3 	bl	8000fb4 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002e54:	1ad2      	subs	r2, r2, r3
 8002e56:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d903      	bls.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8002e64:	e005      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e66:	4b1c      	ldr	r3, [pc, #112]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0eb      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002e72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d129      	bne.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e7e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002e82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e8a:	d10e      	bne.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002e8c:	4b12      	ldr	r3, [pc, #72]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002e9c:	091a      	lsrs	r2, r3, #4
 8002e9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	4a0d      	ldr	r2, [pc, #52]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ea4:	430b      	orrs	r3, r1
 8002ea6:	6113      	str	r3, [r2, #16]
 8002ea8:	e005      	b.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	4a0a      	ldr	r2, [pc, #40]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002eb0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002eb4:	6113      	str	r3, [r2, #16]
 8002eb6:	4b08      	ldr	r3, [pc, #32]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002eb8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ebe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002ec2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec6:	4a04      	ldr	r2, [pc, #16]	@ (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ecc:	e00e      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ece:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ed2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8002ed6:	e009      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002ed8:	58024400 	.word	0x58024400
 8002edc:	58024800 	.word	0x58024800
 8002ee0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ee8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef4:	f002 0301 	and.w	r3, r2, #1
 8002ef8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002efc:	2300      	movs	r3, #0
 8002efe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f02:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	f000 8089 	beq.w	8003020 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f14:	2b28      	cmp	r3, #40	@ 0x28
 8002f16:	d86b      	bhi.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002f18:	a201      	add	r2, pc, #4	@ (adr r2, 8002f20 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1e:	bf00      	nop
 8002f20:	08002ff9 	.word	0x08002ff9
 8002f24:	08002ff1 	.word	0x08002ff1
 8002f28:	08002ff1 	.word	0x08002ff1
 8002f2c:	08002ff1 	.word	0x08002ff1
 8002f30:	08002ff1 	.word	0x08002ff1
 8002f34:	08002ff1 	.word	0x08002ff1
 8002f38:	08002ff1 	.word	0x08002ff1
 8002f3c:	08002ff1 	.word	0x08002ff1
 8002f40:	08002fc5 	.word	0x08002fc5
 8002f44:	08002ff1 	.word	0x08002ff1
 8002f48:	08002ff1 	.word	0x08002ff1
 8002f4c:	08002ff1 	.word	0x08002ff1
 8002f50:	08002ff1 	.word	0x08002ff1
 8002f54:	08002ff1 	.word	0x08002ff1
 8002f58:	08002ff1 	.word	0x08002ff1
 8002f5c:	08002ff1 	.word	0x08002ff1
 8002f60:	08002fdb 	.word	0x08002fdb
 8002f64:	08002ff1 	.word	0x08002ff1
 8002f68:	08002ff1 	.word	0x08002ff1
 8002f6c:	08002ff1 	.word	0x08002ff1
 8002f70:	08002ff1 	.word	0x08002ff1
 8002f74:	08002ff1 	.word	0x08002ff1
 8002f78:	08002ff1 	.word	0x08002ff1
 8002f7c:	08002ff1 	.word	0x08002ff1
 8002f80:	08002ff9 	.word	0x08002ff9
 8002f84:	08002ff1 	.word	0x08002ff1
 8002f88:	08002ff1 	.word	0x08002ff1
 8002f8c:	08002ff1 	.word	0x08002ff1
 8002f90:	08002ff1 	.word	0x08002ff1
 8002f94:	08002ff1 	.word	0x08002ff1
 8002f98:	08002ff1 	.word	0x08002ff1
 8002f9c:	08002ff1 	.word	0x08002ff1
 8002fa0:	08002ff9 	.word	0x08002ff9
 8002fa4:	08002ff1 	.word	0x08002ff1
 8002fa8:	08002ff1 	.word	0x08002ff1
 8002fac:	08002ff1 	.word	0x08002ff1
 8002fb0:	08002ff1 	.word	0x08002ff1
 8002fb4:	08002ff1 	.word	0x08002ff1
 8002fb8:	08002ff1 	.word	0x08002ff1
 8002fbc:	08002ff1 	.word	0x08002ff1
 8002fc0:	08002ff9 	.word	0x08002ff9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fc8:	3308      	adds	r3, #8
 8002fca:	2101      	movs	r1, #1
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f000 ffc3 	bl	8003f58 <RCCEx_PLL2_Config>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002fd8:	e00f      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fde:	3328      	adds	r3, #40	@ 0x28
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f001 f86a 	bl	80040bc <RCCEx_PLL3_Config>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002fee:	e004      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ff6:	e000      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8002ff8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ffa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10a      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003002:	4bbf      	ldr	r3, [pc, #764]	@ (8003300 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003006:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800300a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800300e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003010:	4abb      	ldr	r2, [pc, #748]	@ (8003300 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003012:	430b      	orrs	r3, r1
 8003014:	6553      	str	r3, [r2, #84]	@ 0x54
 8003016:	e003      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003018:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800301c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003028:	f002 0302 	and.w	r3, r2, #2
 800302c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003030:	2300      	movs	r3, #0
 8003032:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003036:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800303a:	460b      	mov	r3, r1
 800303c:	4313      	orrs	r3, r2
 800303e:	d041      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003044:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003046:	2b05      	cmp	r3, #5
 8003048:	d824      	bhi.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800304a:	a201      	add	r2, pc, #4	@ (adr r2, 8003050 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800304c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003050:	0800309d 	.word	0x0800309d
 8003054:	08003069 	.word	0x08003069
 8003058:	0800307f 	.word	0x0800307f
 800305c:	0800309d 	.word	0x0800309d
 8003060:	0800309d 	.word	0x0800309d
 8003064:	0800309d 	.word	0x0800309d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800306c:	3308      	adds	r3, #8
 800306e:	2101      	movs	r1, #1
 8003070:	4618      	mov	r0, r3
 8003072:	f000 ff71 	bl	8003f58 <RCCEx_PLL2_Config>
 8003076:	4603      	mov	r3, r0
 8003078:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800307c:	e00f      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800307e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003082:	3328      	adds	r3, #40	@ 0x28
 8003084:	2101      	movs	r1, #1
 8003086:	4618      	mov	r0, r3
 8003088:	f001 f818 	bl	80040bc <RCCEx_PLL3_Config>
 800308c:	4603      	mov	r3, r0
 800308e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003092:	e004      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800309a:	e000      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800309c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800309e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10a      	bne.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80030a6:	4b96      	ldr	r3, [pc, #600]	@ (8003300 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80030a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030aa:	f023 0107 	bic.w	r1, r3, #7
 80030ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80030b4:	4a92      	ldr	r2, [pc, #584]	@ (8003300 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80030b6:	430b      	orrs	r3, r1
 80030b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80030ba:	e003      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030cc:	f002 0304 	and.w	r3, r2, #4
 80030d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030d4:	2300      	movs	r3, #0
 80030d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030da:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80030de:	460b      	mov	r3, r1
 80030e0:	4313      	orrs	r3, r2
 80030e2:	d044      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80030e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030ec:	2b05      	cmp	r3, #5
 80030ee:	d825      	bhi.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80030f0:	a201      	add	r2, pc, #4	@ (adr r2, 80030f8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80030f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f6:	bf00      	nop
 80030f8:	08003145 	.word	0x08003145
 80030fc:	08003111 	.word	0x08003111
 8003100:	08003127 	.word	0x08003127
 8003104:	08003145 	.word	0x08003145
 8003108:	08003145 	.word	0x08003145
 800310c:	08003145 	.word	0x08003145
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003114:	3308      	adds	r3, #8
 8003116:	2101      	movs	r1, #1
 8003118:	4618      	mov	r0, r3
 800311a:	f000 ff1d 	bl	8003f58 <RCCEx_PLL2_Config>
 800311e:	4603      	mov	r3, r0
 8003120:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003124:	e00f      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800312a:	3328      	adds	r3, #40	@ 0x28
 800312c:	2101      	movs	r1, #1
 800312e:	4618      	mov	r0, r3
 8003130:	f000 ffc4 	bl	80040bc <RCCEx_PLL3_Config>
 8003134:	4603      	mov	r3, r0
 8003136:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800313a:	e004      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003142:	e000      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003144:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003146:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10b      	bne.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800314e:	4b6c      	ldr	r3, [pc, #432]	@ (8003300 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003152:	f023 0107 	bic.w	r1, r3, #7
 8003156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800315a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800315e:	4a68      	ldr	r2, [pc, #416]	@ (8003300 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003160:	430b      	orrs	r3, r1
 8003162:	6593      	str	r3, [r2, #88]	@ 0x58
 8003164:	e003      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003166:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800316a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800316e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003176:	f002 0320 	and.w	r3, r2, #32
 800317a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800317e:	2300      	movs	r3, #0
 8003180:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003184:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003188:	460b      	mov	r3, r1
 800318a:	4313      	orrs	r3, r2
 800318c:	d055      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800318e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003196:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800319a:	d033      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800319c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031a0:	d82c      	bhi.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80031a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031a6:	d02f      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80031a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031ac:	d826      	bhi.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80031ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80031b2:	d02b      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80031b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80031b8:	d820      	bhi.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80031ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031be:	d012      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80031c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031c4:	d81a      	bhi.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d022      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80031ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031ce:	d115      	bne.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031d4:	3308      	adds	r3, #8
 80031d6:	2100      	movs	r1, #0
 80031d8:	4618      	mov	r0, r3
 80031da:	f000 febd 	bl	8003f58 <RCCEx_PLL2_Config>
 80031de:	4603      	mov	r3, r0
 80031e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80031e4:	e015      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80031e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ea:	3328      	adds	r3, #40	@ 0x28
 80031ec:	2102      	movs	r1, #2
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 ff64 	bl	80040bc <RCCEx_PLL3_Config>
 80031f4:	4603      	mov	r3, r0
 80031f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80031fa:	e00a      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003202:	e006      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003204:	bf00      	nop
 8003206:	e004      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003208:	bf00      	nop
 800320a:	e002      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800320c:	bf00      	nop
 800320e:	e000      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003210:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003212:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10b      	bne.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800321a:	4b39      	ldr	r3, [pc, #228]	@ (8003300 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800321c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800321e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800322a:	4a35      	ldr	r2, [pc, #212]	@ (8003300 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800322c:	430b      	orrs	r3, r1
 800322e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003230:	e003      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003232:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003236:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800323a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800323e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003242:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003246:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800324a:	2300      	movs	r3, #0
 800324c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003250:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003254:	460b      	mov	r3, r1
 8003256:	4313      	orrs	r3, r2
 8003258:	d058      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800325a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800325e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003262:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003266:	d033      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003268:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800326c:	d82c      	bhi.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800326e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003272:	d02f      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003274:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003278:	d826      	bhi.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800327a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800327e:	d02b      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003280:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003284:	d820      	bhi.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003286:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800328a:	d012      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800328c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003290:	d81a      	bhi.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003292:	2b00      	cmp	r3, #0
 8003294:	d022      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003296:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800329a:	d115      	bne.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800329c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032a0:	3308      	adds	r3, #8
 80032a2:	2100      	movs	r1, #0
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 fe57 	bl	8003f58 <RCCEx_PLL2_Config>
 80032aa:	4603      	mov	r3, r0
 80032ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80032b0:	e015      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b6:	3328      	adds	r3, #40	@ 0x28
 80032b8:	2102      	movs	r1, #2
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 fefe 	bl	80040bc <RCCEx_PLL3_Config>
 80032c0:	4603      	mov	r3, r0
 80032c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80032c6:	e00a      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032ce:	e006      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80032d0:	bf00      	nop
 80032d2:	e004      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80032d4:	bf00      	nop
 80032d6:	e002      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80032d8:	bf00      	nop
 80032da:	e000      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80032dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10e      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032e6:	4b06      	ldr	r3, [pc, #24]	@ (8003300 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ea:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80032ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80032f6:	4a02      	ldr	r2, [pc, #8]	@ (8003300 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032f8:	430b      	orrs	r3, r1
 80032fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80032fc:	e006      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80032fe:	bf00      	nop
 8003300:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003304:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003308:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800330c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003314:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003318:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800331c:	2300      	movs	r3, #0
 800331e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003322:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003326:	460b      	mov	r3, r1
 8003328:	4313      	orrs	r3, r2
 800332a:	d055      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800332c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003330:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003334:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003338:	d033      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800333a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800333e:	d82c      	bhi.n	800339a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003340:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003344:	d02f      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003346:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800334a:	d826      	bhi.n	800339a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800334c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003350:	d02b      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003352:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003356:	d820      	bhi.n	800339a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003358:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800335c:	d012      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800335e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003362:	d81a      	bhi.n	800339a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003364:	2b00      	cmp	r3, #0
 8003366:	d022      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003368:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800336c:	d115      	bne.n	800339a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800336e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003372:	3308      	adds	r3, #8
 8003374:	2100      	movs	r1, #0
 8003376:	4618      	mov	r0, r3
 8003378:	f000 fdee 	bl	8003f58 <RCCEx_PLL2_Config>
 800337c:	4603      	mov	r3, r0
 800337e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003382:	e015      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003388:	3328      	adds	r3, #40	@ 0x28
 800338a:	2102      	movs	r1, #2
 800338c:	4618      	mov	r0, r3
 800338e:	f000 fe95 	bl	80040bc <RCCEx_PLL3_Config>
 8003392:	4603      	mov	r3, r0
 8003394:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003398:	e00a      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033a0:	e006      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80033a2:	bf00      	nop
 80033a4:	e004      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80033a6:	bf00      	nop
 80033a8:	e002      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80033aa:	bf00      	nop
 80033ac:	e000      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80033ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10b      	bne.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80033b8:	4ba1      	ldr	r3, [pc, #644]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80033ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033bc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80033c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80033c8:	4a9d      	ldr	r2, [pc, #628]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80033ca:	430b      	orrs	r3, r1
 80033cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80033ce:	e003      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80033d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e0:	f002 0308 	and.w	r3, r2, #8
 80033e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80033e8:	2300      	movs	r3, #0
 80033ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80033ee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80033f2:	460b      	mov	r3, r1
 80033f4:	4313      	orrs	r3, r2
 80033f6:	d01e      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80033f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003400:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003404:	d10c      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800340a:	3328      	adds	r3, #40	@ 0x28
 800340c:	2102      	movs	r1, #2
 800340e:	4618      	mov	r0, r3
 8003410:	f000 fe54 	bl	80040bc <RCCEx_PLL3_Config>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003420:	4b87      	ldr	r3, [pc, #540]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003424:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800342c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003430:	4a83      	ldr	r2, [pc, #524]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003432:	430b      	orrs	r3, r1
 8003434:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800343a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343e:	f002 0310 	and.w	r3, r2, #16
 8003442:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003446:	2300      	movs	r3, #0
 8003448:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800344c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003450:	460b      	mov	r3, r1
 8003452:	4313      	orrs	r3, r2
 8003454:	d01e      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800345a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800345e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003462:	d10c      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003468:	3328      	adds	r3, #40	@ 0x28
 800346a:	2102      	movs	r1, #2
 800346c:	4618      	mov	r0, r3
 800346e:	f000 fe25 	bl	80040bc <RCCEx_PLL3_Config>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d002      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800347e:	4b70      	ldr	r3, [pc, #448]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003482:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800348a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800348e:	4a6c      	ldr	r2, [pc, #432]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003490:	430b      	orrs	r3, r1
 8003492:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80034a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034a4:	2300      	movs	r3, #0
 80034a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80034aa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80034ae:	460b      	mov	r3, r1
 80034b0:	4313      	orrs	r3, r2
 80034b2:	d03e      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80034b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80034bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034c0:	d022      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80034c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034c6:	d81b      	bhi.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80034cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034d0:	d00b      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80034d2:	e015      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034d8:	3308      	adds	r3, #8
 80034da:	2100      	movs	r1, #0
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 fd3b 	bl	8003f58 <RCCEx_PLL2_Config>
 80034e2:	4603      	mov	r3, r0
 80034e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80034e8:	e00f      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ee:	3328      	adds	r3, #40	@ 0x28
 80034f0:	2102      	movs	r1, #2
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 fde2 	bl	80040bc <RCCEx_PLL3_Config>
 80034f8:	4603      	mov	r3, r0
 80034fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80034fe:	e004      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003506:	e000      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003508:	bf00      	nop
    }

    if (ret == HAL_OK)
 800350a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10b      	bne.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003512:	4b4b      	ldr	r3, [pc, #300]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003516:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800351a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800351e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003522:	4a47      	ldr	r2, [pc, #284]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003524:	430b      	orrs	r3, r1
 8003526:	6593      	str	r3, [r2, #88]	@ 0x58
 8003528:	e003      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800352a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800352e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800353e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003540:	2300      	movs	r3, #0
 8003542:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003544:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003548:	460b      	mov	r3, r1
 800354a:	4313      	orrs	r3, r2
 800354c:	d03b      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800354e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003556:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800355a:	d01f      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800355c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003560:	d818      	bhi.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003562:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003566:	d003      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003568:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800356c:	d007      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800356e:	e011      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003570:	4b33      	ldr	r3, [pc, #204]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003574:	4a32      	ldr	r2, [pc, #200]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003576:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800357a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800357c:	e00f      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800357e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003582:	3328      	adds	r3, #40	@ 0x28
 8003584:	2101      	movs	r1, #1
 8003586:	4618      	mov	r0, r3
 8003588:	f000 fd98 	bl	80040bc <RCCEx_PLL3_Config>
 800358c:	4603      	mov	r3, r0
 800358e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003592:	e004      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800359a:	e000      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800359c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800359e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10b      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035a6:	4b26      	ldr	r3, [pc, #152]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035aa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80035ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b6:	4a22      	ldr	r2, [pc, #136]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035b8:	430b      	orrs	r3, r1
 80035ba:	6553      	str	r3, [r2, #84]	@ 0x54
 80035bc:	e003      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80035c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ce:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80035d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80035d4:	2300      	movs	r3, #0
 80035d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80035d8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80035dc:	460b      	mov	r3, r1
 80035de:	4313      	orrs	r3, r2
 80035e0:	d034      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80035e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80035ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035f0:	d007      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80035f2:	e011      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035f4:	4b12      	ldr	r3, [pc, #72]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f8:	4a11      	ldr	r2, [pc, #68]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003600:	e00e      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003606:	3308      	adds	r3, #8
 8003608:	2102      	movs	r1, #2
 800360a:	4618      	mov	r0, r3
 800360c:	f000 fca4 	bl	8003f58 <RCCEx_PLL2_Config>
 8003610:	4603      	mov	r3, r0
 8003612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003616:	e003      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800361e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003620:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10d      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003628:	4b05      	ldr	r3, [pc, #20]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800362a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800362c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003634:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003636:	4a02      	ldr	r2, [pc, #8]	@ (8003640 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003638:	430b      	orrs	r3, r1
 800363a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800363c:	e006      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800363e:	bf00      	nop
 8003640:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003644:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003648:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800364c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003654:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003658:	66bb      	str	r3, [r7, #104]	@ 0x68
 800365a:	2300      	movs	r3, #0
 800365c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800365e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003662:	460b      	mov	r3, r1
 8003664:	4313      	orrs	r3, r2
 8003666:	d00c      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800366c:	3328      	adds	r3, #40	@ 0x28
 800366e:	2102      	movs	r1, #2
 8003670:	4618      	mov	r0, r3
 8003672:	f000 fd23 	bl	80040bc <RCCEx_PLL3_Config>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d002      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800368e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003690:	2300      	movs	r3, #0
 8003692:	667b      	str	r3, [r7, #100]	@ 0x64
 8003694:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003698:	460b      	mov	r3, r1
 800369a:	4313      	orrs	r3, r2
 800369c:	d038      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800369e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036aa:	d018      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80036ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036b0:	d811      	bhi.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80036b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036b6:	d014      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80036b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036bc:	d80b      	bhi.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d011      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80036c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036c6:	d106      	bne.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036c8:	4bc3      	ldr	r3, [pc, #780]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036cc:	4ac2      	ldr	r2, [pc, #776]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80036d4:	e008      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036dc:	e004      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80036de:	bf00      	nop
 80036e0:	e002      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80036e2:	bf00      	nop
 80036e4:	e000      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80036e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10b      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036f0:	4bb9      	ldr	r3, [pc, #740]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80036f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003700:	4ab5      	ldr	r2, [pc, #724]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003702:	430b      	orrs	r3, r1
 8003704:	6553      	str	r3, [r2, #84]	@ 0x54
 8003706:	e003      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003708:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800370c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003718:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800371c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800371e:	2300      	movs	r3, #0
 8003720:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003722:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003726:	460b      	mov	r3, r1
 8003728:	4313      	orrs	r3, r2
 800372a:	d009      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800372c:	4baa      	ldr	r3, [pc, #680]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800372e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003730:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003738:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800373a:	4aa7      	ldr	r2, [pc, #668]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800373c:	430b      	orrs	r3, r1
 800373e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003748:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800374c:	653b      	str	r3, [r7, #80]	@ 0x50
 800374e:	2300      	movs	r3, #0
 8003750:	657b      	str	r3, [r7, #84]	@ 0x54
 8003752:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003756:	460b      	mov	r3, r1
 8003758:	4313      	orrs	r3, r2
 800375a:	d00a      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800375c:	4b9e      	ldr	r3, [pc, #632]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003768:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800376c:	4a9a      	ldr	r2, [pc, #616]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800376e:	430b      	orrs	r3, r1
 8003770:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800377e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003780:	2300      	movs	r3, #0
 8003782:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003784:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003788:	460b      	mov	r3, r1
 800378a:	4313      	orrs	r3, r2
 800378c:	d009      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800378e:	4b92      	ldr	r3, [pc, #584]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003790:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003792:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800379a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800379c:	4a8e      	ldr	r2, [pc, #568]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800379e:	430b      	orrs	r3, r1
 80037a0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80037a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037aa:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80037ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80037b0:	2300      	movs	r3, #0
 80037b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80037b4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80037b8:	460b      	mov	r3, r1
 80037ba:	4313      	orrs	r3, r2
 80037bc:	d00e      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037be:	4b86      	ldr	r3, [pc, #536]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	4a85      	ldr	r2, [pc, #532]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037c4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80037c8:	6113      	str	r3, [r2, #16]
 80037ca:	4b83      	ldr	r3, [pc, #524]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037cc:	6919      	ldr	r1, [r3, #16]
 80037ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80037d6:	4a80      	ldr	r2, [pc, #512]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037d8:	430b      	orrs	r3, r1
 80037da:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80037dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80037e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037ea:	2300      	movs	r3, #0
 80037ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037ee:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80037f2:	460b      	mov	r3, r1
 80037f4:	4313      	orrs	r3, r2
 80037f6:	d009      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80037f8:	4b77      	ldr	r3, [pc, #476]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80037fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037fc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003806:	4a74      	ldr	r2, [pc, #464]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003808:	430b      	orrs	r3, r1
 800380a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800380c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003814:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003818:	633b      	str	r3, [r7, #48]	@ 0x30
 800381a:	2300      	movs	r3, #0
 800381c:	637b      	str	r3, [r7, #52]	@ 0x34
 800381e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003822:	460b      	mov	r3, r1
 8003824:	4313      	orrs	r3, r2
 8003826:	d00a      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003828:	4b6b      	ldr	r3, [pc, #428]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800382a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800382c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003834:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003838:	4a67      	ldr	r2, [pc, #412]	@ (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800383a:	430b      	orrs	r3, r1
 800383c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800383e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003846:	2100      	movs	r1, #0
 8003848:	62b9      	str	r1, [r7, #40]	@ 0x28
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003850:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003854:	460b      	mov	r3, r1
 8003856:	4313      	orrs	r3, r2
 8003858:	d011      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800385a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800385e:	3308      	adds	r3, #8
 8003860:	2100      	movs	r1, #0
 8003862:	4618      	mov	r0, r3
 8003864:	f000 fb78 	bl	8003f58 <RCCEx_PLL2_Config>
 8003868:	4603      	mov	r3, r0
 800386a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800386e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800387a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800387e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003886:	2100      	movs	r1, #0
 8003888:	6239      	str	r1, [r7, #32]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003890:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003894:	460b      	mov	r3, r1
 8003896:	4313      	orrs	r3, r2
 8003898:	d011      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800389a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800389e:	3308      	adds	r3, #8
 80038a0:	2101      	movs	r1, #1
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 fb58 	bl	8003f58 <RCCEx_PLL2_Config>
 80038a8:	4603      	mov	r3, r0
 80038aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80038ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80038be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c6:	2100      	movs	r1, #0
 80038c8:	61b9      	str	r1, [r7, #24]
 80038ca:	f003 0304 	and.w	r3, r3, #4
 80038ce:	61fb      	str	r3, [r7, #28]
 80038d0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80038d4:	460b      	mov	r3, r1
 80038d6:	4313      	orrs	r3, r2
 80038d8:	d011      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038de:	3308      	adds	r3, #8
 80038e0:	2102      	movs	r1, #2
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 fb38 	bl	8003f58 <RCCEx_PLL2_Config>
 80038e8:	4603      	mov	r3, r0
 80038ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80038ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80038fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003906:	2100      	movs	r1, #0
 8003908:	6139      	str	r1, [r7, #16]
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003914:	460b      	mov	r3, r1
 8003916:	4313      	orrs	r3, r2
 8003918:	d011      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800391a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800391e:	3328      	adds	r3, #40	@ 0x28
 8003920:	2100      	movs	r1, #0
 8003922:	4618      	mov	r0, r3
 8003924:	f000 fbca 	bl	80040bc <RCCEx_PLL3_Config>
 8003928:	4603      	mov	r3, r0
 800392a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800392e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003936:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800393a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800393e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003946:	2100      	movs	r1, #0
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	f003 0310 	and.w	r3, r3, #16
 800394e:	60fb      	str	r3, [r7, #12]
 8003950:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003954:	460b      	mov	r3, r1
 8003956:	4313      	orrs	r3, r2
 8003958:	d011      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800395a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800395e:	3328      	adds	r3, #40	@ 0x28
 8003960:	2101      	movs	r1, #1
 8003962:	4618      	mov	r0, r3
 8003964:	f000 fbaa 	bl	80040bc <RCCEx_PLL3_Config>
 8003968:	4603      	mov	r3, r0
 800396a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800396e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003976:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800397a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800397e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003986:	2100      	movs	r1, #0
 8003988:	6039      	str	r1, [r7, #0]
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	607b      	str	r3, [r7, #4]
 8003990:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003994:	460b      	mov	r3, r1
 8003996:	4313      	orrs	r3, r2
 8003998:	d011      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800399a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800399e:	3328      	adds	r3, #40	@ 0x28
 80039a0:	2102      	movs	r1, #2
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 fb8a 	bl	80040bc <RCCEx_PLL3_Config>
 80039a8:	4603      	mov	r3, r0
 80039aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80039ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80039be:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80039c6:	2300      	movs	r3, #0
 80039c8:	e000      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80039d2:	46bd      	mov	sp, r7
 80039d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039d8:	58024400 	.word	0x58024400

080039dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80039e0:	f7fe fd96 	bl	8002510 <HAL_RCC_GetHCLKFreq>
 80039e4:	4602      	mov	r2, r0
 80039e6:	4b06      	ldr	r3, [pc, #24]	@ (8003a00 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	091b      	lsrs	r3, r3, #4
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	4904      	ldr	r1, [pc, #16]	@ (8003a04 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80039f2:	5ccb      	ldrb	r3, [r1, r3]
 80039f4:	f003 031f 	and.w	r3, r3, #31
 80039f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	58024400 	.word	0x58024400
 8003a04:	08006718 	.word	0x08006718

08003a08 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b089      	sub	sp, #36	@ 0x24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a10:	4ba1      	ldr	r3, [pc, #644]	@ (8003c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a14:	f003 0303 	and.w	r3, r3, #3
 8003a18:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003a1a:	4b9f      	ldr	r3, [pc, #636]	@ (8003c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a1e:	0b1b      	lsrs	r3, r3, #12
 8003a20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a24:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003a26:	4b9c      	ldr	r3, [pc, #624]	@ (8003c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2a:	091b      	lsrs	r3, r3, #4
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003a32:	4b99      	ldr	r3, [pc, #612]	@ (8003c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a36:	08db      	lsrs	r3, r3, #3
 8003a38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	fb02 f303 	mul.w	r3, r2, r3
 8003a42:	ee07 3a90 	vmov	s15, r3
 8003a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 8111 	beq.w	8003c78 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	f000 8083 	beq.w	8003b64 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	f200 80a1 	bhi.w	8003ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d003      	beq.n	8003a74 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d056      	beq.n	8003b20 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003a72:	e099      	b.n	8003ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a74:	4b88      	ldr	r3, [pc, #544]	@ (8003c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0320 	and.w	r3, r3, #32
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d02d      	beq.n	8003adc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a80:	4b85      	ldr	r3, [pc, #532]	@ (8003c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	08db      	lsrs	r3, r3, #3
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	4a84      	ldr	r2, [pc, #528]	@ (8003c9c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a90:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	ee07 3a90 	vmov	s15, r3
 8003a98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	ee07 3a90 	vmov	s15, r3
 8003aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aaa:	4b7b      	ldr	r3, [pc, #492]	@ (8003c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab2:	ee07 3a90 	vmov	s15, r3
 8003ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aba:	ed97 6a03 	vldr	s12, [r7, #12]
 8003abe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ad6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003ada:	e087      	b.n	8003bec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	ee07 3a90 	vmov	s15, r3
 8003ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ae6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003ca4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aee:	4b6a      	ldr	r3, [pc, #424]	@ (8003c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003af6:	ee07 3a90 	vmov	s15, r3
 8003afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003afe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b02:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b1e:	e065      	b.n	8003bec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	ee07 3a90 	vmov	s15, r3
 8003b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b2a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b32:	4b59      	ldr	r3, [pc, #356]	@ (8003c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b3a:	ee07 3a90 	vmov	s15, r3
 8003b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b42:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b46:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b62:	e043      	b.n	8003bec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	ee07 3a90 	vmov	s15, r3
 8003b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b6e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003cac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b76:	4b48      	ldr	r3, [pc, #288]	@ (8003c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b7e:	ee07 3a90 	vmov	s15, r3
 8003b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b86:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b8a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ba6:	e021      	b.n	8003bec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	ee07 3a90 	vmov	s15, r3
 8003bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bb2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003bb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bba:	4b37      	ldr	r3, [pc, #220]	@ (8003c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bc2:	ee07 3a90 	vmov	s15, r3
 8003bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bca:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003bd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003be6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003bec:	4b2a      	ldr	r3, [pc, #168]	@ (8003c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf0:	0a5b      	lsrs	r3, r3, #9
 8003bf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bf6:	ee07 3a90 	vmov	s15, r3
 8003bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c06:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c12:	ee17 2a90 	vmov	r2, s15
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003c1a:	4b1f      	ldr	r3, [pc, #124]	@ (8003c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c1e:	0c1b      	lsrs	r3, r3, #16
 8003c20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c24:	ee07 3a90 	vmov	s15, r3
 8003c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c34:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c40:	ee17 2a90 	vmov	r2, s15
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003c48:	4b13      	ldr	r3, [pc, #76]	@ (8003c98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c4c:	0e1b      	lsrs	r3, r3, #24
 8003c4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c52:	ee07 3a90 	vmov	s15, r3
 8003c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c62:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c6e:	ee17 2a90 	vmov	r2, s15
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003c76:	e008      	b.n	8003c8a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	609a      	str	r2, [r3, #8]
}
 8003c8a:	bf00      	nop
 8003c8c:	3724      	adds	r7, #36	@ 0x24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	58024400 	.word	0x58024400
 8003c9c:	03d09000 	.word	0x03d09000
 8003ca0:	46000000 	.word	0x46000000
 8003ca4:	4c742400 	.word	0x4c742400
 8003ca8:	4a742400 	.word	0x4a742400
 8003cac:	4af42400 	.word	0x4af42400

08003cb0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b089      	sub	sp, #36	@ 0x24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003cb8:	4ba1      	ldr	r3, [pc, #644]	@ (8003f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cbc:	f003 0303 	and.w	r3, r3, #3
 8003cc0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003cc2:	4b9f      	ldr	r3, [pc, #636]	@ (8003f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc6:	0d1b      	lsrs	r3, r3, #20
 8003cc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ccc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003cce:	4b9c      	ldr	r3, [pc, #624]	@ (8003f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd2:	0a1b      	lsrs	r3, r3, #8
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003cda:	4b99      	ldr	r3, [pc, #612]	@ (8003f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cde:	08db      	lsrs	r3, r3, #3
 8003ce0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	fb02 f303 	mul.w	r3, r2, r3
 8003cea:	ee07 3a90 	vmov	s15, r3
 8003cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cf2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 8111 	beq.w	8003f20 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	f000 8083 	beq.w	8003e0c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	f200 80a1 	bhi.w	8003e50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d056      	beq.n	8003dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003d1a:	e099      	b.n	8003e50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d1c:	4b88      	ldr	r3, [pc, #544]	@ (8003f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0320 	and.w	r3, r3, #32
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d02d      	beq.n	8003d84 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d28:	4b85      	ldr	r3, [pc, #532]	@ (8003f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	08db      	lsrs	r3, r3, #3
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	4a84      	ldr	r2, [pc, #528]	@ (8003f44 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003d34:	fa22 f303 	lsr.w	r3, r2, r3
 8003d38:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	ee07 3a90 	vmov	s15, r3
 8003d40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	ee07 3a90 	vmov	s15, r3
 8003d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d52:	4b7b      	ldr	r3, [pc, #492]	@ (8003f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d5a:	ee07 3a90 	vmov	s15, r3
 8003d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d66:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003f48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d7e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003d82:	e087      	b.n	8003e94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	ee07 3a90 	vmov	s15, r3
 8003d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d8e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003f4c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d96:	4b6a      	ldr	r3, [pc, #424]	@ (8003f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d9e:	ee07 3a90 	vmov	s15, r3
 8003da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003daa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003f48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003db6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dc6:	e065      	b.n	8003e94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	ee07 3a90 	vmov	s15, r3
 8003dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dd2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003f50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dda:	4b59      	ldr	r3, [pc, #356]	@ (8003f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003de2:	ee07 3a90 	vmov	s15, r3
 8003de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003f48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e0a:	e043      	b.n	8003e94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	ee07 3a90 	vmov	s15, r3
 8003e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e16:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003f54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e1e:	4b48      	ldr	r3, [pc, #288]	@ (8003f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e26:	ee07 3a90 	vmov	s15, r3
 8003e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e32:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003f48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e4e:	e021      	b.n	8003e94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	ee07 3a90 	vmov	s15, r3
 8003e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e5a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003f50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e62:	4b37      	ldr	r3, [pc, #220]	@ (8003f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e6a:	ee07 3a90 	vmov	s15, r3
 8003e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e76:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003f48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e92:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003e94:	4b2a      	ldr	r3, [pc, #168]	@ (8003f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e98:	0a5b      	lsrs	r3, r3, #9
 8003e9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e9e:	ee07 3a90 	vmov	s15, r3
 8003ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ea6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003eaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003eae:	edd7 6a07 	vldr	s13, [r7, #28]
 8003eb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003eb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003eba:	ee17 2a90 	vmov	r2, s15
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003ec2:	4b1f      	ldr	r3, [pc, #124]	@ (8003f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec6:	0c1b      	lsrs	r3, r3, #16
 8003ec8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ecc:	ee07 3a90 	vmov	s15, r3
 8003ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ed4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ed8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003edc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ee0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ee4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ee8:	ee17 2a90 	vmov	r2, s15
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003ef0:	4b13      	ldr	r3, [pc, #76]	@ (8003f40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef4:	0e1b      	lsrs	r3, r3, #24
 8003ef6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003efa:	ee07 3a90 	vmov	s15, r3
 8003efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f16:	ee17 2a90 	vmov	r2, s15
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003f1e:	e008      	b.n	8003f32 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	609a      	str	r2, [r3, #8]
}
 8003f32:	bf00      	nop
 8003f34:	3724      	adds	r7, #36	@ 0x24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	58024400 	.word	0x58024400
 8003f44:	03d09000 	.word	0x03d09000
 8003f48:	46000000 	.word	0x46000000
 8003f4c:	4c742400 	.word	0x4c742400
 8003f50:	4a742400 	.word	0x4a742400
 8003f54:	4af42400 	.word	0x4af42400

08003f58 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f62:	2300      	movs	r3, #0
 8003f64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f66:	4b53      	ldr	r3, [pc, #332]	@ (80040b4 <RCCEx_PLL2_Config+0x15c>)
 8003f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6a:	f003 0303 	and.w	r3, r3, #3
 8003f6e:	2b03      	cmp	r3, #3
 8003f70:	d101      	bne.n	8003f76 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e099      	b.n	80040aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003f76:	4b4f      	ldr	r3, [pc, #316]	@ (80040b4 <RCCEx_PLL2_Config+0x15c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a4e      	ldr	r2, [pc, #312]	@ (80040b4 <RCCEx_PLL2_Config+0x15c>)
 8003f7c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f82:	f7fd f817 	bl	8000fb4 <HAL_GetTick>
 8003f86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f88:	e008      	b.n	8003f9c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f8a:	f7fd f813 	bl	8000fb4 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d901      	bls.n	8003f9c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e086      	b.n	80040aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f9c:	4b45      	ldr	r3, [pc, #276]	@ (80040b4 <RCCEx_PLL2_Config+0x15c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1f0      	bne.n	8003f8a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003fa8:	4b42      	ldr	r3, [pc, #264]	@ (80040b4 <RCCEx_PLL2_Config+0x15c>)
 8003faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fac:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	031b      	lsls	r3, r3, #12
 8003fb6:	493f      	ldr	r1, [pc, #252]	@ (80040b4 <RCCEx_PLL2_Config+0x15c>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	628b      	str	r3, [r1, #40]	@ 0x28
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	025b      	lsls	r3, r3, #9
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	041b      	lsls	r3, r3, #16
 8003fda:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	061b      	lsls	r3, r3, #24
 8003fe8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003fec:	4931      	ldr	r1, [pc, #196]	@ (80040b4 <RCCEx_PLL2_Config+0x15c>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003ff2:	4b30      	ldr	r3, [pc, #192]	@ (80040b4 <RCCEx_PLL2_Config+0x15c>)
 8003ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	492d      	ldr	r1, [pc, #180]	@ (80040b4 <RCCEx_PLL2_Config+0x15c>)
 8004000:	4313      	orrs	r3, r2
 8004002:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004004:	4b2b      	ldr	r3, [pc, #172]	@ (80040b4 <RCCEx_PLL2_Config+0x15c>)
 8004006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004008:	f023 0220 	bic.w	r2, r3, #32
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	4928      	ldr	r1, [pc, #160]	@ (80040b4 <RCCEx_PLL2_Config+0x15c>)
 8004012:	4313      	orrs	r3, r2
 8004014:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004016:	4b27      	ldr	r3, [pc, #156]	@ (80040b4 <RCCEx_PLL2_Config+0x15c>)
 8004018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800401a:	4a26      	ldr	r2, [pc, #152]	@ (80040b4 <RCCEx_PLL2_Config+0x15c>)
 800401c:	f023 0310 	bic.w	r3, r3, #16
 8004020:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004022:	4b24      	ldr	r3, [pc, #144]	@ (80040b4 <RCCEx_PLL2_Config+0x15c>)
 8004024:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004026:	4b24      	ldr	r3, [pc, #144]	@ (80040b8 <RCCEx_PLL2_Config+0x160>)
 8004028:	4013      	ands	r3, r2
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	69d2      	ldr	r2, [r2, #28]
 800402e:	00d2      	lsls	r2, r2, #3
 8004030:	4920      	ldr	r1, [pc, #128]	@ (80040b4 <RCCEx_PLL2_Config+0x15c>)
 8004032:	4313      	orrs	r3, r2
 8004034:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004036:	4b1f      	ldr	r3, [pc, #124]	@ (80040b4 <RCCEx_PLL2_Config+0x15c>)
 8004038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800403a:	4a1e      	ldr	r2, [pc, #120]	@ (80040b4 <RCCEx_PLL2_Config+0x15c>)
 800403c:	f043 0310 	orr.w	r3, r3, #16
 8004040:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d106      	bne.n	8004056 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004048:	4b1a      	ldr	r3, [pc, #104]	@ (80040b4 <RCCEx_PLL2_Config+0x15c>)
 800404a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404c:	4a19      	ldr	r2, [pc, #100]	@ (80040b4 <RCCEx_PLL2_Config+0x15c>)
 800404e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004052:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004054:	e00f      	b.n	8004076 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d106      	bne.n	800406a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800405c:	4b15      	ldr	r3, [pc, #84]	@ (80040b4 <RCCEx_PLL2_Config+0x15c>)
 800405e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004060:	4a14      	ldr	r2, [pc, #80]	@ (80040b4 <RCCEx_PLL2_Config+0x15c>)
 8004062:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004066:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004068:	e005      	b.n	8004076 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800406a:	4b12      	ldr	r3, [pc, #72]	@ (80040b4 <RCCEx_PLL2_Config+0x15c>)
 800406c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406e:	4a11      	ldr	r2, [pc, #68]	@ (80040b4 <RCCEx_PLL2_Config+0x15c>)
 8004070:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004074:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004076:	4b0f      	ldr	r3, [pc, #60]	@ (80040b4 <RCCEx_PLL2_Config+0x15c>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a0e      	ldr	r2, [pc, #56]	@ (80040b4 <RCCEx_PLL2_Config+0x15c>)
 800407c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004080:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004082:	f7fc ff97 	bl	8000fb4 <HAL_GetTick>
 8004086:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004088:	e008      	b.n	800409c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800408a:	f7fc ff93 	bl	8000fb4 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d901      	bls.n	800409c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e006      	b.n	80040aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800409c:	4b05      	ldr	r3, [pc, #20]	@ (80040b4 <RCCEx_PLL2_Config+0x15c>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0f0      	beq.n	800408a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80040a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	58024400 	.word	0x58024400
 80040b8:	ffff0007 	.word	0xffff0007

080040bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80040ca:	4b53      	ldr	r3, [pc, #332]	@ (8004218 <RCCEx_PLL3_Config+0x15c>)
 80040cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	2b03      	cmp	r3, #3
 80040d4:	d101      	bne.n	80040da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e099      	b.n	800420e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80040da:	4b4f      	ldr	r3, [pc, #316]	@ (8004218 <RCCEx_PLL3_Config+0x15c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a4e      	ldr	r2, [pc, #312]	@ (8004218 <RCCEx_PLL3_Config+0x15c>)
 80040e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040e6:	f7fc ff65 	bl	8000fb4 <HAL_GetTick>
 80040ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80040ec:	e008      	b.n	8004100 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80040ee:	f7fc ff61 	bl	8000fb4 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d901      	bls.n	8004100 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e086      	b.n	800420e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004100:	4b45      	ldr	r3, [pc, #276]	@ (8004218 <RCCEx_PLL3_Config+0x15c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1f0      	bne.n	80040ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800410c:	4b42      	ldr	r3, [pc, #264]	@ (8004218 <RCCEx_PLL3_Config+0x15c>)
 800410e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004110:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	051b      	lsls	r3, r3, #20
 800411a:	493f      	ldr	r1, [pc, #252]	@ (8004218 <RCCEx_PLL3_Config+0x15c>)
 800411c:	4313      	orrs	r3, r2
 800411e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	3b01      	subs	r3, #1
 8004126:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	3b01      	subs	r3, #1
 8004130:	025b      	lsls	r3, r3, #9
 8004132:	b29b      	uxth	r3, r3
 8004134:	431a      	orrs	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	3b01      	subs	r3, #1
 800413c:	041b      	lsls	r3, r3, #16
 800413e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	3b01      	subs	r3, #1
 800414a:	061b      	lsls	r3, r3, #24
 800414c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004150:	4931      	ldr	r1, [pc, #196]	@ (8004218 <RCCEx_PLL3_Config+0x15c>)
 8004152:	4313      	orrs	r3, r2
 8004154:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004156:	4b30      	ldr	r3, [pc, #192]	@ (8004218 <RCCEx_PLL3_Config+0x15c>)
 8004158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	492d      	ldr	r1, [pc, #180]	@ (8004218 <RCCEx_PLL3_Config+0x15c>)
 8004164:	4313      	orrs	r3, r2
 8004166:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004168:	4b2b      	ldr	r3, [pc, #172]	@ (8004218 <RCCEx_PLL3_Config+0x15c>)
 800416a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	4928      	ldr	r1, [pc, #160]	@ (8004218 <RCCEx_PLL3_Config+0x15c>)
 8004176:	4313      	orrs	r3, r2
 8004178:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800417a:	4b27      	ldr	r3, [pc, #156]	@ (8004218 <RCCEx_PLL3_Config+0x15c>)
 800417c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417e:	4a26      	ldr	r2, [pc, #152]	@ (8004218 <RCCEx_PLL3_Config+0x15c>)
 8004180:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004184:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004186:	4b24      	ldr	r3, [pc, #144]	@ (8004218 <RCCEx_PLL3_Config+0x15c>)
 8004188:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800418a:	4b24      	ldr	r3, [pc, #144]	@ (800421c <RCCEx_PLL3_Config+0x160>)
 800418c:	4013      	ands	r3, r2
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	69d2      	ldr	r2, [r2, #28]
 8004192:	00d2      	lsls	r2, r2, #3
 8004194:	4920      	ldr	r1, [pc, #128]	@ (8004218 <RCCEx_PLL3_Config+0x15c>)
 8004196:	4313      	orrs	r3, r2
 8004198:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800419a:	4b1f      	ldr	r3, [pc, #124]	@ (8004218 <RCCEx_PLL3_Config+0x15c>)
 800419c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800419e:	4a1e      	ldr	r2, [pc, #120]	@ (8004218 <RCCEx_PLL3_Config+0x15c>)
 80041a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d106      	bne.n	80041ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80041ac:	4b1a      	ldr	r3, [pc, #104]	@ (8004218 <RCCEx_PLL3_Config+0x15c>)
 80041ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b0:	4a19      	ldr	r2, [pc, #100]	@ (8004218 <RCCEx_PLL3_Config+0x15c>)
 80041b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80041b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80041b8:	e00f      	b.n	80041da <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d106      	bne.n	80041ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80041c0:	4b15      	ldr	r3, [pc, #84]	@ (8004218 <RCCEx_PLL3_Config+0x15c>)
 80041c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c4:	4a14      	ldr	r2, [pc, #80]	@ (8004218 <RCCEx_PLL3_Config+0x15c>)
 80041c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80041ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80041cc:	e005      	b.n	80041da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80041ce:	4b12      	ldr	r3, [pc, #72]	@ (8004218 <RCCEx_PLL3_Config+0x15c>)
 80041d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d2:	4a11      	ldr	r2, [pc, #68]	@ (8004218 <RCCEx_PLL3_Config+0x15c>)
 80041d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80041da:	4b0f      	ldr	r3, [pc, #60]	@ (8004218 <RCCEx_PLL3_Config+0x15c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a0e      	ldr	r2, [pc, #56]	@ (8004218 <RCCEx_PLL3_Config+0x15c>)
 80041e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041e6:	f7fc fee5 	bl	8000fb4 <HAL_GetTick>
 80041ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80041ec:	e008      	b.n	8004200 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80041ee:	f7fc fee1 	bl	8000fb4 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e006      	b.n	800420e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004200:	4b05      	ldr	r3, [pc, #20]	@ (8004218 <RCCEx_PLL3_Config+0x15c>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0f0      	beq.n	80041ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800420c:	7bfb      	ldrb	r3, [r7, #15]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	58024400 	.word	0x58024400
 800421c:	ffff0007 	.word	0xffff0007

08004220 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e042      	b.n	80042b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004238:	2b00      	cmp	r3, #0
 800423a:	d106      	bne.n	800424a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f7fc fd83 	bl	8000d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2224      	movs	r2, #36	@ 0x24
 800424e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 0201 	bic.w	r2, r2, #1
 8004260:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004266:	2b00      	cmp	r3, #0
 8004268:	d002      	beq.n	8004270 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 fee6 	bl	800503c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f97b 	bl	800456c <UART_SetConfig>
 8004276:	4603      	mov	r3, r0
 8004278:	2b01      	cmp	r3, #1
 800427a:	d101      	bne.n	8004280 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e01b      	b.n	80042b8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685a      	ldr	r2, [r3, #4]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800428e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689a      	ldr	r2, [r3, #8]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800429e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0201 	orr.w	r2, r2, #1
 80042ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 ff65 	bl	8005180 <UART_CheckIdleState>
 80042b6:	4603      	mov	r3, r0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3708      	adds	r7, #8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b08a      	sub	sp, #40	@ 0x28
 80042c4:	af02      	add	r7, sp, #8
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	603b      	str	r3, [r7, #0]
 80042cc:	4613      	mov	r3, r2
 80042ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042d6:	2b20      	cmp	r3, #32
 80042d8:	d17b      	bne.n	80043d2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d002      	beq.n	80042e6 <HAL_UART_Transmit+0x26>
 80042e0:	88fb      	ldrh	r3, [r7, #6]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e074      	b.n	80043d4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2221      	movs	r2, #33	@ 0x21
 80042f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042fa:	f7fc fe5b 	bl	8000fb4 <HAL_GetTick>
 80042fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	88fa      	ldrh	r2, [r7, #6]
 8004304:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	88fa      	ldrh	r2, [r7, #6]
 800430c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004318:	d108      	bne.n	800432c <HAL_UART_Transmit+0x6c>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d104      	bne.n	800432c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004322:	2300      	movs	r3, #0
 8004324:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	61bb      	str	r3, [r7, #24]
 800432a:	e003      	b.n	8004334 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004330:	2300      	movs	r3, #0
 8004332:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004334:	e030      	b.n	8004398 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2200      	movs	r2, #0
 800433e:	2180      	movs	r1, #128	@ 0x80
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 ffc7 	bl	80052d4 <UART_WaitOnFlagUntilTimeout>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d005      	beq.n	8004358 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2220      	movs	r2, #32
 8004350:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e03d      	b.n	80043d4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10b      	bne.n	8004376 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	881b      	ldrh	r3, [r3, #0]
 8004362:	461a      	mov	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800436c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	3302      	adds	r3, #2
 8004372:	61bb      	str	r3, [r7, #24]
 8004374:	e007      	b.n	8004386 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	781a      	ldrb	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	3301      	adds	r3, #1
 8004384:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800438c:	b29b      	uxth	r3, r3
 800438e:	3b01      	subs	r3, #1
 8004390:	b29a      	uxth	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800439e:	b29b      	uxth	r3, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1c8      	bne.n	8004336 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	2200      	movs	r2, #0
 80043ac:	2140      	movs	r1, #64	@ 0x40
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 ff90 	bl	80052d4 <UART_WaitOnFlagUntilTimeout>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d005      	beq.n	80043c6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2220      	movs	r2, #32
 80043be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e006      	b.n	80043d4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2220      	movs	r2, #32
 80043ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	e000      	b.n	80043d4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80043d2:	2302      	movs	r3, #2
  }
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3720      	adds	r7, #32
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b08a      	sub	sp, #40	@ 0x28
 80043e0:	af02      	add	r7, sp, #8
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	603b      	str	r3, [r7, #0]
 80043e8:	4613      	mov	r3, r2
 80043ea:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043f2:	2b20      	cmp	r3, #32
 80043f4:	f040 80b5 	bne.w	8004562 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d002      	beq.n	8004404 <HAL_UART_Receive+0x28>
 80043fe:	88fb      	ldrh	r3, [r7, #6]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e0ad      	b.n	8004564 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2222      	movs	r2, #34	@ 0x22
 8004414:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800441e:	f7fc fdc9 	bl	8000fb4 <HAL_GetTick>
 8004422:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	88fa      	ldrh	r2, [r7, #6]
 8004428:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	88fa      	ldrh	r2, [r7, #6]
 8004430:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800443c:	d10e      	bne.n	800445c <HAL_UART_Receive+0x80>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d105      	bne.n	8004452 <HAL_UART_Receive+0x76>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800444c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004450:	e02d      	b.n	80044ae <HAL_UART_Receive+0xd2>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	22ff      	movs	r2, #255	@ 0xff
 8004456:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800445a:	e028      	b.n	80044ae <HAL_UART_Receive+0xd2>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10d      	bne.n	8004480 <HAL_UART_Receive+0xa4>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d104      	bne.n	8004476 <HAL_UART_Receive+0x9a>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	22ff      	movs	r2, #255	@ 0xff
 8004470:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004474:	e01b      	b.n	80044ae <HAL_UART_Receive+0xd2>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	227f      	movs	r2, #127	@ 0x7f
 800447a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800447e:	e016      	b.n	80044ae <HAL_UART_Receive+0xd2>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004488:	d10d      	bne.n	80044a6 <HAL_UART_Receive+0xca>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d104      	bne.n	800449c <HAL_UART_Receive+0xc0>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	227f      	movs	r2, #127	@ 0x7f
 8004496:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800449a:	e008      	b.n	80044ae <HAL_UART_Receive+0xd2>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	223f      	movs	r2, #63	@ 0x3f
 80044a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80044a4:	e003      	b.n	80044ae <HAL_UART_Receive+0xd2>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80044b4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044be:	d108      	bne.n	80044d2 <HAL_UART_Receive+0xf6>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d104      	bne.n	80044d2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80044c8:	2300      	movs	r3, #0
 80044ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	61bb      	str	r3, [r7, #24]
 80044d0:	e003      	b.n	80044da <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80044da:	e036      	b.n	800454a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	2200      	movs	r2, #0
 80044e4:	2120      	movs	r1, #32
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f000 fef4 	bl	80052d4 <UART_WaitOnFlagUntilTimeout>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d005      	beq.n	80044fe <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2220      	movs	r2, #32
 80044f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e032      	b.n	8004564 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10c      	bne.n	800451e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450a:	b29a      	uxth	r2, r3
 800450c:	8a7b      	ldrh	r3, [r7, #18]
 800450e:	4013      	ands	r3, r2
 8004510:	b29a      	uxth	r2, r3
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	3302      	adds	r3, #2
 800451a:	61bb      	str	r3, [r7, #24]
 800451c:	e00c      	b.n	8004538 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004524:	b2da      	uxtb	r2, r3
 8004526:	8a7b      	ldrh	r3, [r7, #18]
 8004528:	b2db      	uxtb	r3, r3
 800452a:	4013      	ands	r3, r2
 800452c:	b2da      	uxtb	r2, r3
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	3301      	adds	r3, #1
 8004536:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800453e:	b29b      	uxth	r3, r3
 8004540:	3b01      	subs	r3, #1
 8004542:	b29a      	uxth	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004550:	b29b      	uxth	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1c2      	bne.n	80044dc <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2220      	movs	r2, #32
 800455a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800455e:	2300      	movs	r3, #0
 8004560:	e000      	b.n	8004564 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8004562:	2302      	movs	r3, #2
  }
}
 8004564:	4618      	mov	r0, r3
 8004566:	3720      	adds	r7, #32
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800456c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004570:	b092      	sub	sp, #72	@ 0x48
 8004572:	af00      	add	r7, sp, #0
 8004574:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004576:	2300      	movs	r3, #0
 8004578:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	431a      	orrs	r2, r3
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	431a      	orrs	r2, r3
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	69db      	ldr	r3, [r3, #28]
 8004590:	4313      	orrs	r3, r2
 8004592:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	4bbe      	ldr	r3, [pc, #760]	@ (8004894 <UART_SetConfig+0x328>)
 800459c:	4013      	ands	r3, r2
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	6812      	ldr	r2, [r2, #0]
 80045a2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80045a4:	430b      	orrs	r3, r1
 80045a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	68da      	ldr	r2, [r3, #12]
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4ab3      	ldr	r2, [pc, #716]	@ (8004898 <UART_SetConfig+0x32c>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d004      	beq.n	80045d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045d4:	4313      	orrs	r3, r2
 80045d6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	4baf      	ldr	r3, [pc, #700]	@ (800489c <UART_SetConfig+0x330>)
 80045e0:	4013      	ands	r3, r2
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	6812      	ldr	r2, [r2, #0]
 80045e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80045e8:	430b      	orrs	r3, r1
 80045ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f2:	f023 010f 	bic.w	r1, r3, #15
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4aa6      	ldr	r2, [pc, #664]	@ (80048a0 <UART_SetConfig+0x334>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d177      	bne.n	80046fc <UART_SetConfig+0x190>
 800460c:	4ba5      	ldr	r3, [pc, #660]	@ (80048a4 <UART_SetConfig+0x338>)
 800460e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004610:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004614:	2b28      	cmp	r3, #40	@ 0x28
 8004616:	d86d      	bhi.n	80046f4 <UART_SetConfig+0x188>
 8004618:	a201      	add	r2, pc, #4	@ (adr r2, 8004620 <UART_SetConfig+0xb4>)
 800461a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461e:	bf00      	nop
 8004620:	080046c5 	.word	0x080046c5
 8004624:	080046f5 	.word	0x080046f5
 8004628:	080046f5 	.word	0x080046f5
 800462c:	080046f5 	.word	0x080046f5
 8004630:	080046f5 	.word	0x080046f5
 8004634:	080046f5 	.word	0x080046f5
 8004638:	080046f5 	.word	0x080046f5
 800463c:	080046f5 	.word	0x080046f5
 8004640:	080046cd 	.word	0x080046cd
 8004644:	080046f5 	.word	0x080046f5
 8004648:	080046f5 	.word	0x080046f5
 800464c:	080046f5 	.word	0x080046f5
 8004650:	080046f5 	.word	0x080046f5
 8004654:	080046f5 	.word	0x080046f5
 8004658:	080046f5 	.word	0x080046f5
 800465c:	080046f5 	.word	0x080046f5
 8004660:	080046d5 	.word	0x080046d5
 8004664:	080046f5 	.word	0x080046f5
 8004668:	080046f5 	.word	0x080046f5
 800466c:	080046f5 	.word	0x080046f5
 8004670:	080046f5 	.word	0x080046f5
 8004674:	080046f5 	.word	0x080046f5
 8004678:	080046f5 	.word	0x080046f5
 800467c:	080046f5 	.word	0x080046f5
 8004680:	080046dd 	.word	0x080046dd
 8004684:	080046f5 	.word	0x080046f5
 8004688:	080046f5 	.word	0x080046f5
 800468c:	080046f5 	.word	0x080046f5
 8004690:	080046f5 	.word	0x080046f5
 8004694:	080046f5 	.word	0x080046f5
 8004698:	080046f5 	.word	0x080046f5
 800469c:	080046f5 	.word	0x080046f5
 80046a0:	080046e5 	.word	0x080046e5
 80046a4:	080046f5 	.word	0x080046f5
 80046a8:	080046f5 	.word	0x080046f5
 80046ac:	080046f5 	.word	0x080046f5
 80046b0:	080046f5 	.word	0x080046f5
 80046b4:	080046f5 	.word	0x080046f5
 80046b8:	080046f5 	.word	0x080046f5
 80046bc:	080046f5 	.word	0x080046f5
 80046c0:	080046ed 	.word	0x080046ed
 80046c4:	2301      	movs	r3, #1
 80046c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046ca:	e222      	b.n	8004b12 <UART_SetConfig+0x5a6>
 80046cc:	2304      	movs	r3, #4
 80046ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046d2:	e21e      	b.n	8004b12 <UART_SetConfig+0x5a6>
 80046d4:	2308      	movs	r3, #8
 80046d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046da:	e21a      	b.n	8004b12 <UART_SetConfig+0x5a6>
 80046dc:	2310      	movs	r3, #16
 80046de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046e2:	e216      	b.n	8004b12 <UART_SetConfig+0x5a6>
 80046e4:	2320      	movs	r3, #32
 80046e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046ea:	e212      	b.n	8004b12 <UART_SetConfig+0x5a6>
 80046ec:	2340      	movs	r3, #64	@ 0x40
 80046ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046f2:	e20e      	b.n	8004b12 <UART_SetConfig+0x5a6>
 80046f4:	2380      	movs	r3, #128	@ 0x80
 80046f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046fa:	e20a      	b.n	8004b12 <UART_SetConfig+0x5a6>
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a69      	ldr	r2, [pc, #420]	@ (80048a8 <UART_SetConfig+0x33c>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d130      	bne.n	8004768 <UART_SetConfig+0x1fc>
 8004706:	4b67      	ldr	r3, [pc, #412]	@ (80048a4 <UART_SetConfig+0x338>)
 8004708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800470a:	f003 0307 	and.w	r3, r3, #7
 800470e:	2b05      	cmp	r3, #5
 8004710:	d826      	bhi.n	8004760 <UART_SetConfig+0x1f4>
 8004712:	a201      	add	r2, pc, #4	@ (adr r2, 8004718 <UART_SetConfig+0x1ac>)
 8004714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004718:	08004731 	.word	0x08004731
 800471c:	08004739 	.word	0x08004739
 8004720:	08004741 	.word	0x08004741
 8004724:	08004749 	.word	0x08004749
 8004728:	08004751 	.word	0x08004751
 800472c:	08004759 	.word	0x08004759
 8004730:	2300      	movs	r3, #0
 8004732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004736:	e1ec      	b.n	8004b12 <UART_SetConfig+0x5a6>
 8004738:	2304      	movs	r3, #4
 800473a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800473e:	e1e8      	b.n	8004b12 <UART_SetConfig+0x5a6>
 8004740:	2308      	movs	r3, #8
 8004742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004746:	e1e4      	b.n	8004b12 <UART_SetConfig+0x5a6>
 8004748:	2310      	movs	r3, #16
 800474a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800474e:	e1e0      	b.n	8004b12 <UART_SetConfig+0x5a6>
 8004750:	2320      	movs	r3, #32
 8004752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004756:	e1dc      	b.n	8004b12 <UART_SetConfig+0x5a6>
 8004758:	2340      	movs	r3, #64	@ 0x40
 800475a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800475e:	e1d8      	b.n	8004b12 <UART_SetConfig+0x5a6>
 8004760:	2380      	movs	r3, #128	@ 0x80
 8004762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004766:	e1d4      	b.n	8004b12 <UART_SetConfig+0x5a6>
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a4f      	ldr	r2, [pc, #316]	@ (80048ac <UART_SetConfig+0x340>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d130      	bne.n	80047d4 <UART_SetConfig+0x268>
 8004772:	4b4c      	ldr	r3, [pc, #304]	@ (80048a4 <UART_SetConfig+0x338>)
 8004774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004776:	f003 0307 	and.w	r3, r3, #7
 800477a:	2b05      	cmp	r3, #5
 800477c:	d826      	bhi.n	80047cc <UART_SetConfig+0x260>
 800477e:	a201      	add	r2, pc, #4	@ (adr r2, 8004784 <UART_SetConfig+0x218>)
 8004780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004784:	0800479d 	.word	0x0800479d
 8004788:	080047a5 	.word	0x080047a5
 800478c:	080047ad 	.word	0x080047ad
 8004790:	080047b5 	.word	0x080047b5
 8004794:	080047bd 	.word	0x080047bd
 8004798:	080047c5 	.word	0x080047c5
 800479c:	2300      	movs	r3, #0
 800479e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047a2:	e1b6      	b.n	8004b12 <UART_SetConfig+0x5a6>
 80047a4:	2304      	movs	r3, #4
 80047a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047aa:	e1b2      	b.n	8004b12 <UART_SetConfig+0x5a6>
 80047ac:	2308      	movs	r3, #8
 80047ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047b2:	e1ae      	b.n	8004b12 <UART_SetConfig+0x5a6>
 80047b4:	2310      	movs	r3, #16
 80047b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047ba:	e1aa      	b.n	8004b12 <UART_SetConfig+0x5a6>
 80047bc:	2320      	movs	r3, #32
 80047be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047c2:	e1a6      	b.n	8004b12 <UART_SetConfig+0x5a6>
 80047c4:	2340      	movs	r3, #64	@ 0x40
 80047c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047ca:	e1a2      	b.n	8004b12 <UART_SetConfig+0x5a6>
 80047cc:	2380      	movs	r3, #128	@ 0x80
 80047ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047d2:	e19e      	b.n	8004b12 <UART_SetConfig+0x5a6>
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a35      	ldr	r2, [pc, #212]	@ (80048b0 <UART_SetConfig+0x344>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d130      	bne.n	8004840 <UART_SetConfig+0x2d4>
 80047de:	4b31      	ldr	r3, [pc, #196]	@ (80048a4 <UART_SetConfig+0x338>)
 80047e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	2b05      	cmp	r3, #5
 80047e8:	d826      	bhi.n	8004838 <UART_SetConfig+0x2cc>
 80047ea:	a201      	add	r2, pc, #4	@ (adr r2, 80047f0 <UART_SetConfig+0x284>)
 80047ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f0:	08004809 	.word	0x08004809
 80047f4:	08004811 	.word	0x08004811
 80047f8:	08004819 	.word	0x08004819
 80047fc:	08004821 	.word	0x08004821
 8004800:	08004829 	.word	0x08004829
 8004804:	08004831 	.word	0x08004831
 8004808:	2300      	movs	r3, #0
 800480a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800480e:	e180      	b.n	8004b12 <UART_SetConfig+0x5a6>
 8004810:	2304      	movs	r3, #4
 8004812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004816:	e17c      	b.n	8004b12 <UART_SetConfig+0x5a6>
 8004818:	2308      	movs	r3, #8
 800481a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800481e:	e178      	b.n	8004b12 <UART_SetConfig+0x5a6>
 8004820:	2310      	movs	r3, #16
 8004822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004826:	e174      	b.n	8004b12 <UART_SetConfig+0x5a6>
 8004828:	2320      	movs	r3, #32
 800482a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800482e:	e170      	b.n	8004b12 <UART_SetConfig+0x5a6>
 8004830:	2340      	movs	r3, #64	@ 0x40
 8004832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004836:	e16c      	b.n	8004b12 <UART_SetConfig+0x5a6>
 8004838:	2380      	movs	r3, #128	@ 0x80
 800483a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800483e:	e168      	b.n	8004b12 <UART_SetConfig+0x5a6>
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a1b      	ldr	r2, [pc, #108]	@ (80048b4 <UART_SetConfig+0x348>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d142      	bne.n	80048d0 <UART_SetConfig+0x364>
 800484a:	4b16      	ldr	r3, [pc, #88]	@ (80048a4 <UART_SetConfig+0x338>)
 800484c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800484e:	f003 0307 	and.w	r3, r3, #7
 8004852:	2b05      	cmp	r3, #5
 8004854:	d838      	bhi.n	80048c8 <UART_SetConfig+0x35c>
 8004856:	a201      	add	r2, pc, #4	@ (adr r2, 800485c <UART_SetConfig+0x2f0>)
 8004858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485c:	08004875 	.word	0x08004875
 8004860:	0800487d 	.word	0x0800487d
 8004864:	08004885 	.word	0x08004885
 8004868:	0800488d 	.word	0x0800488d
 800486c:	080048b9 	.word	0x080048b9
 8004870:	080048c1 	.word	0x080048c1
 8004874:	2300      	movs	r3, #0
 8004876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800487a:	e14a      	b.n	8004b12 <UART_SetConfig+0x5a6>
 800487c:	2304      	movs	r3, #4
 800487e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004882:	e146      	b.n	8004b12 <UART_SetConfig+0x5a6>
 8004884:	2308      	movs	r3, #8
 8004886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800488a:	e142      	b.n	8004b12 <UART_SetConfig+0x5a6>
 800488c:	2310      	movs	r3, #16
 800488e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004892:	e13e      	b.n	8004b12 <UART_SetConfig+0x5a6>
 8004894:	cfff69f3 	.word	0xcfff69f3
 8004898:	58000c00 	.word	0x58000c00
 800489c:	11fff4ff 	.word	0x11fff4ff
 80048a0:	40011000 	.word	0x40011000
 80048a4:	58024400 	.word	0x58024400
 80048a8:	40004400 	.word	0x40004400
 80048ac:	40004800 	.word	0x40004800
 80048b0:	40004c00 	.word	0x40004c00
 80048b4:	40005000 	.word	0x40005000
 80048b8:	2320      	movs	r3, #32
 80048ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048be:	e128      	b.n	8004b12 <UART_SetConfig+0x5a6>
 80048c0:	2340      	movs	r3, #64	@ 0x40
 80048c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048c6:	e124      	b.n	8004b12 <UART_SetConfig+0x5a6>
 80048c8:	2380      	movs	r3, #128	@ 0x80
 80048ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048ce:	e120      	b.n	8004b12 <UART_SetConfig+0x5a6>
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4acb      	ldr	r2, [pc, #812]	@ (8004c04 <UART_SetConfig+0x698>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d176      	bne.n	80049c8 <UART_SetConfig+0x45c>
 80048da:	4bcb      	ldr	r3, [pc, #812]	@ (8004c08 <UART_SetConfig+0x69c>)
 80048dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048e2:	2b28      	cmp	r3, #40	@ 0x28
 80048e4:	d86c      	bhi.n	80049c0 <UART_SetConfig+0x454>
 80048e6:	a201      	add	r2, pc, #4	@ (adr r2, 80048ec <UART_SetConfig+0x380>)
 80048e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ec:	08004991 	.word	0x08004991
 80048f0:	080049c1 	.word	0x080049c1
 80048f4:	080049c1 	.word	0x080049c1
 80048f8:	080049c1 	.word	0x080049c1
 80048fc:	080049c1 	.word	0x080049c1
 8004900:	080049c1 	.word	0x080049c1
 8004904:	080049c1 	.word	0x080049c1
 8004908:	080049c1 	.word	0x080049c1
 800490c:	08004999 	.word	0x08004999
 8004910:	080049c1 	.word	0x080049c1
 8004914:	080049c1 	.word	0x080049c1
 8004918:	080049c1 	.word	0x080049c1
 800491c:	080049c1 	.word	0x080049c1
 8004920:	080049c1 	.word	0x080049c1
 8004924:	080049c1 	.word	0x080049c1
 8004928:	080049c1 	.word	0x080049c1
 800492c:	080049a1 	.word	0x080049a1
 8004930:	080049c1 	.word	0x080049c1
 8004934:	080049c1 	.word	0x080049c1
 8004938:	080049c1 	.word	0x080049c1
 800493c:	080049c1 	.word	0x080049c1
 8004940:	080049c1 	.word	0x080049c1
 8004944:	080049c1 	.word	0x080049c1
 8004948:	080049c1 	.word	0x080049c1
 800494c:	080049a9 	.word	0x080049a9
 8004950:	080049c1 	.word	0x080049c1
 8004954:	080049c1 	.word	0x080049c1
 8004958:	080049c1 	.word	0x080049c1
 800495c:	080049c1 	.word	0x080049c1
 8004960:	080049c1 	.word	0x080049c1
 8004964:	080049c1 	.word	0x080049c1
 8004968:	080049c1 	.word	0x080049c1
 800496c:	080049b1 	.word	0x080049b1
 8004970:	080049c1 	.word	0x080049c1
 8004974:	080049c1 	.word	0x080049c1
 8004978:	080049c1 	.word	0x080049c1
 800497c:	080049c1 	.word	0x080049c1
 8004980:	080049c1 	.word	0x080049c1
 8004984:	080049c1 	.word	0x080049c1
 8004988:	080049c1 	.word	0x080049c1
 800498c:	080049b9 	.word	0x080049b9
 8004990:	2301      	movs	r3, #1
 8004992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004996:	e0bc      	b.n	8004b12 <UART_SetConfig+0x5a6>
 8004998:	2304      	movs	r3, #4
 800499a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800499e:	e0b8      	b.n	8004b12 <UART_SetConfig+0x5a6>
 80049a0:	2308      	movs	r3, #8
 80049a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049a6:	e0b4      	b.n	8004b12 <UART_SetConfig+0x5a6>
 80049a8:	2310      	movs	r3, #16
 80049aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ae:	e0b0      	b.n	8004b12 <UART_SetConfig+0x5a6>
 80049b0:	2320      	movs	r3, #32
 80049b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049b6:	e0ac      	b.n	8004b12 <UART_SetConfig+0x5a6>
 80049b8:	2340      	movs	r3, #64	@ 0x40
 80049ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049be:	e0a8      	b.n	8004b12 <UART_SetConfig+0x5a6>
 80049c0:	2380      	movs	r3, #128	@ 0x80
 80049c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049c6:	e0a4      	b.n	8004b12 <UART_SetConfig+0x5a6>
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a8f      	ldr	r2, [pc, #572]	@ (8004c0c <UART_SetConfig+0x6a0>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d130      	bne.n	8004a34 <UART_SetConfig+0x4c8>
 80049d2:	4b8d      	ldr	r3, [pc, #564]	@ (8004c08 <UART_SetConfig+0x69c>)
 80049d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d6:	f003 0307 	and.w	r3, r3, #7
 80049da:	2b05      	cmp	r3, #5
 80049dc:	d826      	bhi.n	8004a2c <UART_SetConfig+0x4c0>
 80049de:	a201      	add	r2, pc, #4	@ (adr r2, 80049e4 <UART_SetConfig+0x478>)
 80049e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e4:	080049fd 	.word	0x080049fd
 80049e8:	08004a05 	.word	0x08004a05
 80049ec:	08004a0d 	.word	0x08004a0d
 80049f0:	08004a15 	.word	0x08004a15
 80049f4:	08004a1d 	.word	0x08004a1d
 80049f8:	08004a25 	.word	0x08004a25
 80049fc:	2300      	movs	r3, #0
 80049fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a02:	e086      	b.n	8004b12 <UART_SetConfig+0x5a6>
 8004a04:	2304      	movs	r3, #4
 8004a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a0a:	e082      	b.n	8004b12 <UART_SetConfig+0x5a6>
 8004a0c:	2308      	movs	r3, #8
 8004a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a12:	e07e      	b.n	8004b12 <UART_SetConfig+0x5a6>
 8004a14:	2310      	movs	r3, #16
 8004a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a1a:	e07a      	b.n	8004b12 <UART_SetConfig+0x5a6>
 8004a1c:	2320      	movs	r3, #32
 8004a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a22:	e076      	b.n	8004b12 <UART_SetConfig+0x5a6>
 8004a24:	2340      	movs	r3, #64	@ 0x40
 8004a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a2a:	e072      	b.n	8004b12 <UART_SetConfig+0x5a6>
 8004a2c:	2380      	movs	r3, #128	@ 0x80
 8004a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a32:	e06e      	b.n	8004b12 <UART_SetConfig+0x5a6>
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a75      	ldr	r2, [pc, #468]	@ (8004c10 <UART_SetConfig+0x6a4>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d130      	bne.n	8004aa0 <UART_SetConfig+0x534>
 8004a3e:	4b72      	ldr	r3, [pc, #456]	@ (8004c08 <UART_SetConfig+0x69c>)
 8004a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	2b05      	cmp	r3, #5
 8004a48:	d826      	bhi.n	8004a98 <UART_SetConfig+0x52c>
 8004a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a50 <UART_SetConfig+0x4e4>)
 8004a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a50:	08004a69 	.word	0x08004a69
 8004a54:	08004a71 	.word	0x08004a71
 8004a58:	08004a79 	.word	0x08004a79
 8004a5c:	08004a81 	.word	0x08004a81
 8004a60:	08004a89 	.word	0x08004a89
 8004a64:	08004a91 	.word	0x08004a91
 8004a68:	2300      	movs	r3, #0
 8004a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a6e:	e050      	b.n	8004b12 <UART_SetConfig+0x5a6>
 8004a70:	2304      	movs	r3, #4
 8004a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a76:	e04c      	b.n	8004b12 <UART_SetConfig+0x5a6>
 8004a78:	2308      	movs	r3, #8
 8004a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a7e:	e048      	b.n	8004b12 <UART_SetConfig+0x5a6>
 8004a80:	2310      	movs	r3, #16
 8004a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a86:	e044      	b.n	8004b12 <UART_SetConfig+0x5a6>
 8004a88:	2320      	movs	r3, #32
 8004a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a8e:	e040      	b.n	8004b12 <UART_SetConfig+0x5a6>
 8004a90:	2340      	movs	r3, #64	@ 0x40
 8004a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a96:	e03c      	b.n	8004b12 <UART_SetConfig+0x5a6>
 8004a98:	2380      	movs	r3, #128	@ 0x80
 8004a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a9e:	e038      	b.n	8004b12 <UART_SetConfig+0x5a6>
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a5b      	ldr	r2, [pc, #364]	@ (8004c14 <UART_SetConfig+0x6a8>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d130      	bne.n	8004b0c <UART_SetConfig+0x5a0>
 8004aaa:	4b57      	ldr	r3, [pc, #348]	@ (8004c08 <UART_SetConfig+0x69c>)
 8004aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	2b05      	cmp	r3, #5
 8004ab4:	d826      	bhi.n	8004b04 <UART_SetConfig+0x598>
 8004ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8004abc <UART_SetConfig+0x550>)
 8004ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004abc:	08004ad5 	.word	0x08004ad5
 8004ac0:	08004add 	.word	0x08004add
 8004ac4:	08004ae5 	.word	0x08004ae5
 8004ac8:	08004aed 	.word	0x08004aed
 8004acc:	08004af5 	.word	0x08004af5
 8004ad0:	08004afd 	.word	0x08004afd
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ada:	e01a      	b.n	8004b12 <UART_SetConfig+0x5a6>
 8004adc:	2304      	movs	r3, #4
 8004ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ae2:	e016      	b.n	8004b12 <UART_SetConfig+0x5a6>
 8004ae4:	2308      	movs	r3, #8
 8004ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aea:	e012      	b.n	8004b12 <UART_SetConfig+0x5a6>
 8004aec:	2310      	movs	r3, #16
 8004aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004af2:	e00e      	b.n	8004b12 <UART_SetConfig+0x5a6>
 8004af4:	2320      	movs	r3, #32
 8004af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004afa:	e00a      	b.n	8004b12 <UART_SetConfig+0x5a6>
 8004afc:	2340      	movs	r3, #64	@ 0x40
 8004afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b02:	e006      	b.n	8004b12 <UART_SetConfig+0x5a6>
 8004b04:	2380      	movs	r3, #128	@ 0x80
 8004b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b0a:	e002      	b.n	8004b12 <UART_SetConfig+0x5a6>
 8004b0c:	2380      	movs	r3, #128	@ 0x80
 8004b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a3f      	ldr	r2, [pc, #252]	@ (8004c14 <UART_SetConfig+0x6a8>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	f040 80f8 	bne.w	8004d0e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b1e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004b22:	2b20      	cmp	r3, #32
 8004b24:	dc46      	bgt.n	8004bb4 <UART_SetConfig+0x648>
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	f2c0 8082 	blt.w	8004c30 <UART_SetConfig+0x6c4>
 8004b2c:	3b02      	subs	r3, #2
 8004b2e:	2b1e      	cmp	r3, #30
 8004b30:	d87e      	bhi.n	8004c30 <UART_SetConfig+0x6c4>
 8004b32:	a201      	add	r2, pc, #4	@ (adr r2, 8004b38 <UART_SetConfig+0x5cc>)
 8004b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b38:	08004bbb 	.word	0x08004bbb
 8004b3c:	08004c31 	.word	0x08004c31
 8004b40:	08004bc3 	.word	0x08004bc3
 8004b44:	08004c31 	.word	0x08004c31
 8004b48:	08004c31 	.word	0x08004c31
 8004b4c:	08004c31 	.word	0x08004c31
 8004b50:	08004bd3 	.word	0x08004bd3
 8004b54:	08004c31 	.word	0x08004c31
 8004b58:	08004c31 	.word	0x08004c31
 8004b5c:	08004c31 	.word	0x08004c31
 8004b60:	08004c31 	.word	0x08004c31
 8004b64:	08004c31 	.word	0x08004c31
 8004b68:	08004c31 	.word	0x08004c31
 8004b6c:	08004c31 	.word	0x08004c31
 8004b70:	08004be3 	.word	0x08004be3
 8004b74:	08004c31 	.word	0x08004c31
 8004b78:	08004c31 	.word	0x08004c31
 8004b7c:	08004c31 	.word	0x08004c31
 8004b80:	08004c31 	.word	0x08004c31
 8004b84:	08004c31 	.word	0x08004c31
 8004b88:	08004c31 	.word	0x08004c31
 8004b8c:	08004c31 	.word	0x08004c31
 8004b90:	08004c31 	.word	0x08004c31
 8004b94:	08004c31 	.word	0x08004c31
 8004b98:	08004c31 	.word	0x08004c31
 8004b9c:	08004c31 	.word	0x08004c31
 8004ba0:	08004c31 	.word	0x08004c31
 8004ba4:	08004c31 	.word	0x08004c31
 8004ba8:	08004c31 	.word	0x08004c31
 8004bac:	08004c31 	.word	0x08004c31
 8004bb0:	08004c23 	.word	0x08004c23
 8004bb4:	2b40      	cmp	r3, #64	@ 0x40
 8004bb6:	d037      	beq.n	8004c28 <UART_SetConfig+0x6bc>
 8004bb8:	e03a      	b.n	8004c30 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004bba:	f7fe ff0f 	bl	80039dc <HAL_RCCEx_GetD3PCLK1Freq>
 8004bbe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004bc0:	e03c      	b.n	8004c3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fe ff1e 	bl	8003a08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004bd0:	e034      	b.n	8004c3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004bd2:	f107 0318 	add.w	r3, r7, #24
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7ff f86a 	bl	8003cb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004be0:	e02c      	b.n	8004c3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004be2:	4b09      	ldr	r3, [pc, #36]	@ (8004c08 <UART_SetConfig+0x69c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0320 	and.w	r3, r3, #32
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d016      	beq.n	8004c1c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004bee:	4b06      	ldr	r3, [pc, #24]	@ (8004c08 <UART_SetConfig+0x69c>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	08db      	lsrs	r3, r3, #3
 8004bf4:	f003 0303 	and.w	r3, r3, #3
 8004bf8:	4a07      	ldr	r2, [pc, #28]	@ (8004c18 <UART_SetConfig+0x6ac>)
 8004bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8004bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c00:	e01c      	b.n	8004c3c <UART_SetConfig+0x6d0>
 8004c02:	bf00      	nop
 8004c04:	40011400 	.word	0x40011400
 8004c08:	58024400 	.word	0x58024400
 8004c0c:	40007800 	.word	0x40007800
 8004c10:	40007c00 	.word	0x40007c00
 8004c14:	58000c00 	.word	0x58000c00
 8004c18:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004c1c:	4b9d      	ldr	r3, [pc, #628]	@ (8004e94 <UART_SetConfig+0x928>)
 8004c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c20:	e00c      	b.n	8004c3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004c22:	4b9d      	ldr	r3, [pc, #628]	@ (8004e98 <UART_SetConfig+0x92c>)
 8004c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c26:	e009      	b.n	8004c3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c2e:	e005      	b.n	8004c3c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004c3a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 81de 	beq.w	8005000 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c48:	4a94      	ldr	r2, [pc, #592]	@ (8004e9c <UART_SetConfig+0x930>)
 8004c4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c52:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c56:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	005b      	lsls	r3, r3, #1
 8004c60:	4413      	add	r3, r2
 8004c62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d305      	bcc.n	8004c74 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d903      	bls.n	8004c7c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004c7a:	e1c1      	b.n	8005000 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c7e:	2200      	movs	r2, #0
 8004c80:	60bb      	str	r3, [r7, #8]
 8004c82:	60fa      	str	r2, [r7, #12]
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c88:	4a84      	ldr	r2, [pc, #528]	@ (8004e9c <UART_SetConfig+0x930>)
 8004c8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	2200      	movs	r2, #0
 8004c92:	603b      	str	r3, [r7, #0]
 8004c94:	607a      	str	r2, [r7, #4]
 8004c96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c9e:	f7fb fb6f 	bl	8000380 <__aeabi_uldivmod>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	4610      	mov	r0, r2
 8004ca8:	4619      	mov	r1, r3
 8004caa:	f04f 0200 	mov.w	r2, #0
 8004cae:	f04f 0300 	mov.w	r3, #0
 8004cb2:	020b      	lsls	r3, r1, #8
 8004cb4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004cb8:	0202      	lsls	r2, r0, #8
 8004cba:	6979      	ldr	r1, [r7, #20]
 8004cbc:	6849      	ldr	r1, [r1, #4]
 8004cbe:	0849      	lsrs	r1, r1, #1
 8004cc0:	2000      	movs	r0, #0
 8004cc2:	460c      	mov	r4, r1
 8004cc4:	4605      	mov	r5, r0
 8004cc6:	eb12 0804 	adds.w	r8, r2, r4
 8004cca:	eb43 0905 	adc.w	r9, r3, r5
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	469a      	mov	sl, r3
 8004cd6:	4693      	mov	fp, r2
 8004cd8:	4652      	mov	r2, sl
 8004cda:	465b      	mov	r3, fp
 8004cdc:	4640      	mov	r0, r8
 8004cde:	4649      	mov	r1, r9
 8004ce0:	f7fb fb4e 	bl	8000380 <__aeabi_uldivmod>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4613      	mov	r3, r2
 8004cea:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cf2:	d308      	bcc.n	8004d06 <UART_SetConfig+0x79a>
 8004cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cfa:	d204      	bcs.n	8004d06 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004d02:	60da      	str	r2, [r3, #12]
 8004d04:	e17c      	b.n	8005000 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004d0c:	e178      	b.n	8005000 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d16:	f040 80c5 	bne.w	8004ea4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004d1a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004d1e:	2b20      	cmp	r3, #32
 8004d20:	dc48      	bgt.n	8004db4 <UART_SetConfig+0x848>
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	db7b      	blt.n	8004e1e <UART_SetConfig+0x8b2>
 8004d26:	2b20      	cmp	r3, #32
 8004d28:	d879      	bhi.n	8004e1e <UART_SetConfig+0x8b2>
 8004d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d30 <UART_SetConfig+0x7c4>)
 8004d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d30:	08004dbb 	.word	0x08004dbb
 8004d34:	08004dc3 	.word	0x08004dc3
 8004d38:	08004e1f 	.word	0x08004e1f
 8004d3c:	08004e1f 	.word	0x08004e1f
 8004d40:	08004dcb 	.word	0x08004dcb
 8004d44:	08004e1f 	.word	0x08004e1f
 8004d48:	08004e1f 	.word	0x08004e1f
 8004d4c:	08004e1f 	.word	0x08004e1f
 8004d50:	08004ddb 	.word	0x08004ddb
 8004d54:	08004e1f 	.word	0x08004e1f
 8004d58:	08004e1f 	.word	0x08004e1f
 8004d5c:	08004e1f 	.word	0x08004e1f
 8004d60:	08004e1f 	.word	0x08004e1f
 8004d64:	08004e1f 	.word	0x08004e1f
 8004d68:	08004e1f 	.word	0x08004e1f
 8004d6c:	08004e1f 	.word	0x08004e1f
 8004d70:	08004deb 	.word	0x08004deb
 8004d74:	08004e1f 	.word	0x08004e1f
 8004d78:	08004e1f 	.word	0x08004e1f
 8004d7c:	08004e1f 	.word	0x08004e1f
 8004d80:	08004e1f 	.word	0x08004e1f
 8004d84:	08004e1f 	.word	0x08004e1f
 8004d88:	08004e1f 	.word	0x08004e1f
 8004d8c:	08004e1f 	.word	0x08004e1f
 8004d90:	08004e1f 	.word	0x08004e1f
 8004d94:	08004e1f 	.word	0x08004e1f
 8004d98:	08004e1f 	.word	0x08004e1f
 8004d9c:	08004e1f 	.word	0x08004e1f
 8004da0:	08004e1f 	.word	0x08004e1f
 8004da4:	08004e1f 	.word	0x08004e1f
 8004da8:	08004e1f 	.word	0x08004e1f
 8004dac:	08004e1f 	.word	0x08004e1f
 8004db0:	08004e11 	.word	0x08004e11
 8004db4:	2b40      	cmp	r3, #64	@ 0x40
 8004db6:	d02e      	beq.n	8004e16 <UART_SetConfig+0x8aa>
 8004db8:	e031      	b.n	8004e1e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dba:	f7fd fbd9 	bl	8002570 <HAL_RCC_GetPCLK1Freq>
 8004dbe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004dc0:	e033      	b.n	8004e2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dc2:	f7fd fbeb 	bl	800259c <HAL_RCC_GetPCLK2Freq>
 8004dc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004dc8:	e02f      	b.n	8004e2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fe fe1a 	bl	8003a08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004dd8:	e027      	b.n	8004e2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004dda:	f107 0318 	add.w	r3, r7, #24
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fe ff66 	bl	8003cb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004de8:	e01f      	b.n	8004e2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004dea:	4b2d      	ldr	r3, [pc, #180]	@ (8004ea0 <UART_SetConfig+0x934>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0320 	and.w	r3, r3, #32
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d009      	beq.n	8004e0a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004df6:	4b2a      	ldr	r3, [pc, #168]	@ (8004ea0 <UART_SetConfig+0x934>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	08db      	lsrs	r3, r3, #3
 8004dfc:	f003 0303 	and.w	r3, r3, #3
 8004e00:	4a24      	ldr	r2, [pc, #144]	@ (8004e94 <UART_SetConfig+0x928>)
 8004e02:	fa22 f303 	lsr.w	r3, r2, r3
 8004e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004e08:	e00f      	b.n	8004e2a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004e0a:	4b22      	ldr	r3, [pc, #136]	@ (8004e94 <UART_SetConfig+0x928>)
 8004e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e0e:	e00c      	b.n	8004e2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004e10:	4b21      	ldr	r3, [pc, #132]	@ (8004e98 <UART_SetConfig+0x92c>)
 8004e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e14:	e009      	b.n	8004e2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e1c:	e005      	b.n	8004e2a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004e28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 80e7 	beq.w	8005000 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e36:	4a19      	ldr	r2, [pc, #100]	@ (8004e9c <UART_SetConfig+0x930>)
 8004e38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e40:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e44:	005a      	lsls	r2, r3, #1
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	085b      	lsrs	r3, r3, #1
 8004e4c:	441a      	add	r2, r3
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e56:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e5a:	2b0f      	cmp	r3, #15
 8004e5c:	d916      	bls.n	8004e8c <UART_SetConfig+0x920>
 8004e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e64:	d212      	bcs.n	8004e8c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	f023 030f 	bic.w	r3, r3, #15
 8004e6e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e72:	085b      	lsrs	r3, r3, #1
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	f003 0307 	and.w	r3, r3, #7
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004e88:	60da      	str	r2, [r3, #12]
 8004e8a:	e0b9      	b.n	8005000 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004e92:	e0b5      	b.n	8005000 <UART_SetConfig+0xa94>
 8004e94:	03d09000 	.word	0x03d09000
 8004e98:	003d0900 	.word	0x003d0900
 8004e9c:	08006728 	.word	0x08006728
 8004ea0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ea4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004ea8:	2b20      	cmp	r3, #32
 8004eaa:	dc49      	bgt.n	8004f40 <UART_SetConfig+0x9d4>
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	db7c      	blt.n	8004faa <UART_SetConfig+0xa3e>
 8004eb0:	2b20      	cmp	r3, #32
 8004eb2:	d87a      	bhi.n	8004faa <UART_SetConfig+0xa3e>
 8004eb4:	a201      	add	r2, pc, #4	@ (adr r2, 8004ebc <UART_SetConfig+0x950>)
 8004eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eba:	bf00      	nop
 8004ebc:	08004f47 	.word	0x08004f47
 8004ec0:	08004f4f 	.word	0x08004f4f
 8004ec4:	08004fab 	.word	0x08004fab
 8004ec8:	08004fab 	.word	0x08004fab
 8004ecc:	08004f57 	.word	0x08004f57
 8004ed0:	08004fab 	.word	0x08004fab
 8004ed4:	08004fab 	.word	0x08004fab
 8004ed8:	08004fab 	.word	0x08004fab
 8004edc:	08004f67 	.word	0x08004f67
 8004ee0:	08004fab 	.word	0x08004fab
 8004ee4:	08004fab 	.word	0x08004fab
 8004ee8:	08004fab 	.word	0x08004fab
 8004eec:	08004fab 	.word	0x08004fab
 8004ef0:	08004fab 	.word	0x08004fab
 8004ef4:	08004fab 	.word	0x08004fab
 8004ef8:	08004fab 	.word	0x08004fab
 8004efc:	08004f77 	.word	0x08004f77
 8004f00:	08004fab 	.word	0x08004fab
 8004f04:	08004fab 	.word	0x08004fab
 8004f08:	08004fab 	.word	0x08004fab
 8004f0c:	08004fab 	.word	0x08004fab
 8004f10:	08004fab 	.word	0x08004fab
 8004f14:	08004fab 	.word	0x08004fab
 8004f18:	08004fab 	.word	0x08004fab
 8004f1c:	08004fab 	.word	0x08004fab
 8004f20:	08004fab 	.word	0x08004fab
 8004f24:	08004fab 	.word	0x08004fab
 8004f28:	08004fab 	.word	0x08004fab
 8004f2c:	08004fab 	.word	0x08004fab
 8004f30:	08004fab 	.word	0x08004fab
 8004f34:	08004fab 	.word	0x08004fab
 8004f38:	08004fab 	.word	0x08004fab
 8004f3c:	08004f9d 	.word	0x08004f9d
 8004f40:	2b40      	cmp	r3, #64	@ 0x40
 8004f42:	d02e      	beq.n	8004fa2 <UART_SetConfig+0xa36>
 8004f44:	e031      	b.n	8004faa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f46:	f7fd fb13 	bl	8002570 <HAL_RCC_GetPCLK1Freq>
 8004f4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004f4c:	e033      	b.n	8004fb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f4e:	f7fd fb25 	bl	800259c <HAL_RCC_GetPCLK2Freq>
 8004f52:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004f54:	e02f      	b.n	8004fb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7fe fd54 	bl	8003a08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f64:	e027      	b.n	8004fb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f66:	f107 0318 	add.w	r3, r7, #24
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fe fea0 	bl	8003cb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f74:	e01f      	b.n	8004fb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f76:	4b2d      	ldr	r3, [pc, #180]	@ (800502c <UART_SetConfig+0xac0>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0320 	and.w	r3, r3, #32
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d009      	beq.n	8004f96 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004f82:	4b2a      	ldr	r3, [pc, #168]	@ (800502c <UART_SetConfig+0xac0>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	08db      	lsrs	r3, r3, #3
 8004f88:	f003 0303 	and.w	r3, r3, #3
 8004f8c:	4a28      	ldr	r2, [pc, #160]	@ (8005030 <UART_SetConfig+0xac4>)
 8004f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f94:	e00f      	b.n	8004fb6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004f96:	4b26      	ldr	r3, [pc, #152]	@ (8005030 <UART_SetConfig+0xac4>)
 8004f98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f9a:	e00c      	b.n	8004fb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004f9c:	4b25      	ldr	r3, [pc, #148]	@ (8005034 <UART_SetConfig+0xac8>)
 8004f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fa0:	e009      	b.n	8004fb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fa8:	e005      	b.n	8004fb6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004faa:	2300      	movs	r3, #0
 8004fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004fb4:	bf00      	nop
    }

    if (pclk != 0U)
 8004fb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d021      	beq.n	8005000 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc0:	4a1d      	ldr	r2, [pc, #116]	@ (8005038 <UART_SetConfig+0xacc>)
 8004fc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fca:	fbb3 f2f2 	udiv	r2, r3, r2
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	085b      	lsrs	r3, r3, #1
 8004fd4:	441a      	add	r2, r3
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fde:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fe2:	2b0f      	cmp	r3, #15
 8004fe4:	d909      	bls.n	8004ffa <UART_SetConfig+0xa8e>
 8004fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fec:	d205      	bcs.n	8004ffa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	60da      	str	r2, [r3, #12]
 8004ff8:	e002      	b.n	8005000 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	2201      	movs	r2, #1
 8005004:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	2201      	movs	r2, #1
 800500c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	2200      	movs	r2, #0
 8005014:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	2200      	movs	r2, #0
 800501a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800501c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005020:	4618      	mov	r0, r3
 8005022:	3748      	adds	r7, #72	@ 0x48
 8005024:	46bd      	mov	sp, r7
 8005026:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800502a:	bf00      	nop
 800502c:	58024400 	.word	0x58024400
 8005030:	03d09000 	.word	0x03d09000
 8005034:	003d0900 	.word	0x003d0900
 8005038:	08006728 	.word	0x08006728

0800503c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005048:	f003 0308 	and.w	r3, r3, #8
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00a      	beq.n	8005066 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00a      	beq.n	8005088 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00a      	beq.n	80050aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ae:	f003 0304 	and.w	r3, r3, #4
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00a      	beq.n	80050cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	430a      	orrs	r2, r1
 80050ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d0:	f003 0310 	and.w	r3, r3, #16
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00a      	beq.n	80050ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f2:	f003 0320 	and.w	r3, r3, #32
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00a      	beq.n	8005110 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	430a      	orrs	r2, r1
 800510e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005118:	2b00      	cmp	r3, #0
 800511a:	d01a      	beq.n	8005152 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005136:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800513a:	d10a      	bne.n	8005152 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00a      	beq.n	8005174 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	430a      	orrs	r2, r1
 8005172:	605a      	str	r2, [r3, #4]
  }
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b098      	sub	sp, #96	@ 0x60
 8005184:	af02      	add	r7, sp, #8
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005190:	f7fb ff10 	bl	8000fb4 <HAL_GetTick>
 8005194:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0308 	and.w	r3, r3, #8
 80051a0:	2b08      	cmp	r3, #8
 80051a2:	d12f      	bne.n	8005204 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051ac:	2200      	movs	r2, #0
 80051ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f88e 	bl	80052d4 <UART_WaitOnFlagUntilTimeout>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d022      	beq.n	8005204 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c6:	e853 3f00 	ldrex	r3, [r3]
 80051ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	461a      	mov	r2, r3
 80051da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80051de:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051e4:	e841 2300 	strex	r3, r2, [r1]
 80051e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1e6      	bne.n	80051be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2220      	movs	r2, #32
 80051f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e063      	b.n	80052cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0304 	and.w	r3, r3, #4
 800520e:	2b04      	cmp	r3, #4
 8005210:	d149      	bne.n	80052a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005212:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800521a:	2200      	movs	r2, #0
 800521c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 f857 	bl	80052d4 <UART_WaitOnFlagUntilTimeout>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d03c      	beq.n	80052a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005234:	e853 3f00 	ldrex	r3, [r3]
 8005238:	623b      	str	r3, [r7, #32]
   return(result);
 800523a:	6a3b      	ldr	r3, [r7, #32]
 800523c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005240:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	461a      	mov	r2, r3
 8005248:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800524a:	633b      	str	r3, [r7, #48]	@ 0x30
 800524c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005250:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005252:	e841 2300 	strex	r3, r2, [r1]
 8005256:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1e6      	bne.n	800522c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	3308      	adds	r3, #8
 8005264:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	e853 3f00 	ldrex	r3, [r3]
 800526c:	60fb      	str	r3, [r7, #12]
   return(result);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f023 0301 	bic.w	r3, r3, #1
 8005274:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	3308      	adds	r3, #8
 800527c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800527e:	61fa      	str	r2, [r7, #28]
 8005280:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005282:	69b9      	ldr	r1, [r7, #24]
 8005284:	69fa      	ldr	r2, [r7, #28]
 8005286:	e841 2300 	strex	r3, r2, [r1]
 800528a:	617b      	str	r3, [r7, #20]
   return(result);
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1e5      	bne.n	800525e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2220      	movs	r2, #32
 8005296:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e012      	b.n	80052cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2220      	movs	r2, #32
 80052aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2220      	movs	r2, #32
 80052b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3758      	adds	r7, #88	@ 0x58
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	603b      	str	r3, [r7, #0]
 80052e0:	4613      	mov	r3, r2
 80052e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052e4:	e04f      	b.n	8005386 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ec:	d04b      	beq.n	8005386 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ee:	f7fb fe61 	bl	8000fb4 <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d302      	bcc.n	8005304 <UART_WaitOnFlagUntilTimeout+0x30>
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d101      	bne.n	8005308 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e04e      	b.n	80053a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0304 	and.w	r3, r3, #4
 8005312:	2b00      	cmp	r3, #0
 8005314:	d037      	beq.n	8005386 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	2b80      	cmp	r3, #128	@ 0x80
 800531a:	d034      	beq.n	8005386 <UART_WaitOnFlagUntilTimeout+0xb2>
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	2b40      	cmp	r3, #64	@ 0x40
 8005320:	d031      	beq.n	8005386 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	69db      	ldr	r3, [r3, #28]
 8005328:	f003 0308 	and.w	r3, r3, #8
 800532c:	2b08      	cmp	r3, #8
 800532e:	d110      	bne.n	8005352 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2208      	movs	r2, #8
 8005336:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f000 f839 	bl	80053b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2208      	movs	r2, #8
 8005342:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e029      	b.n	80053a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	69db      	ldr	r3, [r3, #28]
 8005358:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800535c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005360:	d111      	bne.n	8005386 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800536a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f000 f81f 	bl	80053b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2220      	movs	r2, #32
 8005376:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e00f      	b.n	80053a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	69da      	ldr	r2, [r3, #28]
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	4013      	ands	r3, r2
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	429a      	cmp	r2, r3
 8005394:	bf0c      	ite	eq
 8005396:	2301      	moveq	r3, #1
 8005398:	2300      	movne	r3, #0
 800539a:	b2db      	uxtb	r3, r3
 800539c:	461a      	mov	r2, r3
 800539e:	79fb      	ldrb	r3, [r7, #7]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d0a0      	beq.n	80052e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
	...

080053b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b095      	sub	sp, #84	@ 0x54
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053c0:	e853 3f00 	ldrex	r3, [r3]
 80053c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	461a      	mov	r2, r3
 80053d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80053d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80053dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053de:	e841 2300 	strex	r3, r2, [r1]
 80053e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1e6      	bne.n	80053b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	3308      	adds	r3, #8
 80053f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f2:	6a3b      	ldr	r3, [r7, #32]
 80053f4:	e853 3f00 	ldrex	r3, [r3]
 80053f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80053fa:	69fa      	ldr	r2, [r7, #28]
 80053fc:	4b1e      	ldr	r3, [pc, #120]	@ (8005478 <UART_EndRxTransfer+0xc8>)
 80053fe:	4013      	ands	r3, r2
 8005400:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3308      	adds	r3, #8
 8005408:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800540a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800540c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005410:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005412:	e841 2300 	strex	r3, r2, [r1]
 8005416:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1e5      	bne.n	80053ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005422:	2b01      	cmp	r3, #1
 8005424:	d118      	bne.n	8005458 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	e853 3f00 	ldrex	r3, [r3]
 8005432:	60bb      	str	r3, [r7, #8]
   return(result);
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	f023 0310 	bic.w	r3, r3, #16
 800543a:	647b      	str	r3, [r7, #68]	@ 0x44
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	461a      	mov	r2, r3
 8005442:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005444:	61bb      	str	r3, [r7, #24]
 8005446:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005448:	6979      	ldr	r1, [r7, #20]
 800544a:	69ba      	ldr	r2, [r7, #24]
 800544c:	e841 2300 	strex	r3, r2, [r1]
 8005450:	613b      	str	r3, [r7, #16]
   return(result);
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1e6      	bne.n	8005426 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2220      	movs	r2, #32
 800545c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800546c:	bf00      	nop
 800546e:	3754      	adds	r7, #84	@ 0x54
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	effffffe 	.word	0xeffffffe

0800547c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800548a:	2b01      	cmp	r3, #1
 800548c:	d101      	bne.n	8005492 <HAL_UARTEx_DisableFifoMode+0x16>
 800548e:	2302      	movs	r3, #2
 8005490:	e027      	b.n	80054e2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2224      	movs	r2, #36	@ 0x24
 800549e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 0201 	bic.w	r2, r2, #1
 80054b8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80054c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2220      	movs	r2, #32
 80054d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b084      	sub	sp, #16
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
 80054f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d101      	bne.n	8005506 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005502:	2302      	movs	r3, #2
 8005504:	e02d      	b.n	8005562 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2224      	movs	r2, #36	@ 0x24
 8005512:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 0201 	bic.w	r2, r2, #1
 800552c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	430a      	orrs	r2, r1
 8005540:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f850 	bl	80055e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2220      	movs	r2, #32
 8005554:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3710      	adds	r7, #16
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800556a:	b580      	push	{r7, lr}
 800556c:	b084      	sub	sp, #16
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
 8005572:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800557a:	2b01      	cmp	r3, #1
 800557c:	d101      	bne.n	8005582 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800557e:	2302      	movs	r3, #2
 8005580:	e02d      	b.n	80055de <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2224      	movs	r2, #36	@ 0x24
 800558e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 0201 	bic.w	r2, r2, #1
 80055a8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	683a      	ldr	r2, [r7, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f812 	bl	80055e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2220      	movs	r2, #32
 80055d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
	...

080055e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d108      	bne.n	800560a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005608:	e031      	b.n	800566e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800560a:	2310      	movs	r3, #16
 800560c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800560e:	2310      	movs	r3, #16
 8005610:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	0e5b      	lsrs	r3, r3, #25
 800561a:	b2db      	uxtb	r3, r3
 800561c:	f003 0307 	and.w	r3, r3, #7
 8005620:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	0f5b      	lsrs	r3, r3, #29
 800562a:	b2db      	uxtb	r3, r3
 800562c:	f003 0307 	and.w	r3, r3, #7
 8005630:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005632:	7bbb      	ldrb	r3, [r7, #14]
 8005634:	7b3a      	ldrb	r2, [r7, #12]
 8005636:	4911      	ldr	r1, [pc, #68]	@ (800567c <UARTEx_SetNbDataToProcess+0x94>)
 8005638:	5c8a      	ldrb	r2, [r1, r2]
 800563a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800563e:	7b3a      	ldrb	r2, [r7, #12]
 8005640:	490f      	ldr	r1, [pc, #60]	@ (8005680 <UARTEx_SetNbDataToProcess+0x98>)
 8005642:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005644:	fb93 f3f2 	sdiv	r3, r3, r2
 8005648:	b29a      	uxth	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005650:	7bfb      	ldrb	r3, [r7, #15]
 8005652:	7b7a      	ldrb	r2, [r7, #13]
 8005654:	4909      	ldr	r1, [pc, #36]	@ (800567c <UARTEx_SetNbDataToProcess+0x94>)
 8005656:	5c8a      	ldrb	r2, [r1, r2]
 8005658:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800565c:	7b7a      	ldrb	r2, [r7, #13]
 800565e:	4908      	ldr	r1, [pc, #32]	@ (8005680 <UARTEx_SetNbDataToProcess+0x98>)
 8005660:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005662:	fb93 f3f2 	sdiv	r3, r3, r2
 8005666:	b29a      	uxth	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800566e:	bf00      	nop
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	08006740 	.word	0x08006740
 8005680:	08006748 	.word	0x08006748

08005684 <std>:
 8005684:	2300      	movs	r3, #0
 8005686:	b510      	push	{r4, lr}
 8005688:	4604      	mov	r4, r0
 800568a:	e9c0 3300 	strd	r3, r3, [r0]
 800568e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005692:	6083      	str	r3, [r0, #8]
 8005694:	8181      	strh	r1, [r0, #12]
 8005696:	6643      	str	r3, [r0, #100]	@ 0x64
 8005698:	81c2      	strh	r2, [r0, #14]
 800569a:	6183      	str	r3, [r0, #24]
 800569c:	4619      	mov	r1, r3
 800569e:	2208      	movs	r2, #8
 80056a0:	305c      	adds	r0, #92	@ 0x5c
 80056a2:	f000 f9f9 	bl	8005a98 <memset>
 80056a6:	4b0d      	ldr	r3, [pc, #52]	@ (80056dc <std+0x58>)
 80056a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80056aa:	4b0d      	ldr	r3, [pc, #52]	@ (80056e0 <std+0x5c>)
 80056ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80056ae:	4b0d      	ldr	r3, [pc, #52]	@ (80056e4 <std+0x60>)
 80056b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80056b2:	4b0d      	ldr	r3, [pc, #52]	@ (80056e8 <std+0x64>)
 80056b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80056b6:	4b0d      	ldr	r3, [pc, #52]	@ (80056ec <std+0x68>)
 80056b8:	6224      	str	r4, [r4, #32]
 80056ba:	429c      	cmp	r4, r3
 80056bc:	d006      	beq.n	80056cc <std+0x48>
 80056be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80056c2:	4294      	cmp	r4, r2
 80056c4:	d002      	beq.n	80056cc <std+0x48>
 80056c6:	33d0      	adds	r3, #208	@ 0xd0
 80056c8:	429c      	cmp	r4, r3
 80056ca:	d105      	bne.n	80056d8 <std+0x54>
 80056cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80056d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056d4:	f000 ba58 	b.w	8005b88 <__retarget_lock_init_recursive>
 80056d8:	bd10      	pop	{r4, pc}
 80056da:	bf00      	nop
 80056dc:	080058e9 	.word	0x080058e9
 80056e0:	0800590b 	.word	0x0800590b
 80056e4:	08005943 	.word	0x08005943
 80056e8:	08005967 	.word	0x08005967
 80056ec:	24000128 	.word	0x24000128

080056f0 <stdio_exit_handler>:
 80056f0:	4a02      	ldr	r2, [pc, #8]	@ (80056fc <stdio_exit_handler+0xc>)
 80056f2:	4903      	ldr	r1, [pc, #12]	@ (8005700 <stdio_exit_handler+0x10>)
 80056f4:	4803      	ldr	r0, [pc, #12]	@ (8005704 <stdio_exit_handler+0x14>)
 80056f6:	f000 b869 	b.w	80057cc <_fwalk_sglue>
 80056fa:	bf00      	nop
 80056fc:	24000010 	.word	0x24000010
 8005700:	08006425 	.word	0x08006425
 8005704:	24000020 	.word	0x24000020

08005708 <cleanup_stdio>:
 8005708:	6841      	ldr	r1, [r0, #4]
 800570a:	4b0c      	ldr	r3, [pc, #48]	@ (800573c <cleanup_stdio+0x34>)
 800570c:	4299      	cmp	r1, r3
 800570e:	b510      	push	{r4, lr}
 8005710:	4604      	mov	r4, r0
 8005712:	d001      	beq.n	8005718 <cleanup_stdio+0x10>
 8005714:	f000 fe86 	bl	8006424 <_fflush_r>
 8005718:	68a1      	ldr	r1, [r4, #8]
 800571a:	4b09      	ldr	r3, [pc, #36]	@ (8005740 <cleanup_stdio+0x38>)
 800571c:	4299      	cmp	r1, r3
 800571e:	d002      	beq.n	8005726 <cleanup_stdio+0x1e>
 8005720:	4620      	mov	r0, r4
 8005722:	f000 fe7f 	bl	8006424 <_fflush_r>
 8005726:	68e1      	ldr	r1, [r4, #12]
 8005728:	4b06      	ldr	r3, [pc, #24]	@ (8005744 <cleanup_stdio+0x3c>)
 800572a:	4299      	cmp	r1, r3
 800572c:	d004      	beq.n	8005738 <cleanup_stdio+0x30>
 800572e:	4620      	mov	r0, r4
 8005730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005734:	f000 be76 	b.w	8006424 <_fflush_r>
 8005738:	bd10      	pop	{r4, pc}
 800573a:	bf00      	nop
 800573c:	24000128 	.word	0x24000128
 8005740:	24000190 	.word	0x24000190
 8005744:	240001f8 	.word	0x240001f8

08005748 <global_stdio_init.part.0>:
 8005748:	b510      	push	{r4, lr}
 800574a:	4b0b      	ldr	r3, [pc, #44]	@ (8005778 <global_stdio_init.part.0+0x30>)
 800574c:	4c0b      	ldr	r4, [pc, #44]	@ (800577c <global_stdio_init.part.0+0x34>)
 800574e:	4a0c      	ldr	r2, [pc, #48]	@ (8005780 <global_stdio_init.part.0+0x38>)
 8005750:	601a      	str	r2, [r3, #0]
 8005752:	4620      	mov	r0, r4
 8005754:	2200      	movs	r2, #0
 8005756:	2104      	movs	r1, #4
 8005758:	f7ff ff94 	bl	8005684 <std>
 800575c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005760:	2201      	movs	r2, #1
 8005762:	2109      	movs	r1, #9
 8005764:	f7ff ff8e 	bl	8005684 <std>
 8005768:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800576c:	2202      	movs	r2, #2
 800576e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005772:	2112      	movs	r1, #18
 8005774:	f7ff bf86 	b.w	8005684 <std>
 8005778:	24000260 	.word	0x24000260
 800577c:	24000128 	.word	0x24000128
 8005780:	080056f1 	.word	0x080056f1

08005784 <__sfp_lock_acquire>:
 8005784:	4801      	ldr	r0, [pc, #4]	@ (800578c <__sfp_lock_acquire+0x8>)
 8005786:	f000 ba00 	b.w	8005b8a <__retarget_lock_acquire_recursive>
 800578a:	bf00      	nop
 800578c:	24000269 	.word	0x24000269

08005790 <__sfp_lock_release>:
 8005790:	4801      	ldr	r0, [pc, #4]	@ (8005798 <__sfp_lock_release+0x8>)
 8005792:	f000 b9fb 	b.w	8005b8c <__retarget_lock_release_recursive>
 8005796:	bf00      	nop
 8005798:	24000269 	.word	0x24000269

0800579c <__sinit>:
 800579c:	b510      	push	{r4, lr}
 800579e:	4604      	mov	r4, r0
 80057a0:	f7ff fff0 	bl	8005784 <__sfp_lock_acquire>
 80057a4:	6a23      	ldr	r3, [r4, #32]
 80057a6:	b11b      	cbz	r3, 80057b0 <__sinit+0x14>
 80057a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057ac:	f7ff bff0 	b.w	8005790 <__sfp_lock_release>
 80057b0:	4b04      	ldr	r3, [pc, #16]	@ (80057c4 <__sinit+0x28>)
 80057b2:	6223      	str	r3, [r4, #32]
 80057b4:	4b04      	ldr	r3, [pc, #16]	@ (80057c8 <__sinit+0x2c>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1f5      	bne.n	80057a8 <__sinit+0xc>
 80057bc:	f7ff ffc4 	bl	8005748 <global_stdio_init.part.0>
 80057c0:	e7f2      	b.n	80057a8 <__sinit+0xc>
 80057c2:	bf00      	nop
 80057c4:	08005709 	.word	0x08005709
 80057c8:	24000260 	.word	0x24000260

080057cc <_fwalk_sglue>:
 80057cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057d0:	4607      	mov	r7, r0
 80057d2:	4688      	mov	r8, r1
 80057d4:	4614      	mov	r4, r2
 80057d6:	2600      	movs	r6, #0
 80057d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057dc:	f1b9 0901 	subs.w	r9, r9, #1
 80057e0:	d505      	bpl.n	80057ee <_fwalk_sglue+0x22>
 80057e2:	6824      	ldr	r4, [r4, #0]
 80057e4:	2c00      	cmp	r4, #0
 80057e6:	d1f7      	bne.n	80057d8 <_fwalk_sglue+0xc>
 80057e8:	4630      	mov	r0, r6
 80057ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057ee:	89ab      	ldrh	r3, [r5, #12]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d907      	bls.n	8005804 <_fwalk_sglue+0x38>
 80057f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057f8:	3301      	adds	r3, #1
 80057fa:	d003      	beq.n	8005804 <_fwalk_sglue+0x38>
 80057fc:	4629      	mov	r1, r5
 80057fe:	4638      	mov	r0, r7
 8005800:	47c0      	blx	r8
 8005802:	4306      	orrs	r6, r0
 8005804:	3568      	adds	r5, #104	@ 0x68
 8005806:	e7e9      	b.n	80057dc <_fwalk_sglue+0x10>

08005808 <iprintf>:
 8005808:	b40f      	push	{r0, r1, r2, r3}
 800580a:	b507      	push	{r0, r1, r2, lr}
 800580c:	4906      	ldr	r1, [pc, #24]	@ (8005828 <iprintf+0x20>)
 800580e:	ab04      	add	r3, sp, #16
 8005810:	6808      	ldr	r0, [r1, #0]
 8005812:	f853 2b04 	ldr.w	r2, [r3], #4
 8005816:	6881      	ldr	r1, [r0, #8]
 8005818:	9301      	str	r3, [sp, #4]
 800581a:	f000 fadb 	bl	8005dd4 <_vfiprintf_r>
 800581e:	b003      	add	sp, #12
 8005820:	f85d eb04 	ldr.w	lr, [sp], #4
 8005824:	b004      	add	sp, #16
 8005826:	4770      	bx	lr
 8005828:	2400001c 	.word	0x2400001c

0800582c <_puts_r>:
 800582c:	6a03      	ldr	r3, [r0, #32]
 800582e:	b570      	push	{r4, r5, r6, lr}
 8005830:	6884      	ldr	r4, [r0, #8]
 8005832:	4605      	mov	r5, r0
 8005834:	460e      	mov	r6, r1
 8005836:	b90b      	cbnz	r3, 800583c <_puts_r+0x10>
 8005838:	f7ff ffb0 	bl	800579c <__sinit>
 800583c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800583e:	07db      	lsls	r3, r3, #31
 8005840:	d405      	bmi.n	800584e <_puts_r+0x22>
 8005842:	89a3      	ldrh	r3, [r4, #12]
 8005844:	0598      	lsls	r0, r3, #22
 8005846:	d402      	bmi.n	800584e <_puts_r+0x22>
 8005848:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800584a:	f000 f99e 	bl	8005b8a <__retarget_lock_acquire_recursive>
 800584e:	89a3      	ldrh	r3, [r4, #12]
 8005850:	0719      	lsls	r1, r3, #28
 8005852:	d502      	bpl.n	800585a <_puts_r+0x2e>
 8005854:	6923      	ldr	r3, [r4, #16]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d135      	bne.n	80058c6 <_puts_r+0x9a>
 800585a:	4621      	mov	r1, r4
 800585c:	4628      	mov	r0, r5
 800585e:	f000 f8c5 	bl	80059ec <__swsetup_r>
 8005862:	b380      	cbz	r0, 80058c6 <_puts_r+0x9a>
 8005864:	f04f 35ff 	mov.w	r5, #4294967295
 8005868:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800586a:	07da      	lsls	r2, r3, #31
 800586c:	d405      	bmi.n	800587a <_puts_r+0x4e>
 800586e:	89a3      	ldrh	r3, [r4, #12]
 8005870:	059b      	lsls	r3, r3, #22
 8005872:	d402      	bmi.n	800587a <_puts_r+0x4e>
 8005874:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005876:	f000 f989 	bl	8005b8c <__retarget_lock_release_recursive>
 800587a:	4628      	mov	r0, r5
 800587c:	bd70      	pop	{r4, r5, r6, pc}
 800587e:	2b00      	cmp	r3, #0
 8005880:	da04      	bge.n	800588c <_puts_r+0x60>
 8005882:	69a2      	ldr	r2, [r4, #24]
 8005884:	429a      	cmp	r2, r3
 8005886:	dc17      	bgt.n	80058b8 <_puts_r+0x8c>
 8005888:	290a      	cmp	r1, #10
 800588a:	d015      	beq.n	80058b8 <_puts_r+0x8c>
 800588c:	6823      	ldr	r3, [r4, #0]
 800588e:	1c5a      	adds	r2, r3, #1
 8005890:	6022      	str	r2, [r4, #0]
 8005892:	7019      	strb	r1, [r3, #0]
 8005894:	68a3      	ldr	r3, [r4, #8]
 8005896:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800589a:	3b01      	subs	r3, #1
 800589c:	60a3      	str	r3, [r4, #8]
 800589e:	2900      	cmp	r1, #0
 80058a0:	d1ed      	bne.n	800587e <_puts_r+0x52>
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	da11      	bge.n	80058ca <_puts_r+0x9e>
 80058a6:	4622      	mov	r2, r4
 80058a8:	210a      	movs	r1, #10
 80058aa:	4628      	mov	r0, r5
 80058ac:	f000 f85f 	bl	800596e <__swbuf_r>
 80058b0:	3001      	adds	r0, #1
 80058b2:	d0d7      	beq.n	8005864 <_puts_r+0x38>
 80058b4:	250a      	movs	r5, #10
 80058b6:	e7d7      	b.n	8005868 <_puts_r+0x3c>
 80058b8:	4622      	mov	r2, r4
 80058ba:	4628      	mov	r0, r5
 80058bc:	f000 f857 	bl	800596e <__swbuf_r>
 80058c0:	3001      	adds	r0, #1
 80058c2:	d1e7      	bne.n	8005894 <_puts_r+0x68>
 80058c4:	e7ce      	b.n	8005864 <_puts_r+0x38>
 80058c6:	3e01      	subs	r6, #1
 80058c8:	e7e4      	b.n	8005894 <_puts_r+0x68>
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	1c5a      	adds	r2, r3, #1
 80058ce:	6022      	str	r2, [r4, #0]
 80058d0:	220a      	movs	r2, #10
 80058d2:	701a      	strb	r2, [r3, #0]
 80058d4:	e7ee      	b.n	80058b4 <_puts_r+0x88>
	...

080058d8 <puts>:
 80058d8:	4b02      	ldr	r3, [pc, #8]	@ (80058e4 <puts+0xc>)
 80058da:	4601      	mov	r1, r0
 80058dc:	6818      	ldr	r0, [r3, #0]
 80058de:	f7ff bfa5 	b.w	800582c <_puts_r>
 80058e2:	bf00      	nop
 80058e4:	2400001c 	.word	0x2400001c

080058e8 <__sread>:
 80058e8:	b510      	push	{r4, lr}
 80058ea:	460c      	mov	r4, r1
 80058ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058f0:	f000 f8fc 	bl	8005aec <_read_r>
 80058f4:	2800      	cmp	r0, #0
 80058f6:	bfab      	itete	ge
 80058f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80058fa:	89a3      	ldrhlt	r3, [r4, #12]
 80058fc:	181b      	addge	r3, r3, r0
 80058fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005902:	bfac      	ite	ge
 8005904:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005906:	81a3      	strhlt	r3, [r4, #12]
 8005908:	bd10      	pop	{r4, pc}

0800590a <__swrite>:
 800590a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800590e:	461f      	mov	r7, r3
 8005910:	898b      	ldrh	r3, [r1, #12]
 8005912:	05db      	lsls	r3, r3, #23
 8005914:	4605      	mov	r5, r0
 8005916:	460c      	mov	r4, r1
 8005918:	4616      	mov	r6, r2
 800591a:	d505      	bpl.n	8005928 <__swrite+0x1e>
 800591c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005920:	2302      	movs	r3, #2
 8005922:	2200      	movs	r2, #0
 8005924:	f000 f8d0 	bl	8005ac8 <_lseek_r>
 8005928:	89a3      	ldrh	r3, [r4, #12]
 800592a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800592e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005932:	81a3      	strh	r3, [r4, #12]
 8005934:	4632      	mov	r2, r6
 8005936:	463b      	mov	r3, r7
 8005938:	4628      	mov	r0, r5
 800593a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800593e:	f000 b8e7 	b.w	8005b10 <_write_r>

08005942 <__sseek>:
 8005942:	b510      	push	{r4, lr}
 8005944:	460c      	mov	r4, r1
 8005946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800594a:	f000 f8bd 	bl	8005ac8 <_lseek_r>
 800594e:	1c43      	adds	r3, r0, #1
 8005950:	89a3      	ldrh	r3, [r4, #12]
 8005952:	bf15      	itete	ne
 8005954:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005956:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800595a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800595e:	81a3      	strheq	r3, [r4, #12]
 8005960:	bf18      	it	ne
 8005962:	81a3      	strhne	r3, [r4, #12]
 8005964:	bd10      	pop	{r4, pc}

08005966 <__sclose>:
 8005966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800596a:	f000 b89d 	b.w	8005aa8 <_close_r>

0800596e <__swbuf_r>:
 800596e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005970:	460e      	mov	r6, r1
 8005972:	4614      	mov	r4, r2
 8005974:	4605      	mov	r5, r0
 8005976:	b118      	cbz	r0, 8005980 <__swbuf_r+0x12>
 8005978:	6a03      	ldr	r3, [r0, #32]
 800597a:	b90b      	cbnz	r3, 8005980 <__swbuf_r+0x12>
 800597c:	f7ff ff0e 	bl	800579c <__sinit>
 8005980:	69a3      	ldr	r3, [r4, #24]
 8005982:	60a3      	str	r3, [r4, #8]
 8005984:	89a3      	ldrh	r3, [r4, #12]
 8005986:	071a      	lsls	r2, r3, #28
 8005988:	d501      	bpl.n	800598e <__swbuf_r+0x20>
 800598a:	6923      	ldr	r3, [r4, #16]
 800598c:	b943      	cbnz	r3, 80059a0 <__swbuf_r+0x32>
 800598e:	4621      	mov	r1, r4
 8005990:	4628      	mov	r0, r5
 8005992:	f000 f82b 	bl	80059ec <__swsetup_r>
 8005996:	b118      	cbz	r0, 80059a0 <__swbuf_r+0x32>
 8005998:	f04f 37ff 	mov.w	r7, #4294967295
 800599c:	4638      	mov	r0, r7
 800599e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059a0:	6823      	ldr	r3, [r4, #0]
 80059a2:	6922      	ldr	r2, [r4, #16]
 80059a4:	1a98      	subs	r0, r3, r2
 80059a6:	6963      	ldr	r3, [r4, #20]
 80059a8:	b2f6      	uxtb	r6, r6
 80059aa:	4283      	cmp	r3, r0
 80059ac:	4637      	mov	r7, r6
 80059ae:	dc05      	bgt.n	80059bc <__swbuf_r+0x4e>
 80059b0:	4621      	mov	r1, r4
 80059b2:	4628      	mov	r0, r5
 80059b4:	f000 fd36 	bl	8006424 <_fflush_r>
 80059b8:	2800      	cmp	r0, #0
 80059ba:	d1ed      	bne.n	8005998 <__swbuf_r+0x2a>
 80059bc:	68a3      	ldr	r3, [r4, #8]
 80059be:	3b01      	subs	r3, #1
 80059c0:	60a3      	str	r3, [r4, #8]
 80059c2:	6823      	ldr	r3, [r4, #0]
 80059c4:	1c5a      	adds	r2, r3, #1
 80059c6:	6022      	str	r2, [r4, #0]
 80059c8:	701e      	strb	r6, [r3, #0]
 80059ca:	6962      	ldr	r2, [r4, #20]
 80059cc:	1c43      	adds	r3, r0, #1
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d004      	beq.n	80059dc <__swbuf_r+0x6e>
 80059d2:	89a3      	ldrh	r3, [r4, #12]
 80059d4:	07db      	lsls	r3, r3, #31
 80059d6:	d5e1      	bpl.n	800599c <__swbuf_r+0x2e>
 80059d8:	2e0a      	cmp	r6, #10
 80059da:	d1df      	bne.n	800599c <__swbuf_r+0x2e>
 80059dc:	4621      	mov	r1, r4
 80059de:	4628      	mov	r0, r5
 80059e0:	f000 fd20 	bl	8006424 <_fflush_r>
 80059e4:	2800      	cmp	r0, #0
 80059e6:	d0d9      	beq.n	800599c <__swbuf_r+0x2e>
 80059e8:	e7d6      	b.n	8005998 <__swbuf_r+0x2a>
	...

080059ec <__swsetup_r>:
 80059ec:	b538      	push	{r3, r4, r5, lr}
 80059ee:	4b29      	ldr	r3, [pc, #164]	@ (8005a94 <__swsetup_r+0xa8>)
 80059f0:	4605      	mov	r5, r0
 80059f2:	6818      	ldr	r0, [r3, #0]
 80059f4:	460c      	mov	r4, r1
 80059f6:	b118      	cbz	r0, 8005a00 <__swsetup_r+0x14>
 80059f8:	6a03      	ldr	r3, [r0, #32]
 80059fa:	b90b      	cbnz	r3, 8005a00 <__swsetup_r+0x14>
 80059fc:	f7ff fece 	bl	800579c <__sinit>
 8005a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a04:	0719      	lsls	r1, r3, #28
 8005a06:	d422      	bmi.n	8005a4e <__swsetup_r+0x62>
 8005a08:	06da      	lsls	r2, r3, #27
 8005a0a:	d407      	bmi.n	8005a1c <__swsetup_r+0x30>
 8005a0c:	2209      	movs	r2, #9
 8005a0e:	602a      	str	r2, [r5, #0]
 8005a10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a14:	81a3      	strh	r3, [r4, #12]
 8005a16:	f04f 30ff 	mov.w	r0, #4294967295
 8005a1a:	e033      	b.n	8005a84 <__swsetup_r+0x98>
 8005a1c:	0758      	lsls	r0, r3, #29
 8005a1e:	d512      	bpl.n	8005a46 <__swsetup_r+0x5a>
 8005a20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a22:	b141      	cbz	r1, 8005a36 <__swsetup_r+0x4a>
 8005a24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a28:	4299      	cmp	r1, r3
 8005a2a:	d002      	beq.n	8005a32 <__swsetup_r+0x46>
 8005a2c:	4628      	mov	r0, r5
 8005a2e:	f000 f8af 	bl	8005b90 <_free_r>
 8005a32:	2300      	movs	r3, #0
 8005a34:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a36:	89a3      	ldrh	r3, [r4, #12]
 8005a38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005a3c:	81a3      	strh	r3, [r4, #12]
 8005a3e:	2300      	movs	r3, #0
 8005a40:	6063      	str	r3, [r4, #4]
 8005a42:	6923      	ldr	r3, [r4, #16]
 8005a44:	6023      	str	r3, [r4, #0]
 8005a46:	89a3      	ldrh	r3, [r4, #12]
 8005a48:	f043 0308 	orr.w	r3, r3, #8
 8005a4c:	81a3      	strh	r3, [r4, #12]
 8005a4e:	6923      	ldr	r3, [r4, #16]
 8005a50:	b94b      	cbnz	r3, 8005a66 <__swsetup_r+0x7a>
 8005a52:	89a3      	ldrh	r3, [r4, #12]
 8005a54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005a58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a5c:	d003      	beq.n	8005a66 <__swsetup_r+0x7a>
 8005a5e:	4621      	mov	r1, r4
 8005a60:	4628      	mov	r0, r5
 8005a62:	f000 fd2d 	bl	80064c0 <__smakebuf_r>
 8005a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a6a:	f013 0201 	ands.w	r2, r3, #1
 8005a6e:	d00a      	beq.n	8005a86 <__swsetup_r+0x9a>
 8005a70:	2200      	movs	r2, #0
 8005a72:	60a2      	str	r2, [r4, #8]
 8005a74:	6962      	ldr	r2, [r4, #20]
 8005a76:	4252      	negs	r2, r2
 8005a78:	61a2      	str	r2, [r4, #24]
 8005a7a:	6922      	ldr	r2, [r4, #16]
 8005a7c:	b942      	cbnz	r2, 8005a90 <__swsetup_r+0xa4>
 8005a7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005a82:	d1c5      	bne.n	8005a10 <__swsetup_r+0x24>
 8005a84:	bd38      	pop	{r3, r4, r5, pc}
 8005a86:	0799      	lsls	r1, r3, #30
 8005a88:	bf58      	it	pl
 8005a8a:	6962      	ldrpl	r2, [r4, #20]
 8005a8c:	60a2      	str	r2, [r4, #8]
 8005a8e:	e7f4      	b.n	8005a7a <__swsetup_r+0x8e>
 8005a90:	2000      	movs	r0, #0
 8005a92:	e7f7      	b.n	8005a84 <__swsetup_r+0x98>
 8005a94:	2400001c 	.word	0x2400001c

08005a98 <memset>:
 8005a98:	4402      	add	r2, r0
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d100      	bne.n	8005aa2 <memset+0xa>
 8005aa0:	4770      	bx	lr
 8005aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8005aa6:	e7f9      	b.n	8005a9c <memset+0x4>

08005aa8 <_close_r>:
 8005aa8:	b538      	push	{r3, r4, r5, lr}
 8005aaa:	4d06      	ldr	r5, [pc, #24]	@ (8005ac4 <_close_r+0x1c>)
 8005aac:	2300      	movs	r3, #0
 8005aae:	4604      	mov	r4, r0
 8005ab0:	4608      	mov	r0, r1
 8005ab2:	602b      	str	r3, [r5, #0]
 8005ab4:	f7fa ffde 	bl	8000a74 <_close>
 8005ab8:	1c43      	adds	r3, r0, #1
 8005aba:	d102      	bne.n	8005ac2 <_close_r+0x1a>
 8005abc:	682b      	ldr	r3, [r5, #0]
 8005abe:	b103      	cbz	r3, 8005ac2 <_close_r+0x1a>
 8005ac0:	6023      	str	r3, [r4, #0]
 8005ac2:	bd38      	pop	{r3, r4, r5, pc}
 8005ac4:	24000264 	.word	0x24000264

08005ac8 <_lseek_r>:
 8005ac8:	b538      	push	{r3, r4, r5, lr}
 8005aca:	4d07      	ldr	r5, [pc, #28]	@ (8005ae8 <_lseek_r+0x20>)
 8005acc:	4604      	mov	r4, r0
 8005ace:	4608      	mov	r0, r1
 8005ad0:	4611      	mov	r1, r2
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	602a      	str	r2, [r5, #0]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	f7fa fff3 	bl	8000ac2 <_lseek>
 8005adc:	1c43      	adds	r3, r0, #1
 8005ade:	d102      	bne.n	8005ae6 <_lseek_r+0x1e>
 8005ae0:	682b      	ldr	r3, [r5, #0]
 8005ae2:	b103      	cbz	r3, 8005ae6 <_lseek_r+0x1e>
 8005ae4:	6023      	str	r3, [r4, #0]
 8005ae6:	bd38      	pop	{r3, r4, r5, pc}
 8005ae8:	24000264 	.word	0x24000264

08005aec <_read_r>:
 8005aec:	b538      	push	{r3, r4, r5, lr}
 8005aee:	4d07      	ldr	r5, [pc, #28]	@ (8005b0c <_read_r+0x20>)
 8005af0:	4604      	mov	r4, r0
 8005af2:	4608      	mov	r0, r1
 8005af4:	4611      	mov	r1, r2
 8005af6:	2200      	movs	r2, #0
 8005af8:	602a      	str	r2, [r5, #0]
 8005afa:	461a      	mov	r2, r3
 8005afc:	f7fa ff9d 	bl	8000a3a <_read>
 8005b00:	1c43      	adds	r3, r0, #1
 8005b02:	d102      	bne.n	8005b0a <_read_r+0x1e>
 8005b04:	682b      	ldr	r3, [r5, #0]
 8005b06:	b103      	cbz	r3, 8005b0a <_read_r+0x1e>
 8005b08:	6023      	str	r3, [r4, #0]
 8005b0a:	bd38      	pop	{r3, r4, r5, pc}
 8005b0c:	24000264 	.word	0x24000264

08005b10 <_write_r>:
 8005b10:	b538      	push	{r3, r4, r5, lr}
 8005b12:	4d07      	ldr	r5, [pc, #28]	@ (8005b30 <_write_r+0x20>)
 8005b14:	4604      	mov	r4, r0
 8005b16:	4608      	mov	r0, r1
 8005b18:	4611      	mov	r1, r2
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	602a      	str	r2, [r5, #0]
 8005b1e:	461a      	mov	r2, r3
 8005b20:	f7fb f980 	bl	8000e24 <_write>
 8005b24:	1c43      	adds	r3, r0, #1
 8005b26:	d102      	bne.n	8005b2e <_write_r+0x1e>
 8005b28:	682b      	ldr	r3, [r5, #0]
 8005b2a:	b103      	cbz	r3, 8005b2e <_write_r+0x1e>
 8005b2c:	6023      	str	r3, [r4, #0]
 8005b2e:	bd38      	pop	{r3, r4, r5, pc}
 8005b30:	24000264 	.word	0x24000264

08005b34 <__errno>:
 8005b34:	4b01      	ldr	r3, [pc, #4]	@ (8005b3c <__errno+0x8>)
 8005b36:	6818      	ldr	r0, [r3, #0]
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	2400001c 	.word	0x2400001c

08005b40 <__libc_init_array>:
 8005b40:	b570      	push	{r4, r5, r6, lr}
 8005b42:	4d0d      	ldr	r5, [pc, #52]	@ (8005b78 <__libc_init_array+0x38>)
 8005b44:	4c0d      	ldr	r4, [pc, #52]	@ (8005b7c <__libc_init_array+0x3c>)
 8005b46:	1b64      	subs	r4, r4, r5
 8005b48:	10a4      	asrs	r4, r4, #2
 8005b4a:	2600      	movs	r6, #0
 8005b4c:	42a6      	cmp	r6, r4
 8005b4e:	d109      	bne.n	8005b64 <__libc_init_array+0x24>
 8005b50:	4d0b      	ldr	r5, [pc, #44]	@ (8005b80 <__libc_init_array+0x40>)
 8005b52:	4c0c      	ldr	r4, [pc, #48]	@ (8005b84 <__libc_init_array+0x44>)
 8005b54:	f000 fd22 	bl	800659c <_init>
 8005b58:	1b64      	subs	r4, r4, r5
 8005b5a:	10a4      	asrs	r4, r4, #2
 8005b5c:	2600      	movs	r6, #0
 8005b5e:	42a6      	cmp	r6, r4
 8005b60:	d105      	bne.n	8005b6e <__libc_init_array+0x2e>
 8005b62:	bd70      	pop	{r4, r5, r6, pc}
 8005b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b68:	4798      	blx	r3
 8005b6a:	3601      	adds	r6, #1
 8005b6c:	e7ee      	b.n	8005b4c <__libc_init_array+0xc>
 8005b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b72:	4798      	blx	r3
 8005b74:	3601      	adds	r6, #1
 8005b76:	e7f2      	b.n	8005b5e <__libc_init_array+0x1e>
 8005b78:	0800678c 	.word	0x0800678c
 8005b7c:	0800678c 	.word	0x0800678c
 8005b80:	0800678c 	.word	0x0800678c
 8005b84:	08006790 	.word	0x08006790

08005b88 <__retarget_lock_init_recursive>:
 8005b88:	4770      	bx	lr

08005b8a <__retarget_lock_acquire_recursive>:
 8005b8a:	4770      	bx	lr

08005b8c <__retarget_lock_release_recursive>:
 8005b8c:	4770      	bx	lr
	...

08005b90 <_free_r>:
 8005b90:	b538      	push	{r3, r4, r5, lr}
 8005b92:	4605      	mov	r5, r0
 8005b94:	2900      	cmp	r1, #0
 8005b96:	d041      	beq.n	8005c1c <_free_r+0x8c>
 8005b98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b9c:	1f0c      	subs	r4, r1, #4
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	bfb8      	it	lt
 8005ba2:	18e4      	addlt	r4, r4, r3
 8005ba4:	f000 f8e0 	bl	8005d68 <__malloc_lock>
 8005ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8005c20 <_free_r+0x90>)
 8005baa:	6813      	ldr	r3, [r2, #0]
 8005bac:	b933      	cbnz	r3, 8005bbc <_free_r+0x2c>
 8005bae:	6063      	str	r3, [r4, #4]
 8005bb0:	6014      	str	r4, [r2, #0]
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bb8:	f000 b8dc 	b.w	8005d74 <__malloc_unlock>
 8005bbc:	42a3      	cmp	r3, r4
 8005bbe:	d908      	bls.n	8005bd2 <_free_r+0x42>
 8005bc0:	6820      	ldr	r0, [r4, #0]
 8005bc2:	1821      	adds	r1, r4, r0
 8005bc4:	428b      	cmp	r3, r1
 8005bc6:	bf01      	itttt	eq
 8005bc8:	6819      	ldreq	r1, [r3, #0]
 8005bca:	685b      	ldreq	r3, [r3, #4]
 8005bcc:	1809      	addeq	r1, r1, r0
 8005bce:	6021      	streq	r1, [r4, #0]
 8005bd0:	e7ed      	b.n	8005bae <_free_r+0x1e>
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	b10b      	cbz	r3, 8005bdc <_free_r+0x4c>
 8005bd8:	42a3      	cmp	r3, r4
 8005bda:	d9fa      	bls.n	8005bd2 <_free_r+0x42>
 8005bdc:	6811      	ldr	r1, [r2, #0]
 8005bde:	1850      	adds	r0, r2, r1
 8005be0:	42a0      	cmp	r0, r4
 8005be2:	d10b      	bne.n	8005bfc <_free_r+0x6c>
 8005be4:	6820      	ldr	r0, [r4, #0]
 8005be6:	4401      	add	r1, r0
 8005be8:	1850      	adds	r0, r2, r1
 8005bea:	4283      	cmp	r3, r0
 8005bec:	6011      	str	r1, [r2, #0]
 8005bee:	d1e0      	bne.n	8005bb2 <_free_r+0x22>
 8005bf0:	6818      	ldr	r0, [r3, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	6053      	str	r3, [r2, #4]
 8005bf6:	4408      	add	r0, r1
 8005bf8:	6010      	str	r0, [r2, #0]
 8005bfa:	e7da      	b.n	8005bb2 <_free_r+0x22>
 8005bfc:	d902      	bls.n	8005c04 <_free_r+0x74>
 8005bfe:	230c      	movs	r3, #12
 8005c00:	602b      	str	r3, [r5, #0]
 8005c02:	e7d6      	b.n	8005bb2 <_free_r+0x22>
 8005c04:	6820      	ldr	r0, [r4, #0]
 8005c06:	1821      	adds	r1, r4, r0
 8005c08:	428b      	cmp	r3, r1
 8005c0a:	bf04      	itt	eq
 8005c0c:	6819      	ldreq	r1, [r3, #0]
 8005c0e:	685b      	ldreq	r3, [r3, #4]
 8005c10:	6063      	str	r3, [r4, #4]
 8005c12:	bf04      	itt	eq
 8005c14:	1809      	addeq	r1, r1, r0
 8005c16:	6021      	streq	r1, [r4, #0]
 8005c18:	6054      	str	r4, [r2, #4]
 8005c1a:	e7ca      	b.n	8005bb2 <_free_r+0x22>
 8005c1c:	bd38      	pop	{r3, r4, r5, pc}
 8005c1e:	bf00      	nop
 8005c20:	24000270 	.word	0x24000270

08005c24 <sbrk_aligned>:
 8005c24:	b570      	push	{r4, r5, r6, lr}
 8005c26:	4e0f      	ldr	r6, [pc, #60]	@ (8005c64 <sbrk_aligned+0x40>)
 8005c28:	460c      	mov	r4, r1
 8005c2a:	6831      	ldr	r1, [r6, #0]
 8005c2c:	4605      	mov	r5, r0
 8005c2e:	b911      	cbnz	r1, 8005c36 <sbrk_aligned+0x12>
 8005c30:	f000 fca4 	bl	800657c <_sbrk_r>
 8005c34:	6030      	str	r0, [r6, #0]
 8005c36:	4621      	mov	r1, r4
 8005c38:	4628      	mov	r0, r5
 8005c3a:	f000 fc9f 	bl	800657c <_sbrk_r>
 8005c3e:	1c43      	adds	r3, r0, #1
 8005c40:	d103      	bne.n	8005c4a <sbrk_aligned+0x26>
 8005c42:	f04f 34ff 	mov.w	r4, #4294967295
 8005c46:	4620      	mov	r0, r4
 8005c48:	bd70      	pop	{r4, r5, r6, pc}
 8005c4a:	1cc4      	adds	r4, r0, #3
 8005c4c:	f024 0403 	bic.w	r4, r4, #3
 8005c50:	42a0      	cmp	r0, r4
 8005c52:	d0f8      	beq.n	8005c46 <sbrk_aligned+0x22>
 8005c54:	1a21      	subs	r1, r4, r0
 8005c56:	4628      	mov	r0, r5
 8005c58:	f000 fc90 	bl	800657c <_sbrk_r>
 8005c5c:	3001      	adds	r0, #1
 8005c5e:	d1f2      	bne.n	8005c46 <sbrk_aligned+0x22>
 8005c60:	e7ef      	b.n	8005c42 <sbrk_aligned+0x1e>
 8005c62:	bf00      	nop
 8005c64:	2400026c 	.word	0x2400026c

08005c68 <_malloc_r>:
 8005c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c6c:	1ccd      	adds	r5, r1, #3
 8005c6e:	f025 0503 	bic.w	r5, r5, #3
 8005c72:	3508      	adds	r5, #8
 8005c74:	2d0c      	cmp	r5, #12
 8005c76:	bf38      	it	cc
 8005c78:	250c      	movcc	r5, #12
 8005c7a:	2d00      	cmp	r5, #0
 8005c7c:	4606      	mov	r6, r0
 8005c7e:	db01      	blt.n	8005c84 <_malloc_r+0x1c>
 8005c80:	42a9      	cmp	r1, r5
 8005c82:	d904      	bls.n	8005c8e <_malloc_r+0x26>
 8005c84:	230c      	movs	r3, #12
 8005c86:	6033      	str	r3, [r6, #0]
 8005c88:	2000      	movs	r0, #0
 8005c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d64 <_malloc_r+0xfc>
 8005c92:	f000 f869 	bl	8005d68 <__malloc_lock>
 8005c96:	f8d8 3000 	ldr.w	r3, [r8]
 8005c9a:	461c      	mov	r4, r3
 8005c9c:	bb44      	cbnz	r4, 8005cf0 <_malloc_r+0x88>
 8005c9e:	4629      	mov	r1, r5
 8005ca0:	4630      	mov	r0, r6
 8005ca2:	f7ff ffbf 	bl	8005c24 <sbrk_aligned>
 8005ca6:	1c43      	adds	r3, r0, #1
 8005ca8:	4604      	mov	r4, r0
 8005caa:	d158      	bne.n	8005d5e <_malloc_r+0xf6>
 8005cac:	f8d8 4000 	ldr.w	r4, [r8]
 8005cb0:	4627      	mov	r7, r4
 8005cb2:	2f00      	cmp	r7, #0
 8005cb4:	d143      	bne.n	8005d3e <_malloc_r+0xd6>
 8005cb6:	2c00      	cmp	r4, #0
 8005cb8:	d04b      	beq.n	8005d52 <_malloc_r+0xea>
 8005cba:	6823      	ldr	r3, [r4, #0]
 8005cbc:	4639      	mov	r1, r7
 8005cbe:	4630      	mov	r0, r6
 8005cc0:	eb04 0903 	add.w	r9, r4, r3
 8005cc4:	f000 fc5a 	bl	800657c <_sbrk_r>
 8005cc8:	4581      	cmp	r9, r0
 8005cca:	d142      	bne.n	8005d52 <_malloc_r+0xea>
 8005ccc:	6821      	ldr	r1, [r4, #0]
 8005cce:	1a6d      	subs	r5, r5, r1
 8005cd0:	4629      	mov	r1, r5
 8005cd2:	4630      	mov	r0, r6
 8005cd4:	f7ff ffa6 	bl	8005c24 <sbrk_aligned>
 8005cd8:	3001      	adds	r0, #1
 8005cda:	d03a      	beq.n	8005d52 <_malloc_r+0xea>
 8005cdc:	6823      	ldr	r3, [r4, #0]
 8005cde:	442b      	add	r3, r5
 8005ce0:	6023      	str	r3, [r4, #0]
 8005ce2:	f8d8 3000 	ldr.w	r3, [r8]
 8005ce6:	685a      	ldr	r2, [r3, #4]
 8005ce8:	bb62      	cbnz	r2, 8005d44 <_malloc_r+0xdc>
 8005cea:	f8c8 7000 	str.w	r7, [r8]
 8005cee:	e00f      	b.n	8005d10 <_malloc_r+0xa8>
 8005cf0:	6822      	ldr	r2, [r4, #0]
 8005cf2:	1b52      	subs	r2, r2, r5
 8005cf4:	d420      	bmi.n	8005d38 <_malloc_r+0xd0>
 8005cf6:	2a0b      	cmp	r2, #11
 8005cf8:	d917      	bls.n	8005d2a <_malloc_r+0xc2>
 8005cfa:	1961      	adds	r1, r4, r5
 8005cfc:	42a3      	cmp	r3, r4
 8005cfe:	6025      	str	r5, [r4, #0]
 8005d00:	bf18      	it	ne
 8005d02:	6059      	strne	r1, [r3, #4]
 8005d04:	6863      	ldr	r3, [r4, #4]
 8005d06:	bf08      	it	eq
 8005d08:	f8c8 1000 	streq.w	r1, [r8]
 8005d0c:	5162      	str	r2, [r4, r5]
 8005d0e:	604b      	str	r3, [r1, #4]
 8005d10:	4630      	mov	r0, r6
 8005d12:	f000 f82f 	bl	8005d74 <__malloc_unlock>
 8005d16:	f104 000b 	add.w	r0, r4, #11
 8005d1a:	1d23      	adds	r3, r4, #4
 8005d1c:	f020 0007 	bic.w	r0, r0, #7
 8005d20:	1ac2      	subs	r2, r0, r3
 8005d22:	bf1c      	itt	ne
 8005d24:	1a1b      	subne	r3, r3, r0
 8005d26:	50a3      	strne	r3, [r4, r2]
 8005d28:	e7af      	b.n	8005c8a <_malloc_r+0x22>
 8005d2a:	6862      	ldr	r2, [r4, #4]
 8005d2c:	42a3      	cmp	r3, r4
 8005d2e:	bf0c      	ite	eq
 8005d30:	f8c8 2000 	streq.w	r2, [r8]
 8005d34:	605a      	strne	r2, [r3, #4]
 8005d36:	e7eb      	b.n	8005d10 <_malloc_r+0xa8>
 8005d38:	4623      	mov	r3, r4
 8005d3a:	6864      	ldr	r4, [r4, #4]
 8005d3c:	e7ae      	b.n	8005c9c <_malloc_r+0x34>
 8005d3e:	463c      	mov	r4, r7
 8005d40:	687f      	ldr	r7, [r7, #4]
 8005d42:	e7b6      	b.n	8005cb2 <_malloc_r+0x4a>
 8005d44:	461a      	mov	r2, r3
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	42a3      	cmp	r3, r4
 8005d4a:	d1fb      	bne.n	8005d44 <_malloc_r+0xdc>
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	6053      	str	r3, [r2, #4]
 8005d50:	e7de      	b.n	8005d10 <_malloc_r+0xa8>
 8005d52:	230c      	movs	r3, #12
 8005d54:	6033      	str	r3, [r6, #0]
 8005d56:	4630      	mov	r0, r6
 8005d58:	f000 f80c 	bl	8005d74 <__malloc_unlock>
 8005d5c:	e794      	b.n	8005c88 <_malloc_r+0x20>
 8005d5e:	6005      	str	r5, [r0, #0]
 8005d60:	e7d6      	b.n	8005d10 <_malloc_r+0xa8>
 8005d62:	bf00      	nop
 8005d64:	24000270 	.word	0x24000270

08005d68 <__malloc_lock>:
 8005d68:	4801      	ldr	r0, [pc, #4]	@ (8005d70 <__malloc_lock+0x8>)
 8005d6a:	f7ff bf0e 	b.w	8005b8a <__retarget_lock_acquire_recursive>
 8005d6e:	bf00      	nop
 8005d70:	24000268 	.word	0x24000268

08005d74 <__malloc_unlock>:
 8005d74:	4801      	ldr	r0, [pc, #4]	@ (8005d7c <__malloc_unlock+0x8>)
 8005d76:	f7ff bf09 	b.w	8005b8c <__retarget_lock_release_recursive>
 8005d7a:	bf00      	nop
 8005d7c:	24000268 	.word	0x24000268

08005d80 <__sfputc_r>:
 8005d80:	6893      	ldr	r3, [r2, #8]
 8005d82:	3b01      	subs	r3, #1
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	b410      	push	{r4}
 8005d88:	6093      	str	r3, [r2, #8]
 8005d8a:	da08      	bge.n	8005d9e <__sfputc_r+0x1e>
 8005d8c:	6994      	ldr	r4, [r2, #24]
 8005d8e:	42a3      	cmp	r3, r4
 8005d90:	db01      	blt.n	8005d96 <__sfputc_r+0x16>
 8005d92:	290a      	cmp	r1, #10
 8005d94:	d103      	bne.n	8005d9e <__sfputc_r+0x1e>
 8005d96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d9a:	f7ff bde8 	b.w	800596e <__swbuf_r>
 8005d9e:	6813      	ldr	r3, [r2, #0]
 8005da0:	1c58      	adds	r0, r3, #1
 8005da2:	6010      	str	r0, [r2, #0]
 8005da4:	7019      	strb	r1, [r3, #0]
 8005da6:	4608      	mov	r0, r1
 8005da8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <__sfputs_r>:
 8005dae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db0:	4606      	mov	r6, r0
 8005db2:	460f      	mov	r7, r1
 8005db4:	4614      	mov	r4, r2
 8005db6:	18d5      	adds	r5, r2, r3
 8005db8:	42ac      	cmp	r4, r5
 8005dba:	d101      	bne.n	8005dc0 <__sfputs_r+0x12>
 8005dbc:	2000      	movs	r0, #0
 8005dbe:	e007      	b.n	8005dd0 <__sfputs_r+0x22>
 8005dc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dc4:	463a      	mov	r2, r7
 8005dc6:	4630      	mov	r0, r6
 8005dc8:	f7ff ffda 	bl	8005d80 <__sfputc_r>
 8005dcc:	1c43      	adds	r3, r0, #1
 8005dce:	d1f3      	bne.n	8005db8 <__sfputs_r+0xa>
 8005dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005dd4 <_vfiprintf_r>:
 8005dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd8:	460d      	mov	r5, r1
 8005dda:	b09d      	sub	sp, #116	@ 0x74
 8005ddc:	4614      	mov	r4, r2
 8005dde:	4698      	mov	r8, r3
 8005de0:	4606      	mov	r6, r0
 8005de2:	b118      	cbz	r0, 8005dec <_vfiprintf_r+0x18>
 8005de4:	6a03      	ldr	r3, [r0, #32]
 8005de6:	b90b      	cbnz	r3, 8005dec <_vfiprintf_r+0x18>
 8005de8:	f7ff fcd8 	bl	800579c <__sinit>
 8005dec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005dee:	07d9      	lsls	r1, r3, #31
 8005df0:	d405      	bmi.n	8005dfe <_vfiprintf_r+0x2a>
 8005df2:	89ab      	ldrh	r3, [r5, #12]
 8005df4:	059a      	lsls	r2, r3, #22
 8005df6:	d402      	bmi.n	8005dfe <_vfiprintf_r+0x2a>
 8005df8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005dfa:	f7ff fec6 	bl	8005b8a <__retarget_lock_acquire_recursive>
 8005dfe:	89ab      	ldrh	r3, [r5, #12]
 8005e00:	071b      	lsls	r3, r3, #28
 8005e02:	d501      	bpl.n	8005e08 <_vfiprintf_r+0x34>
 8005e04:	692b      	ldr	r3, [r5, #16]
 8005e06:	b99b      	cbnz	r3, 8005e30 <_vfiprintf_r+0x5c>
 8005e08:	4629      	mov	r1, r5
 8005e0a:	4630      	mov	r0, r6
 8005e0c:	f7ff fdee 	bl	80059ec <__swsetup_r>
 8005e10:	b170      	cbz	r0, 8005e30 <_vfiprintf_r+0x5c>
 8005e12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e14:	07dc      	lsls	r4, r3, #31
 8005e16:	d504      	bpl.n	8005e22 <_vfiprintf_r+0x4e>
 8005e18:	f04f 30ff 	mov.w	r0, #4294967295
 8005e1c:	b01d      	add	sp, #116	@ 0x74
 8005e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e22:	89ab      	ldrh	r3, [r5, #12]
 8005e24:	0598      	lsls	r0, r3, #22
 8005e26:	d4f7      	bmi.n	8005e18 <_vfiprintf_r+0x44>
 8005e28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e2a:	f7ff feaf 	bl	8005b8c <__retarget_lock_release_recursive>
 8005e2e:	e7f3      	b.n	8005e18 <_vfiprintf_r+0x44>
 8005e30:	2300      	movs	r3, #0
 8005e32:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e34:	2320      	movs	r3, #32
 8005e36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e3e:	2330      	movs	r3, #48	@ 0x30
 8005e40:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005ff0 <_vfiprintf_r+0x21c>
 8005e44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e48:	f04f 0901 	mov.w	r9, #1
 8005e4c:	4623      	mov	r3, r4
 8005e4e:	469a      	mov	sl, r3
 8005e50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e54:	b10a      	cbz	r2, 8005e5a <_vfiprintf_r+0x86>
 8005e56:	2a25      	cmp	r2, #37	@ 0x25
 8005e58:	d1f9      	bne.n	8005e4e <_vfiprintf_r+0x7a>
 8005e5a:	ebba 0b04 	subs.w	fp, sl, r4
 8005e5e:	d00b      	beq.n	8005e78 <_vfiprintf_r+0xa4>
 8005e60:	465b      	mov	r3, fp
 8005e62:	4622      	mov	r2, r4
 8005e64:	4629      	mov	r1, r5
 8005e66:	4630      	mov	r0, r6
 8005e68:	f7ff ffa1 	bl	8005dae <__sfputs_r>
 8005e6c:	3001      	adds	r0, #1
 8005e6e:	f000 80a7 	beq.w	8005fc0 <_vfiprintf_r+0x1ec>
 8005e72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e74:	445a      	add	r2, fp
 8005e76:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e78:	f89a 3000 	ldrb.w	r3, [sl]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 809f 	beq.w	8005fc0 <_vfiprintf_r+0x1ec>
 8005e82:	2300      	movs	r3, #0
 8005e84:	f04f 32ff 	mov.w	r2, #4294967295
 8005e88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e8c:	f10a 0a01 	add.w	sl, sl, #1
 8005e90:	9304      	str	r3, [sp, #16]
 8005e92:	9307      	str	r3, [sp, #28]
 8005e94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e98:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e9a:	4654      	mov	r4, sl
 8005e9c:	2205      	movs	r2, #5
 8005e9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ea2:	4853      	ldr	r0, [pc, #332]	@ (8005ff0 <_vfiprintf_r+0x21c>)
 8005ea4:	f7fa fa1c 	bl	80002e0 <memchr>
 8005ea8:	9a04      	ldr	r2, [sp, #16]
 8005eaa:	b9d8      	cbnz	r0, 8005ee4 <_vfiprintf_r+0x110>
 8005eac:	06d1      	lsls	r1, r2, #27
 8005eae:	bf44      	itt	mi
 8005eb0:	2320      	movmi	r3, #32
 8005eb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005eb6:	0713      	lsls	r3, r2, #28
 8005eb8:	bf44      	itt	mi
 8005eba:	232b      	movmi	r3, #43	@ 0x2b
 8005ebc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ec0:	f89a 3000 	ldrb.w	r3, [sl]
 8005ec4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ec6:	d015      	beq.n	8005ef4 <_vfiprintf_r+0x120>
 8005ec8:	9a07      	ldr	r2, [sp, #28]
 8005eca:	4654      	mov	r4, sl
 8005ecc:	2000      	movs	r0, #0
 8005ece:	f04f 0c0a 	mov.w	ip, #10
 8005ed2:	4621      	mov	r1, r4
 8005ed4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ed8:	3b30      	subs	r3, #48	@ 0x30
 8005eda:	2b09      	cmp	r3, #9
 8005edc:	d94b      	bls.n	8005f76 <_vfiprintf_r+0x1a2>
 8005ede:	b1b0      	cbz	r0, 8005f0e <_vfiprintf_r+0x13a>
 8005ee0:	9207      	str	r2, [sp, #28]
 8005ee2:	e014      	b.n	8005f0e <_vfiprintf_r+0x13a>
 8005ee4:	eba0 0308 	sub.w	r3, r0, r8
 8005ee8:	fa09 f303 	lsl.w	r3, r9, r3
 8005eec:	4313      	orrs	r3, r2
 8005eee:	9304      	str	r3, [sp, #16]
 8005ef0:	46a2      	mov	sl, r4
 8005ef2:	e7d2      	b.n	8005e9a <_vfiprintf_r+0xc6>
 8005ef4:	9b03      	ldr	r3, [sp, #12]
 8005ef6:	1d19      	adds	r1, r3, #4
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	9103      	str	r1, [sp, #12]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	bfbb      	ittet	lt
 8005f00:	425b      	neglt	r3, r3
 8005f02:	f042 0202 	orrlt.w	r2, r2, #2
 8005f06:	9307      	strge	r3, [sp, #28]
 8005f08:	9307      	strlt	r3, [sp, #28]
 8005f0a:	bfb8      	it	lt
 8005f0c:	9204      	strlt	r2, [sp, #16]
 8005f0e:	7823      	ldrb	r3, [r4, #0]
 8005f10:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f12:	d10a      	bne.n	8005f2a <_vfiprintf_r+0x156>
 8005f14:	7863      	ldrb	r3, [r4, #1]
 8005f16:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f18:	d132      	bne.n	8005f80 <_vfiprintf_r+0x1ac>
 8005f1a:	9b03      	ldr	r3, [sp, #12]
 8005f1c:	1d1a      	adds	r2, r3, #4
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	9203      	str	r2, [sp, #12]
 8005f22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f26:	3402      	adds	r4, #2
 8005f28:	9305      	str	r3, [sp, #20]
 8005f2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006000 <_vfiprintf_r+0x22c>
 8005f2e:	7821      	ldrb	r1, [r4, #0]
 8005f30:	2203      	movs	r2, #3
 8005f32:	4650      	mov	r0, sl
 8005f34:	f7fa f9d4 	bl	80002e0 <memchr>
 8005f38:	b138      	cbz	r0, 8005f4a <_vfiprintf_r+0x176>
 8005f3a:	9b04      	ldr	r3, [sp, #16]
 8005f3c:	eba0 000a 	sub.w	r0, r0, sl
 8005f40:	2240      	movs	r2, #64	@ 0x40
 8005f42:	4082      	lsls	r2, r0
 8005f44:	4313      	orrs	r3, r2
 8005f46:	3401      	adds	r4, #1
 8005f48:	9304      	str	r3, [sp, #16]
 8005f4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f4e:	4829      	ldr	r0, [pc, #164]	@ (8005ff4 <_vfiprintf_r+0x220>)
 8005f50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f54:	2206      	movs	r2, #6
 8005f56:	f7fa f9c3 	bl	80002e0 <memchr>
 8005f5a:	2800      	cmp	r0, #0
 8005f5c:	d03f      	beq.n	8005fde <_vfiprintf_r+0x20a>
 8005f5e:	4b26      	ldr	r3, [pc, #152]	@ (8005ff8 <_vfiprintf_r+0x224>)
 8005f60:	bb1b      	cbnz	r3, 8005faa <_vfiprintf_r+0x1d6>
 8005f62:	9b03      	ldr	r3, [sp, #12]
 8005f64:	3307      	adds	r3, #7
 8005f66:	f023 0307 	bic.w	r3, r3, #7
 8005f6a:	3308      	adds	r3, #8
 8005f6c:	9303      	str	r3, [sp, #12]
 8005f6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f70:	443b      	add	r3, r7
 8005f72:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f74:	e76a      	b.n	8005e4c <_vfiprintf_r+0x78>
 8005f76:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f7a:	460c      	mov	r4, r1
 8005f7c:	2001      	movs	r0, #1
 8005f7e:	e7a8      	b.n	8005ed2 <_vfiprintf_r+0xfe>
 8005f80:	2300      	movs	r3, #0
 8005f82:	3401      	adds	r4, #1
 8005f84:	9305      	str	r3, [sp, #20]
 8005f86:	4619      	mov	r1, r3
 8005f88:	f04f 0c0a 	mov.w	ip, #10
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f92:	3a30      	subs	r2, #48	@ 0x30
 8005f94:	2a09      	cmp	r2, #9
 8005f96:	d903      	bls.n	8005fa0 <_vfiprintf_r+0x1cc>
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d0c6      	beq.n	8005f2a <_vfiprintf_r+0x156>
 8005f9c:	9105      	str	r1, [sp, #20]
 8005f9e:	e7c4      	b.n	8005f2a <_vfiprintf_r+0x156>
 8005fa0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fa4:	4604      	mov	r4, r0
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e7f0      	b.n	8005f8c <_vfiprintf_r+0x1b8>
 8005faa:	ab03      	add	r3, sp, #12
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	462a      	mov	r2, r5
 8005fb0:	4b12      	ldr	r3, [pc, #72]	@ (8005ffc <_vfiprintf_r+0x228>)
 8005fb2:	a904      	add	r1, sp, #16
 8005fb4:	4630      	mov	r0, r6
 8005fb6:	f3af 8000 	nop.w
 8005fba:	4607      	mov	r7, r0
 8005fbc:	1c78      	adds	r0, r7, #1
 8005fbe:	d1d6      	bne.n	8005f6e <_vfiprintf_r+0x19a>
 8005fc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005fc2:	07d9      	lsls	r1, r3, #31
 8005fc4:	d405      	bmi.n	8005fd2 <_vfiprintf_r+0x1fe>
 8005fc6:	89ab      	ldrh	r3, [r5, #12]
 8005fc8:	059a      	lsls	r2, r3, #22
 8005fca:	d402      	bmi.n	8005fd2 <_vfiprintf_r+0x1fe>
 8005fcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005fce:	f7ff fddd 	bl	8005b8c <__retarget_lock_release_recursive>
 8005fd2:	89ab      	ldrh	r3, [r5, #12]
 8005fd4:	065b      	lsls	r3, r3, #25
 8005fd6:	f53f af1f 	bmi.w	8005e18 <_vfiprintf_r+0x44>
 8005fda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005fdc:	e71e      	b.n	8005e1c <_vfiprintf_r+0x48>
 8005fde:	ab03      	add	r3, sp, #12
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	462a      	mov	r2, r5
 8005fe4:	4b05      	ldr	r3, [pc, #20]	@ (8005ffc <_vfiprintf_r+0x228>)
 8005fe6:	a904      	add	r1, sp, #16
 8005fe8:	4630      	mov	r0, r6
 8005fea:	f000 f879 	bl	80060e0 <_printf_i>
 8005fee:	e7e4      	b.n	8005fba <_vfiprintf_r+0x1e6>
 8005ff0:	08006750 	.word	0x08006750
 8005ff4:	0800675a 	.word	0x0800675a
 8005ff8:	00000000 	.word	0x00000000
 8005ffc:	08005daf 	.word	0x08005daf
 8006000:	08006756 	.word	0x08006756

08006004 <_printf_common>:
 8006004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006008:	4616      	mov	r6, r2
 800600a:	4698      	mov	r8, r3
 800600c:	688a      	ldr	r2, [r1, #8]
 800600e:	690b      	ldr	r3, [r1, #16]
 8006010:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006014:	4293      	cmp	r3, r2
 8006016:	bfb8      	it	lt
 8006018:	4613      	movlt	r3, r2
 800601a:	6033      	str	r3, [r6, #0]
 800601c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006020:	4607      	mov	r7, r0
 8006022:	460c      	mov	r4, r1
 8006024:	b10a      	cbz	r2, 800602a <_printf_common+0x26>
 8006026:	3301      	adds	r3, #1
 8006028:	6033      	str	r3, [r6, #0]
 800602a:	6823      	ldr	r3, [r4, #0]
 800602c:	0699      	lsls	r1, r3, #26
 800602e:	bf42      	ittt	mi
 8006030:	6833      	ldrmi	r3, [r6, #0]
 8006032:	3302      	addmi	r3, #2
 8006034:	6033      	strmi	r3, [r6, #0]
 8006036:	6825      	ldr	r5, [r4, #0]
 8006038:	f015 0506 	ands.w	r5, r5, #6
 800603c:	d106      	bne.n	800604c <_printf_common+0x48>
 800603e:	f104 0a19 	add.w	sl, r4, #25
 8006042:	68e3      	ldr	r3, [r4, #12]
 8006044:	6832      	ldr	r2, [r6, #0]
 8006046:	1a9b      	subs	r3, r3, r2
 8006048:	42ab      	cmp	r3, r5
 800604a:	dc26      	bgt.n	800609a <_printf_common+0x96>
 800604c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006050:	6822      	ldr	r2, [r4, #0]
 8006052:	3b00      	subs	r3, #0
 8006054:	bf18      	it	ne
 8006056:	2301      	movne	r3, #1
 8006058:	0692      	lsls	r2, r2, #26
 800605a:	d42b      	bmi.n	80060b4 <_printf_common+0xb0>
 800605c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006060:	4641      	mov	r1, r8
 8006062:	4638      	mov	r0, r7
 8006064:	47c8      	blx	r9
 8006066:	3001      	adds	r0, #1
 8006068:	d01e      	beq.n	80060a8 <_printf_common+0xa4>
 800606a:	6823      	ldr	r3, [r4, #0]
 800606c:	6922      	ldr	r2, [r4, #16]
 800606e:	f003 0306 	and.w	r3, r3, #6
 8006072:	2b04      	cmp	r3, #4
 8006074:	bf02      	ittt	eq
 8006076:	68e5      	ldreq	r5, [r4, #12]
 8006078:	6833      	ldreq	r3, [r6, #0]
 800607a:	1aed      	subeq	r5, r5, r3
 800607c:	68a3      	ldr	r3, [r4, #8]
 800607e:	bf0c      	ite	eq
 8006080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006084:	2500      	movne	r5, #0
 8006086:	4293      	cmp	r3, r2
 8006088:	bfc4      	itt	gt
 800608a:	1a9b      	subgt	r3, r3, r2
 800608c:	18ed      	addgt	r5, r5, r3
 800608e:	2600      	movs	r6, #0
 8006090:	341a      	adds	r4, #26
 8006092:	42b5      	cmp	r5, r6
 8006094:	d11a      	bne.n	80060cc <_printf_common+0xc8>
 8006096:	2000      	movs	r0, #0
 8006098:	e008      	b.n	80060ac <_printf_common+0xa8>
 800609a:	2301      	movs	r3, #1
 800609c:	4652      	mov	r2, sl
 800609e:	4641      	mov	r1, r8
 80060a0:	4638      	mov	r0, r7
 80060a2:	47c8      	blx	r9
 80060a4:	3001      	adds	r0, #1
 80060a6:	d103      	bne.n	80060b0 <_printf_common+0xac>
 80060a8:	f04f 30ff 	mov.w	r0, #4294967295
 80060ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060b0:	3501      	adds	r5, #1
 80060b2:	e7c6      	b.n	8006042 <_printf_common+0x3e>
 80060b4:	18e1      	adds	r1, r4, r3
 80060b6:	1c5a      	adds	r2, r3, #1
 80060b8:	2030      	movs	r0, #48	@ 0x30
 80060ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80060be:	4422      	add	r2, r4
 80060c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80060c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80060c8:	3302      	adds	r3, #2
 80060ca:	e7c7      	b.n	800605c <_printf_common+0x58>
 80060cc:	2301      	movs	r3, #1
 80060ce:	4622      	mov	r2, r4
 80060d0:	4641      	mov	r1, r8
 80060d2:	4638      	mov	r0, r7
 80060d4:	47c8      	blx	r9
 80060d6:	3001      	adds	r0, #1
 80060d8:	d0e6      	beq.n	80060a8 <_printf_common+0xa4>
 80060da:	3601      	adds	r6, #1
 80060dc:	e7d9      	b.n	8006092 <_printf_common+0x8e>
	...

080060e0 <_printf_i>:
 80060e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060e4:	7e0f      	ldrb	r7, [r1, #24]
 80060e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80060e8:	2f78      	cmp	r7, #120	@ 0x78
 80060ea:	4691      	mov	r9, r2
 80060ec:	4680      	mov	r8, r0
 80060ee:	460c      	mov	r4, r1
 80060f0:	469a      	mov	sl, r3
 80060f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060f6:	d807      	bhi.n	8006108 <_printf_i+0x28>
 80060f8:	2f62      	cmp	r7, #98	@ 0x62
 80060fa:	d80a      	bhi.n	8006112 <_printf_i+0x32>
 80060fc:	2f00      	cmp	r7, #0
 80060fe:	f000 80d1 	beq.w	80062a4 <_printf_i+0x1c4>
 8006102:	2f58      	cmp	r7, #88	@ 0x58
 8006104:	f000 80b8 	beq.w	8006278 <_printf_i+0x198>
 8006108:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800610c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006110:	e03a      	b.n	8006188 <_printf_i+0xa8>
 8006112:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006116:	2b15      	cmp	r3, #21
 8006118:	d8f6      	bhi.n	8006108 <_printf_i+0x28>
 800611a:	a101      	add	r1, pc, #4	@ (adr r1, 8006120 <_printf_i+0x40>)
 800611c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006120:	08006179 	.word	0x08006179
 8006124:	0800618d 	.word	0x0800618d
 8006128:	08006109 	.word	0x08006109
 800612c:	08006109 	.word	0x08006109
 8006130:	08006109 	.word	0x08006109
 8006134:	08006109 	.word	0x08006109
 8006138:	0800618d 	.word	0x0800618d
 800613c:	08006109 	.word	0x08006109
 8006140:	08006109 	.word	0x08006109
 8006144:	08006109 	.word	0x08006109
 8006148:	08006109 	.word	0x08006109
 800614c:	0800628b 	.word	0x0800628b
 8006150:	080061b7 	.word	0x080061b7
 8006154:	08006245 	.word	0x08006245
 8006158:	08006109 	.word	0x08006109
 800615c:	08006109 	.word	0x08006109
 8006160:	080062ad 	.word	0x080062ad
 8006164:	08006109 	.word	0x08006109
 8006168:	080061b7 	.word	0x080061b7
 800616c:	08006109 	.word	0x08006109
 8006170:	08006109 	.word	0x08006109
 8006174:	0800624d 	.word	0x0800624d
 8006178:	6833      	ldr	r3, [r6, #0]
 800617a:	1d1a      	adds	r2, r3, #4
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	6032      	str	r2, [r6, #0]
 8006180:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006184:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006188:	2301      	movs	r3, #1
 800618a:	e09c      	b.n	80062c6 <_printf_i+0x1e6>
 800618c:	6833      	ldr	r3, [r6, #0]
 800618e:	6820      	ldr	r0, [r4, #0]
 8006190:	1d19      	adds	r1, r3, #4
 8006192:	6031      	str	r1, [r6, #0]
 8006194:	0606      	lsls	r6, r0, #24
 8006196:	d501      	bpl.n	800619c <_printf_i+0xbc>
 8006198:	681d      	ldr	r5, [r3, #0]
 800619a:	e003      	b.n	80061a4 <_printf_i+0xc4>
 800619c:	0645      	lsls	r5, r0, #25
 800619e:	d5fb      	bpl.n	8006198 <_printf_i+0xb8>
 80061a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80061a4:	2d00      	cmp	r5, #0
 80061a6:	da03      	bge.n	80061b0 <_printf_i+0xd0>
 80061a8:	232d      	movs	r3, #45	@ 0x2d
 80061aa:	426d      	negs	r5, r5
 80061ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061b0:	4858      	ldr	r0, [pc, #352]	@ (8006314 <_printf_i+0x234>)
 80061b2:	230a      	movs	r3, #10
 80061b4:	e011      	b.n	80061da <_printf_i+0xfa>
 80061b6:	6821      	ldr	r1, [r4, #0]
 80061b8:	6833      	ldr	r3, [r6, #0]
 80061ba:	0608      	lsls	r0, r1, #24
 80061bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80061c0:	d402      	bmi.n	80061c8 <_printf_i+0xe8>
 80061c2:	0649      	lsls	r1, r1, #25
 80061c4:	bf48      	it	mi
 80061c6:	b2ad      	uxthmi	r5, r5
 80061c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80061ca:	4852      	ldr	r0, [pc, #328]	@ (8006314 <_printf_i+0x234>)
 80061cc:	6033      	str	r3, [r6, #0]
 80061ce:	bf14      	ite	ne
 80061d0:	230a      	movne	r3, #10
 80061d2:	2308      	moveq	r3, #8
 80061d4:	2100      	movs	r1, #0
 80061d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80061da:	6866      	ldr	r6, [r4, #4]
 80061dc:	60a6      	str	r6, [r4, #8]
 80061de:	2e00      	cmp	r6, #0
 80061e0:	db05      	blt.n	80061ee <_printf_i+0x10e>
 80061e2:	6821      	ldr	r1, [r4, #0]
 80061e4:	432e      	orrs	r6, r5
 80061e6:	f021 0104 	bic.w	r1, r1, #4
 80061ea:	6021      	str	r1, [r4, #0]
 80061ec:	d04b      	beq.n	8006286 <_printf_i+0x1a6>
 80061ee:	4616      	mov	r6, r2
 80061f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80061f4:	fb03 5711 	mls	r7, r3, r1, r5
 80061f8:	5dc7      	ldrb	r7, [r0, r7]
 80061fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061fe:	462f      	mov	r7, r5
 8006200:	42bb      	cmp	r3, r7
 8006202:	460d      	mov	r5, r1
 8006204:	d9f4      	bls.n	80061f0 <_printf_i+0x110>
 8006206:	2b08      	cmp	r3, #8
 8006208:	d10b      	bne.n	8006222 <_printf_i+0x142>
 800620a:	6823      	ldr	r3, [r4, #0]
 800620c:	07df      	lsls	r7, r3, #31
 800620e:	d508      	bpl.n	8006222 <_printf_i+0x142>
 8006210:	6923      	ldr	r3, [r4, #16]
 8006212:	6861      	ldr	r1, [r4, #4]
 8006214:	4299      	cmp	r1, r3
 8006216:	bfde      	ittt	le
 8006218:	2330      	movle	r3, #48	@ 0x30
 800621a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800621e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006222:	1b92      	subs	r2, r2, r6
 8006224:	6122      	str	r2, [r4, #16]
 8006226:	f8cd a000 	str.w	sl, [sp]
 800622a:	464b      	mov	r3, r9
 800622c:	aa03      	add	r2, sp, #12
 800622e:	4621      	mov	r1, r4
 8006230:	4640      	mov	r0, r8
 8006232:	f7ff fee7 	bl	8006004 <_printf_common>
 8006236:	3001      	adds	r0, #1
 8006238:	d14a      	bne.n	80062d0 <_printf_i+0x1f0>
 800623a:	f04f 30ff 	mov.w	r0, #4294967295
 800623e:	b004      	add	sp, #16
 8006240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006244:	6823      	ldr	r3, [r4, #0]
 8006246:	f043 0320 	orr.w	r3, r3, #32
 800624a:	6023      	str	r3, [r4, #0]
 800624c:	4832      	ldr	r0, [pc, #200]	@ (8006318 <_printf_i+0x238>)
 800624e:	2778      	movs	r7, #120	@ 0x78
 8006250:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006254:	6823      	ldr	r3, [r4, #0]
 8006256:	6831      	ldr	r1, [r6, #0]
 8006258:	061f      	lsls	r7, r3, #24
 800625a:	f851 5b04 	ldr.w	r5, [r1], #4
 800625e:	d402      	bmi.n	8006266 <_printf_i+0x186>
 8006260:	065f      	lsls	r7, r3, #25
 8006262:	bf48      	it	mi
 8006264:	b2ad      	uxthmi	r5, r5
 8006266:	6031      	str	r1, [r6, #0]
 8006268:	07d9      	lsls	r1, r3, #31
 800626a:	bf44      	itt	mi
 800626c:	f043 0320 	orrmi.w	r3, r3, #32
 8006270:	6023      	strmi	r3, [r4, #0]
 8006272:	b11d      	cbz	r5, 800627c <_printf_i+0x19c>
 8006274:	2310      	movs	r3, #16
 8006276:	e7ad      	b.n	80061d4 <_printf_i+0xf4>
 8006278:	4826      	ldr	r0, [pc, #152]	@ (8006314 <_printf_i+0x234>)
 800627a:	e7e9      	b.n	8006250 <_printf_i+0x170>
 800627c:	6823      	ldr	r3, [r4, #0]
 800627e:	f023 0320 	bic.w	r3, r3, #32
 8006282:	6023      	str	r3, [r4, #0]
 8006284:	e7f6      	b.n	8006274 <_printf_i+0x194>
 8006286:	4616      	mov	r6, r2
 8006288:	e7bd      	b.n	8006206 <_printf_i+0x126>
 800628a:	6833      	ldr	r3, [r6, #0]
 800628c:	6825      	ldr	r5, [r4, #0]
 800628e:	6961      	ldr	r1, [r4, #20]
 8006290:	1d18      	adds	r0, r3, #4
 8006292:	6030      	str	r0, [r6, #0]
 8006294:	062e      	lsls	r6, r5, #24
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	d501      	bpl.n	800629e <_printf_i+0x1be>
 800629a:	6019      	str	r1, [r3, #0]
 800629c:	e002      	b.n	80062a4 <_printf_i+0x1c4>
 800629e:	0668      	lsls	r0, r5, #25
 80062a0:	d5fb      	bpl.n	800629a <_printf_i+0x1ba>
 80062a2:	8019      	strh	r1, [r3, #0]
 80062a4:	2300      	movs	r3, #0
 80062a6:	6123      	str	r3, [r4, #16]
 80062a8:	4616      	mov	r6, r2
 80062aa:	e7bc      	b.n	8006226 <_printf_i+0x146>
 80062ac:	6833      	ldr	r3, [r6, #0]
 80062ae:	1d1a      	adds	r2, r3, #4
 80062b0:	6032      	str	r2, [r6, #0]
 80062b2:	681e      	ldr	r6, [r3, #0]
 80062b4:	6862      	ldr	r2, [r4, #4]
 80062b6:	2100      	movs	r1, #0
 80062b8:	4630      	mov	r0, r6
 80062ba:	f7fa f811 	bl	80002e0 <memchr>
 80062be:	b108      	cbz	r0, 80062c4 <_printf_i+0x1e4>
 80062c0:	1b80      	subs	r0, r0, r6
 80062c2:	6060      	str	r0, [r4, #4]
 80062c4:	6863      	ldr	r3, [r4, #4]
 80062c6:	6123      	str	r3, [r4, #16]
 80062c8:	2300      	movs	r3, #0
 80062ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062ce:	e7aa      	b.n	8006226 <_printf_i+0x146>
 80062d0:	6923      	ldr	r3, [r4, #16]
 80062d2:	4632      	mov	r2, r6
 80062d4:	4649      	mov	r1, r9
 80062d6:	4640      	mov	r0, r8
 80062d8:	47d0      	blx	sl
 80062da:	3001      	adds	r0, #1
 80062dc:	d0ad      	beq.n	800623a <_printf_i+0x15a>
 80062de:	6823      	ldr	r3, [r4, #0]
 80062e0:	079b      	lsls	r3, r3, #30
 80062e2:	d413      	bmi.n	800630c <_printf_i+0x22c>
 80062e4:	68e0      	ldr	r0, [r4, #12]
 80062e6:	9b03      	ldr	r3, [sp, #12]
 80062e8:	4298      	cmp	r0, r3
 80062ea:	bfb8      	it	lt
 80062ec:	4618      	movlt	r0, r3
 80062ee:	e7a6      	b.n	800623e <_printf_i+0x15e>
 80062f0:	2301      	movs	r3, #1
 80062f2:	4632      	mov	r2, r6
 80062f4:	4649      	mov	r1, r9
 80062f6:	4640      	mov	r0, r8
 80062f8:	47d0      	blx	sl
 80062fa:	3001      	adds	r0, #1
 80062fc:	d09d      	beq.n	800623a <_printf_i+0x15a>
 80062fe:	3501      	adds	r5, #1
 8006300:	68e3      	ldr	r3, [r4, #12]
 8006302:	9903      	ldr	r1, [sp, #12]
 8006304:	1a5b      	subs	r3, r3, r1
 8006306:	42ab      	cmp	r3, r5
 8006308:	dcf2      	bgt.n	80062f0 <_printf_i+0x210>
 800630a:	e7eb      	b.n	80062e4 <_printf_i+0x204>
 800630c:	2500      	movs	r5, #0
 800630e:	f104 0619 	add.w	r6, r4, #25
 8006312:	e7f5      	b.n	8006300 <_printf_i+0x220>
 8006314:	08006761 	.word	0x08006761
 8006318:	08006772 	.word	0x08006772

0800631c <__sflush_r>:
 800631c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006324:	0716      	lsls	r6, r2, #28
 8006326:	4605      	mov	r5, r0
 8006328:	460c      	mov	r4, r1
 800632a:	d454      	bmi.n	80063d6 <__sflush_r+0xba>
 800632c:	684b      	ldr	r3, [r1, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	dc02      	bgt.n	8006338 <__sflush_r+0x1c>
 8006332:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006334:	2b00      	cmp	r3, #0
 8006336:	dd48      	ble.n	80063ca <__sflush_r+0xae>
 8006338:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800633a:	2e00      	cmp	r6, #0
 800633c:	d045      	beq.n	80063ca <__sflush_r+0xae>
 800633e:	2300      	movs	r3, #0
 8006340:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006344:	682f      	ldr	r7, [r5, #0]
 8006346:	6a21      	ldr	r1, [r4, #32]
 8006348:	602b      	str	r3, [r5, #0]
 800634a:	d030      	beq.n	80063ae <__sflush_r+0x92>
 800634c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800634e:	89a3      	ldrh	r3, [r4, #12]
 8006350:	0759      	lsls	r1, r3, #29
 8006352:	d505      	bpl.n	8006360 <__sflush_r+0x44>
 8006354:	6863      	ldr	r3, [r4, #4]
 8006356:	1ad2      	subs	r2, r2, r3
 8006358:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800635a:	b10b      	cbz	r3, 8006360 <__sflush_r+0x44>
 800635c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800635e:	1ad2      	subs	r2, r2, r3
 8006360:	2300      	movs	r3, #0
 8006362:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006364:	6a21      	ldr	r1, [r4, #32]
 8006366:	4628      	mov	r0, r5
 8006368:	47b0      	blx	r6
 800636a:	1c43      	adds	r3, r0, #1
 800636c:	89a3      	ldrh	r3, [r4, #12]
 800636e:	d106      	bne.n	800637e <__sflush_r+0x62>
 8006370:	6829      	ldr	r1, [r5, #0]
 8006372:	291d      	cmp	r1, #29
 8006374:	d82b      	bhi.n	80063ce <__sflush_r+0xb2>
 8006376:	4a2a      	ldr	r2, [pc, #168]	@ (8006420 <__sflush_r+0x104>)
 8006378:	40ca      	lsrs	r2, r1
 800637a:	07d6      	lsls	r6, r2, #31
 800637c:	d527      	bpl.n	80063ce <__sflush_r+0xb2>
 800637e:	2200      	movs	r2, #0
 8006380:	6062      	str	r2, [r4, #4]
 8006382:	04d9      	lsls	r1, r3, #19
 8006384:	6922      	ldr	r2, [r4, #16]
 8006386:	6022      	str	r2, [r4, #0]
 8006388:	d504      	bpl.n	8006394 <__sflush_r+0x78>
 800638a:	1c42      	adds	r2, r0, #1
 800638c:	d101      	bne.n	8006392 <__sflush_r+0x76>
 800638e:	682b      	ldr	r3, [r5, #0]
 8006390:	b903      	cbnz	r3, 8006394 <__sflush_r+0x78>
 8006392:	6560      	str	r0, [r4, #84]	@ 0x54
 8006394:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006396:	602f      	str	r7, [r5, #0]
 8006398:	b1b9      	cbz	r1, 80063ca <__sflush_r+0xae>
 800639a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800639e:	4299      	cmp	r1, r3
 80063a0:	d002      	beq.n	80063a8 <__sflush_r+0x8c>
 80063a2:	4628      	mov	r0, r5
 80063a4:	f7ff fbf4 	bl	8005b90 <_free_r>
 80063a8:	2300      	movs	r3, #0
 80063aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80063ac:	e00d      	b.n	80063ca <__sflush_r+0xae>
 80063ae:	2301      	movs	r3, #1
 80063b0:	4628      	mov	r0, r5
 80063b2:	47b0      	blx	r6
 80063b4:	4602      	mov	r2, r0
 80063b6:	1c50      	adds	r0, r2, #1
 80063b8:	d1c9      	bne.n	800634e <__sflush_r+0x32>
 80063ba:	682b      	ldr	r3, [r5, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d0c6      	beq.n	800634e <__sflush_r+0x32>
 80063c0:	2b1d      	cmp	r3, #29
 80063c2:	d001      	beq.n	80063c8 <__sflush_r+0xac>
 80063c4:	2b16      	cmp	r3, #22
 80063c6:	d11e      	bne.n	8006406 <__sflush_r+0xea>
 80063c8:	602f      	str	r7, [r5, #0]
 80063ca:	2000      	movs	r0, #0
 80063cc:	e022      	b.n	8006414 <__sflush_r+0xf8>
 80063ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063d2:	b21b      	sxth	r3, r3
 80063d4:	e01b      	b.n	800640e <__sflush_r+0xf2>
 80063d6:	690f      	ldr	r7, [r1, #16]
 80063d8:	2f00      	cmp	r7, #0
 80063da:	d0f6      	beq.n	80063ca <__sflush_r+0xae>
 80063dc:	0793      	lsls	r3, r2, #30
 80063de:	680e      	ldr	r6, [r1, #0]
 80063e0:	bf08      	it	eq
 80063e2:	694b      	ldreq	r3, [r1, #20]
 80063e4:	600f      	str	r7, [r1, #0]
 80063e6:	bf18      	it	ne
 80063e8:	2300      	movne	r3, #0
 80063ea:	eba6 0807 	sub.w	r8, r6, r7
 80063ee:	608b      	str	r3, [r1, #8]
 80063f0:	f1b8 0f00 	cmp.w	r8, #0
 80063f4:	dde9      	ble.n	80063ca <__sflush_r+0xae>
 80063f6:	6a21      	ldr	r1, [r4, #32]
 80063f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80063fa:	4643      	mov	r3, r8
 80063fc:	463a      	mov	r2, r7
 80063fe:	4628      	mov	r0, r5
 8006400:	47b0      	blx	r6
 8006402:	2800      	cmp	r0, #0
 8006404:	dc08      	bgt.n	8006418 <__sflush_r+0xfc>
 8006406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800640a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800640e:	81a3      	strh	r3, [r4, #12]
 8006410:	f04f 30ff 	mov.w	r0, #4294967295
 8006414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006418:	4407      	add	r7, r0
 800641a:	eba8 0800 	sub.w	r8, r8, r0
 800641e:	e7e7      	b.n	80063f0 <__sflush_r+0xd4>
 8006420:	20400001 	.word	0x20400001

08006424 <_fflush_r>:
 8006424:	b538      	push	{r3, r4, r5, lr}
 8006426:	690b      	ldr	r3, [r1, #16]
 8006428:	4605      	mov	r5, r0
 800642a:	460c      	mov	r4, r1
 800642c:	b913      	cbnz	r3, 8006434 <_fflush_r+0x10>
 800642e:	2500      	movs	r5, #0
 8006430:	4628      	mov	r0, r5
 8006432:	bd38      	pop	{r3, r4, r5, pc}
 8006434:	b118      	cbz	r0, 800643e <_fflush_r+0x1a>
 8006436:	6a03      	ldr	r3, [r0, #32]
 8006438:	b90b      	cbnz	r3, 800643e <_fflush_r+0x1a>
 800643a:	f7ff f9af 	bl	800579c <__sinit>
 800643e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d0f3      	beq.n	800642e <_fflush_r+0xa>
 8006446:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006448:	07d0      	lsls	r0, r2, #31
 800644a:	d404      	bmi.n	8006456 <_fflush_r+0x32>
 800644c:	0599      	lsls	r1, r3, #22
 800644e:	d402      	bmi.n	8006456 <_fflush_r+0x32>
 8006450:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006452:	f7ff fb9a 	bl	8005b8a <__retarget_lock_acquire_recursive>
 8006456:	4628      	mov	r0, r5
 8006458:	4621      	mov	r1, r4
 800645a:	f7ff ff5f 	bl	800631c <__sflush_r>
 800645e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006460:	07da      	lsls	r2, r3, #31
 8006462:	4605      	mov	r5, r0
 8006464:	d4e4      	bmi.n	8006430 <_fflush_r+0xc>
 8006466:	89a3      	ldrh	r3, [r4, #12]
 8006468:	059b      	lsls	r3, r3, #22
 800646a:	d4e1      	bmi.n	8006430 <_fflush_r+0xc>
 800646c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800646e:	f7ff fb8d 	bl	8005b8c <__retarget_lock_release_recursive>
 8006472:	e7dd      	b.n	8006430 <_fflush_r+0xc>

08006474 <__swhatbuf_r>:
 8006474:	b570      	push	{r4, r5, r6, lr}
 8006476:	460c      	mov	r4, r1
 8006478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800647c:	2900      	cmp	r1, #0
 800647e:	b096      	sub	sp, #88	@ 0x58
 8006480:	4615      	mov	r5, r2
 8006482:	461e      	mov	r6, r3
 8006484:	da0d      	bge.n	80064a2 <__swhatbuf_r+0x2e>
 8006486:	89a3      	ldrh	r3, [r4, #12]
 8006488:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800648c:	f04f 0100 	mov.w	r1, #0
 8006490:	bf14      	ite	ne
 8006492:	2340      	movne	r3, #64	@ 0x40
 8006494:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006498:	2000      	movs	r0, #0
 800649a:	6031      	str	r1, [r6, #0]
 800649c:	602b      	str	r3, [r5, #0]
 800649e:	b016      	add	sp, #88	@ 0x58
 80064a0:	bd70      	pop	{r4, r5, r6, pc}
 80064a2:	466a      	mov	r2, sp
 80064a4:	f000 f848 	bl	8006538 <_fstat_r>
 80064a8:	2800      	cmp	r0, #0
 80064aa:	dbec      	blt.n	8006486 <__swhatbuf_r+0x12>
 80064ac:	9901      	ldr	r1, [sp, #4]
 80064ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80064b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80064b6:	4259      	negs	r1, r3
 80064b8:	4159      	adcs	r1, r3
 80064ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80064be:	e7eb      	b.n	8006498 <__swhatbuf_r+0x24>

080064c0 <__smakebuf_r>:
 80064c0:	898b      	ldrh	r3, [r1, #12]
 80064c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064c4:	079d      	lsls	r5, r3, #30
 80064c6:	4606      	mov	r6, r0
 80064c8:	460c      	mov	r4, r1
 80064ca:	d507      	bpl.n	80064dc <__smakebuf_r+0x1c>
 80064cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80064d0:	6023      	str	r3, [r4, #0]
 80064d2:	6123      	str	r3, [r4, #16]
 80064d4:	2301      	movs	r3, #1
 80064d6:	6163      	str	r3, [r4, #20]
 80064d8:	b003      	add	sp, #12
 80064da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064dc:	ab01      	add	r3, sp, #4
 80064de:	466a      	mov	r2, sp
 80064e0:	f7ff ffc8 	bl	8006474 <__swhatbuf_r>
 80064e4:	9f00      	ldr	r7, [sp, #0]
 80064e6:	4605      	mov	r5, r0
 80064e8:	4639      	mov	r1, r7
 80064ea:	4630      	mov	r0, r6
 80064ec:	f7ff fbbc 	bl	8005c68 <_malloc_r>
 80064f0:	b948      	cbnz	r0, 8006506 <__smakebuf_r+0x46>
 80064f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064f6:	059a      	lsls	r2, r3, #22
 80064f8:	d4ee      	bmi.n	80064d8 <__smakebuf_r+0x18>
 80064fa:	f023 0303 	bic.w	r3, r3, #3
 80064fe:	f043 0302 	orr.w	r3, r3, #2
 8006502:	81a3      	strh	r3, [r4, #12]
 8006504:	e7e2      	b.n	80064cc <__smakebuf_r+0xc>
 8006506:	89a3      	ldrh	r3, [r4, #12]
 8006508:	6020      	str	r0, [r4, #0]
 800650a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800650e:	81a3      	strh	r3, [r4, #12]
 8006510:	9b01      	ldr	r3, [sp, #4]
 8006512:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006516:	b15b      	cbz	r3, 8006530 <__smakebuf_r+0x70>
 8006518:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800651c:	4630      	mov	r0, r6
 800651e:	f000 f81d 	bl	800655c <_isatty_r>
 8006522:	b128      	cbz	r0, 8006530 <__smakebuf_r+0x70>
 8006524:	89a3      	ldrh	r3, [r4, #12]
 8006526:	f023 0303 	bic.w	r3, r3, #3
 800652a:	f043 0301 	orr.w	r3, r3, #1
 800652e:	81a3      	strh	r3, [r4, #12]
 8006530:	89a3      	ldrh	r3, [r4, #12]
 8006532:	431d      	orrs	r5, r3
 8006534:	81a5      	strh	r5, [r4, #12]
 8006536:	e7cf      	b.n	80064d8 <__smakebuf_r+0x18>

08006538 <_fstat_r>:
 8006538:	b538      	push	{r3, r4, r5, lr}
 800653a:	4d07      	ldr	r5, [pc, #28]	@ (8006558 <_fstat_r+0x20>)
 800653c:	2300      	movs	r3, #0
 800653e:	4604      	mov	r4, r0
 8006540:	4608      	mov	r0, r1
 8006542:	4611      	mov	r1, r2
 8006544:	602b      	str	r3, [r5, #0]
 8006546:	f7fa faa1 	bl	8000a8c <_fstat>
 800654a:	1c43      	adds	r3, r0, #1
 800654c:	d102      	bne.n	8006554 <_fstat_r+0x1c>
 800654e:	682b      	ldr	r3, [r5, #0]
 8006550:	b103      	cbz	r3, 8006554 <_fstat_r+0x1c>
 8006552:	6023      	str	r3, [r4, #0]
 8006554:	bd38      	pop	{r3, r4, r5, pc}
 8006556:	bf00      	nop
 8006558:	24000264 	.word	0x24000264

0800655c <_isatty_r>:
 800655c:	b538      	push	{r3, r4, r5, lr}
 800655e:	4d06      	ldr	r5, [pc, #24]	@ (8006578 <_isatty_r+0x1c>)
 8006560:	2300      	movs	r3, #0
 8006562:	4604      	mov	r4, r0
 8006564:	4608      	mov	r0, r1
 8006566:	602b      	str	r3, [r5, #0]
 8006568:	f7fa faa0 	bl	8000aac <_isatty>
 800656c:	1c43      	adds	r3, r0, #1
 800656e:	d102      	bne.n	8006576 <_isatty_r+0x1a>
 8006570:	682b      	ldr	r3, [r5, #0]
 8006572:	b103      	cbz	r3, 8006576 <_isatty_r+0x1a>
 8006574:	6023      	str	r3, [r4, #0]
 8006576:	bd38      	pop	{r3, r4, r5, pc}
 8006578:	24000264 	.word	0x24000264

0800657c <_sbrk_r>:
 800657c:	b538      	push	{r3, r4, r5, lr}
 800657e:	4d06      	ldr	r5, [pc, #24]	@ (8006598 <_sbrk_r+0x1c>)
 8006580:	2300      	movs	r3, #0
 8006582:	4604      	mov	r4, r0
 8006584:	4608      	mov	r0, r1
 8006586:	602b      	str	r3, [r5, #0]
 8006588:	f7fa faa8 	bl	8000adc <_sbrk>
 800658c:	1c43      	adds	r3, r0, #1
 800658e:	d102      	bne.n	8006596 <_sbrk_r+0x1a>
 8006590:	682b      	ldr	r3, [r5, #0]
 8006592:	b103      	cbz	r3, 8006596 <_sbrk_r+0x1a>
 8006594:	6023      	str	r3, [r4, #0]
 8006596:	bd38      	pop	{r3, r4, r5, pc}
 8006598:	24000264 	.word	0x24000264

0800659c <_init>:
 800659c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800659e:	bf00      	nop
 80065a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065a2:	bc08      	pop	{r3}
 80065a4:	469e      	mov	lr, r3
 80065a6:	4770      	bx	lr

080065a8 <_fini>:
 80065a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065aa:	bf00      	nop
 80065ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ae:	bc08      	pop	{r3}
 80065b0:	469e      	mov	lr, r3
 80065b2:	4770      	bx	lr

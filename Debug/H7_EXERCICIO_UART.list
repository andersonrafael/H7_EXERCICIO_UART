
H7_EXERCICIO_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007954  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08007bf4  08007bf4  00008bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007e64  08007e64  00008e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007e6c  08007e6c  00008e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08007e70  08007e70  00008e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  08007e74  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000254  2400006c  08007ee0  0000906c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240002c0  08007ee0  000092c0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015744  00000000  00000000  0000909a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002932  00000000  00000000  0001e7de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010d0  00000000  00000000  00021110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d12  00000000  00000000  000221e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038d11  00000000  00000000  00022ef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016700  00000000  00000000  0005bc03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00167648  00000000  00000000  00072303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d994b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004e28  00000000  00000000  001d9990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  001de7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400006c 	.word	0x2400006c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007bdc 	.word	0x08007bdc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000070 	.word	0x24000070
 80002dc:	08007bdc 	.word	0x08007bdc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	@ 0x28
 80006b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c2:	4b42      	ldr	r3, [pc, #264]	@ (80007cc <MX_GPIO_Init+0x120>)
 80006c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006c8:	4a40      	ldr	r2, [pc, #256]	@ (80007cc <MX_GPIO_Init+0x120>)
 80006ca:	f043 0304 	orr.w	r3, r3, #4
 80006ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006d2:	4b3e      	ldr	r3, [pc, #248]	@ (80007cc <MX_GPIO_Init+0x120>)
 80006d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d8:	f003 0304 	and.w	r3, r3, #4
 80006dc:	613b      	str	r3, [r7, #16]
 80006de:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e0:	4b3a      	ldr	r3, [pc, #232]	@ (80007cc <MX_GPIO_Init+0x120>)
 80006e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e6:	4a39      	ldr	r2, [pc, #228]	@ (80007cc <MX_GPIO_Init+0x120>)
 80006e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006f0:	4b36      	ldr	r3, [pc, #216]	@ (80007cc <MX_GPIO_Init+0x120>)
 80006f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fe:	4b33      	ldr	r3, [pc, #204]	@ (80007cc <MX_GPIO_Init+0x120>)
 8000700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000704:	4a31      	ldr	r2, [pc, #196]	@ (80007cc <MX_GPIO_Init+0x120>)
 8000706:	f043 0302 	orr.w	r3, r3, #2
 800070a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800070e:	4b2f      	ldr	r3, [pc, #188]	@ (80007cc <MX_GPIO_Init+0x120>)
 8000710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000714:	f003 0302 	and.w	r3, r3, #2
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800071c:	4b2b      	ldr	r3, [pc, #172]	@ (80007cc <MX_GPIO_Init+0x120>)
 800071e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000722:	4a2a      	ldr	r2, [pc, #168]	@ (80007cc <MX_GPIO_Init+0x120>)
 8000724:	f043 0310 	orr.w	r3, r3, #16
 8000728:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800072c:	4b27      	ldr	r3, [pc, #156]	@ (80007cc <MX_GPIO_Init+0x120>)
 800072e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000732:	f003 0310 	and.w	r3, r3, #16
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073a:	4b24      	ldr	r3, [pc, #144]	@ (80007cc <MX_GPIO_Init+0x120>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000740:	4a22      	ldr	r2, [pc, #136]	@ (80007cc <MX_GPIO_Init+0x120>)
 8000742:	f043 0308 	orr.w	r3, r3, #8
 8000746:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800074a:	4b20      	ldr	r3, [pc, #128]	@ (80007cc <MX_GPIO_Init+0x120>)
 800074c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000750:	f003 0308 	and.w	r3, r3, #8
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	f244 0101 	movw	r1, #16385	@ 0x4001
 800075e:	481c      	ldr	r0, [pc, #112]	@ (80007d0 <MX_GPIO_Init+0x124>)
 8000760:	f001 f900 	bl	8001964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2102      	movs	r1, #2
 8000768:	481a      	ldr	r0, [pc, #104]	@ (80007d4 <MX_GPIO_Init+0x128>)
 800076a:	f001 f8fb 	bl	8001964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800076e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000774:	2300      	movs	r3, #0
 8000776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4619      	mov	r1, r3
 8000782:	4815      	ldr	r0, [pc, #84]	@ (80007d8 <MX_GPIO_Init+0x12c>)
 8000784:	f000 ff26 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000788:	f244 0301 	movw	r3, #16385	@ 0x4001
 800078c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078e:	2301      	movs	r3, #1
 8000790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000796:	2300      	movs	r3, #0
 8000798:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	4619      	mov	r1, r3
 80007a0:	480b      	ldr	r0, [pc, #44]	@ (80007d0 <MX_GPIO_Init+0x124>)
 80007a2:	f000 ff17 	bl	80015d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007a6:	2302      	movs	r3, #2
 80007a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	4805      	ldr	r0, [pc, #20]	@ (80007d4 <MX_GPIO_Init+0x128>)
 80007be:	f000 ff09 	bl	80015d4 <HAL_GPIO_Init>

}
 80007c2:	bf00      	nop
 80007c4:	3728      	adds	r7, #40	@ 0x28
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	58024400 	.word	0x58024400
 80007d0:	58020400 	.word	0x58020400
 80007d4:	58021000 	.word	0x58021000
 80007d8:	58020800 	.word	0x58020800

080007dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e0:	f000 fd52 	bl	8001288 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e4:	f000 f86e 	bl	80008c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e8:	f7ff ff60 	bl	80006ac <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007ec:	f000 fc54 	bl	8001098 <MX_USART3_UART_Init>
  MX_TIM1_Init(); // Inicialize o Timer configurado (ex: MX_TIM1_Init();)
 80007f0:	f000 fb48 	bl	8000e84 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // Inicia o PWM
  HAL_TIM_PWM_Start(&PWM_TIMER_HANDLE, PWM_TIMER_CHANNEL);
 80007f4:	2100      	movs	r1, #0
 80007f6:	4828      	ldr	r0, [pc, #160]	@ (8000898 <main+0xbc>)
 80007f8:	f003 ffd2 	bl	80047a0 <HAL_TIM_PWM_Start>
  Set_PWM_Duty(0); // Inicia com o PWM em 0%
 80007fc:	2000      	movs	r0, #0
 80007fe:	f000 f8f3 	bl	80009e8 <Set_PWM_Duty>
  printf(">> PWM iniciado em 0%%\r\n");
 8000802:	4826      	ldr	r0, [pc, #152]	@ (800089c <main+0xc0>)
 8000804:	f006 fb20 	bl	8006e48 <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    Display_Menu();
 8000808:	f000 f8c6 	bl	8000998 <Display_Menu>

    // Aguarda entrada do usuário
    if (HAL_UART_Receive(&huart3, &rx_data, 1, HAL_MAX_DELAY) == HAL_OK)
 800080c:	f04f 33ff 	mov.w	r3, #4294967295
 8000810:	2201      	movs	r2, #1
 8000812:	4923      	ldr	r1, [pc, #140]	@ (80008a0 <main+0xc4>)
 8000814:	4823      	ldr	r0, [pc, #140]	@ (80008a4 <main+0xc8>)
 8000816:	f005 f901 	bl	8005a1c <HAL_UART_Receive>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d1f3      	bne.n	8000808 <main+0x2c>
    {
      switch (rx_data)
 8000820:	4b1f      	ldr	r3, [pc, #124]	@ (80008a0 <main+0xc4>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	3b31      	subs	r3, #49	@ 0x31
 8000826:	2b03      	cmp	r3, #3
 8000828:	d830      	bhi.n	800088c <main+0xb0>
 800082a:	a201      	add	r2, pc, #4	@ (adr r2, 8000830 <main+0x54>)
 800082c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000830:	08000841 	.word	0x08000841
 8000834:	0800085b 	.word	0x0800085b
 8000838:	08000875 	.word	0x08000875
 800083c:	08000881 	.word	0x08000881
      {
        case '1':
          printf(">> Duty fixo 20%% selecionado.\r\n");
 8000840:	4819      	ldr	r0, [pc, #100]	@ (80008a8 <main+0xcc>)
 8000842:	f006 fb01 	bl	8006e48 <iprintf>
          Set_PWM_Duty(20);
 8000846:	2014      	movs	r0, #20
 8000848:	f000 f8ce 	bl	80009e8 <Set_PWM_Duty>
          printf(">> Duty atual: %d%%\r\n", current_duty_cycle);
 800084c:	4b17      	ldr	r3, [pc, #92]	@ (80008ac <main+0xd0>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	4619      	mov	r1, r3
 8000852:	4817      	ldr	r0, [pc, #92]	@ (80008b0 <main+0xd4>)
 8000854:	f006 faf8 	bl	8006e48 <iprintf>
          break;
 8000858:	e01c      	b.n	8000894 <main+0xb8>

        case '2':
          printf(">> Duty fixo 80%% selecionado.\r\n");
 800085a:	4816      	ldr	r0, [pc, #88]	@ (80008b4 <main+0xd8>)
 800085c:	f006 faf4 	bl	8006e48 <iprintf>
          Set_PWM_Duty(80);
 8000860:	2050      	movs	r0, #80	@ 0x50
 8000862:	f000 f8c1 	bl	80009e8 <Set_PWM_Duty>
          printf(">> Duty atual: %d%%\r\n", current_duty_cycle);
 8000866:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <main+0xd0>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	4619      	mov	r1, r3
 800086c:	4810      	ldr	r0, [pc, #64]	@ (80008b0 <main+0xd4>)
 800086e:	f006 faeb 	bl	8006e48 <iprintf>
          break;
 8000872:	e00f      	b.n	8000894 <main+0xb8>

        case '3':
          printf(">> Ramp 0-100%% em 5s selecionado.\r\n");
 8000874:	4810      	ldr	r0, [pc, #64]	@ (80008b8 <main+0xdc>)
 8000876:	f006 fae7 	bl	8006e48 <iprintf>
          ramp_pwm();
 800087a:	f000 f8eb 	bl	8000a54 <ramp_pwm>
          break;
 800087e:	e009      	b.n	8000894 <main+0xb8>

        case '4':
          printf(">> Incremento de 10%% por clique no botao. Pressione o botao de usuario.\r\n");
 8000880:	480e      	ldr	r0, [pc, #56]	@ (80008bc <main+0xe0>)
 8000882:	f006 fae1 	bl	8006e48 <iprintf>
          handle_button_increment();
 8000886:	f000 f91b 	bl	8000ac0 <handle_button_increment>
          break;
 800088a:	e003      	b.n	8000894 <main+0xb8>

        default:
          printf(">> Opcao invalida. Tente novamente.\r\n");
 800088c:	480c      	ldr	r0, [pc, #48]	@ (80008c0 <main+0xe4>)
 800088e:	f006 fb43 	bl	8006f18 <puts>
          break;
 8000892:	bf00      	nop
    Display_Menu();
 8000894:	e7b8      	b.n	8000808 <main+0x2c>
 8000896:	bf00      	nop
 8000898:	24000090 	.word	0x24000090
 800089c:	08007bf4 	.word	0x08007bf4
 80008a0:	24000088 	.word	0x24000088
 80008a4:	240000dc 	.word	0x240000dc
 80008a8:	08007c10 	.word	0x08007c10
 80008ac:	24000089 	.word	0x24000089
 80008b0:	08007c34 	.word	0x08007c34
 80008b4:	08007c4c 	.word	0x08007c4c
 80008b8:	08007c70 	.word	0x08007c70
 80008bc:	08007c98 	.word	0x08007c98
 80008c0:	08007ce4 	.word	0x08007ce4

080008c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b09c      	sub	sp, #112	@ 0x70
 80008c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ce:	224c      	movs	r2, #76	@ 0x4c
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f006 fc00 	bl	80070d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2220      	movs	r2, #32
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f006 fbfa 	bl	80070d8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008e4:	2002      	movs	r0, #2
 80008e6:	f001 f857 	bl	8001998 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008ea:	2300      	movs	r3, #0
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	4b28      	ldr	r3, [pc, #160]	@ (8000990 <SystemClock_Config+0xcc>)
 80008f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008f2:	4a27      	ldr	r2, [pc, #156]	@ (8000990 <SystemClock_Config+0xcc>)
 80008f4:	f023 0301 	bic.w	r3, r3, #1
 80008f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008fa:	4b25      	ldr	r3, [pc, #148]	@ (8000990 <SystemClock_Config+0xcc>)
 80008fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	4b23      	ldr	r3, [pc, #140]	@ (8000994 <SystemClock_Config+0xd0>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800090c:	4a21      	ldr	r2, [pc, #132]	@ (8000994 <SystemClock_Config+0xd0>)
 800090e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000912:	6193      	str	r3, [r2, #24]
 8000914:	4b1f      	ldr	r3, [pc, #124]	@ (8000994 <SystemClock_Config+0xd0>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000920:	bf00      	nop
 8000922:	4b1c      	ldr	r3, [pc, #112]	@ (8000994 <SystemClock_Config+0xd0>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800092a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800092e:	d1f8      	bne.n	8000922 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000930:	2302      	movs	r3, #2
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000934:	2301      	movs	r3, #1
 8000936:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000938:	2340      	movs	r3, #64	@ 0x40
 800093a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800093c:	2300      	movs	r3, #0
 800093e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000940:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000944:	4618      	mov	r0, r3
 8000946:	f001 f861 	bl	8001a0c <HAL_RCC_OscConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000950:	f000 f90a 	bl	8000b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000954:	233f      	movs	r3, #63	@ 0x3f
 8000956:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000958:	2300      	movs	r3, #0
 800095a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000970:	2300      	movs	r3, #0
 8000972:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	2101      	movs	r1, #1
 8000978:	4618      	mov	r0, r3
 800097a:	f001 fca1 	bl	80022c0 <HAL_RCC_ClockConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000984:	f000 f8f0 	bl	8000b68 <Error_Handler>
  }
}
 8000988:	bf00      	nop
 800098a:	3770      	adds	r7, #112	@ 0x70
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	58000400 	.word	0x58000400
 8000994:	58024800 	.word	0x58024800

08000998 <Display_Menu>:
/* USER CODE BEGIN 4 */
/**
  * @brief Exibe o menu de opções via UART.
  * @retval None
  */
void Display_Menu(void) {
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
    printf("\r\n"); // Nova linha para melhor formatação
 800099c:	480b      	ldr	r0, [pc, #44]	@ (80009cc <Display_Menu+0x34>)
 800099e:	f006 fabb 	bl	8006f18 <puts>
    printf("===== CONTROLE DE PWM =====\r\n");
 80009a2:	480b      	ldr	r0, [pc, #44]	@ (80009d0 <Display_Menu+0x38>)
 80009a4:	f006 fab8 	bl	8006f18 <puts>
    printf("[1] Duty fixo 20%%\r\n");
 80009a8:	480a      	ldr	r0, [pc, #40]	@ (80009d4 <Display_Menu+0x3c>)
 80009aa:	f006 fa4d 	bl	8006e48 <iprintf>
    printf("[2] Duty fixo 80%%\r\n");
 80009ae:	480a      	ldr	r0, [pc, #40]	@ (80009d8 <Display_Menu+0x40>)
 80009b0:	f006 fa4a 	bl	8006e48 <iprintf>
    printf("[3] Ramp 0-100%% em 5 s\r\n");
 80009b4:	4809      	ldr	r0, [pc, #36]	@ (80009dc <Display_Menu+0x44>)
 80009b6:	f006 fa47 	bl	8006e48 <iprintf>
    printf("[4] +10%% por clique no botao\r\n");
 80009ba:	4809      	ldr	r0, [pc, #36]	@ (80009e0 <Display_Menu+0x48>)
 80009bc:	f006 fa44 	bl	8006e48 <iprintf>
    printf("Selecione a opcao: ");
 80009c0:	4808      	ldr	r0, [pc, #32]	@ (80009e4 <Display_Menu+0x4c>)
 80009c2:	f006 fa41 	bl	8006e48 <iprintf>
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	08007d0c 	.word	0x08007d0c
 80009d0:	08007d10 	.word	0x08007d10
 80009d4:	08007d30 	.word	0x08007d30
 80009d8:	08007d48 	.word	0x08007d48
 80009dc:	08007d60 	.word	0x08007d60
 80009e0:	08007d7c 	.word	0x08007d7c
 80009e4:	08007d9c 	.word	0x08007d9c

080009e8 <Set_PWM_Duty>:
/**
  * @brief Ajusta o duty cycle do PWM.
  * @param duty_percent: O duty cycle em porcentagem (0-100).
  * @retval None
  */
void Set_PWM_Duty(uint8_t duty_percent) {
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	71fb      	strb	r3, [r7, #7]
    if (duty_percent > 100) {
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	2b64      	cmp	r3, #100	@ 0x64
 80009f6:	d901      	bls.n	80009fc <Set_PWM_Duty+0x14>
        duty_percent = 100;
 80009f8:	2364      	movs	r3, #100	@ 0x64
 80009fa:	71fb      	strb	r3, [r7, #7]
    }
    // Calcula o valor do registrador de comparação (CCR)
    // O valor do CCR é duty_percent * PWM_PERIOD / 100
    uint32_t ccr_value = (uint32_t)((float)PWM_PERIOD * duty_percent / 100.0f);
 80009fc:	4b12      	ldr	r3, [pc, #72]	@ (8000a48 <Set_PWM_Duty+0x60>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a02:	3301      	adds	r3, #1
 8000a04:	ee07 3a90 	vmov	s15, r3
 8000a08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	ee07 3a90 	vmov	s15, r3
 8000a12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a1a:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8000a4c <Set_PWM_Duty+0x64>
 8000a1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a26:	ee17 3a90 	vmov	r3, s15
 8000a2a:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_COMPARE(&PWM_TIMER_HANDLE, PWM_TIMER_CHANNEL, ccr_value);
 8000a2c:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <Set_PWM_Duty+0x60>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	68fa      	ldr	r2, [r7, #12]
 8000a32:	635a      	str	r2, [r3, #52]	@ 0x34
    current_duty_cycle = duty_percent; // Atualiza o duty cycle atual
 8000a34:	4a06      	ldr	r2, [pc, #24]	@ (8000a50 <Set_PWM_Duty+0x68>)
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	7013      	strb	r3, [r2, #0]
}
 8000a3a:	bf00      	nop
 8000a3c:	3714      	adds	r7, #20
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	24000090 	.word	0x24000090
 8000a4c:	42c80000 	.word	0x42c80000
 8000a50:	24000089 	.word	0x24000089

08000a54 <ramp_pwm>:

/**
  * @brief Implementa uma rampa de PWM de 0% a 100% em 5 segundos.
  * @retval None
  */
void ramp_pwm(void) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
    uint16_t delay_ms = 5000 / 101; // 5 segundos (5000 ms) dividido por 101 passos (0 a 100)
 8000a5a:	2331      	movs	r3, #49	@ 0x31
 8000a5c:	80bb      	strh	r3, [r7, #4]
    for (uint8_t duty = 0; duty <= 100; duty++) {
 8000a5e:	2300      	movs	r3, #0
 8000a60:	71fb      	strb	r3, [r7, #7]
 8000a62:	e01c      	b.n	8000a9e <ramp_pwm+0x4a>
        Set_PWM_Duty(duty);
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff ffbe 	bl	80009e8 <Set_PWM_Duty>
        // Imprime a cada 10%, incluindo 0% e 100%
                if (duty % 10 == 0) { // Se o duty for múltiplo de 10
 8000a6c:	79fa      	ldrb	r2, [r7, #7]
 8000a6e:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <ramp_pwm+0x60>)
 8000a70:	fba3 1302 	umull	r1, r3, r3, r2
 8000a74:	08d9      	lsrs	r1, r3, #3
 8000a76:	460b      	mov	r3, r1
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	440b      	add	r3, r1
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	1ad3      	subs	r3, r2, r3
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d104      	bne.n	8000a90 <ramp_pwm+0x3c>
                    printf(">> Rampa: Duty atual %d%%\r\n", duty);
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	480b      	ldr	r0, [pc, #44]	@ (8000ab8 <ramp_pwm+0x64>)
 8000a8c:	f006 f9dc 	bl	8006e48 <iprintf>
                }
                HAL_Delay(delay_ms);
 8000a90:	88bb      	ldrh	r3, [r7, #4]
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 fc8a 	bl	80013ac <HAL_Delay>
    for (uint8_t duty = 0; duty <= 100; duty++) {
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	71fb      	strb	r3, [r7, #7]
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	2b64      	cmp	r3, #100	@ 0x64
 8000aa2:	d9df      	bls.n	8000a64 <ramp_pwm+0x10>

    }
    printf(">> Rampa concluida. Duty cycle em 100%%\r\n");
 8000aa4:	4805      	ldr	r0, [pc, #20]	@ (8000abc <ramp_pwm+0x68>)
 8000aa6:	f006 f9cf 	bl	8006e48 <iprintf>
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	cccccccd 	.word	0xcccccccd
 8000ab8:	08007db0 	.word	0x08007db0
 8000abc:	08007dcc 	.word	0x08007dcc

08000ac0 <handle_button_increment>:

/**
  * @brief Lida com o incremento de 10% no duty cycle via botão.
  * @retval None
  */
void handle_button_increment(void) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
    uint8_t last_duty = current_duty_cycle;
 8000ac6:	4b23      	ldr	r3, [pc, #140]	@ (8000b54 <handle_button_increment+0x94>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	71fb      	strb	r3, [r7, #7]
    // Loop para esperar o botão ou uma nova entrada UART
    while (HAL_UART_Receive(&huart3, &rx_data, 1, 0) != HAL_OK) { // Non-blocking receive
 8000acc:	e02e      	b.n	8000b2c <handle_button_increment+0x6c>
        if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_RESET) { // Botão pressionado (assumindo pull-up)
 8000ace:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ad2:	4821      	ldr	r0, [pc, #132]	@ (8000b58 <handle_button_increment+0x98>)
 8000ad4:	f000 ff2e 	bl	8001934 <HAL_GPIO_ReadPin>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d123      	bne.n	8000b26 <handle_button_increment+0x66>
            HAL_Delay(50); // Debounce
 8000ade:	2032      	movs	r0, #50	@ 0x32
 8000ae0:	f000 fc64 	bl	80013ac <HAL_Delay>
            while(HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_RESET); // Espera soltar o botão
 8000ae4:	bf00      	nop
 8000ae6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000aea:	481b      	ldr	r0, [pc, #108]	@ (8000b58 <handle_button_increment+0x98>)
 8000aec:	f000 ff22 	bl	8001934 <HAL_GPIO_ReadPin>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d0f7      	beq.n	8000ae6 <handle_button_increment+0x26>

            current_duty_cycle += 10;
 8000af6:	4b17      	ldr	r3, [pc, #92]	@ (8000b54 <handle_button_increment+0x94>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	330a      	adds	r3, #10
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <handle_button_increment+0x94>)
 8000b00:	701a      	strb	r2, [r3, #0]
            if (current_duty_cycle > 100) {
 8000b02:	4b14      	ldr	r3, [pc, #80]	@ (8000b54 <handle_button_increment+0x94>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b64      	cmp	r3, #100	@ 0x64
 8000b08:	d902      	bls.n	8000b10 <handle_button_increment+0x50>
                current_duty_cycle = 0;
 8000b0a:	4b12      	ldr	r3, [pc, #72]	@ (8000b54 <handle_button_increment+0x94>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
            }
            Set_PWM_Duty(current_duty_cycle);
 8000b10:	4b10      	ldr	r3, [pc, #64]	@ (8000b54 <handle_button_increment+0x94>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff ff67 	bl	80009e8 <Set_PWM_Duty>
            printf(">> Duty atual: %d%%\r\n", current_duty_cycle);
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <handle_button_increment+0x94>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	4619      	mov	r1, r3
 8000b20:	480e      	ldr	r0, [pc, #56]	@ (8000b5c <handle_button_increment+0x9c>)
 8000b22:	f006 f991 	bl	8006e48 <iprintf>
        }
        // Pequeno delay para evitar loop muito rápido
        HAL_Delay(10);
 8000b26:	200a      	movs	r0, #10
 8000b28:	f000 fc40 	bl	80013ac <HAL_Delay>
    while (HAL_UART_Receive(&huart3, &rx_data, 1, 0) != HAL_OK) { // Non-blocking receive
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	2201      	movs	r2, #1
 8000b30:	490b      	ldr	r1, [pc, #44]	@ (8000b60 <handle_button_increment+0xa0>)
 8000b32:	480c      	ldr	r0, [pc, #48]	@ (8000b64 <handle_button_increment+0xa4>)
 8000b34:	f004 ff72 	bl	8005a1c <HAL_UART_Receive>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d1c7      	bne.n	8000ace <handle_button_increment+0xe>
    }
    // Se uma nova entrada UART for recebida, saia da função para o loop principal
    // A variável rx_data já conterá o novo valor digitado.
    // Restaura o último duty cycle para a opção 4, caso não seja mantido pela próxima opção.
    if (rx_data != '4') {
 8000b3e:	4b08      	ldr	r3, [pc, #32]	@ (8000b60 <handle_button_increment+0xa0>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b34      	cmp	r3, #52	@ 0x34
 8000b44:	d002      	beq.n	8000b4c <handle_button_increment+0x8c>
        current_duty_cycle = last_duty;
 8000b46:	4a03      	ldr	r2, [pc, #12]	@ (8000b54 <handle_button_increment+0x94>)
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	7013      	strb	r3, [r2, #0]
    }
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	24000089 	.word	0x24000089
 8000b58:	58020800 	.word	0x58020800
 8000b5c:	08007c34 	.word	0x08007c34
 8000b60:	24000088 	.word	0x24000088
 8000b64:	240000dc 	.word	0x240000dc

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6c:	b672      	cpsid	i
}
 8000b6e:	bf00      	nop
  __disable_irq();


    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <Error_Handler+0x8>

08000b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba4 <HAL_MspInit+0x30>)
 8000b7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b80:	4a08      	ldr	r2, [pc, #32]	@ (8000ba4 <HAL_MspInit+0x30>)
 8000b82:	f043 0302 	orr.w	r3, r3, #2
 8000b86:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <HAL_MspInit+0x30>)
 8000b8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b90:	f003 0302 	and.w	r3, r3, #2
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	58024400 	.word	0x58024400

08000ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <NMI_Handler+0x4>

08000bb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <HardFault_Handler+0x4>

08000bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <MemManage_Handler+0x4>

08000bc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <BusFault_Handler+0x4>

08000bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <UsageFault_Handler+0x4>

08000bd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bfe:	f000 fbb5 	bl	800136c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b086      	sub	sp, #24
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	60f8      	str	r0, [r7, #12]
 8000c0e:	60b9      	str	r1, [r7, #8]
 8000c10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
 8000c16:	e00a      	b.n	8000c2e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c18:	f3af 8000 	nop.w
 8000c1c:	4601      	mov	r1, r0
 8000c1e:	68bb      	ldr	r3, [r7, #8]
 8000c20:	1c5a      	adds	r2, r3, #1
 8000c22:	60ba      	str	r2, [r7, #8]
 8000c24:	b2ca      	uxtb	r2, r1
 8000c26:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	617b      	str	r3, [r7, #20]
 8000c2e:	697a      	ldr	r2, [r7, #20]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	dbf0      	blt.n	8000c18 <_read+0x12>
  }

  return len;
 8000c36:	687b      	ldr	r3, [r7, #4]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3718      	adds	r7, #24
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c68:	605a      	str	r2, [r3, #4]
  return 0;
 8000c6a:	2300      	movs	r3, #0
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <_isatty>:

int _isatty(int file)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c80:	2301      	movs	r3, #1
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b085      	sub	sp, #20
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	60f8      	str	r0, [r7, #12]
 8000c96:	60b9      	str	r1, [r7, #8]
 8000c98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c9a:	2300      	movs	r3, #0
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb0:	4a14      	ldr	r2, [pc, #80]	@ (8000d04 <_sbrk+0x5c>)
 8000cb2:	4b15      	ldr	r3, [pc, #84]	@ (8000d08 <_sbrk+0x60>)
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cbc:	4b13      	ldr	r3, [pc, #76]	@ (8000d0c <_sbrk+0x64>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d102      	bne.n	8000cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <_sbrk+0x64>)
 8000cc6:	4a12      	ldr	r2, [pc, #72]	@ (8000d10 <_sbrk+0x68>)
 8000cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cca:	4b10      	ldr	r3, [pc, #64]	@ (8000d0c <_sbrk+0x64>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d207      	bcs.n	8000ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cd8:	f006 fa4c 	bl	8007174 <__errno>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	220c      	movs	r2, #12
 8000ce0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce6:	e009      	b.n	8000cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce8:	4b08      	ldr	r3, [pc, #32]	@ (8000d0c <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cee:	4b07      	ldr	r3, [pc, #28]	@ (8000d0c <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	4a05      	ldr	r2, [pc, #20]	@ (8000d0c <_sbrk+0x64>)
 8000cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3718      	adds	r7, #24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	24080000 	.word	0x24080000
 8000d08:	00000400 	.word	0x00000400
 8000d0c:	2400008c 	.word	0x2400008c
 8000d10:	240002c0 	.word	0x240002c0

08000d14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d18:	4b43      	ldr	r3, [pc, #268]	@ (8000e28 <SystemInit+0x114>)
 8000d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d1e:	4a42      	ldr	r2, [pc, #264]	@ (8000e28 <SystemInit+0x114>)
 8000d20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d28:	4b40      	ldr	r3, [pc, #256]	@ (8000e2c <SystemInit+0x118>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f003 030f 	and.w	r3, r3, #15
 8000d30:	2b06      	cmp	r3, #6
 8000d32:	d807      	bhi.n	8000d44 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d34:	4b3d      	ldr	r3, [pc, #244]	@ (8000e2c <SystemInit+0x118>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f023 030f 	bic.w	r3, r3, #15
 8000d3c:	4a3b      	ldr	r2, [pc, #236]	@ (8000e2c <SystemInit+0x118>)
 8000d3e:	f043 0307 	orr.w	r3, r3, #7
 8000d42:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d44:	4b3a      	ldr	r3, [pc, #232]	@ (8000e30 <SystemInit+0x11c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a39      	ldr	r2, [pc, #228]	@ (8000e30 <SystemInit+0x11c>)
 8000d4a:	f043 0301 	orr.w	r3, r3, #1
 8000d4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d50:	4b37      	ldr	r3, [pc, #220]	@ (8000e30 <SystemInit+0x11c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d56:	4b36      	ldr	r3, [pc, #216]	@ (8000e30 <SystemInit+0x11c>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	4935      	ldr	r1, [pc, #212]	@ (8000e30 <SystemInit+0x11c>)
 8000d5c:	4b35      	ldr	r3, [pc, #212]	@ (8000e34 <SystemInit+0x120>)
 8000d5e:	4013      	ands	r3, r2
 8000d60:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d62:	4b32      	ldr	r3, [pc, #200]	@ (8000e2c <SystemInit+0x118>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f003 0308 	and.w	r3, r3, #8
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d007      	beq.n	8000d7e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d6e:	4b2f      	ldr	r3, [pc, #188]	@ (8000e2c <SystemInit+0x118>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f023 030f 	bic.w	r3, r3, #15
 8000d76:	4a2d      	ldr	r2, [pc, #180]	@ (8000e2c <SystemInit+0x118>)
 8000d78:	f043 0307 	orr.w	r3, r3, #7
 8000d7c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000d7e:	4b2c      	ldr	r3, [pc, #176]	@ (8000e30 <SystemInit+0x11c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000d84:	4b2a      	ldr	r3, [pc, #168]	@ (8000e30 <SystemInit+0x11c>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000d8a:	4b29      	ldr	r3, [pc, #164]	@ (8000e30 <SystemInit+0x11c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d90:	4b27      	ldr	r3, [pc, #156]	@ (8000e30 <SystemInit+0x11c>)
 8000d92:	4a29      	ldr	r2, [pc, #164]	@ (8000e38 <SystemInit+0x124>)
 8000d94:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d96:	4b26      	ldr	r3, [pc, #152]	@ (8000e30 <SystemInit+0x11c>)
 8000d98:	4a28      	ldr	r2, [pc, #160]	@ (8000e3c <SystemInit+0x128>)
 8000d9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d9c:	4b24      	ldr	r3, [pc, #144]	@ (8000e30 <SystemInit+0x11c>)
 8000d9e:	4a28      	ldr	r2, [pc, #160]	@ (8000e40 <SystemInit+0x12c>)
 8000da0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000da2:	4b23      	ldr	r3, [pc, #140]	@ (8000e30 <SystemInit+0x11c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000da8:	4b21      	ldr	r3, [pc, #132]	@ (8000e30 <SystemInit+0x11c>)
 8000daa:	4a25      	ldr	r2, [pc, #148]	@ (8000e40 <SystemInit+0x12c>)
 8000dac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000dae:	4b20      	ldr	r3, [pc, #128]	@ (8000e30 <SystemInit+0x11c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000db4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e30 <SystemInit+0x11c>)
 8000db6:	4a22      	ldr	r2, [pc, #136]	@ (8000e40 <SystemInit+0x12c>)
 8000db8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000dba:	4b1d      	ldr	r3, [pc, #116]	@ (8000e30 <SystemInit+0x11c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e30 <SystemInit+0x11c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a1a      	ldr	r2, [pc, #104]	@ (8000e30 <SystemInit+0x11c>)
 8000dc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000dca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000dcc:	4b18      	ldr	r3, [pc, #96]	@ (8000e30 <SystemInit+0x11c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000dd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e44 <SystemInit+0x130>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e48 <SystemInit+0x134>)
 8000dd8:	4013      	ands	r3, r2
 8000dda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000dde:	d202      	bcs.n	8000de6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000de0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e4c <SystemInit+0x138>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000de6:	4b12      	ldr	r3, [pc, #72]	@ (8000e30 <SystemInit+0x11c>)
 8000de8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000dec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d113      	bne.n	8000e1c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000df4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <SystemInit+0x11c>)
 8000df6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000dfa:	4a0d      	ldr	r2, [pc, #52]	@ (8000e30 <SystemInit+0x11c>)
 8000dfc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e00:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e04:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <SystemInit+0x13c>)
 8000e06:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000e0a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000e0c:	4b08      	ldr	r3, [pc, #32]	@ (8000e30 <SystemInit+0x11c>)
 8000e0e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000e12:	4a07      	ldr	r2, [pc, #28]	@ (8000e30 <SystemInit+0x11c>)
 8000e14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000e18:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000ed00 	.word	0xe000ed00
 8000e2c:	52002000 	.word	0x52002000
 8000e30:	58024400 	.word	0x58024400
 8000e34:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e38:	02020200 	.word	0x02020200
 8000e3c:	01ff0000 	.word	0x01ff0000
 8000e40:	01010280 	.word	0x01010280
 8000e44:	5c001000 	.word	0x5c001000
 8000e48:	ffff0000 	.word	0xffff0000
 8000e4c:	51008108 	.word	0x51008108
 8000e50:	52004000 	.word	0x52004000

08000e54 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000e58:	4b09      	ldr	r3, [pc, #36]	@ (8000e80 <ExitRun0Mode+0x2c>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	4a08      	ldr	r2, [pc, #32]	@ (8000e80 <ExitRun0Mode+0x2c>)
 8000e5e:	f043 0302 	orr.w	r3, r3, #2
 8000e62:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000e64:	bf00      	nop
 8000e66:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <ExitRun0Mode+0x2c>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d0f9      	beq.n	8000e66 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000e72:	bf00      	nop
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	58024800 	.word	0x58024800

08000e84 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b09a      	sub	sp, #104	@ 0x68
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e8a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e98:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ea4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
 8000eb4:	615a      	str	r2, [r3, #20]
 8000eb6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	222c      	movs	r2, #44	@ 0x2c
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f006 f90a 	bl	80070d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ec4:	4b43      	ldr	r3, [pc, #268]	@ (8000fd4 <MX_TIM1_Init+0x150>)
 8000ec6:	4a44      	ldr	r2, [pc, #272]	@ (8000fd8 <MX_TIM1_Init+0x154>)
 8000ec8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000eca:	4b42      	ldr	r3, [pc, #264]	@ (8000fd4 <MX_TIM1_Init+0x150>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed0:	4b40      	ldr	r3, [pc, #256]	@ (8000fd4 <MX_TIM1_Init+0x150>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ed6:	4b3f      	ldr	r3, [pc, #252]	@ (8000fd4 <MX_TIM1_Init+0x150>)
 8000ed8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000edc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ede:	4b3d      	ldr	r3, [pc, #244]	@ (8000fd4 <MX_TIM1_Init+0x150>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ee4:	4b3b      	ldr	r3, [pc, #236]	@ (8000fd4 <MX_TIM1_Init+0x150>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eea:	4b3a      	ldr	r3, [pc, #232]	@ (8000fd4 <MX_TIM1_Init+0x150>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ef0:	4838      	ldr	r0, [pc, #224]	@ (8000fd4 <MX_TIM1_Init+0x150>)
 8000ef2:	f003 fb9d 	bl	8004630 <HAL_TIM_Base_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000efc:	f7ff fe34 	bl	8000b68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f04:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f06:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4831      	ldr	r0, [pc, #196]	@ (8000fd4 <MX_TIM1_Init+0x150>)
 8000f0e:	f003 fe69 	bl	8004be4 <HAL_TIM_ConfigClockSource>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000f18:	f7ff fe26 	bl	8000b68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f1c:	482d      	ldr	r0, [pc, #180]	@ (8000fd4 <MX_TIM1_Init+0x150>)
 8000f1e:	f003 fbde 	bl	80046de <HAL_TIM_PWM_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000f28:	f7ff fe1e 	bl	8000b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f30:	2300      	movs	r3, #0
 8000f32:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f34:	2300      	movs	r3, #0
 8000f36:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f38:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4825      	ldr	r0, [pc, #148]	@ (8000fd4 <MX_TIM1_Init+0x150>)
 8000f40:	f004 fb82 	bl	8005648 <HAL_TIMEx_MasterConfigSynchronization>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000f4a:	f7ff fe0d 	bl	8000b68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f4e:	2360      	movs	r3, #96	@ 0x60
 8000f50:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f56:	2300      	movs	r3, #0
 8000f58:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f62:	2300      	movs	r3, #0
 8000f64:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f66:	2300      	movs	r3, #0
 8000f68:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f6a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f6e:	2200      	movs	r2, #0
 8000f70:	4619      	mov	r1, r3
 8000f72:	4818      	ldr	r0, [pc, #96]	@ (8000fd4 <MX_TIM1_Init+0x150>)
 8000f74:	f003 fd22 	bl	80049bc <HAL_TIM_PWM_ConfigChannel>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000f7e:	f7ff fdf3 	bl	8000b68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f9a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000fa4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4807      	ldr	r0, [pc, #28]	@ (8000fd4 <MX_TIM1_Init+0x150>)
 8000fb8:	f004 fbd4 	bl	8005764 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000fc2:	f7ff fdd1 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fc6:	4803      	ldr	r0, [pc, #12]	@ (8000fd4 <MX_TIM1_Init+0x150>)
 8000fc8:	f000 f82a 	bl	8001020 <HAL_TIM_MspPostInit>

}
 8000fcc:	bf00      	nop
 8000fce:	3768      	adds	r7, #104	@ 0x68
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	24000090 	.word	0x24000090
 8000fd8:	40010000 	.word	0x40010000

08000fdc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a0b      	ldr	r2, [pc, #44]	@ (8001018 <HAL_TIM_Base_MspInit+0x3c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d10e      	bne.n	800100c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fee:	4b0b      	ldr	r3, [pc, #44]	@ (800101c <HAL_TIM_Base_MspInit+0x40>)
 8000ff0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ff4:	4a09      	ldr	r2, [pc, #36]	@ (800101c <HAL_TIM_Base_MspInit+0x40>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000ffe:	4b07      	ldr	r3, [pc, #28]	@ (800101c <HAL_TIM_Base_MspInit+0x40>)
 8001000:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800100c:	bf00      	nop
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	40010000 	.word	0x40010000
 800101c:	58024400 	.word	0x58024400

08001020 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a13      	ldr	r2, [pc, #76]	@ (800108c <HAL_TIM_MspPostInit+0x6c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d11f      	bne.n	8001082 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001042:	4b13      	ldr	r3, [pc, #76]	@ (8001090 <HAL_TIM_MspPostInit+0x70>)
 8001044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001048:	4a11      	ldr	r2, [pc, #68]	@ (8001090 <HAL_TIM_MspPostInit+0x70>)
 800104a:	f043 0310 	orr.w	r3, r3, #16
 800104e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001052:	4b0f      	ldr	r3, [pc, #60]	@ (8001090 <HAL_TIM_MspPostInit+0x70>)
 8001054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001058:	f003 0310 	and.w	r3, r3, #16
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001060:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001064:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001066:	2302      	movs	r3, #2
 8001068:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001072:	2301      	movs	r3, #1
 8001074:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001076:	f107 030c 	add.w	r3, r7, #12
 800107a:	4619      	mov	r1, r3
 800107c:	4805      	ldr	r0, [pc, #20]	@ (8001094 <HAL_TIM_MspPostInit+0x74>)
 800107e:	f000 faa9 	bl	80015d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001082:	bf00      	nop
 8001084:	3720      	adds	r7, #32
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40010000 	.word	0x40010000
 8001090:	58024400 	.word	0x58024400
 8001094:	58021000 	.word	0x58021000

08001098 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800109c:	4b22      	ldr	r3, [pc, #136]	@ (8001128 <MX_USART3_UART_Init+0x90>)
 800109e:	4a23      	ldr	r2, [pc, #140]	@ (800112c <MX_USART3_UART_Init+0x94>)
 80010a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010a2:	4b21      	ldr	r3, [pc, #132]	@ (8001128 <MX_USART3_UART_Init+0x90>)
 80010a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001128 <MX_USART3_UART_Init+0x90>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001128 <MX_USART3_UART_Init+0x90>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001128 <MX_USART3_UART_Init+0x90>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001128 <MX_USART3_UART_Init+0x90>)
 80010be:	220c      	movs	r2, #12
 80010c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c2:	4b19      	ldr	r3, [pc, #100]	@ (8001128 <MX_USART3_UART_Init+0x90>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c8:	4b17      	ldr	r3, [pc, #92]	@ (8001128 <MX_USART3_UART_Init+0x90>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ce:	4b16      	ldr	r3, [pc, #88]	@ (8001128 <MX_USART3_UART_Init+0x90>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010d4:	4b14      	ldr	r3, [pc, #80]	@ (8001128 <MX_USART3_UART_Init+0x90>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010da:	4b13      	ldr	r3, [pc, #76]	@ (8001128 <MX_USART3_UART_Init+0x90>)
 80010dc:	2200      	movs	r2, #0
 80010de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010e0:	4811      	ldr	r0, [pc, #68]	@ (8001128 <MX_USART3_UART_Init+0x90>)
 80010e2:	f004 fbbd 	bl	8005860 <HAL_UART_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80010ec:	f7ff fd3c 	bl	8000b68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010f0:	2100      	movs	r1, #0
 80010f2:	480d      	ldr	r0, [pc, #52]	@ (8001128 <MX_USART3_UART_Init+0x90>)
 80010f4:	f005 fd1b 	bl	8006b2e <HAL_UARTEx_SetTxFifoThreshold>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80010fe:	f7ff fd33 	bl	8000b68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001102:	2100      	movs	r1, #0
 8001104:	4808      	ldr	r0, [pc, #32]	@ (8001128 <MX_USART3_UART_Init+0x90>)
 8001106:	f005 fd50 	bl	8006baa <HAL_UARTEx_SetRxFifoThreshold>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001110:	f7ff fd2a 	bl	8000b68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001114:	4804      	ldr	r0, [pc, #16]	@ (8001128 <MX_USART3_UART_Init+0x90>)
 8001116:	f005 fcd1 	bl	8006abc <HAL_UARTEx_DisableFifoMode>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001120:	f7ff fd22 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	240000dc 	.word	0x240000dc
 800112c:	40004800 	.word	0x40004800

08001130 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b0ba      	sub	sp, #232	@ 0xe8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001148:	f107 0310 	add.w	r3, r7, #16
 800114c:	22c0      	movs	r2, #192	@ 0xc0
 800114e:	2100      	movs	r1, #0
 8001150:	4618      	mov	r0, r3
 8001152:	f005 ffc1 	bl	80070d8 <memset>
  if(uartHandle->Instance==USART3)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a27      	ldr	r2, [pc, #156]	@ (80011f8 <HAL_UART_MspInit+0xc8>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d146      	bne.n	80011ee <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001160:	f04f 0202 	mov.w	r2, #2
 8001164:	f04f 0300 	mov.w	r3, #0
 8001168:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800116c:	2300      	movs	r3, #0
 800116e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001172:	f107 0310 	add.w	r3, r7, #16
 8001176:	4618      	mov	r0, r3
 8001178:	f001 fc2e 	bl	80029d8 <HAL_RCCEx_PeriphCLKConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001182:	f7ff fcf1 	bl	8000b68 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001186:	4b1d      	ldr	r3, [pc, #116]	@ (80011fc <HAL_UART_MspInit+0xcc>)
 8001188:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800118c:	4a1b      	ldr	r2, [pc, #108]	@ (80011fc <HAL_UART_MspInit+0xcc>)
 800118e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001192:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001196:	4b19      	ldr	r3, [pc, #100]	@ (80011fc <HAL_UART_MspInit+0xcc>)
 8001198:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800119c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a4:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <HAL_UART_MspInit+0xcc>)
 80011a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011aa:	4a14      	ldr	r2, [pc, #80]	@ (80011fc <HAL_UART_MspInit+0xcc>)
 80011ac:	f043 0308 	orr.w	r3, r3, #8
 80011b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011b4:	4b11      	ldr	r3, [pc, #68]	@ (80011fc <HAL_UART_MspInit+0xcc>)
 80011b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80011c2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011dc:	2307      	movs	r3, #7
 80011de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011e6:	4619      	mov	r1, r3
 80011e8:	4805      	ldr	r0, [pc, #20]	@ (8001200 <HAL_UART_MspInit+0xd0>)
 80011ea:	f000 f9f3 	bl	80015d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80011ee:	bf00      	nop
 80011f0:	37e8      	adds	r7, #232	@ 0xe8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40004800 	.word	0x40004800
 80011fc:	58024400 	.word	0x58024400
 8001200:	58020c00 	.word	0x58020c00

08001204 <_write>:
  }
}

/* USER CODE BEGIN 1 */
int _write(int file, char *ptr, int len)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *) ptr, len, 1000);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	b29a      	uxth	r2, r3
 8001214:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001218:	68b9      	ldr	r1, [r7, #8]
 800121a:	4804      	ldr	r0, [pc, #16]	@ (800122c <_write+0x28>)
 800121c:	f004 fb70 	bl	8005900 <HAL_UART_Transmit>
  return len;
 8001220:	687b      	ldr	r3, [r7, #4]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	240000dc 	.word	0x240000dc

08001230 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001230:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800126c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001234:	f7ff fe0e 	bl	8000e54 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001238:	f7ff fd6c 	bl	8000d14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800123c:	480c      	ldr	r0, [pc, #48]	@ (8001270 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800123e:	490d      	ldr	r1, [pc, #52]	@ (8001274 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001240:	4a0d      	ldr	r2, [pc, #52]	@ (8001278 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001244:	e002      	b.n	800124c <LoopCopyDataInit>

08001246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124a:	3304      	adds	r3, #4

0800124c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800124c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800124e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001250:	d3f9      	bcc.n	8001246 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001252:	4a0a      	ldr	r2, [pc, #40]	@ (800127c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001254:	4c0a      	ldr	r4, [pc, #40]	@ (8001280 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001258:	e001      	b.n	800125e <LoopFillZerobss>

0800125a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800125c:	3204      	adds	r2, #4

0800125e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800125e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001260:	d3fb      	bcc.n	800125a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001262:	f005 ff8d 	bl	8007180 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001266:	f7ff fab9 	bl	80007dc <main>
  bx  lr
 800126a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800126c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001270:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001274:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8001278:	08007e74 	.word	0x08007e74
  ldr r2, =_sbss
 800127c:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8001280:	240002c0 	.word	0x240002c0

08001284 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001284:	e7fe      	b.n	8001284 <ADC3_IRQHandler>
	...

08001288 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800128e:	2003      	movs	r0, #3
 8001290:	f000 f96e 	bl	8001570 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001294:	f001 f9ca 	bl	800262c <HAL_RCC_GetSysClockFreq>
 8001298:	4602      	mov	r2, r0
 800129a:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <HAL_Init+0x68>)
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	0a1b      	lsrs	r3, r3, #8
 80012a0:	f003 030f 	and.w	r3, r3, #15
 80012a4:	4913      	ldr	r1, [pc, #76]	@ (80012f4 <HAL_Init+0x6c>)
 80012a6:	5ccb      	ldrb	r3, [r1, r3]
 80012a8:	f003 031f 	and.w	r3, r3, #31
 80012ac:	fa22 f303 	lsr.w	r3, r2, r3
 80012b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012b2:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <HAL_Init+0x68>)
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	4a0e      	ldr	r2, [pc, #56]	@ (80012f4 <HAL_Init+0x6c>)
 80012bc:	5cd3      	ldrb	r3, [r2, r3]
 80012be:	f003 031f 	and.w	r3, r3, #31
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	fa22 f303 	lsr.w	r3, r2, r3
 80012c8:	4a0b      	ldr	r2, [pc, #44]	@ (80012f8 <HAL_Init+0x70>)
 80012ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012cc:	4a0b      	ldr	r2, [pc, #44]	@ (80012fc <HAL_Init+0x74>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012d2:	2000      	movs	r0, #0
 80012d4:	f000 f814 	bl	8001300 <HAL_InitTick>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e002      	b.n	80012e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012e2:	f7ff fc47 	bl	8000b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	58024400 	.word	0x58024400
 80012f4:	08007df8 	.word	0x08007df8
 80012f8:	24000004 	.word	0x24000004
 80012fc:	24000000 	.word	0x24000000

08001300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001308:	4b15      	ldr	r3, [pc, #84]	@ (8001360 <HAL_InitTick+0x60>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d101      	bne.n	8001314 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e021      	b.n	8001358 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001314:	4b13      	ldr	r3, [pc, #76]	@ (8001364 <HAL_InitTick+0x64>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b11      	ldr	r3, [pc, #68]	@ (8001360 <HAL_InitTick+0x60>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	4619      	mov	r1, r3
 800131e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001322:	fbb3 f3f1 	udiv	r3, r3, r1
 8001326:	fbb2 f3f3 	udiv	r3, r2, r3
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f945 	bl	80015ba <HAL_SYSTICK_Config>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e00e      	b.n	8001358 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b0f      	cmp	r3, #15
 800133e:	d80a      	bhi.n	8001356 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001340:	2200      	movs	r2, #0
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	f04f 30ff 	mov.w	r0, #4294967295
 8001348:	f000 f91d 	bl	8001586 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800134c:	4a06      	ldr	r2, [pc, #24]	@ (8001368 <HAL_InitTick+0x68>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	e000      	b.n	8001358 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	2400000c 	.word	0x2400000c
 8001364:	24000000 	.word	0x24000000
 8001368:	24000008 	.word	0x24000008

0800136c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001370:	4b06      	ldr	r3, [pc, #24]	@ (800138c <HAL_IncTick+0x20>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	461a      	mov	r2, r3
 8001376:	4b06      	ldr	r3, [pc, #24]	@ (8001390 <HAL_IncTick+0x24>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4413      	add	r3, r2
 800137c:	4a04      	ldr	r2, [pc, #16]	@ (8001390 <HAL_IncTick+0x24>)
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	2400000c 	.word	0x2400000c
 8001390:	24000170 	.word	0x24000170

08001394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return uwTick;
 8001398:	4b03      	ldr	r3, [pc, #12]	@ (80013a8 <HAL_GetTick+0x14>)
 800139a:	681b      	ldr	r3, [r3, #0]
}
 800139c:	4618      	mov	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	24000170 	.word	0x24000170

080013ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b4:	f7ff ffee 	bl	8001394 <HAL_GetTick>
 80013b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c4:	d005      	beq.n	80013d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013c6:	4b0a      	ldr	r3, [pc, #40]	@ (80013f0 <HAL_Delay+0x44>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4413      	add	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013d2:	bf00      	nop
 80013d4:	f7ff ffde 	bl	8001394 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d8f7      	bhi.n	80013d4 <HAL_Delay+0x28>
  {
  }
}
 80013e4:	bf00      	nop
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	2400000c 	.word	0x2400000c

080013f4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80013f8:	4b03      	ldr	r3, [pc, #12]	@ (8001408 <HAL_GetREVID+0x14>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	0c1b      	lsrs	r3, r3, #16
}
 80013fe:	4618      	mov	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	5c001000 	.word	0x5c001000

0800140c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800141c:	4b0b      	ldr	r3, [pc, #44]	@ (800144c <__NVIC_SetPriorityGrouping+0x40>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001428:	4013      	ands	r3, r2
 800142a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001434:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <__NVIC_SetPriorityGrouping+0x44>)
 8001436:	4313      	orrs	r3, r2
 8001438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800143a:	4a04      	ldr	r2, [pc, #16]	@ (800144c <__NVIC_SetPriorityGrouping+0x40>)
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	60d3      	str	r3, [r2, #12]
}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000ed00 	.word	0xe000ed00
 8001450:	05fa0000 	.word	0x05fa0000

08001454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001458:	4b04      	ldr	r3, [pc, #16]	@ (800146c <__NVIC_GetPriorityGrouping+0x18>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	0a1b      	lsrs	r3, r3, #8
 800145e:	f003 0307 	and.w	r3, r3, #7
}
 8001462:	4618      	mov	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	6039      	str	r1, [r7, #0]
 800147a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800147c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001480:	2b00      	cmp	r3, #0
 8001482:	db0a      	blt.n	800149a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	b2da      	uxtb	r2, r3
 8001488:	490c      	ldr	r1, [pc, #48]	@ (80014bc <__NVIC_SetPriority+0x4c>)
 800148a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800148e:	0112      	lsls	r2, r2, #4
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	440b      	add	r3, r1
 8001494:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001498:	e00a      	b.n	80014b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4908      	ldr	r1, [pc, #32]	@ (80014c0 <__NVIC_SetPriority+0x50>)
 80014a0:	88fb      	ldrh	r3, [r7, #6]
 80014a2:	f003 030f 	and.w	r3, r3, #15
 80014a6:	3b04      	subs	r3, #4
 80014a8:	0112      	lsls	r2, r2, #4
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	440b      	add	r3, r1
 80014ae:	761a      	strb	r2, [r3, #24]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000e100 	.word	0xe000e100
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b089      	sub	sp, #36	@ 0x24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f1c3 0307 	rsb	r3, r3, #7
 80014de:	2b04      	cmp	r3, #4
 80014e0:	bf28      	it	cs
 80014e2:	2304      	movcs	r3, #4
 80014e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3304      	adds	r3, #4
 80014ea:	2b06      	cmp	r3, #6
 80014ec:	d902      	bls.n	80014f4 <NVIC_EncodePriority+0x30>
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3b03      	subs	r3, #3
 80014f2:	e000      	b.n	80014f6 <NVIC_EncodePriority+0x32>
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	f04f 32ff 	mov.w	r2, #4294967295
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43da      	mvns	r2, r3
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	401a      	ands	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800150c:	f04f 31ff 	mov.w	r1, #4294967295
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	fa01 f303 	lsl.w	r3, r1, r3
 8001516:	43d9      	mvns	r1, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	4313      	orrs	r3, r2
         );
}
 800151e:	4618      	mov	r0, r3
 8001520:	3724      	adds	r7, #36	@ 0x24
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3b01      	subs	r3, #1
 8001538:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800153c:	d301      	bcc.n	8001542 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800153e:	2301      	movs	r3, #1
 8001540:	e00f      	b.n	8001562 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001542:	4a0a      	ldr	r2, [pc, #40]	@ (800156c <SysTick_Config+0x40>)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3b01      	subs	r3, #1
 8001548:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800154a:	210f      	movs	r1, #15
 800154c:	f04f 30ff 	mov.w	r0, #4294967295
 8001550:	f7ff ff8e 	bl	8001470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001554:	4b05      	ldr	r3, [pc, #20]	@ (800156c <SysTick_Config+0x40>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800155a:	4b04      	ldr	r3, [pc, #16]	@ (800156c <SysTick_Config+0x40>)
 800155c:	2207      	movs	r2, #7
 800155e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	e000e010 	.word	0xe000e010

08001570 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ff47 	bl	800140c <__NVIC_SetPriorityGrouping>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b086      	sub	sp, #24
 800158a:	af00      	add	r7, sp, #0
 800158c:	4603      	mov	r3, r0
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
 8001592:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001594:	f7ff ff5e 	bl	8001454 <__NVIC_GetPriorityGrouping>
 8001598:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	6978      	ldr	r0, [r7, #20]
 80015a0:	f7ff ff90 	bl	80014c4 <NVIC_EncodePriority>
 80015a4:	4602      	mov	r2, r0
 80015a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015aa:	4611      	mov	r1, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff5f 	bl	8001470 <__NVIC_SetPriority>
}
 80015b2:	bf00      	nop
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ffb2 	bl	800152c <SysTick_Config>
 80015c8:	4603      	mov	r3, r0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b089      	sub	sp, #36	@ 0x24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80015e2:	4b89      	ldr	r3, [pc, #548]	@ (8001808 <HAL_GPIO_Init+0x234>)
 80015e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80015e6:	e194      	b.n	8001912 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	2101      	movs	r1, #1
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	fa01 f303 	lsl.w	r3, r1, r3
 80015f4:	4013      	ands	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f000 8186 	beq.w	800190c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	2b01      	cmp	r3, #1
 800160a:	d005      	beq.n	8001618 <HAL_GPIO_Init+0x44>
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 0303 	and.w	r3, r3, #3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d130      	bne.n	800167a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	2203      	movs	r2, #3
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800164e:	2201      	movs	r2, #1
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	091b      	lsrs	r3, r3, #4
 8001664:	f003 0201 	and.w	r2, r3, #1
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4313      	orrs	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 0303 	and.w	r3, r3, #3
 8001682:	2b03      	cmp	r3, #3
 8001684:	d017      	beq.n	80016b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	2203      	movs	r2, #3
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43db      	mvns	r3, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4013      	ands	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d123      	bne.n	800170a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	08da      	lsrs	r2, r3, #3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3208      	adds	r2, #8
 80016ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	220f      	movs	r2, #15
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4013      	ands	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	691a      	ldr	r2, [r3, #16]
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	08da      	lsrs	r2, r3, #3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3208      	adds	r2, #8
 8001704:	69b9      	ldr	r1, [r7, #24]
 8001706:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	2203      	movs	r2, #3
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43db      	mvns	r3, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4013      	ands	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f003 0203 	and.w	r2, r3, #3
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4313      	orrs	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 80e0 	beq.w	800190c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174c:	4b2f      	ldr	r3, [pc, #188]	@ (800180c <HAL_GPIO_Init+0x238>)
 800174e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001752:	4a2e      	ldr	r2, [pc, #184]	@ (800180c <HAL_GPIO_Init+0x238>)
 8001754:	f043 0302 	orr.w	r3, r3, #2
 8001758:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800175c:	4b2b      	ldr	r3, [pc, #172]	@ (800180c <HAL_GPIO_Init+0x238>)
 800175e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800176a:	4a29      	ldr	r2, [pc, #164]	@ (8001810 <HAL_GPIO_Init+0x23c>)
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	089b      	lsrs	r3, r3, #2
 8001770:	3302      	adds	r3, #2
 8001772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001776:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f003 0303 	and.w	r3, r3, #3
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	220f      	movs	r2, #15
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4013      	ands	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a20      	ldr	r2, [pc, #128]	@ (8001814 <HAL_GPIO_Init+0x240>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d052      	beq.n	800183c <HAL_GPIO_Init+0x268>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a1f      	ldr	r2, [pc, #124]	@ (8001818 <HAL_GPIO_Init+0x244>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d031      	beq.n	8001802 <HAL_GPIO_Init+0x22e>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a1e      	ldr	r2, [pc, #120]	@ (800181c <HAL_GPIO_Init+0x248>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d02b      	beq.n	80017fe <HAL_GPIO_Init+0x22a>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001820 <HAL_GPIO_Init+0x24c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d025      	beq.n	80017fa <HAL_GPIO_Init+0x226>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a1c      	ldr	r2, [pc, #112]	@ (8001824 <HAL_GPIO_Init+0x250>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d01f      	beq.n	80017f6 <HAL_GPIO_Init+0x222>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001828 <HAL_GPIO_Init+0x254>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d019      	beq.n	80017f2 <HAL_GPIO_Init+0x21e>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a1a      	ldr	r2, [pc, #104]	@ (800182c <HAL_GPIO_Init+0x258>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d013      	beq.n	80017ee <HAL_GPIO_Init+0x21a>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a19      	ldr	r2, [pc, #100]	@ (8001830 <HAL_GPIO_Init+0x25c>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d00d      	beq.n	80017ea <HAL_GPIO_Init+0x216>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a18      	ldr	r2, [pc, #96]	@ (8001834 <HAL_GPIO_Init+0x260>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d007      	beq.n	80017e6 <HAL_GPIO_Init+0x212>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a17      	ldr	r2, [pc, #92]	@ (8001838 <HAL_GPIO_Init+0x264>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d101      	bne.n	80017e2 <HAL_GPIO_Init+0x20e>
 80017de:	2309      	movs	r3, #9
 80017e0:	e02d      	b.n	800183e <HAL_GPIO_Init+0x26a>
 80017e2:	230a      	movs	r3, #10
 80017e4:	e02b      	b.n	800183e <HAL_GPIO_Init+0x26a>
 80017e6:	2308      	movs	r3, #8
 80017e8:	e029      	b.n	800183e <HAL_GPIO_Init+0x26a>
 80017ea:	2307      	movs	r3, #7
 80017ec:	e027      	b.n	800183e <HAL_GPIO_Init+0x26a>
 80017ee:	2306      	movs	r3, #6
 80017f0:	e025      	b.n	800183e <HAL_GPIO_Init+0x26a>
 80017f2:	2305      	movs	r3, #5
 80017f4:	e023      	b.n	800183e <HAL_GPIO_Init+0x26a>
 80017f6:	2304      	movs	r3, #4
 80017f8:	e021      	b.n	800183e <HAL_GPIO_Init+0x26a>
 80017fa:	2303      	movs	r3, #3
 80017fc:	e01f      	b.n	800183e <HAL_GPIO_Init+0x26a>
 80017fe:	2302      	movs	r3, #2
 8001800:	e01d      	b.n	800183e <HAL_GPIO_Init+0x26a>
 8001802:	2301      	movs	r3, #1
 8001804:	e01b      	b.n	800183e <HAL_GPIO_Init+0x26a>
 8001806:	bf00      	nop
 8001808:	58000080 	.word	0x58000080
 800180c:	58024400 	.word	0x58024400
 8001810:	58000400 	.word	0x58000400
 8001814:	58020000 	.word	0x58020000
 8001818:	58020400 	.word	0x58020400
 800181c:	58020800 	.word	0x58020800
 8001820:	58020c00 	.word	0x58020c00
 8001824:	58021000 	.word	0x58021000
 8001828:	58021400 	.word	0x58021400
 800182c:	58021800 	.word	0x58021800
 8001830:	58021c00 	.word	0x58021c00
 8001834:	58022000 	.word	0x58022000
 8001838:	58022400 	.word	0x58022400
 800183c:	2300      	movs	r3, #0
 800183e:	69fa      	ldr	r2, [r7, #28]
 8001840:	f002 0203 	and.w	r2, r2, #3
 8001844:	0092      	lsls	r2, r2, #2
 8001846:	4093      	lsls	r3, r2
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800184e:	4938      	ldr	r1, [pc, #224]	@ (8001930 <HAL_GPIO_Init+0x35c>)
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	089b      	lsrs	r3, r3, #2
 8001854:	3302      	adds	r3, #2
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800185c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	43db      	mvns	r3, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4013      	ands	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001882:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800188a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	43db      	mvns	r3, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80018b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	43db      	mvns	r3, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4013      	ands	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	4313      	orrs	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	3301      	adds	r3, #1
 8001910:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	fa22 f303 	lsr.w	r3, r2, r3
 800191c:	2b00      	cmp	r3, #0
 800191e:	f47f ae63 	bne.w	80015e8 <HAL_GPIO_Init+0x14>
  }
}
 8001922:	bf00      	nop
 8001924:	bf00      	nop
 8001926:	3724      	adds	r7, #36	@ 0x24
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	58000400 	.word	0x58000400

08001934 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	691a      	ldr	r2, [r3, #16]
 8001944:	887b      	ldrh	r3, [r7, #2]
 8001946:	4013      	ands	r3, r2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d002      	beq.n	8001952 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800194c:	2301      	movs	r3, #1
 800194e:	73fb      	strb	r3, [r7, #15]
 8001950:	e001      	b.n	8001956 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001952:	2300      	movs	r3, #0
 8001954:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001956:	7bfb      	ldrb	r3, [r7, #15]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	460b      	mov	r3, r1
 800196e:	807b      	strh	r3, [r7, #2]
 8001970:	4613      	mov	r3, r2
 8001972:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001974:	787b      	ldrb	r3, [r7, #1]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800197a:	887a      	ldrh	r2, [r7, #2]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001980:	e003      	b.n	800198a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001982:	887b      	ldrh	r3, [r7, #2]
 8001984:	041a      	lsls	r2, r3, #16
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	619a      	str	r2, [r3, #24]
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
	...

08001998 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80019a0:	4b19      	ldr	r3, [pc, #100]	@ (8001a08 <HAL_PWREx_ConfigSupply+0x70>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	f003 0304 	and.w	r3, r3, #4
 80019a8:	2b04      	cmp	r3, #4
 80019aa:	d00a      	beq.n	80019c2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80019ac:	4b16      	ldr	r3, [pc, #88]	@ (8001a08 <HAL_PWREx_ConfigSupply+0x70>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d001      	beq.n	80019be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e01f      	b.n	80019fe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80019be:	2300      	movs	r3, #0
 80019c0:	e01d      	b.n	80019fe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80019c2:	4b11      	ldr	r3, [pc, #68]	@ (8001a08 <HAL_PWREx_ConfigSupply+0x70>)
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	f023 0207 	bic.w	r2, r3, #7
 80019ca:	490f      	ldr	r1, [pc, #60]	@ (8001a08 <HAL_PWREx_ConfigSupply+0x70>)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80019d2:	f7ff fcdf 	bl	8001394 <HAL_GetTick>
 80019d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019d8:	e009      	b.n	80019ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80019da:	f7ff fcdb 	bl	8001394 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80019e8:	d901      	bls.n	80019ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e007      	b.n	80019fe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019ee:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <HAL_PWREx_ConfigSupply+0x70>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019fa:	d1ee      	bne.n	80019da <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	58024800 	.word	0x58024800

08001a0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08c      	sub	sp, #48	@ 0x30
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d102      	bne.n	8001a20 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	f000 bc48 	b.w	80022b0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f000 8088 	beq.w	8001b3e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a2e:	4b99      	ldr	r3, [pc, #612]	@ (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a38:	4b96      	ldr	r3, [pc, #600]	@ (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a40:	2b10      	cmp	r3, #16
 8001a42:	d007      	beq.n	8001a54 <HAL_RCC_OscConfig+0x48>
 8001a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a46:	2b18      	cmp	r3, #24
 8001a48:	d111      	bne.n	8001a6e <HAL_RCC_OscConfig+0x62>
 8001a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a4c:	f003 0303 	and.w	r3, r3, #3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d10c      	bne.n	8001a6e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	4b8f      	ldr	r3, [pc, #572]	@ (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d06d      	beq.n	8001b3c <HAL_RCC_OscConfig+0x130>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d169      	bne.n	8001b3c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	f000 bc21 	b.w	80022b0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a76:	d106      	bne.n	8001a86 <HAL_RCC_OscConfig+0x7a>
 8001a78:	4b86      	ldr	r3, [pc, #536]	@ (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a85      	ldr	r2, [pc, #532]	@ (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001a7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a82:	6013      	str	r3, [r2, #0]
 8001a84:	e02e      	b.n	8001ae4 <HAL_RCC_OscConfig+0xd8>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d10c      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x9c>
 8001a8e:	4b81      	ldr	r3, [pc, #516]	@ (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a80      	ldr	r2, [pc, #512]	@ (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001a94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	4b7e      	ldr	r3, [pc, #504]	@ (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a7d      	ldr	r2, [pc, #500]	@ (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001aa0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	e01d      	b.n	8001ae4 <HAL_RCC_OscConfig+0xd8>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ab0:	d10c      	bne.n	8001acc <HAL_RCC_OscConfig+0xc0>
 8001ab2:	4b78      	ldr	r3, [pc, #480]	@ (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a77      	ldr	r2, [pc, #476]	@ (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001ab8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	4b75      	ldr	r3, [pc, #468]	@ (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a74      	ldr	r2, [pc, #464]	@ (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001ac4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	e00b      	b.n	8001ae4 <HAL_RCC_OscConfig+0xd8>
 8001acc:	4b71      	ldr	r3, [pc, #452]	@ (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a70      	ldr	r2, [pc, #448]	@ (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001ad2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	4b6e      	ldr	r3, [pc, #440]	@ (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a6d      	ldr	r2, [pc, #436]	@ (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001ade:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ae2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d013      	beq.n	8001b14 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aec:	f7ff fc52 	bl	8001394 <HAL_GetTick>
 8001af0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001af4:	f7ff fc4e 	bl	8001394 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b64      	cmp	r3, #100	@ 0x64
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e3d4      	b.n	80022b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b06:	4b63      	ldr	r3, [pc, #396]	@ (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d0f0      	beq.n	8001af4 <HAL_RCC_OscConfig+0xe8>
 8001b12:	e014      	b.n	8001b3e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b14:	f7ff fc3e 	bl	8001394 <HAL_GetTick>
 8001b18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b1c:	f7ff fc3a 	bl	8001394 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b64      	cmp	r3, #100	@ 0x64
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e3c0      	b.n	80022b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b2e:	4b59      	ldr	r3, [pc, #356]	@ (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f0      	bne.n	8001b1c <HAL_RCC_OscConfig+0x110>
 8001b3a:	e000      	b.n	8001b3e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 80ca 	beq.w	8001ce0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b4c:	4b51      	ldr	r3, [pc, #324]	@ (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b54:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b56:	4b4f      	ldr	r3, [pc, #316]	@ (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b5a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001b5c:	6a3b      	ldr	r3, [r7, #32]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d007      	beq.n	8001b72 <HAL_RCC_OscConfig+0x166>
 8001b62:	6a3b      	ldr	r3, [r7, #32]
 8001b64:	2b18      	cmp	r3, #24
 8001b66:	d156      	bne.n	8001c16 <HAL_RCC_OscConfig+0x20a>
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d151      	bne.n	8001c16 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b72:	4b48      	ldr	r3, [pc, #288]	@ (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d005      	beq.n	8001b8a <HAL_RCC_OscConfig+0x17e>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e392      	b.n	80022b0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b8a:	4b42      	ldr	r3, [pc, #264]	@ (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f023 0219 	bic.w	r2, r3, #25
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	493f      	ldr	r1, [pc, #252]	@ (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9c:	f7ff fbfa 	bl	8001394 <HAL_GetTick>
 8001ba0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ba4:	f7ff fbf6 	bl	8001394 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e37c      	b.n	80022b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bb6:	4b37      	ldr	r3, [pc, #220]	@ (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0304 	and.w	r3, r3, #4
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc2:	f7ff fc17 	bl	80013f4 <HAL_GetREVID>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d817      	bhi.n	8001c00 <HAL_RCC_OscConfig+0x1f4>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	2b40      	cmp	r3, #64	@ 0x40
 8001bd6:	d108      	bne.n	8001bea <HAL_RCC_OscConfig+0x1de>
 8001bd8:	4b2e      	ldr	r3, [pc, #184]	@ (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001be0:	4a2c      	ldr	r2, [pc, #176]	@ (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001be2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001be6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001be8:	e07a      	b.n	8001ce0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bea:	4b2a      	ldr	r3, [pc, #168]	@ (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	031b      	lsls	r3, r3, #12
 8001bf8:	4926      	ldr	r1, [pc, #152]	@ (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bfe:	e06f      	b.n	8001ce0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c00:	4b24      	ldr	r3, [pc, #144]	@ (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	061b      	lsls	r3, r3, #24
 8001c0e:	4921      	ldr	r1, [pc, #132]	@ (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c14:	e064      	b.n	8001ce0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d047      	beq.n	8001cae <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c1e:	4b1d      	ldr	r3, [pc, #116]	@ (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f023 0219 	bic.w	r2, r3, #25
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	491a      	ldr	r1, [pc, #104]	@ (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c30:	f7ff fbb0 	bl	8001394 <HAL_GetTick>
 8001c34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c38:	f7ff fbac 	bl	8001394 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e332      	b.n	80022b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c4a:	4b12      	ldr	r3, [pc, #72]	@ (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0304 	and.w	r3, r3, #4
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c56:	f7ff fbcd 	bl	80013f4 <HAL_GetREVID>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d819      	bhi.n	8001c98 <HAL_RCC_OscConfig+0x28c>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	2b40      	cmp	r3, #64	@ 0x40
 8001c6a:	d108      	bne.n	8001c7e <HAL_RCC_OscConfig+0x272>
 8001c6c:	4b09      	ldr	r3, [pc, #36]	@ (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001c74:	4a07      	ldr	r2, [pc, #28]	@ (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001c76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c7a:	6053      	str	r3, [r2, #4]
 8001c7c:	e030      	b.n	8001ce0 <HAL_RCC_OscConfig+0x2d4>
 8001c7e:	4b05      	ldr	r3, [pc, #20]	@ (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	031b      	lsls	r3, r3, #12
 8001c8c:	4901      	ldr	r1, [pc, #4]	@ (8001c94 <HAL_RCC_OscConfig+0x288>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	604b      	str	r3, [r1, #4]
 8001c92:	e025      	b.n	8001ce0 <HAL_RCC_OscConfig+0x2d4>
 8001c94:	58024400 	.word	0x58024400
 8001c98:	4b9a      	ldr	r3, [pc, #616]	@ (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	061b      	lsls	r3, r3, #24
 8001ca6:	4997      	ldr	r1, [pc, #604]	@ (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	604b      	str	r3, [r1, #4]
 8001cac:	e018      	b.n	8001ce0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cae:	4b95      	ldr	r3, [pc, #596]	@ (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a94      	ldr	r2, [pc, #592]	@ (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001cb4:	f023 0301 	bic.w	r3, r3, #1
 8001cb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cba:	f7ff fb6b 	bl	8001394 <HAL_GetTick>
 8001cbe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc2:	f7ff fb67 	bl	8001394 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e2ed      	b.n	80022b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cd4:	4b8b      	ldr	r3, [pc, #556]	@ (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1f0      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0310 	and.w	r3, r3, #16
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f000 80a9 	beq.w	8001e40 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cee:	4b85      	ldr	r3, [pc, #532]	@ (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001cf6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001cf8:	4b82      	ldr	r3, [pc, #520]	@ (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cfc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d007      	beq.n	8001d14 <HAL_RCC_OscConfig+0x308>
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	2b18      	cmp	r3, #24
 8001d08:	d13a      	bne.n	8001d80 <HAL_RCC_OscConfig+0x374>
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f003 0303 	and.w	r3, r3, #3
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d135      	bne.n	8001d80 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d14:	4b7b      	ldr	r3, [pc, #492]	@ (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d005      	beq.n	8001d2c <HAL_RCC_OscConfig+0x320>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69db      	ldr	r3, [r3, #28]
 8001d24:	2b80      	cmp	r3, #128	@ 0x80
 8001d26:	d001      	beq.n	8001d2c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e2c1      	b.n	80022b0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d2c:	f7ff fb62 	bl	80013f4 <HAL_GetREVID>
 8001d30:	4603      	mov	r3, r0
 8001d32:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d817      	bhi.n	8001d6a <HAL_RCC_OscConfig+0x35e>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	2b20      	cmp	r3, #32
 8001d40:	d108      	bne.n	8001d54 <HAL_RCC_OscConfig+0x348>
 8001d42:	4b70      	ldr	r3, [pc, #448]	@ (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001d4a:	4a6e      	ldr	r2, [pc, #440]	@ (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001d4c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001d50:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d52:	e075      	b.n	8001e40 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d54:	4b6b      	ldr	r3, [pc, #428]	@ (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	069b      	lsls	r3, r3, #26
 8001d62:	4968      	ldr	r1, [pc, #416]	@ (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d68:	e06a      	b.n	8001e40 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d6a:	4b66      	ldr	r3, [pc, #408]	@ (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	061b      	lsls	r3, r3, #24
 8001d78:	4962      	ldr	r1, [pc, #392]	@ (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d7e:	e05f      	b.n	8001e40 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	69db      	ldr	r3, [r3, #28]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d042      	beq.n	8001e0e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001d88:	4b5e      	ldr	r3, [pc, #376]	@ (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a5d      	ldr	r2, [pc, #372]	@ (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001d8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d94:	f7ff fafe 	bl	8001394 <HAL_GetTick>
 8001d98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001d9c:	f7ff fafa 	bl	8001394 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e280      	b.n	80022b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001dae:	4b55      	ldr	r3, [pc, #340]	@ (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001dba:	f7ff fb1b 	bl	80013f4 <HAL_GetREVID>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d817      	bhi.n	8001df8 <HAL_RCC_OscConfig+0x3ec>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	2b20      	cmp	r3, #32
 8001dce:	d108      	bne.n	8001de2 <HAL_RCC_OscConfig+0x3d6>
 8001dd0:	4b4c      	ldr	r3, [pc, #304]	@ (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001dd8:	4a4a      	ldr	r2, [pc, #296]	@ (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001dda:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001dde:	6053      	str	r3, [r2, #4]
 8001de0:	e02e      	b.n	8001e40 <HAL_RCC_OscConfig+0x434>
 8001de2:	4b48      	ldr	r3, [pc, #288]	@ (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a1b      	ldr	r3, [r3, #32]
 8001dee:	069b      	lsls	r3, r3, #26
 8001df0:	4944      	ldr	r1, [pc, #272]	@ (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	604b      	str	r3, [r1, #4]
 8001df6:	e023      	b.n	8001e40 <HAL_RCC_OscConfig+0x434>
 8001df8:	4b42      	ldr	r3, [pc, #264]	@ (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	061b      	lsls	r3, r3, #24
 8001e06:	493f      	ldr	r1, [pc, #252]	@ (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	60cb      	str	r3, [r1, #12]
 8001e0c:	e018      	b.n	8001e40 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001e0e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a3c      	ldr	r2, [pc, #240]	@ (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001e14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001e18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1a:	f7ff fabb 	bl	8001394 <HAL_GetTick>
 8001e1e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001e22:	f7ff fab7 	bl	8001394 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e23d      	b.n	80022b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e34:	4b33      	ldr	r3, [pc, #204]	@ (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1f0      	bne.n	8001e22 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0308 	and.w	r3, r3, #8
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d036      	beq.n	8001eba <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d019      	beq.n	8001e88 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e54:	4b2b      	ldr	r3, [pc, #172]	@ (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001e56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e58:	4a2a      	ldr	r2, [pc, #168]	@ (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e60:	f7ff fa98 	bl	8001394 <HAL_GetTick>
 8001e64:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e68:	f7ff fa94 	bl	8001394 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e21a      	b.n	80022b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e7a:	4b22      	ldr	r3, [pc, #136]	@ (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001e7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0f0      	beq.n	8001e68 <HAL_RCC_OscConfig+0x45c>
 8001e86:	e018      	b.n	8001eba <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e88:	4b1e      	ldr	r3, [pc, #120]	@ (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001e8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001e8e:	f023 0301 	bic.w	r3, r3, #1
 8001e92:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e94:	f7ff fa7e 	bl	8001394 <HAL_GetTick>
 8001e98:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e9c:	f7ff fa7a 	bl	8001394 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e200      	b.n	80022b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001eae:	4b15      	ldr	r3, [pc, #84]	@ (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001eb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f0      	bne.n	8001e9c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0320 	and.w	r3, r3, #32
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d039      	beq.n	8001f3a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d01c      	beq.n	8001f08 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ece:	4b0d      	ldr	r3, [pc, #52]	@ (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a0c      	ldr	r2, [pc, #48]	@ (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001ed4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ed8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001eda:	f7ff fa5b 	bl	8001394 <HAL_GetTick>
 8001ede:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ee2:	f7ff fa57 	bl	8001394 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e1dd      	b.n	80022b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ef4:	4b03      	ldr	r3, [pc, #12]	@ (8001f04 <HAL_RCC_OscConfig+0x4f8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0f0      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x4d6>
 8001f00:	e01b      	b.n	8001f3a <HAL_RCC_OscConfig+0x52e>
 8001f02:	bf00      	nop
 8001f04:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f08:	4b9b      	ldr	r3, [pc, #620]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a9a      	ldr	r2, [pc, #616]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 8001f0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001f12:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f14:	f7ff fa3e 	bl	8001394 <HAL_GetTick>
 8001f18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f1c:	f7ff fa3a 	bl	8001394 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e1c0      	b.n	80022b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f2e:	4b92      	ldr	r3, [pc, #584]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 8081 	beq.w	800204a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f48:	4b8c      	ldr	r3, [pc, #560]	@ (800217c <HAL_RCC_OscConfig+0x770>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a8b      	ldr	r2, [pc, #556]	@ (800217c <HAL_RCC_OscConfig+0x770>)
 8001f4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f54:	f7ff fa1e 	bl	8001394 <HAL_GetTick>
 8001f58:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f5c:	f7ff fa1a 	bl	8001394 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b64      	cmp	r3, #100	@ 0x64
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e1a0      	b.n	80022b0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f6e:	4b83      	ldr	r3, [pc, #524]	@ (800217c <HAL_RCC_OscConfig+0x770>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f0      	beq.n	8001f5c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d106      	bne.n	8001f90 <HAL_RCC_OscConfig+0x584>
 8001f82:	4b7d      	ldr	r3, [pc, #500]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 8001f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f86:	4a7c      	ldr	r2, [pc, #496]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f8e:	e02d      	b.n	8001fec <HAL_RCC_OscConfig+0x5e0>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10c      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x5a6>
 8001f98:	4b77      	ldr	r3, [pc, #476]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 8001f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f9c:	4a76      	ldr	r2, [pc, #472]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 8001f9e:	f023 0301 	bic.w	r3, r3, #1
 8001fa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fa4:	4b74      	ldr	r3, [pc, #464]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 8001fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fa8:	4a73      	ldr	r2, [pc, #460]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 8001faa:	f023 0304 	bic.w	r3, r3, #4
 8001fae:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fb0:	e01c      	b.n	8001fec <HAL_RCC_OscConfig+0x5e0>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	2b05      	cmp	r3, #5
 8001fb8:	d10c      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x5c8>
 8001fba:	4b6f      	ldr	r3, [pc, #444]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 8001fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fbe:	4a6e      	ldr	r2, [pc, #440]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 8001fc0:	f043 0304 	orr.w	r3, r3, #4
 8001fc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fc6:	4b6c      	ldr	r3, [pc, #432]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 8001fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fca:	4a6b      	ldr	r2, [pc, #428]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fd2:	e00b      	b.n	8001fec <HAL_RCC_OscConfig+0x5e0>
 8001fd4:	4b68      	ldr	r3, [pc, #416]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 8001fd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fd8:	4a67      	ldr	r2, [pc, #412]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 8001fda:	f023 0301 	bic.w	r3, r3, #1
 8001fde:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fe0:	4b65      	ldr	r3, [pc, #404]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 8001fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe4:	4a64      	ldr	r2, [pc, #400]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 8001fe6:	f023 0304 	bic.w	r3, r3, #4
 8001fea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d015      	beq.n	8002020 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff4:	f7ff f9ce 	bl	8001394 <HAL_GetTick>
 8001ff8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ffa:	e00a      	b.n	8002012 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffc:	f7ff f9ca 	bl	8001394 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	f241 3288 	movw	r2, #5000	@ 0x1388
 800200a:	4293      	cmp	r3, r2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e14e      	b.n	80022b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002012:	4b59      	ldr	r3, [pc, #356]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 8002014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0ee      	beq.n	8001ffc <HAL_RCC_OscConfig+0x5f0>
 800201e:	e014      	b.n	800204a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002020:	f7ff f9b8 	bl	8001394 <HAL_GetTick>
 8002024:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002026:	e00a      	b.n	800203e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002028:	f7ff f9b4 	bl	8001394 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002036:	4293      	cmp	r3, r2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e138      	b.n	80022b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800203e:	4b4e      	ldr	r3, [pc, #312]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 8002040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1ee      	bne.n	8002028 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 812d 	beq.w	80022ae <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002054:	4b48      	ldr	r3, [pc, #288]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800205c:	2b18      	cmp	r3, #24
 800205e:	f000 80bd 	beq.w	80021dc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002066:	2b02      	cmp	r3, #2
 8002068:	f040 809e 	bne.w	80021a8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206c:	4b42      	ldr	r3, [pc, #264]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a41      	ldr	r2, [pc, #260]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 8002072:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002076:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002078:	f7ff f98c 	bl	8001394 <HAL_GetTick>
 800207c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002080:	f7ff f988 	bl	8001394 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e10e      	b.n	80022b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002092:	4b39      	ldr	r3, [pc, #228]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800209e:	4b36      	ldr	r3, [pc, #216]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 80020a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020a2:	4b37      	ldr	r3, [pc, #220]	@ (8002180 <HAL_RCC_OscConfig+0x774>)
 80020a4:	4013      	ands	r3, r2
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80020ae:	0112      	lsls	r2, r2, #4
 80020b0:	430a      	orrs	r2, r1
 80020b2:	4931      	ldr	r1, [pc, #196]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	628b      	str	r3, [r1, #40]	@ 0x28
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020bc:	3b01      	subs	r3, #1
 80020be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020c6:	3b01      	subs	r3, #1
 80020c8:	025b      	lsls	r3, r3, #9
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	431a      	orrs	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020d2:	3b01      	subs	r3, #1
 80020d4:	041b      	lsls	r3, r3, #16
 80020d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020e0:	3b01      	subs	r3, #1
 80020e2:	061b      	lsls	r3, r3, #24
 80020e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80020e8:	4923      	ldr	r1, [pc, #140]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80020ee:	4b22      	ldr	r3, [pc, #136]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 80020f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f2:	4a21      	ldr	r2, [pc, #132]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 80020f4:	f023 0301 	bic.w	r3, r3, #1
 80020f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80020fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 80020fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020fe:	4b21      	ldr	r3, [pc, #132]	@ (8002184 <HAL_RCC_OscConfig+0x778>)
 8002100:	4013      	ands	r3, r2
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002106:	00d2      	lsls	r2, r2, #3
 8002108:	491b      	ldr	r1, [pc, #108]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 800210a:	4313      	orrs	r3, r2
 800210c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800210e:	4b1a      	ldr	r3, [pc, #104]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 8002110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002112:	f023 020c 	bic.w	r2, r3, #12
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211a:	4917      	ldr	r1, [pc, #92]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 800211c:	4313      	orrs	r3, r2
 800211e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002120:	4b15      	ldr	r3, [pc, #84]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 8002122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002124:	f023 0202 	bic.w	r2, r3, #2
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800212c:	4912      	ldr	r1, [pc, #72]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 800212e:	4313      	orrs	r3, r2
 8002130:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002132:	4b11      	ldr	r3, [pc, #68]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 8002134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002136:	4a10      	ldr	r2, [pc, #64]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 8002138:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800213c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800213e:	4b0e      	ldr	r3, [pc, #56]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 8002140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002142:	4a0d      	ldr	r2, [pc, #52]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 8002144:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002148:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800214a:	4b0b      	ldr	r3, [pc, #44]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 800214c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214e:	4a0a      	ldr	r2, [pc, #40]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 8002150:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002154:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002156:	4b08      	ldr	r3, [pc, #32]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 8002158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800215a:	4a07      	ldr	r2, [pc, #28]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002162:	4b05      	ldr	r3, [pc, #20]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a04      	ldr	r2, [pc, #16]	@ (8002178 <HAL_RCC_OscConfig+0x76c>)
 8002168:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800216c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216e:	f7ff f911 	bl	8001394 <HAL_GetTick>
 8002172:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002174:	e011      	b.n	800219a <HAL_RCC_OscConfig+0x78e>
 8002176:	bf00      	nop
 8002178:	58024400 	.word	0x58024400
 800217c:	58024800 	.word	0x58024800
 8002180:	fffffc0c 	.word	0xfffffc0c
 8002184:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002188:	f7ff f904 	bl	8001394 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e08a      	b.n	80022b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800219a:	4b47      	ldr	r3, [pc, #284]	@ (80022b8 <HAL_RCC_OscConfig+0x8ac>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0f0      	beq.n	8002188 <HAL_RCC_OscConfig+0x77c>
 80021a6:	e082      	b.n	80022ae <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a8:	4b43      	ldr	r3, [pc, #268]	@ (80022b8 <HAL_RCC_OscConfig+0x8ac>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a42      	ldr	r2, [pc, #264]	@ (80022b8 <HAL_RCC_OscConfig+0x8ac>)
 80021ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7ff f8ee 	bl	8001394 <HAL_GetTick>
 80021b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021bc:	f7ff f8ea 	bl	8001394 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e070      	b.n	80022b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021ce:	4b3a      	ldr	r3, [pc, #232]	@ (80022b8 <HAL_RCC_OscConfig+0x8ac>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0x7b0>
 80021da:	e068      	b.n	80022ae <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80021dc:	4b36      	ldr	r3, [pc, #216]	@ (80022b8 <HAL_RCC_OscConfig+0x8ac>)
 80021de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80021e2:	4b35      	ldr	r3, [pc, #212]	@ (80022b8 <HAL_RCC_OscConfig+0x8ac>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d031      	beq.n	8002254 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	f003 0203 	and.w	r2, r3, #3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d12a      	bne.n	8002254 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	091b      	lsrs	r3, r3, #4
 8002202:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220a:	429a      	cmp	r2, r3
 800220c:	d122      	bne.n	8002254 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002218:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800221a:	429a      	cmp	r2, r3
 800221c:	d11a      	bne.n	8002254 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	0a5b      	lsrs	r3, r3, #9
 8002222:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800222a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800222c:	429a      	cmp	r2, r3
 800222e:	d111      	bne.n	8002254 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	0c1b      	lsrs	r3, r3, #16
 8002234:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800223c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800223e:	429a      	cmp	r2, r3
 8002240:	d108      	bne.n	8002254 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	0e1b      	lsrs	r3, r3, #24
 8002246:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800224e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002250:	429a      	cmp	r2, r3
 8002252:	d001      	beq.n	8002258 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e02b      	b.n	80022b0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002258:	4b17      	ldr	r3, [pc, #92]	@ (80022b8 <HAL_RCC_OscConfig+0x8ac>)
 800225a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800225c:	08db      	lsrs	r3, r3, #3
 800225e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002262:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	429a      	cmp	r2, r3
 800226c:	d01f      	beq.n	80022ae <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800226e:	4b12      	ldr	r3, [pc, #72]	@ (80022b8 <HAL_RCC_OscConfig+0x8ac>)
 8002270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002272:	4a11      	ldr	r2, [pc, #68]	@ (80022b8 <HAL_RCC_OscConfig+0x8ac>)
 8002274:	f023 0301 	bic.w	r3, r3, #1
 8002278:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800227a:	f7ff f88b 	bl	8001394 <HAL_GetTick>
 800227e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002280:	bf00      	nop
 8002282:	f7ff f887 	bl	8001394 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228a:	4293      	cmp	r3, r2
 800228c:	d0f9      	beq.n	8002282 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800228e:	4b0a      	ldr	r3, [pc, #40]	@ (80022b8 <HAL_RCC_OscConfig+0x8ac>)
 8002290:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002292:	4b0a      	ldr	r3, [pc, #40]	@ (80022bc <HAL_RCC_OscConfig+0x8b0>)
 8002294:	4013      	ands	r3, r2
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800229a:	00d2      	lsls	r2, r2, #3
 800229c:	4906      	ldr	r1, [pc, #24]	@ (80022b8 <HAL_RCC_OscConfig+0x8ac>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80022a2:	4b05      	ldr	r3, [pc, #20]	@ (80022b8 <HAL_RCC_OscConfig+0x8ac>)
 80022a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a6:	4a04      	ldr	r2, [pc, #16]	@ (80022b8 <HAL_RCC_OscConfig+0x8ac>)
 80022a8:	f043 0301 	orr.w	r3, r3, #1
 80022ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3730      	adds	r7, #48	@ 0x30
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	58024400 	.word	0x58024400
 80022bc:	ffff0007 	.word	0xffff0007

080022c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e19c      	b.n	800260e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022d4:	4b8a      	ldr	r3, [pc, #552]	@ (8002500 <HAL_RCC_ClockConfig+0x240>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 030f 	and.w	r3, r3, #15
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d910      	bls.n	8002304 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e2:	4b87      	ldr	r3, [pc, #540]	@ (8002500 <HAL_RCC_ClockConfig+0x240>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f023 020f 	bic.w	r2, r3, #15
 80022ea:	4985      	ldr	r1, [pc, #532]	@ (8002500 <HAL_RCC_ClockConfig+0x240>)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f2:	4b83      	ldr	r3, [pc, #524]	@ (8002500 <HAL_RCC_ClockConfig+0x240>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d001      	beq.n	8002304 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e184      	b.n	800260e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	d010      	beq.n	8002332 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691a      	ldr	r2, [r3, #16]
 8002314:	4b7b      	ldr	r3, [pc, #492]	@ (8002504 <HAL_RCC_ClockConfig+0x244>)
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800231c:	429a      	cmp	r2, r3
 800231e:	d908      	bls.n	8002332 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002320:	4b78      	ldr	r3, [pc, #480]	@ (8002504 <HAL_RCC_ClockConfig+0x244>)
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	4975      	ldr	r1, [pc, #468]	@ (8002504 <HAL_RCC_ClockConfig+0x244>)
 800232e:	4313      	orrs	r3, r2
 8002330:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	2b00      	cmp	r3, #0
 800233c:	d010      	beq.n	8002360 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695a      	ldr	r2, [r3, #20]
 8002342:	4b70      	ldr	r3, [pc, #448]	@ (8002504 <HAL_RCC_ClockConfig+0x244>)
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800234a:	429a      	cmp	r2, r3
 800234c:	d908      	bls.n	8002360 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800234e:	4b6d      	ldr	r3, [pc, #436]	@ (8002504 <HAL_RCC_ClockConfig+0x244>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	496a      	ldr	r1, [pc, #424]	@ (8002504 <HAL_RCC_ClockConfig+0x244>)
 800235c:	4313      	orrs	r3, r2
 800235e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0310 	and.w	r3, r3, #16
 8002368:	2b00      	cmp	r3, #0
 800236a:	d010      	beq.n	800238e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	699a      	ldr	r2, [r3, #24]
 8002370:	4b64      	ldr	r3, [pc, #400]	@ (8002504 <HAL_RCC_ClockConfig+0x244>)
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002378:	429a      	cmp	r2, r3
 800237a:	d908      	bls.n	800238e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800237c:	4b61      	ldr	r3, [pc, #388]	@ (8002504 <HAL_RCC_ClockConfig+0x244>)
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	495e      	ldr	r1, [pc, #376]	@ (8002504 <HAL_RCC_ClockConfig+0x244>)
 800238a:	4313      	orrs	r3, r2
 800238c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0320 	and.w	r3, r3, #32
 8002396:	2b00      	cmp	r3, #0
 8002398:	d010      	beq.n	80023bc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69da      	ldr	r2, [r3, #28]
 800239e:	4b59      	ldr	r3, [pc, #356]	@ (8002504 <HAL_RCC_ClockConfig+0x244>)
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d908      	bls.n	80023bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80023aa:	4b56      	ldr	r3, [pc, #344]	@ (8002504 <HAL_RCC_ClockConfig+0x244>)
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	4953      	ldr	r1, [pc, #332]	@ (8002504 <HAL_RCC_ClockConfig+0x244>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d010      	beq.n	80023ea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68da      	ldr	r2, [r3, #12]
 80023cc:	4b4d      	ldr	r3, [pc, #308]	@ (8002504 <HAL_RCC_ClockConfig+0x244>)
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	f003 030f 	and.w	r3, r3, #15
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d908      	bls.n	80023ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d8:	4b4a      	ldr	r3, [pc, #296]	@ (8002504 <HAL_RCC_ClockConfig+0x244>)
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	f023 020f 	bic.w	r2, r3, #15
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	4947      	ldr	r1, [pc, #284]	@ (8002504 <HAL_RCC_ClockConfig+0x244>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d055      	beq.n	80024a2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80023f6:	4b43      	ldr	r3, [pc, #268]	@ (8002504 <HAL_RCC_ClockConfig+0x244>)
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	4940      	ldr	r1, [pc, #256]	@ (8002504 <HAL_RCC_ClockConfig+0x244>)
 8002404:	4313      	orrs	r3, r2
 8002406:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b02      	cmp	r3, #2
 800240e:	d107      	bne.n	8002420 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002410:	4b3c      	ldr	r3, [pc, #240]	@ (8002504 <HAL_RCC_ClockConfig+0x244>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d121      	bne.n	8002460 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e0f6      	b.n	800260e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b03      	cmp	r3, #3
 8002426:	d107      	bne.n	8002438 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002428:	4b36      	ldr	r3, [pc, #216]	@ (8002504 <HAL_RCC_ClockConfig+0x244>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d115      	bne.n	8002460 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0ea      	b.n	800260e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d107      	bne.n	8002450 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002440:	4b30      	ldr	r3, [pc, #192]	@ (8002504 <HAL_RCC_ClockConfig+0x244>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002448:	2b00      	cmp	r3, #0
 800244a:	d109      	bne.n	8002460 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e0de      	b.n	800260e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002450:	4b2c      	ldr	r3, [pc, #176]	@ (8002504 <HAL_RCC_ClockConfig+0x244>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e0d6      	b.n	800260e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002460:	4b28      	ldr	r3, [pc, #160]	@ (8002504 <HAL_RCC_ClockConfig+0x244>)
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	f023 0207 	bic.w	r2, r3, #7
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	4925      	ldr	r1, [pc, #148]	@ (8002504 <HAL_RCC_ClockConfig+0x244>)
 800246e:	4313      	orrs	r3, r2
 8002470:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002472:	f7fe ff8f 	bl	8001394 <HAL_GetTick>
 8002476:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002478:	e00a      	b.n	8002490 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800247a:	f7fe ff8b 	bl	8001394 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002488:	4293      	cmp	r3, r2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e0be      	b.n	800260e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002490:	4b1c      	ldr	r3, [pc, #112]	@ (8002504 <HAL_RCC_ClockConfig+0x244>)
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	429a      	cmp	r2, r3
 80024a0:	d1eb      	bne.n	800247a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d010      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	4b14      	ldr	r3, [pc, #80]	@ (8002504 <HAL_RCC_ClockConfig+0x244>)
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d208      	bcs.n	80024d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024be:	4b11      	ldr	r3, [pc, #68]	@ (8002504 <HAL_RCC_ClockConfig+0x244>)
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	f023 020f 	bic.w	r2, r3, #15
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	490e      	ldr	r1, [pc, #56]	@ (8002504 <HAL_RCC_ClockConfig+0x244>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002500 <HAL_RCC_ClockConfig+0x240>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d214      	bcs.n	8002508 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024de:	4b08      	ldr	r3, [pc, #32]	@ (8002500 <HAL_RCC_ClockConfig+0x240>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f023 020f 	bic.w	r2, r3, #15
 80024e6:	4906      	ldr	r1, [pc, #24]	@ (8002500 <HAL_RCC_ClockConfig+0x240>)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ee:	4b04      	ldr	r3, [pc, #16]	@ (8002500 <HAL_RCC_ClockConfig+0x240>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d005      	beq.n	8002508 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e086      	b.n	800260e <HAL_RCC_ClockConfig+0x34e>
 8002500:	52002000 	.word	0x52002000
 8002504:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d010      	beq.n	8002536 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691a      	ldr	r2, [r3, #16]
 8002518:	4b3f      	ldr	r3, [pc, #252]	@ (8002618 <HAL_RCC_ClockConfig+0x358>)
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002520:	429a      	cmp	r2, r3
 8002522:	d208      	bcs.n	8002536 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002524:	4b3c      	ldr	r3, [pc, #240]	@ (8002618 <HAL_RCC_ClockConfig+0x358>)
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	4939      	ldr	r1, [pc, #228]	@ (8002618 <HAL_RCC_ClockConfig+0x358>)
 8002532:	4313      	orrs	r3, r2
 8002534:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	2b00      	cmp	r3, #0
 8002540:	d010      	beq.n	8002564 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	695a      	ldr	r2, [r3, #20]
 8002546:	4b34      	ldr	r3, [pc, #208]	@ (8002618 <HAL_RCC_ClockConfig+0x358>)
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800254e:	429a      	cmp	r2, r3
 8002550:	d208      	bcs.n	8002564 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002552:	4b31      	ldr	r3, [pc, #196]	@ (8002618 <HAL_RCC_ClockConfig+0x358>)
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	492e      	ldr	r1, [pc, #184]	@ (8002618 <HAL_RCC_ClockConfig+0x358>)
 8002560:	4313      	orrs	r3, r2
 8002562:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0310 	and.w	r3, r3, #16
 800256c:	2b00      	cmp	r3, #0
 800256e:	d010      	beq.n	8002592 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	699a      	ldr	r2, [r3, #24]
 8002574:	4b28      	ldr	r3, [pc, #160]	@ (8002618 <HAL_RCC_ClockConfig+0x358>)
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800257c:	429a      	cmp	r2, r3
 800257e:	d208      	bcs.n	8002592 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002580:	4b25      	ldr	r3, [pc, #148]	@ (8002618 <HAL_RCC_ClockConfig+0x358>)
 8002582:	69db      	ldr	r3, [r3, #28]
 8002584:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	4922      	ldr	r1, [pc, #136]	@ (8002618 <HAL_RCC_ClockConfig+0x358>)
 800258e:	4313      	orrs	r3, r2
 8002590:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0320 	and.w	r3, r3, #32
 800259a:	2b00      	cmp	r3, #0
 800259c:	d010      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69da      	ldr	r2, [r3, #28]
 80025a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002618 <HAL_RCC_ClockConfig+0x358>)
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d208      	bcs.n	80025c0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80025ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002618 <HAL_RCC_ClockConfig+0x358>)
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	4917      	ldr	r1, [pc, #92]	@ (8002618 <HAL_RCC_ClockConfig+0x358>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80025c0:	f000 f834 	bl	800262c <HAL_RCC_GetSysClockFreq>
 80025c4:	4602      	mov	r2, r0
 80025c6:	4b14      	ldr	r3, [pc, #80]	@ (8002618 <HAL_RCC_ClockConfig+0x358>)
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	0a1b      	lsrs	r3, r3, #8
 80025cc:	f003 030f 	and.w	r3, r3, #15
 80025d0:	4912      	ldr	r1, [pc, #72]	@ (800261c <HAL_RCC_ClockConfig+0x35c>)
 80025d2:	5ccb      	ldrb	r3, [r1, r3]
 80025d4:	f003 031f 	and.w	r3, r3, #31
 80025d8:	fa22 f303 	lsr.w	r3, r2, r3
 80025dc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80025de:	4b0e      	ldr	r3, [pc, #56]	@ (8002618 <HAL_RCC_ClockConfig+0x358>)
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	4a0d      	ldr	r2, [pc, #52]	@ (800261c <HAL_RCC_ClockConfig+0x35c>)
 80025e8:	5cd3      	ldrb	r3, [r2, r3]
 80025ea:	f003 031f 	and.w	r3, r3, #31
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	fa22 f303 	lsr.w	r3, r2, r3
 80025f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002620 <HAL_RCC_ClockConfig+0x360>)
 80025f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002624 <HAL_RCC_ClockConfig+0x364>)
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80025fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002628 <HAL_RCC_ClockConfig+0x368>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7fe fe7c 	bl	8001300 <HAL_InitTick>
 8002608:	4603      	mov	r3, r0
 800260a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800260c:	7bfb      	ldrb	r3, [r7, #15]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	58024400 	.word	0x58024400
 800261c:	08007df8 	.word	0x08007df8
 8002620:	24000004 	.word	0x24000004
 8002624:	24000000 	.word	0x24000000
 8002628:	24000008 	.word	0x24000008

0800262c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800262c:	b480      	push	{r7}
 800262e:	b089      	sub	sp, #36	@ 0x24
 8002630:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002632:	4bb3      	ldr	r3, [pc, #716]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800263a:	2b18      	cmp	r3, #24
 800263c:	f200 8155 	bhi.w	80028ea <HAL_RCC_GetSysClockFreq+0x2be>
 8002640:	a201      	add	r2, pc, #4	@ (adr r2, 8002648 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002646:	bf00      	nop
 8002648:	080026ad 	.word	0x080026ad
 800264c:	080028eb 	.word	0x080028eb
 8002650:	080028eb 	.word	0x080028eb
 8002654:	080028eb 	.word	0x080028eb
 8002658:	080028eb 	.word	0x080028eb
 800265c:	080028eb 	.word	0x080028eb
 8002660:	080028eb 	.word	0x080028eb
 8002664:	080028eb 	.word	0x080028eb
 8002668:	080026d3 	.word	0x080026d3
 800266c:	080028eb 	.word	0x080028eb
 8002670:	080028eb 	.word	0x080028eb
 8002674:	080028eb 	.word	0x080028eb
 8002678:	080028eb 	.word	0x080028eb
 800267c:	080028eb 	.word	0x080028eb
 8002680:	080028eb 	.word	0x080028eb
 8002684:	080028eb 	.word	0x080028eb
 8002688:	080026d9 	.word	0x080026d9
 800268c:	080028eb 	.word	0x080028eb
 8002690:	080028eb 	.word	0x080028eb
 8002694:	080028eb 	.word	0x080028eb
 8002698:	080028eb 	.word	0x080028eb
 800269c:	080028eb 	.word	0x080028eb
 80026a0:	080028eb 	.word	0x080028eb
 80026a4:	080028eb 	.word	0x080028eb
 80026a8:	080026df 	.word	0x080026df
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026ac:	4b94      	ldr	r3, [pc, #592]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0320 	and.w	r3, r3, #32
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d009      	beq.n	80026cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80026b8:	4b91      	ldr	r3, [pc, #580]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	08db      	lsrs	r3, r3, #3
 80026be:	f003 0303 	and.w	r3, r3, #3
 80026c2:	4a90      	ldr	r2, [pc, #576]	@ (8002904 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026c4:	fa22 f303 	lsr.w	r3, r2, r3
 80026c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80026ca:	e111      	b.n	80028f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80026cc:	4b8d      	ldr	r3, [pc, #564]	@ (8002904 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026ce:	61bb      	str	r3, [r7, #24]
      break;
 80026d0:	e10e      	b.n	80028f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80026d2:	4b8d      	ldr	r3, [pc, #564]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80026d4:	61bb      	str	r3, [r7, #24]
      break;
 80026d6:	e10b      	b.n	80028f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80026d8:	4b8c      	ldr	r3, [pc, #560]	@ (800290c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80026da:	61bb      	str	r3, [r7, #24]
      break;
 80026dc:	e108      	b.n	80028f0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80026de:	4b88      	ldr	r3, [pc, #544]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80026e8:	4b85      	ldr	r3, [pc, #532]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ec:	091b      	lsrs	r3, r3, #4
 80026ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026f2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80026f4:	4b82      	ldr	r3, [pc, #520]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80026fe:	4b80      	ldr	r3, [pc, #512]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002702:	08db      	lsrs	r3, r3, #3
 8002704:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	fb02 f303 	mul.w	r3, r2, r3
 800270e:	ee07 3a90 	vmov	s15, r3
 8002712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002716:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 80e1 	beq.w	80028e4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	2b02      	cmp	r3, #2
 8002726:	f000 8083 	beq.w	8002830 <HAL_RCC_GetSysClockFreq+0x204>
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	2b02      	cmp	r3, #2
 800272e:	f200 80a1 	bhi.w	8002874 <HAL_RCC_GetSysClockFreq+0x248>
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <HAL_RCC_GetSysClockFreq+0x114>
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d056      	beq.n	80027ec <HAL_RCC_GetSysClockFreq+0x1c0>
 800273e:	e099      	b.n	8002874 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002740:	4b6f      	ldr	r3, [pc, #444]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0320 	and.w	r3, r3, #32
 8002748:	2b00      	cmp	r3, #0
 800274a:	d02d      	beq.n	80027a8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800274c:	4b6c      	ldr	r3, [pc, #432]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	08db      	lsrs	r3, r3, #3
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	4a6b      	ldr	r2, [pc, #428]	@ (8002904 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002758:	fa22 f303 	lsr.w	r3, r2, r3
 800275c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	ee07 3a90 	vmov	s15, r3
 8002764:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	ee07 3a90 	vmov	s15, r3
 800276e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002776:	4b62      	ldr	r3, [pc, #392]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800277e:	ee07 3a90 	vmov	s15, r3
 8002782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002786:	ed97 6a02 	vldr	s12, [r7, #8]
 800278a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002910 <HAL_RCC_GetSysClockFreq+0x2e4>
 800278e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002796:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800279a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800279e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027a2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80027a6:	e087      	b.n	80028b8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	ee07 3a90 	vmov	s15, r3
 80027ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027b2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002914 <HAL_RCC_GetSysClockFreq+0x2e8>
 80027b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027ba:	4b51      	ldr	r3, [pc, #324]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027c2:	ee07 3a90 	vmov	s15, r3
 80027c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80027ce:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002910 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80027ea:	e065      	b.n	80028b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	ee07 3a90 	vmov	s15, r3
 80027f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027f6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002918 <HAL_RCC_GetSysClockFreq+0x2ec>
 80027fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027fe:	4b40      	ldr	r3, [pc, #256]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002806:	ee07 3a90 	vmov	s15, r3
 800280a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800280e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002812:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002910 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800281a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800281e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800282a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800282e:	e043      	b.n	80028b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	ee07 3a90 	vmov	s15, r3
 8002836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800283a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800291c <HAL_RCC_GetSysClockFreq+0x2f0>
 800283e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002842:	4b2f      	ldr	r3, [pc, #188]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800284a:	ee07 3a90 	vmov	s15, r3
 800284e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002852:	ed97 6a02 	vldr	s12, [r7, #8]
 8002856:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002910 <HAL_RCC_GetSysClockFreq+0x2e4>
 800285a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800285e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002862:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800286a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800286e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002872:	e021      	b.n	80028b8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	ee07 3a90 	vmov	s15, r3
 800287a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800287e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002918 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002886:	4b1e      	ldr	r3, [pc, #120]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800288e:	ee07 3a90 	vmov	s15, r3
 8002892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002896:	ed97 6a02 	vldr	s12, [r7, #8]
 800289a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002910 <HAL_RCC_GetSysClockFreq+0x2e4>
 800289e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80028b6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80028b8:	4b11      	ldr	r3, [pc, #68]	@ (8002900 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028bc:	0a5b      	lsrs	r3, r3, #9
 80028be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028c2:	3301      	adds	r3, #1
 80028c4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	ee07 3a90 	vmov	s15, r3
 80028cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80028d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80028d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028dc:	ee17 3a90 	vmov	r3, s15
 80028e0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80028e2:	e005      	b.n	80028f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	61bb      	str	r3, [r7, #24]
      break;
 80028e8:	e002      	b.n	80028f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80028ea:	4b07      	ldr	r3, [pc, #28]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80028ec:	61bb      	str	r3, [r7, #24]
      break;
 80028ee:	bf00      	nop
  }

  return sysclockfreq;
 80028f0:	69bb      	ldr	r3, [r7, #24]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3724      	adds	r7, #36	@ 0x24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	58024400 	.word	0x58024400
 8002904:	03d09000 	.word	0x03d09000
 8002908:	003d0900 	.word	0x003d0900
 800290c:	007a1200 	.word	0x007a1200
 8002910:	46000000 	.word	0x46000000
 8002914:	4c742400 	.word	0x4c742400
 8002918:	4a742400 	.word	0x4a742400
 800291c:	4af42400 	.word	0x4af42400

08002920 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002926:	f7ff fe81 	bl	800262c <HAL_RCC_GetSysClockFreq>
 800292a:	4602      	mov	r2, r0
 800292c:	4b10      	ldr	r3, [pc, #64]	@ (8002970 <HAL_RCC_GetHCLKFreq+0x50>)
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	0a1b      	lsrs	r3, r3, #8
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	490f      	ldr	r1, [pc, #60]	@ (8002974 <HAL_RCC_GetHCLKFreq+0x54>)
 8002938:	5ccb      	ldrb	r3, [r1, r3]
 800293a:	f003 031f 	and.w	r3, r3, #31
 800293e:	fa22 f303 	lsr.w	r3, r2, r3
 8002942:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002944:	4b0a      	ldr	r3, [pc, #40]	@ (8002970 <HAL_RCC_GetHCLKFreq+0x50>)
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	f003 030f 	and.w	r3, r3, #15
 800294c:	4a09      	ldr	r2, [pc, #36]	@ (8002974 <HAL_RCC_GetHCLKFreq+0x54>)
 800294e:	5cd3      	ldrb	r3, [r2, r3]
 8002950:	f003 031f 	and.w	r3, r3, #31
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	fa22 f303 	lsr.w	r3, r2, r3
 800295a:	4a07      	ldr	r2, [pc, #28]	@ (8002978 <HAL_RCC_GetHCLKFreq+0x58>)
 800295c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800295e:	4a07      	ldr	r2, [pc, #28]	@ (800297c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002964:	4b04      	ldr	r3, [pc, #16]	@ (8002978 <HAL_RCC_GetHCLKFreq+0x58>)
 8002966:	681b      	ldr	r3, [r3, #0]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	58024400 	.word	0x58024400
 8002974:	08007df8 	.word	0x08007df8
 8002978:	24000004 	.word	0x24000004
 800297c:	24000000 	.word	0x24000000

08002980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002984:	f7ff ffcc 	bl	8002920 <HAL_RCC_GetHCLKFreq>
 8002988:	4602      	mov	r2, r0
 800298a:	4b06      	ldr	r3, [pc, #24]	@ (80029a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	091b      	lsrs	r3, r3, #4
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	4904      	ldr	r1, [pc, #16]	@ (80029a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002996:	5ccb      	ldrb	r3, [r1, r3]
 8002998:	f003 031f 	and.w	r3, r3, #31
 800299c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	58024400 	.word	0x58024400
 80029a8:	08007df8 	.word	0x08007df8

080029ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80029b0:	f7ff ffb6 	bl	8002920 <HAL_RCC_GetHCLKFreq>
 80029b4:	4602      	mov	r2, r0
 80029b6:	4b06      	ldr	r3, [pc, #24]	@ (80029d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	0a1b      	lsrs	r3, r3, #8
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	4904      	ldr	r1, [pc, #16]	@ (80029d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029c2:	5ccb      	ldrb	r3, [r1, r3]
 80029c4:	f003 031f 	and.w	r3, r3, #31
 80029c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	58024400 	.word	0x58024400
 80029d4:	08007df8 	.word	0x08007df8

080029d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029dc:	b0ca      	sub	sp, #296	@ 0x128
 80029de:	af00      	add	r7, sp, #0
 80029e0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029e4:	2300      	movs	r3, #0
 80029e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029ea:	2300      	movs	r3, #0
 80029ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80029fc:	2500      	movs	r5, #0
 80029fe:	ea54 0305 	orrs.w	r3, r4, r5
 8002a02:	d049      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a0a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002a0e:	d02f      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002a10:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002a14:	d828      	bhi.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002a16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a1a:	d01a      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002a1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a20:	d822      	bhi.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002a26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a2a:	d007      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002a2c:	e01c      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a2e:	4bb8      	ldr	r3, [pc, #736]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a32:	4ab7      	ldr	r2, [pc, #732]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002a3a:	e01a      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a40:	3308      	adds	r3, #8
 8002a42:	2102      	movs	r1, #2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f001 fc8f 	bl	8004368 <RCCEx_PLL2_Config>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002a50:	e00f      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a56:	3328      	adds	r3, #40	@ 0x28
 8002a58:	2102      	movs	r1, #2
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f001 fd36 	bl	80044cc <RCCEx_PLL3_Config>
 8002a60:	4603      	mov	r3, r0
 8002a62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002a66:	e004      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a6e:	e000      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002a70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10a      	bne.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002a7a:	4ba5      	ldr	r3, [pc, #660]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a7e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a88:	4aa1      	ldr	r2, [pc, #644]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a8a:	430b      	orrs	r3, r1
 8002a8c:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a8e:	e003      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002aa4:	f04f 0900 	mov.w	r9, #0
 8002aa8:	ea58 0309 	orrs.w	r3, r8, r9
 8002aac:	d047      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d82a      	bhi.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8002ac0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002abe:	bf00      	nop
 8002ac0:	08002ad5 	.word	0x08002ad5
 8002ac4:	08002ae3 	.word	0x08002ae3
 8002ac8:	08002af9 	.word	0x08002af9
 8002acc:	08002b17 	.word	0x08002b17
 8002ad0:	08002b17 	.word	0x08002b17
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ad4:	4b8e      	ldr	r3, [pc, #568]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad8:	4a8d      	ldr	r2, [pc, #564]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ada:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ade:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ae0:	e01a      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ae6:	3308      	adds	r3, #8
 8002ae8:	2100      	movs	r1, #0
 8002aea:	4618      	mov	r0, r3
 8002aec:	f001 fc3c 	bl	8004368 <RCCEx_PLL2_Config>
 8002af0:	4603      	mov	r3, r0
 8002af2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002af6:	e00f      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002afc:	3328      	adds	r3, #40	@ 0x28
 8002afe:	2100      	movs	r1, #0
 8002b00:	4618      	mov	r0, r3
 8002b02:	f001 fce3 	bl	80044cc <RCCEx_PLL3_Config>
 8002b06:	4603      	mov	r3, r0
 8002b08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b0c:	e004      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b14:	e000      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002b16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10a      	bne.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b20:	4b7b      	ldr	r3, [pc, #492]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b24:	f023 0107 	bic.w	r1, r3, #7
 8002b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b2e:	4a78      	ldr	r2, [pc, #480]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b30:	430b      	orrs	r3, r1
 8002b32:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b34:	e003      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b46:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002b4a:	f04f 0b00 	mov.w	fp, #0
 8002b4e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002b52:	d04c      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b5e:	d030      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002b60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b64:	d829      	bhi.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002b66:	2bc0      	cmp	r3, #192	@ 0xc0
 8002b68:	d02d      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002b6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002b6c:	d825      	bhi.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002b6e:	2b80      	cmp	r3, #128	@ 0x80
 8002b70:	d018      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002b72:	2b80      	cmp	r3, #128	@ 0x80
 8002b74:	d821      	bhi.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d002      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002b7a:	2b40      	cmp	r3, #64	@ 0x40
 8002b7c:	d007      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002b7e:	e01c      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b80:	4b63      	ldr	r3, [pc, #396]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b84:	4a62      	ldr	r2, [pc, #392]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002b8c:	e01c      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b92:	3308      	adds	r3, #8
 8002b94:	2100      	movs	r1, #0
 8002b96:	4618      	mov	r0, r3
 8002b98:	f001 fbe6 	bl	8004368 <RCCEx_PLL2_Config>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002ba2:	e011      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ba8:	3328      	adds	r3, #40	@ 0x28
 8002baa:	2100      	movs	r1, #0
 8002bac:	4618      	mov	r0, r3
 8002bae:	f001 fc8d 	bl	80044cc <RCCEx_PLL3_Config>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002bb8:	e006      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002bc0:	e002      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002bc2:	bf00      	nop
 8002bc4:	e000      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002bc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10a      	bne.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002bd0:	4b4f      	ldr	r3, [pc, #316]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bd4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bde:	4a4c      	ldr	r2, [pc, #304]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002be0:	430b      	orrs	r3, r1
 8002be2:	6513      	str	r3, [r2, #80]	@ 0x50
 8002be4:	e003      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002bfa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002c04:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002c08:	460b      	mov	r3, r1
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	d053      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002c16:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c1a:	d035      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002c1c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c20:	d82e      	bhi.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002c22:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002c26:	d031      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002c28:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002c2c:	d828      	bhi.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002c2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c32:	d01a      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002c34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c38:	d822      	bhi.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002c3e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c42:	d007      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002c44:	e01c      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c46:	4b32      	ldr	r3, [pc, #200]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4a:	4a31      	ldr	r2, [pc, #196]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c52:	e01c      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c58:	3308      	adds	r3, #8
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f001 fb83 	bl	8004368 <RCCEx_PLL2_Config>
 8002c62:	4603      	mov	r3, r0
 8002c64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002c68:	e011      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c6e:	3328      	adds	r3, #40	@ 0x28
 8002c70:	2100      	movs	r1, #0
 8002c72:	4618      	mov	r0, r3
 8002c74:	f001 fc2a 	bl	80044cc <RCCEx_PLL3_Config>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c7e:	e006      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c86:	e002      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002c88:	bf00      	nop
 8002c8a:	e000      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002c8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10b      	bne.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002c96:	4b1e      	ldr	r3, [pc, #120]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c9a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ca2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002ca6:	4a1a      	ldr	r2, [pc, #104]	@ (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ca8:	430b      	orrs	r3, r1
 8002caa:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cac:	e003      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cbe:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002cc2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002ccc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	d056      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002cde:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ce2:	d038      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002ce4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ce8:	d831      	bhi.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002cea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002cee:	d034      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002cf0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002cf4:	d82b      	bhi.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002cf6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002cfa:	d01d      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002cfc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d00:	d825      	bhi.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d006      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002d06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d0a:	d00a      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002d0c:	e01f      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002d0e:	bf00      	nop
 8002d10:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d14:	4ba2      	ldr	r3, [pc, #648]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d18:	4aa1      	ldr	r2, [pc, #644]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d20:	e01c      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d26:	3308      	adds	r3, #8
 8002d28:	2100      	movs	r1, #0
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f001 fb1c 	bl	8004368 <RCCEx_PLL2_Config>
 8002d30:	4603      	mov	r3, r0
 8002d32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002d36:	e011      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d3c:	3328      	adds	r3, #40	@ 0x28
 8002d3e:	2100      	movs	r1, #0
 8002d40:	4618      	mov	r0, r3
 8002d42:	f001 fbc3 	bl	80044cc <RCCEx_PLL3_Config>
 8002d46:	4603      	mov	r3, r0
 8002d48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d4c:	e006      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d54:	e002      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002d56:	bf00      	nop
 8002d58:	e000      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002d5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10b      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002d64:	4b8e      	ldr	r3, [pc, #568]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d68:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002d74:	4a8a      	ldr	r2, [pc, #552]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d76:	430b      	orrs	r3, r1
 8002d78:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d7a:	e003      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d8c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002d90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002d94:	2300      	movs	r3, #0
 8002d96:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002d9a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002d9e:	460b      	mov	r3, r1
 8002da0:	4313      	orrs	r3, r2
 8002da2:	d03a      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002daa:	2b30      	cmp	r3, #48	@ 0x30
 8002dac:	d01f      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002dae:	2b30      	cmp	r3, #48	@ 0x30
 8002db0:	d819      	bhi.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002db2:	2b20      	cmp	r3, #32
 8002db4:	d00c      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002db6:	2b20      	cmp	r3, #32
 8002db8:	d815      	bhi.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d019      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002dbe:	2b10      	cmp	r3, #16
 8002dc0:	d111      	bne.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dc2:	4b77      	ldr	r3, [pc, #476]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc6:	4a76      	ldr	r2, [pc, #472]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002dc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002dce:	e011      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dd4:	3308      	adds	r3, #8
 8002dd6:	2102      	movs	r1, #2
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f001 fac5 	bl	8004368 <RCCEx_PLL2_Config>
 8002dde:	4603      	mov	r3, r0
 8002de0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002de4:	e006      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002dec:	e002      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002dee:	bf00      	nop
 8002df0:	e000      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002df2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002df4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10a      	bne.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002dfc:	4b68      	ldr	r3, [pc, #416]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002dfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e00:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e0a:	4a65      	ldr	r2, [pc, #404]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e0c:	430b      	orrs	r3, r1
 8002e0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e10:	e003      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e22:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002e26:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002e30:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4313      	orrs	r3, r2
 8002e38:	d051      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e44:	d035      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002e46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e4a:	d82e      	bhi.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002e4c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002e50:	d031      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002e52:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002e56:	d828      	bhi.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002e58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e5c:	d01a      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002e5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e62:	d822      	bhi.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002e68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e6c:	d007      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002e6e:	e01c      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e70:	4b4b      	ldr	r3, [pc, #300]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e74:	4a4a      	ldr	r2, [pc, #296]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e7c:	e01c      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e82:	3308      	adds	r3, #8
 8002e84:	2100      	movs	r1, #0
 8002e86:	4618      	mov	r0, r3
 8002e88:	f001 fa6e 	bl	8004368 <RCCEx_PLL2_Config>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e92:	e011      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e98:	3328      	adds	r3, #40	@ 0x28
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f001 fb15 	bl	80044cc <RCCEx_PLL3_Config>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002ea8:	e006      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002eb0:	e002      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002eb2:	bf00      	nop
 8002eb4:	e000      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002eb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10a      	bne.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002ec0:	4b37      	ldr	r3, [pc, #220]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ec4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ece:	4a34      	ldr	r2, [pc, #208]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ed0:	430b      	orrs	r3, r1
 8002ed2:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ed4:	e003      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ed6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002eda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002eea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002ef4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002ef8:	460b      	mov	r3, r1
 8002efa:	4313      	orrs	r3, r2
 8002efc:	d056      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f08:	d033      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002f0a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f0e:	d82c      	bhi.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002f10:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f14:	d02f      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002f16:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f1a:	d826      	bhi.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002f1c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f20:	d02b      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002f22:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002f26:	d820      	bhi.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002f28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f2c:	d012      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002f2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002f32:	d81a      	bhi.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d022      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002f38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f3c:	d115      	bne.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f42:	3308      	adds	r3, #8
 8002f44:	2101      	movs	r1, #1
 8002f46:	4618      	mov	r0, r3
 8002f48:	f001 fa0e 	bl	8004368 <RCCEx_PLL2_Config>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002f52:	e015      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f58:	3328      	adds	r3, #40	@ 0x28
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f001 fab5 	bl	80044cc <RCCEx_PLL3_Config>
 8002f62:	4603      	mov	r3, r0
 8002f64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002f68:	e00a      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f70:	e006      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f72:	bf00      	nop
 8002f74:	e004      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f76:	bf00      	nop
 8002f78:	e002      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f7a:	bf00      	nop
 8002f7c:	e000      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10d      	bne.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002f88:	4b05      	ldr	r3, [pc, #20]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f8c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f96:	4a02      	ldr	r2, [pc, #8]	@ (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f9c:	e006      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002f9e:	bf00      	nop
 8002fa0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fa8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002fb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002fc2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	d055      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002fd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fd8:	d033      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002fda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fde:	d82c      	bhi.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fe4:	d02f      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fea:	d826      	bhi.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002fec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002ff0:	d02b      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002ff2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002ff6:	d820      	bhi.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002ff8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ffc:	d012      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002ffe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003002:	d81a      	bhi.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003004:	2b00      	cmp	r3, #0
 8003006:	d022      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003008:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800300c:	d115      	bne.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800300e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003012:	3308      	adds	r3, #8
 8003014:	2101      	movs	r1, #1
 8003016:	4618      	mov	r0, r3
 8003018:	f001 f9a6 	bl	8004368 <RCCEx_PLL2_Config>
 800301c:	4603      	mov	r3, r0
 800301e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003022:	e015      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003028:	3328      	adds	r3, #40	@ 0x28
 800302a:	2101      	movs	r1, #1
 800302c:	4618      	mov	r0, r3
 800302e:	f001 fa4d 	bl	80044cc <RCCEx_PLL3_Config>
 8003032:	4603      	mov	r3, r0
 8003034:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003038:	e00a      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003040:	e006      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003042:	bf00      	nop
 8003044:	e004      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003046:	bf00      	nop
 8003048:	e002      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800304a:	bf00      	nop
 800304c:	e000      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800304e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003050:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10b      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003058:	4ba3      	ldr	r3, [pc, #652]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800305a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800305c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003064:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003068:	4a9f      	ldr	r2, [pc, #636]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800306a:	430b      	orrs	r3, r1
 800306c:	6593      	str	r3, [r2, #88]	@ 0x58
 800306e:	e003      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003070:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003074:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800307c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003080:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003084:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003088:	2300      	movs	r3, #0
 800308a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800308e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003092:	460b      	mov	r3, r1
 8003094:	4313      	orrs	r3, r2
 8003096:	d037      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800309c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800309e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030a2:	d00e      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80030a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030a8:	d816      	bhi.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d018      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80030ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80030b2:	d111      	bne.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030b4:	4b8c      	ldr	r3, [pc, #560]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b8:	4a8b      	ldr	r2, [pc, #556]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80030c0:	e00f      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030c6:	3308      	adds	r3, #8
 80030c8:	2101      	movs	r1, #1
 80030ca:	4618      	mov	r0, r3
 80030cc:	f001 f94c 	bl	8004368 <RCCEx_PLL2_Config>
 80030d0:	4603      	mov	r3, r0
 80030d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80030d6:	e004      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030de:	e000      	b.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80030e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10a      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80030ea:	4b7f      	ldr	r3, [pc, #508]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030ee:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80030f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030f8:	4a7b      	ldr	r2, [pc, #492]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030fa:	430b      	orrs	r3, r1
 80030fc:	6513      	str	r3, [r2, #80]	@ 0x50
 80030fe:	e003      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003100:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003104:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800310c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003110:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003114:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003118:	2300      	movs	r3, #0
 800311a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800311e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003122:	460b      	mov	r3, r1
 8003124:	4313      	orrs	r3, r2
 8003126:	d039      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800312c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800312e:	2b03      	cmp	r3, #3
 8003130:	d81c      	bhi.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003132:	a201      	add	r2, pc, #4	@ (adr r2, 8003138 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003138:	08003175 	.word	0x08003175
 800313c:	08003149 	.word	0x08003149
 8003140:	08003157 	.word	0x08003157
 8003144:	08003175 	.word	0x08003175
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003148:	4b67      	ldr	r3, [pc, #412]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800314a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800314c:	4a66      	ldr	r2, [pc, #408]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800314e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003152:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003154:	e00f      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800315a:	3308      	adds	r3, #8
 800315c:	2102      	movs	r1, #2
 800315e:	4618      	mov	r0, r3
 8003160:	f001 f902 	bl	8004368 <RCCEx_PLL2_Config>
 8003164:	4603      	mov	r3, r0
 8003166:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800316a:	e004      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003172:	e000      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003174:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003176:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10a      	bne.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800317e:	4b5a      	ldr	r3, [pc, #360]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003182:	f023 0103 	bic.w	r1, r3, #3
 8003186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800318a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800318c:	4a56      	ldr	r2, [pc, #344]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800318e:	430b      	orrs	r3, r1
 8003190:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003192:	e003      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003194:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003198:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800319c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80031a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031ac:	2300      	movs	r3, #0
 80031ae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80031b2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80031b6:	460b      	mov	r3, r1
 80031b8:	4313      	orrs	r3, r2
 80031ba:	f000 809f 	beq.w	80032fc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031be:	4b4b      	ldr	r3, [pc, #300]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a4a      	ldr	r2, [pc, #296]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80031c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031ca:	f7fe f8e3 	bl	8001394 <HAL_GetTick>
 80031ce:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031d2:	e00b      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d4:	f7fe f8de 	bl	8001394 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b64      	cmp	r3, #100	@ 0x64
 80031e2:	d903      	bls.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031ea:	e005      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031ec:	4b3f      	ldr	r3, [pc, #252]	@ (80032ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0ed      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80031f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d179      	bne.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003200:	4b39      	ldr	r3, [pc, #228]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003202:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003208:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800320c:	4053      	eors	r3, r2
 800320e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003212:	2b00      	cmp	r3, #0
 8003214:	d015      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003216:	4b34      	ldr	r3, [pc, #208]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800321a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800321e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003222:	4b31      	ldr	r3, [pc, #196]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003226:	4a30      	ldr	r2, [pc, #192]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003228:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800322c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800322e:	4b2e      	ldr	r3, [pc, #184]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003232:	4a2d      	ldr	r2, [pc, #180]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003234:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003238:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800323a:	4a2b      	ldr	r2, [pc, #172]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800323c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003240:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003246:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800324a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800324e:	d118      	bne.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003250:	f7fe f8a0 	bl	8001394 <HAL_GetTick>
 8003254:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003258:	e00d      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800325a:	f7fe f89b 	bl	8001394 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003264:	1ad2      	subs	r2, r2, r3
 8003266:	f241 3388 	movw	r3, #5000	@ 0x1388
 800326a:	429a      	cmp	r2, r3
 800326c:	d903      	bls.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003274:	e005      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003276:	4b1c      	ldr	r3, [pc, #112]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0eb      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003282:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003286:	2b00      	cmp	r3, #0
 8003288:	d129      	bne.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800328a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800328e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003292:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003296:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800329a:	d10e      	bne.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800329c:	4b12      	ldr	r3, [pc, #72]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80032a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80032ac:	091a      	lsrs	r2, r3, #4
 80032ae:	4b10      	ldr	r3, [pc, #64]	@ (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	4a0d      	ldr	r2, [pc, #52]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032b4:	430b      	orrs	r3, r1
 80032b6:	6113      	str	r3, [r2, #16]
 80032b8:	e005      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80032ba:	4b0b      	ldr	r3, [pc, #44]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	4a0a      	ldr	r2, [pc, #40]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032c0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80032c4:	6113      	str	r3, [r2, #16]
 80032c6:	4b08      	ldr	r3, [pc, #32]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032c8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80032ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80032d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d6:	4a04      	ldr	r2, [pc, #16]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032d8:	430b      	orrs	r3, r1
 80032da:	6713      	str	r3, [r2, #112]	@ 0x70
 80032dc:	e00e      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80032e6:	e009      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80032e8:	58024400 	.word	0x58024400
 80032ec:	58024800 	.word	0x58024800
 80032f0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80032fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003304:	f002 0301 	and.w	r3, r2, #1
 8003308:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800330c:	2300      	movs	r3, #0
 800330e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003312:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003316:	460b      	mov	r3, r1
 8003318:	4313      	orrs	r3, r2
 800331a:	f000 8089 	beq.w	8003430 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800331e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003322:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003324:	2b28      	cmp	r3, #40	@ 0x28
 8003326:	d86b      	bhi.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003328:	a201      	add	r2, pc, #4	@ (adr r2, 8003330 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800332a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332e:	bf00      	nop
 8003330:	08003409 	.word	0x08003409
 8003334:	08003401 	.word	0x08003401
 8003338:	08003401 	.word	0x08003401
 800333c:	08003401 	.word	0x08003401
 8003340:	08003401 	.word	0x08003401
 8003344:	08003401 	.word	0x08003401
 8003348:	08003401 	.word	0x08003401
 800334c:	08003401 	.word	0x08003401
 8003350:	080033d5 	.word	0x080033d5
 8003354:	08003401 	.word	0x08003401
 8003358:	08003401 	.word	0x08003401
 800335c:	08003401 	.word	0x08003401
 8003360:	08003401 	.word	0x08003401
 8003364:	08003401 	.word	0x08003401
 8003368:	08003401 	.word	0x08003401
 800336c:	08003401 	.word	0x08003401
 8003370:	080033eb 	.word	0x080033eb
 8003374:	08003401 	.word	0x08003401
 8003378:	08003401 	.word	0x08003401
 800337c:	08003401 	.word	0x08003401
 8003380:	08003401 	.word	0x08003401
 8003384:	08003401 	.word	0x08003401
 8003388:	08003401 	.word	0x08003401
 800338c:	08003401 	.word	0x08003401
 8003390:	08003409 	.word	0x08003409
 8003394:	08003401 	.word	0x08003401
 8003398:	08003401 	.word	0x08003401
 800339c:	08003401 	.word	0x08003401
 80033a0:	08003401 	.word	0x08003401
 80033a4:	08003401 	.word	0x08003401
 80033a8:	08003401 	.word	0x08003401
 80033ac:	08003401 	.word	0x08003401
 80033b0:	08003409 	.word	0x08003409
 80033b4:	08003401 	.word	0x08003401
 80033b8:	08003401 	.word	0x08003401
 80033bc:	08003401 	.word	0x08003401
 80033c0:	08003401 	.word	0x08003401
 80033c4:	08003401 	.word	0x08003401
 80033c8:	08003401 	.word	0x08003401
 80033cc:	08003401 	.word	0x08003401
 80033d0:	08003409 	.word	0x08003409
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033d8:	3308      	adds	r3, #8
 80033da:	2101      	movs	r1, #1
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 ffc3 	bl	8004368 <RCCEx_PLL2_Config>
 80033e2:	4603      	mov	r3, r0
 80033e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80033e8:	e00f      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80033ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ee:	3328      	adds	r3, #40	@ 0x28
 80033f0:	2101      	movs	r1, #1
 80033f2:	4618      	mov	r0, r3
 80033f4:	f001 f86a 	bl	80044cc <RCCEx_PLL3_Config>
 80033f8:	4603      	mov	r3, r0
 80033fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80033fe:	e004      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003406:	e000      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800340a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10a      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003412:	4bbf      	ldr	r3, [pc, #764]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003416:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800341a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800341e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003420:	4abb      	ldr	r2, [pc, #748]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003422:	430b      	orrs	r3, r1
 8003424:	6553      	str	r3, [r2, #84]	@ 0x54
 8003426:	e003      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003428:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800342c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003438:	f002 0302 	and.w	r3, r2, #2
 800343c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003440:	2300      	movs	r3, #0
 8003442:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003446:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800344a:	460b      	mov	r3, r1
 800344c:	4313      	orrs	r3, r2
 800344e:	d041      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003454:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003456:	2b05      	cmp	r3, #5
 8003458:	d824      	bhi.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800345a:	a201      	add	r2, pc, #4	@ (adr r2, 8003460 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800345c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003460:	080034ad 	.word	0x080034ad
 8003464:	08003479 	.word	0x08003479
 8003468:	0800348f 	.word	0x0800348f
 800346c:	080034ad 	.word	0x080034ad
 8003470:	080034ad 	.word	0x080034ad
 8003474:	080034ad 	.word	0x080034ad
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800347c:	3308      	adds	r3, #8
 800347e:	2101      	movs	r1, #1
 8003480:	4618      	mov	r0, r3
 8003482:	f000 ff71 	bl	8004368 <RCCEx_PLL2_Config>
 8003486:	4603      	mov	r3, r0
 8003488:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800348c:	e00f      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800348e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003492:	3328      	adds	r3, #40	@ 0x28
 8003494:	2101      	movs	r1, #1
 8003496:	4618      	mov	r0, r3
 8003498:	f001 f818 	bl	80044cc <RCCEx_PLL3_Config>
 800349c:	4603      	mov	r3, r0
 800349e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80034a2:	e004      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034aa:	e000      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80034ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10a      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80034b6:	4b96      	ldr	r3, [pc, #600]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80034b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ba:	f023 0107 	bic.w	r1, r3, #7
 80034be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034c4:	4a92      	ldr	r2, [pc, #584]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80034c6:	430b      	orrs	r3, r1
 80034c8:	6553      	str	r3, [r2, #84]	@ 0x54
 80034ca:	e003      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034dc:	f002 0304 	and.w	r3, r2, #4
 80034e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80034e4:	2300      	movs	r3, #0
 80034e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034ea:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4313      	orrs	r3, r2
 80034f2:	d044      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80034f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034fc:	2b05      	cmp	r3, #5
 80034fe:	d825      	bhi.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003500:	a201      	add	r2, pc, #4	@ (adr r2, 8003508 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003506:	bf00      	nop
 8003508:	08003555 	.word	0x08003555
 800350c:	08003521 	.word	0x08003521
 8003510:	08003537 	.word	0x08003537
 8003514:	08003555 	.word	0x08003555
 8003518:	08003555 	.word	0x08003555
 800351c:	08003555 	.word	0x08003555
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003524:	3308      	adds	r3, #8
 8003526:	2101      	movs	r1, #1
 8003528:	4618      	mov	r0, r3
 800352a:	f000 ff1d 	bl	8004368 <RCCEx_PLL2_Config>
 800352e:	4603      	mov	r3, r0
 8003530:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003534:	e00f      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800353a:	3328      	adds	r3, #40	@ 0x28
 800353c:	2101      	movs	r1, #1
 800353e:	4618      	mov	r0, r3
 8003540:	f000 ffc4 	bl	80044cc <RCCEx_PLL3_Config>
 8003544:	4603      	mov	r3, r0
 8003546:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800354a:	e004      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003552:	e000      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003554:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003556:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10b      	bne.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800355e:	4b6c      	ldr	r3, [pc, #432]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003562:	f023 0107 	bic.w	r1, r3, #7
 8003566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800356a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800356e:	4a68      	ldr	r2, [pc, #416]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003570:	430b      	orrs	r3, r1
 8003572:	6593      	str	r3, [r2, #88]	@ 0x58
 8003574:	e003      	b.n	800357e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003576:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800357a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800357e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003586:	f002 0320 	and.w	r3, r2, #32
 800358a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800358e:	2300      	movs	r3, #0
 8003590:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003594:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003598:	460b      	mov	r3, r1
 800359a:	4313      	orrs	r3, r2
 800359c:	d055      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800359e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035aa:	d033      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80035ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035b0:	d82c      	bhi.n	800360c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80035b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035b6:	d02f      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80035b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035bc:	d826      	bhi.n	800360c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80035be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80035c2:	d02b      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80035c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80035c8:	d820      	bhi.n	800360c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80035ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035ce:	d012      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80035d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80035d4:	d81a      	bhi.n	800360c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d022      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80035da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80035de:	d115      	bne.n	800360c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e4:	3308      	adds	r3, #8
 80035e6:	2100      	movs	r1, #0
 80035e8:	4618      	mov	r0, r3
 80035ea:	f000 febd 	bl	8004368 <RCCEx_PLL2_Config>
 80035ee:	4603      	mov	r3, r0
 80035f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80035f4:	e015      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035fa:	3328      	adds	r3, #40	@ 0x28
 80035fc:	2102      	movs	r1, #2
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 ff64 	bl	80044cc <RCCEx_PLL3_Config>
 8003604:	4603      	mov	r3, r0
 8003606:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800360a:	e00a      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003612:	e006      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003614:	bf00      	nop
 8003616:	e004      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003618:	bf00      	nop
 800361a:	e002      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800361c:	bf00      	nop
 800361e:	e000      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003620:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003622:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10b      	bne.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800362a:	4b39      	ldr	r3, [pc, #228]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800362c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800362e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800363a:	4a35      	ldr	r2, [pc, #212]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800363c:	430b      	orrs	r3, r1
 800363e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003640:	e003      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003642:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003646:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800364a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800364e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003652:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003656:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800365a:	2300      	movs	r3, #0
 800365c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003660:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003664:	460b      	mov	r3, r1
 8003666:	4313      	orrs	r3, r2
 8003668:	d058      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800366a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800366e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003672:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003676:	d033      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003678:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800367c:	d82c      	bhi.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800367e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003682:	d02f      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003684:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003688:	d826      	bhi.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800368a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800368e:	d02b      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003690:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003694:	d820      	bhi.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003696:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800369a:	d012      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800369c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036a0:	d81a      	bhi.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d022      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80036a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036aa:	d115      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b0:	3308      	adds	r3, #8
 80036b2:	2100      	movs	r1, #0
 80036b4:	4618      	mov	r0, r3
 80036b6:	f000 fe57 	bl	8004368 <RCCEx_PLL2_Config>
 80036ba:	4603      	mov	r3, r0
 80036bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80036c0:	e015      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c6:	3328      	adds	r3, #40	@ 0x28
 80036c8:	2102      	movs	r1, #2
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 fefe 	bl	80044cc <RCCEx_PLL3_Config>
 80036d0:	4603      	mov	r3, r0
 80036d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80036d6:	e00a      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036de:	e006      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80036e0:	bf00      	nop
 80036e2:	e004      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80036e4:	bf00      	nop
 80036e6:	e002      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80036e8:	bf00      	nop
 80036ea:	e000      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80036ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10e      	bne.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036f6:	4b06      	ldr	r3, [pc, #24]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80036f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036fa:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80036fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003702:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003706:	4a02      	ldr	r2, [pc, #8]	@ (8003710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003708:	430b      	orrs	r3, r1
 800370a:	6593      	str	r3, [r2, #88]	@ 0x58
 800370c:	e006      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800370e:	bf00      	nop
 8003710:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003714:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003718:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800371c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003724:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003728:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800372c:	2300      	movs	r3, #0
 800372e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003732:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003736:	460b      	mov	r3, r1
 8003738:	4313      	orrs	r3, r2
 800373a:	d055      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800373c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003740:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003744:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003748:	d033      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800374a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800374e:	d82c      	bhi.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003750:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003754:	d02f      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003756:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800375a:	d826      	bhi.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800375c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003760:	d02b      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003762:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003766:	d820      	bhi.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003768:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800376c:	d012      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800376e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003772:	d81a      	bhi.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003774:	2b00      	cmp	r3, #0
 8003776:	d022      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003778:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800377c:	d115      	bne.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800377e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003782:	3308      	adds	r3, #8
 8003784:	2100      	movs	r1, #0
 8003786:	4618      	mov	r0, r3
 8003788:	f000 fdee 	bl	8004368 <RCCEx_PLL2_Config>
 800378c:	4603      	mov	r3, r0
 800378e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003792:	e015      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003798:	3328      	adds	r3, #40	@ 0x28
 800379a:	2102      	movs	r1, #2
 800379c:	4618      	mov	r0, r3
 800379e:	f000 fe95 	bl	80044cc <RCCEx_PLL3_Config>
 80037a2:	4603      	mov	r3, r0
 80037a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80037a8:	e00a      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037b0:	e006      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80037b2:	bf00      	nop
 80037b4:	e004      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80037b6:	bf00      	nop
 80037b8:	e002      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80037ba:	bf00      	nop
 80037bc:	e000      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80037be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10b      	bne.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80037c8:	4ba1      	ldr	r3, [pc, #644]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037cc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80037d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80037d8:	4a9d      	ldr	r2, [pc, #628]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037da:	430b      	orrs	r3, r1
 80037dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80037de:	e003      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80037e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f0:	f002 0308 	and.w	r3, r2, #8
 80037f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80037f8:	2300      	movs	r3, #0
 80037fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80037fe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003802:	460b      	mov	r3, r1
 8003804:	4313      	orrs	r3, r2
 8003806:	d01e      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800380c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003810:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003814:	d10c      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800381a:	3328      	adds	r3, #40	@ 0x28
 800381c:	2102      	movs	r1, #2
 800381e:	4618      	mov	r0, r3
 8003820:	f000 fe54 	bl	80044cc <RCCEx_PLL3_Config>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d002      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003830:	4b87      	ldr	r3, [pc, #540]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003834:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800383c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003840:	4a83      	ldr	r2, [pc, #524]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003842:	430b      	orrs	r3, r1
 8003844:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800384a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384e:	f002 0310 	and.w	r3, r2, #16
 8003852:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003856:	2300      	movs	r3, #0
 8003858:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800385c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003860:	460b      	mov	r3, r1
 8003862:	4313      	orrs	r3, r2
 8003864:	d01e      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800386a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800386e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003872:	d10c      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003878:	3328      	adds	r3, #40	@ 0x28
 800387a:	2102      	movs	r1, #2
 800387c:	4618      	mov	r0, r3
 800387e:	f000 fe25 	bl	80044cc <RCCEx_PLL3_Config>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d002      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800388e:	4b70      	ldr	r3, [pc, #448]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003892:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800389a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800389e:	4a6c      	ldr	r2, [pc, #432]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038a0:	430b      	orrs	r3, r1
 80038a2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ac:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80038b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80038b4:	2300      	movs	r3, #0
 80038b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80038ba:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80038be:	460b      	mov	r3, r1
 80038c0:	4313      	orrs	r3, r2
 80038c2:	d03e      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80038c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80038cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038d0:	d022      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80038d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038d6:	d81b      	bhi.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80038dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038e0:	d00b      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80038e2:	e015      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e8:	3308      	adds	r3, #8
 80038ea:	2100      	movs	r1, #0
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 fd3b 	bl	8004368 <RCCEx_PLL2_Config>
 80038f2:	4603      	mov	r3, r0
 80038f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80038f8:	e00f      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038fe:	3328      	adds	r3, #40	@ 0x28
 8003900:	2102      	movs	r1, #2
 8003902:	4618      	mov	r0, r3
 8003904:	f000 fde2 	bl	80044cc <RCCEx_PLL3_Config>
 8003908:	4603      	mov	r3, r0
 800390a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800390e:	e004      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003916:	e000      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003918:	bf00      	nop
    }

    if (ret == HAL_OK)
 800391a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10b      	bne.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003922:	4b4b      	ldr	r3, [pc, #300]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003926:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800392a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800392e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003932:	4a47      	ldr	r2, [pc, #284]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003934:	430b      	orrs	r3, r1
 8003936:	6593      	str	r3, [r2, #88]	@ 0x58
 8003938:	e003      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800393a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800393e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800394e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003950:	2300      	movs	r3, #0
 8003952:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003954:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003958:	460b      	mov	r3, r1
 800395a:	4313      	orrs	r3, r2
 800395c:	d03b      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800395e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003966:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800396a:	d01f      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800396c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003970:	d818      	bhi.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003972:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003976:	d003      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003978:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800397c:	d007      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800397e:	e011      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003980:	4b33      	ldr	r3, [pc, #204]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003984:	4a32      	ldr	r2, [pc, #200]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003986:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800398a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800398c:	e00f      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800398e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003992:	3328      	adds	r3, #40	@ 0x28
 8003994:	2101      	movs	r1, #1
 8003996:	4618      	mov	r0, r3
 8003998:	f000 fd98 	bl	80044cc <RCCEx_PLL3_Config>
 800399c:	4603      	mov	r3, r0
 800399e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80039a2:	e004      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039aa:	e000      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80039ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10b      	bne.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039b6:	4b26      	ldr	r3, [pc, #152]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80039be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039c6:	4a22      	ldr	r2, [pc, #136]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039c8:	430b      	orrs	r3, r1
 80039ca:	6553      	str	r3, [r2, #84]	@ 0x54
 80039cc:	e003      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80039d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039de:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80039e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80039e4:	2300      	movs	r3, #0
 80039e6:	677b      	str	r3, [r7, #116]	@ 0x74
 80039e8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80039ec:	460b      	mov	r3, r1
 80039ee:	4313      	orrs	r3, r2
 80039f0:	d034      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80039f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80039fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a00:	d007      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003a02:	e011      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a04:	4b12      	ldr	r3, [pc, #72]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a08:	4a11      	ldr	r2, [pc, #68]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003a10:	e00e      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a16:	3308      	adds	r3, #8
 8003a18:	2102      	movs	r1, #2
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fca4 	bl	8004368 <RCCEx_PLL2_Config>
 8003a20:	4603      	mov	r3, r0
 8003a22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003a26:	e003      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10d      	bne.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003a38:	4b05      	ldr	r3, [pc, #20]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a3c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a46:	4a02      	ldr	r2, [pc, #8]	@ (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a48:	430b      	orrs	r3, r1
 8003a4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a4c:	e006      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003a4e:	bf00      	nop
 8003a50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a64:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003a68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a6e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003a72:	460b      	mov	r3, r1
 8003a74:	4313      	orrs	r3, r2
 8003a76:	d00c      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a7c:	3328      	adds	r3, #40	@ 0x28
 8003a7e:	2102      	movs	r1, #2
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 fd23 	bl	80044cc <RCCEx_PLL3_Config>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003a9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	667b      	str	r3, [r7, #100]	@ 0x64
 8003aa4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	d038      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ab6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003aba:	d018      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003abc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ac0:	d811      	bhi.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003ac2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ac6:	d014      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003ac8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003acc:	d80b      	bhi.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d011      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003ad2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ad6:	d106      	bne.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ad8:	4bc3      	ldr	r3, [pc, #780]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003adc:	4ac2      	ldr	r2, [pc, #776]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ade:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ae2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003ae4:	e008      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003aec:	e004      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003aee:	bf00      	nop
 8003af0:	e002      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003af2:	bf00      	nop
 8003af4:	e000      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003af6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003af8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10b      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b00:	4bb9      	ldr	r3, [pc, #740]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b04:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b10:	4ab5      	ldr	r2, [pc, #724]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b12:	430b      	orrs	r3, r1
 8003b14:	6553      	str	r3, [r2, #84]	@ 0x54
 8003b16:	e003      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b28:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003b2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b2e:	2300      	movs	r3, #0
 8003b30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b32:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003b36:	460b      	mov	r3, r1
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	d009      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003b3c:	4baa      	ldr	r3, [pc, #680]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b40:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b4a:	4aa7      	ldr	r2, [pc, #668]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b4c:	430b      	orrs	r3, r1
 8003b4e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b58:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003b5c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b5e:	2300      	movs	r3, #0
 8003b60:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b62:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003b66:	460b      	mov	r3, r1
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	d00a      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003b6c:	4b9e      	ldr	r3, [pc, #632]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b78:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003b7c:	4a9a      	ldr	r2, [pc, #616]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b7e:	430b      	orrs	r3, r1
 8003b80:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b90:	2300      	movs	r3, #0
 8003b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b94:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	d009      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b9e:	4b92      	ldr	r3, [pc, #584]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ba0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ba2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003baa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bac:	4a8e      	ldr	r2, [pc, #568]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bae:	430b      	orrs	r3, r1
 8003bb0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bba:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003bbe:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bc4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003bc8:	460b      	mov	r3, r1
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	d00e      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003bce:	4b86      	ldr	r3, [pc, #536]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	4a85      	ldr	r2, [pc, #532]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bd4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003bd8:	6113      	str	r3, [r2, #16]
 8003bda:	4b83      	ldr	r3, [pc, #524]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bdc:	6919      	ldr	r1, [r3, #16]
 8003bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003be6:	4a80      	ldr	r2, [pc, #512]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003be8:	430b      	orrs	r3, r1
 8003bea:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003bf8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bfe:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003c02:	460b      	mov	r3, r1
 8003c04:	4313      	orrs	r3, r2
 8003c06:	d009      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003c08:	4b77      	ldr	r3, [pc, #476]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c0c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c16:	4a74      	ldr	r2, [pc, #464]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c18:	430b      	orrs	r3, r1
 8003c1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c24:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003c28:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c2e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003c32:	460b      	mov	r3, r1
 8003c34:	4313      	orrs	r3, r2
 8003c36:	d00a      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c38:	4b6b      	ldr	r3, [pc, #428]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c3c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c48:	4a67      	ldr	r2, [pc, #412]	@ (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c4a:	430b      	orrs	r3, r1
 8003c4c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c56:	2100      	movs	r1, #0
 8003c58:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c60:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003c64:	460b      	mov	r3, r1
 8003c66:	4313      	orrs	r3, r2
 8003c68:	d011      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c6e:	3308      	adds	r3, #8
 8003c70:	2100      	movs	r1, #0
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 fb78 	bl	8004368 <RCCEx_PLL2_Config>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c96:	2100      	movs	r1, #0
 8003c98:	6239      	str	r1, [r7, #32]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ca0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	d011      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cae:	3308      	adds	r3, #8
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 fb58 	bl	8004368 <RCCEx_PLL2_Config>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	61b9      	str	r1, [r7, #24]
 8003cda:	f003 0304 	and.w	r3, r3, #4
 8003cde:	61fb      	str	r3, [r7, #28]
 8003ce0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	d011      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cee:	3308      	adds	r3, #8
 8003cf0:	2102      	movs	r1, #2
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 fb38 	bl	8004368 <RCCEx_PLL2_Config>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d16:	2100      	movs	r1, #0
 8003d18:	6139      	str	r1, [r7, #16]
 8003d1a:	f003 0308 	and.w	r3, r3, #8
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003d24:	460b      	mov	r3, r1
 8003d26:	4313      	orrs	r3, r2
 8003d28:	d011      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d2e:	3328      	adds	r3, #40	@ 0x28
 8003d30:	2100      	movs	r1, #0
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 fbca 	bl	80044cc <RCCEx_PLL3_Config>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d56:	2100      	movs	r1, #0
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	f003 0310 	and.w	r3, r3, #16
 8003d5e:	60fb      	str	r3, [r7, #12]
 8003d60:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003d64:	460b      	mov	r3, r1
 8003d66:	4313      	orrs	r3, r2
 8003d68:	d011      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d6e:	3328      	adds	r3, #40	@ 0x28
 8003d70:	2101      	movs	r1, #1
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 fbaa 	bl	80044cc <RCCEx_PLL3_Config>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003d7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d003      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d96:	2100      	movs	r1, #0
 8003d98:	6039      	str	r1, [r7, #0]
 8003d9a:	f003 0320 	and.w	r3, r3, #32
 8003d9e:	607b      	str	r3, [r7, #4]
 8003da0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003da4:	460b      	mov	r3, r1
 8003da6:	4313      	orrs	r3, r2
 8003da8:	d011      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dae:	3328      	adds	r3, #40	@ 0x28
 8003db0:	2102      	movs	r1, #2
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 fb8a 	bl	80044cc <RCCEx_PLL3_Config>
 8003db8:	4603      	mov	r3, r0
 8003dba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003dce:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	e000      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003de2:	46bd      	mov	sp, r7
 8003de4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003de8:	58024400 	.word	0x58024400

08003dec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003df0:	f7fe fd96 	bl	8002920 <HAL_RCC_GetHCLKFreq>
 8003df4:	4602      	mov	r2, r0
 8003df6:	4b06      	ldr	r3, [pc, #24]	@ (8003e10 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	091b      	lsrs	r3, r3, #4
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	4904      	ldr	r1, [pc, #16]	@ (8003e14 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003e02:	5ccb      	ldrb	r3, [r1, r3]
 8003e04:	f003 031f 	and.w	r3, r3, #31
 8003e08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	58024400 	.word	0x58024400
 8003e14:	08007df8 	.word	0x08007df8

08003e18 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b089      	sub	sp, #36	@ 0x24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e20:	4ba1      	ldr	r3, [pc, #644]	@ (80040a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e24:	f003 0303 	and.w	r3, r3, #3
 8003e28:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003e2a:	4b9f      	ldr	r3, [pc, #636]	@ (80040a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e2e:	0b1b      	lsrs	r3, r3, #12
 8003e30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e34:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003e36:	4b9c      	ldr	r3, [pc, #624]	@ (80040a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3a:	091b      	lsrs	r3, r3, #4
 8003e3c:	f003 0301 	and.w	r3, r3, #1
 8003e40:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003e42:	4b99      	ldr	r3, [pc, #612]	@ (80040a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e46:	08db      	lsrs	r3, r3, #3
 8003e48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	fb02 f303 	mul.w	r3, r2, r3
 8003e52:	ee07 3a90 	vmov	s15, r3
 8003e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 8111 	beq.w	8004088 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	f000 8083 	beq.w	8003f74 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	f200 80a1 	bhi.w	8003fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d056      	beq.n	8003f30 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003e82:	e099      	b.n	8003fb8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e84:	4b88      	ldr	r3, [pc, #544]	@ (80040a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0320 	and.w	r3, r3, #32
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d02d      	beq.n	8003eec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e90:	4b85      	ldr	r3, [pc, #532]	@ (80040a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	08db      	lsrs	r3, r3, #3
 8003e96:	f003 0303 	and.w	r3, r3, #3
 8003e9a:	4a84      	ldr	r2, [pc, #528]	@ (80040ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003ea0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	ee07 3a90 	vmov	s15, r3
 8003ea8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	ee07 3a90 	vmov	s15, r3
 8003eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eba:	4b7b      	ldr	r3, [pc, #492]	@ (80040a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ec2:	ee07 3a90 	vmov	s15, r3
 8003ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003eca:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ece:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80040b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ee6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003eea:	e087      	b.n	8003ffc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	ee07 3a90 	vmov	s15, r3
 8003ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ef6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80040b4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003efe:	4b6a      	ldr	r3, [pc, #424]	@ (80040a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f06:	ee07 3a90 	vmov	s15, r3
 8003f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f12:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80040b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f2e:	e065      	b.n	8003ffc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	ee07 3a90 	vmov	s15, r3
 8003f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f3a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80040b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f42:	4b59      	ldr	r3, [pc, #356]	@ (80040a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f4a:	ee07 3a90 	vmov	s15, r3
 8003f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f52:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f56:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80040b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f72:	e043      	b.n	8003ffc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	ee07 3a90 	vmov	s15, r3
 8003f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f7e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80040bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f86:	4b48      	ldr	r3, [pc, #288]	@ (80040a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f8e:	ee07 3a90 	vmov	s15, r3
 8003f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f96:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f9a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80040b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fb6:	e021      	b.n	8003ffc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	ee07 3a90 	vmov	s15, r3
 8003fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fc2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80040b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fca:	4b37      	ldr	r3, [pc, #220]	@ (80040a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fd2:	ee07 3a90 	vmov	s15, r3
 8003fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fda:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fde:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80040b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ff6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ffa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003ffc:	4b2a      	ldr	r3, [pc, #168]	@ (80040a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004000:	0a5b      	lsrs	r3, r3, #9
 8004002:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004006:	ee07 3a90 	vmov	s15, r3
 800400a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800400e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004012:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004016:	edd7 6a07 	vldr	s13, [r7, #28]
 800401a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800401e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004022:	ee17 2a90 	vmov	r2, s15
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800402a:	4b1f      	ldr	r3, [pc, #124]	@ (80040a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800402c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800402e:	0c1b      	lsrs	r3, r3, #16
 8004030:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004034:	ee07 3a90 	vmov	s15, r3
 8004038:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800403c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004040:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004044:	edd7 6a07 	vldr	s13, [r7, #28]
 8004048:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800404c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004050:	ee17 2a90 	vmov	r2, s15
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004058:	4b13      	ldr	r3, [pc, #76]	@ (80040a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800405a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800405c:	0e1b      	lsrs	r3, r3, #24
 800405e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004062:	ee07 3a90 	vmov	s15, r3
 8004066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800406a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800406e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004072:	edd7 6a07 	vldr	s13, [r7, #28]
 8004076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800407a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800407e:	ee17 2a90 	vmov	r2, s15
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004086:	e008      	b.n	800409a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	609a      	str	r2, [r3, #8]
}
 800409a:	bf00      	nop
 800409c:	3724      	adds	r7, #36	@ 0x24
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	58024400 	.word	0x58024400
 80040ac:	03d09000 	.word	0x03d09000
 80040b0:	46000000 	.word	0x46000000
 80040b4:	4c742400 	.word	0x4c742400
 80040b8:	4a742400 	.word	0x4a742400
 80040bc:	4af42400 	.word	0x4af42400

080040c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b089      	sub	sp, #36	@ 0x24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80040c8:	4ba1      	ldr	r3, [pc, #644]	@ (8004350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040cc:	f003 0303 	and.w	r3, r3, #3
 80040d0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80040d2:	4b9f      	ldr	r3, [pc, #636]	@ (8004350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d6:	0d1b      	lsrs	r3, r3, #20
 80040d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040dc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80040de:	4b9c      	ldr	r3, [pc, #624]	@ (8004350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e2:	0a1b      	lsrs	r3, r3, #8
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80040ea:	4b99      	ldr	r3, [pc, #612]	@ (8004350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ee:	08db      	lsrs	r3, r3, #3
 80040f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	fb02 f303 	mul.w	r3, r2, r3
 80040fa:	ee07 3a90 	vmov	s15, r3
 80040fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004102:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 8111 	beq.w	8004330 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	2b02      	cmp	r3, #2
 8004112:	f000 8083 	beq.w	800421c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	2b02      	cmp	r3, #2
 800411a:	f200 80a1 	bhi.w	8004260 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d056      	beq.n	80041d8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800412a:	e099      	b.n	8004260 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800412c:	4b88      	ldr	r3, [pc, #544]	@ (8004350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0320 	and.w	r3, r3, #32
 8004134:	2b00      	cmp	r3, #0
 8004136:	d02d      	beq.n	8004194 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004138:	4b85      	ldr	r3, [pc, #532]	@ (8004350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	08db      	lsrs	r3, r3, #3
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	4a84      	ldr	r2, [pc, #528]	@ (8004354 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004144:	fa22 f303 	lsr.w	r3, r2, r3
 8004148:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	ee07 3a90 	vmov	s15, r3
 8004150:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	ee07 3a90 	vmov	s15, r3
 800415a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800415e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004162:	4b7b      	ldr	r3, [pc, #492]	@ (8004350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800416a:	ee07 3a90 	vmov	s15, r3
 800416e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004172:	ed97 6a03 	vldr	s12, [r7, #12]
 8004176:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004358 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800417a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800417e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004182:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800418a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800418e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004192:	e087      	b.n	80042a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	ee07 3a90 	vmov	s15, r3
 800419a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800419e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800435c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80041a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041a6:	4b6a      	ldr	r3, [pc, #424]	@ (8004350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ae:	ee07 3a90 	vmov	s15, r3
 80041b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80041ba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004358 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80041be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041d6:	e065      	b.n	80042a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	ee07 3a90 	vmov	s15, r3
 80041de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041e2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004360 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80041e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ea:	4b59      	ldr	r3, [pc, #356]	@ (8004350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041f2:	ee07 3a90 	vmov	s15, r3
 80041f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80041fe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004358 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800420a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800420e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004216:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800421a:	e043      	b.n	80042a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	ee07 3a90 	vmov	s15, r3
 8004222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004226:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004364 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800422a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800422e:	4b48      	ldr	r3, [pc, #288]	@ (8004350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004236:	ee07 3a90 	vmov	s15, r3
 800423a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800423e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004242:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004358 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800424a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800424e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800425a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800425e:	e021      	b.n	80042a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	ee07 3a90 	vmov	s15, r3
 8004266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800426a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004360 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800426e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004272:	4b37      	ldr	r3, [pc, #220]	@ (8004350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800427a:	ee07 3a90 	vmov	s15, r3
 800427e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004282:	ed97 6a03 	vldr	s12, [r7, #12]
 8004286:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004358 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800428a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800428e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004292:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800429a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800429e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042a2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80042a4:	4b2a      	ldr	r3, [pc, #168]	@ (8004350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a8:	0a5b      	lsrs	r3, r3, #9
 80042aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042ae:	ee07 3a90 	vmov	s15, r3
 80042b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80042ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042be:	edd7 6a07 	vldr	s13, [r7, #28]
 80042c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042ca:	ee17 2a90 	vmov	r2, s15
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80042d2:	4b1f      	ldr	r3, [pc, #124]	@ (8004350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d6:	0c1b      	lsrs	r3, r3, #16
 80042d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042dc:	ee07 3a90 	vmov	s15, r3
 80042e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80042e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80042f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042f8:	ee17 2a90 	vmov	r2, s15
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004300:	4b13      	ldr	r3, [pc, #76]	@ (8004350 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004304:	0e1b      	lsrs	r3, r3, #24
 8004306:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800430a:	ee07 3a90 	vmov	s15, r3
 800430e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004312:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004316:	ee37 7a87 	vadd.f32	s14, s15, s14
 800431a:	edd7 6a07 	vldr	s13, [r7, #28]
 800431e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004326:	ee17 2a90 	vmov	r2, s15
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800432e:	e008      	b.n	8004342 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	609a      	str	r2, [r3, #8]
}
 8004342:	bf00      	nop
 8004344:	3724      	adds	r7, #36	@ 0x24
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	58024400 	.word	0x58024400
 8004354:	03d09000 	.word	0x03d09000
 8004358:	46000000 	.word	0x46000000
 800435c:	4c742400 	.word	0x4c742400
 8004360:	4a742400 	.word	0x4a742400
 8004364:	4af42400 	.word	0x4af42400

08004368 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004372:	2300      	movs	r3, #0
 8004374:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004376:	4b53      	ldr	r3, [pc, #332]	@ (80044c4 <RCCEx_PLL2_Config+0x15c>)
 8004378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	2b03      	cmp	r3, #3
 8004380:	d101      	bne.n	8004386 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e099      	b.n	80044ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004386:	4b4f      	ldr	r3, [pc, #316]	@ (80044c4 <RCCEx_PLL2_Config+0x15c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a4e      	ldr	r2, [pc, #312]	@ (80044c4 <RCCEx_PLL2_Config+0x15c>)
 800438c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004390:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004392:	f7fc ffff 	bl	8001394 <HAL_GetTick>
 8004396:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004398:	e008      	b.n	80043ac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800439a:	f7fc fffb 	bl	8001394 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d901      	bls.n	80043ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e086      	b.n	80044ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80043ac:	4b45      	ldr	r3, [pc, #276]	@ (80044c4 <RCCEx_PLL2_Config+0x15c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1f0      	bne.n	800439a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80043b8:	4b42      	ldr	r3, [pc, #264]	@ (80044c4 <RCCEx_PLL2_Config+0x15c>)
 80043ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043bc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	031b      	lsls	r3, r3, #12
 80043c6:	493f      	ldr	r1, [pc, #252]	@ (80044c4 <RCCEx_PLL2_Config+0x15c>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	628b      	str	r3, [r1, #40]	@ 0x28
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	3b01      	subs	r3, #1
 80043d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	3b01      	subs	r3, #1
 80043dc:	025b      	lsls	r3, r3, #9
 80043de:	b29b      	uxth	r3, r3
 80043e0:	431a      	orrs	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	3b01      	subs	r3, #1
 80043e8:	041b      	lsls	r3, r3, #16
 80043ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80043ee:	431a      	orrs	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	3b01      	subs	r3, #1
 80043f6:	061b      	lsls	r3, r3, #24
 80043f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80043fc:	4931      	ldr	r1, [pc, #196]	@ (80044c4 <RCCEx_PLL2_Config+0x15c>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004402:	4b30      	ldr	r3, [pc, #192]	@ (80044c4 <RCCEx_PLL2_Config+0x15c>)
 8004404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004406:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	492d      	ldr	r1, [pc, #180]	@ (80044c4 <RCCEx_PLL2_Config+0x15c>)
 8004410:	4313      	orrs	r3, r2
 8004412:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004414:	4b2b      	ldr	r3, [pc, #172]	@ (80044c4 <RCCEx_PLL2_Config+0x15c>)
 8004416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004418:	f023 0220 	bic.w	r2, r3, #32
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	4928      	ldr	r1, [pc, #160]	@ (80044c4 <RCCEx_PLL2_Config+0x15c>)
 8004422:	4313      	orrs	r3, r2
 8004424:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004426:	4b27      	ldr	r3, [pc, #156]	@ (80044c4 <RCCEx_PLL2_Config+0x15c>)
 8004428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800442a:	4a26      	ldr	r2, [pc, #152]	@ (80044c4 <RCCEx_PLL2_Config+0x15c>)
 800442c:	f023 0310 	bic.w	r3, r3, #16
 8004430:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004432:	4b24      	ldr	r3, [pc, #144]	@ (80044c4 <RCCEx_PLL2_Config+0x15c>)
 8004434:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004436:	4b24      	ldr	r3, [pc, #144]	@ (80044c8 <RCCEx_PLL2_Config+0x160>)
 8004438:	4013      	ands	r3, r2
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	69d2      	ldr	r2, [r2, #28]
 800443e:	00d2      	lsls	r2, r2, #3
 8004440:	4920      	ldr	r1, [pc, #128]	@ (80044c4 <RCCEx_PLL2_Config+0x15c>)
 8004442:	4313      	orrs	r3, r2
 8004444:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004446:	4b1f      	ldr	r3, [pc, #124]	@ (80044c4 <RCCEx_PLL2_Config+0x15c>)
 8004448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800444a:	4a1e      	ldr	r2, [pc, #120]	@ (80044c4 <RCCEx_PLL2_Config+0x15c>)
 800444c:	f043 0310 	orr.w	r3, r3, #16
 8004450:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d106      	bne.n	8004466 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004458:	4b1a      	ldr	r3, [pc, #104]	@ (80044c4 <RCCEx_PLL2_Config+0x15c>)
 800445a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445c:	4a19      	ldr	r2, [pc, #100]	@ (80044c4 <RCCEx_PLL2_Config+0x15c>)
 800445e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004462:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004464:	e00f      	b.n	8004486 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d106      	bne.n	800447a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800446c:	4b15      	ldr	r3, [pc, #84]	@ (80044c4 <RCCEx_PLL2_Config+0x15c>)
 800446e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004470:	4a14      	ldr	r2, [pc, #80]	@ (80044c4 <RCCEx_PLL2_Config+0x15c>)
 8004472:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004476:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004478:	e005      	b.n	8004486 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800447a:	4b12      	ldr	r3, [pc, #72]	@ (80044c4 <RCCEx_PLL2_Config+0x15c>)
 800447c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800447e:	4a11      	ldr	r2, [pc, #68]	@ (80044c4 <RCCEx_PLL2_Config+0x15c>)
 8004480:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004484:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004486:	4b0f      	ldr	r3, [pc, #60]	@ (80044c4 <RCCEx_PLL2_Config+0x15c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a0e      	ldr	r2, [pc, #56]	@ (80044c4 <RCCEx_PLL2_Config+0x15c>)
 800448c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004490:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004492:	f7fc ff7f 	bl	8001394 <HAL_GetTick>
 8004496:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004498:	e008      	b.n	80044ac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800449a:	f7fc ff7b 	bl	8001394 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d901      	bls.n	80044ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e006      	b.n	80044ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80044ac:	4b05      	ldr	r3, [pc, #20]	@ (80044c4 <RCCEx_PLL2_Config+0x15c>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0f0      	beq.n	800449a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	58024400 	.word	0x58024400
 80044c8:	ffff0007 	.word	0xffff0007

080044cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044d6:	2300      	movs	r3, #0
 80044d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80044da:	4b53      	ldr	r3, [pc, #332]	@ (8004628 <RCCEx_PLL3_Config+0x15c>)
 80044dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	2b03      	cmp	r3, #3
 80044e4:	d101      	bne.n	80044ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e099      	b.n	800461e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80044ea:	4b4f      	ldr	r3, [pc, #316]	@ (8004628 <RCCEx_PLL3_Config+0x15c>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a4e      	ldr	r2, [pc, #312]	@ (8004628 <RCCEx_PLL3_Config+0x15c>)
 80044f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044f6:	f7fc ff4d 	bl	8001394 <HAL_GetTick>
 80044fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80044fc:	e008      	b.n	8004510 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80044fe:	f7fc ff49 	bl	8001394 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b02      	cmp	r3, #2
 800450a:	d901      	bls.n	8004510 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e086      	b.n	800461e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004510:	4b45      	ldr	r3, [pc, #276]	@ (8004628 <RCCEx_PLL3_Config+0x15c>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1f0      	bne.n	80044fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800451c:	4b42      	ldr	r3, [pc, #264]	@ (8004628 <RCCEx_PLL3_Config+0x15c>)
 800451e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004520:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	051b      	lsls	r3, r3, #20
 800452a:	493f      	ldr	r1, [pc, #252]	@ (8004628 <RCCEx_PLL3_Config+0x15c>)
 800452c:	4313      	orrs	r3, r2
 800452e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	3b01      	subs	r3, #1
 8004536:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	3b01      	subs	r3, #1
 8004540:	025b      	lsls	r3, r3, #9
 8004542:	b29b      	uxth	r3, r3
 8004544:	431a      	orrs	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	3b01      	subs	r3, #1
 800454c:	041b      	lsls	r3, r3, #16
 800454e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	3b01      	subs	r3, #1
 800455a:	061b      	lsls	r3, r3, #24
 800455c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004560:	4931      	ldr	r1, [pc, #196]	@ (8004628 <RCCEx_PLL3_Config+0x15c>)
 8004562:	4313      	orrs	r3, r2
 8004564:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004566:	4b30      	ldr	r3, [pc, #192]	@ (8004628 <RCCEx_PLL3_Config+0x15c>)
 8004568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800456a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	492d      	ldr	r1, [pc, #180]	@ (8004628 <RCCEx_PLL3_Config+0x15c>)
 8004574:	4313      	orrs	r3, r2
 8004576:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004578:	4b2b      	ldr	r3, [pc, #172]	@ (8004628 <RCCEx_PLL3_Config+0x15c>)
 800457a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	4928      	ldr	r1, [pc, #160]	@ (8004628 <RCCEx_PLL3_Config+0x15c>)
 8004586:	4313      	orrs	r3, r2
 8004588:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800458a:	4b27      	ldr	r3, [pc, #156]	@ (8004628 <RCCEx_PLL3_Config+0x15c>)
 800458c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458e:	4a26      	ldr	r2, [pc, #152]	@ (8004628 <RCCEx_PLL3_Config+0x15c>)
 8004590:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004594:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004596:	4b24      	ldr	r3, [pc, #144]	@ (8004628 <RCCEx_PLL3_Config+0x15c>)
 8004598:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800459a:	4b24      	ldr	r3, [pc, #144]	@ (800462c <RCCEx_PLL3_Config+0x160>)
 800459c:	4013      	ands	r3, r2
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	69d2      	ldr	r2, [r2, #28]
 80045a2:	00d2      	lsls	r2, r2, #3
 80045a4:	4920      	ldr	r1, [pc, #128]	@ (8004628 <RCCEx_PLL3_Config+0x15c>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80045aa:	4b1f      	ldr	r3, [pc, #124]	@ (8004628 <RCCEx_PLL3_Config+0x15c>)
 80045ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ae:	4a1e      	ldr	r2, [pc, #120]	@ (8004628 <RCCEx_PLL3_Config+0x15c>)
 80045b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d106      	bne.n	80045ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80045bc:	4b1a      	ldr	r3, [pc, #104]	@ (8004628 <RCCEx_PLL3_Config+0x15c>)
 80045be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c0:	4a19      	ldr	r2, [pc, #100]	@ (8004628 <RCCEx_PLL3_Config+0x15c>)
 80045c2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80045c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80045c8:	e00f      	b.n	80045ea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d106      	bne.n	80045de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80045d0:	4b15      	ldr	r3, [pc, #84]	@ (8004628 <RCCEx_PLL3_Config+0x15c>)
 80045d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d4:	4a14      	ldr	r2, [pc, #80]	@ (8004628 <RCCEx_PLL3_Config+0x15c>)
 80045d6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80045da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80045dc:	e005      	b.n	80045ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80045de:	4b12      	ldr	r3, [pc, #72]	@ (8004628 <RCCEx_PLL3_Config+0x15c>)
 80045e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e2:	4a11      	ldr	r2, [pc, #68]	@ (8004628 <RCCEx_PLL3_Config+0x15c>)
 80045e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80045e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80045ea:	4b0f      	ldr	r3, [pc, #60]	@ (8004628 <RCCEx_PLL3_Config+0x15c>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a0e      	ldr	r2, [pc, #56]	@ (8004628 <RCCEx_PLL3_Config+0x15c>)
 80045f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045f6:	f7fc fecd 	bl	8001394 <HAL_GetTick>
 80045fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80045fc:	e008      	b.n	8004610 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80045fe:	f7fc fec9 	bl	8001394 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e006      	b.n	800461e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004610:	4b05      	ldr	r3, [pc, #20]	@ (8004628 <RCCEx_PLL3_Config+0x15c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0f0      	beq.n	80045fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800461c:	7bfb      	ldrb	r3, [r7, #15]
}
 800461e:	4618      	mov	r0, r3
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	58024400 	.word	0x58024400
 800462c:	ffff0007 	.word	0xffff0007

08004630 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d101      	bne.n	8004642 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e049      	b.n	80046d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d106      	bne.n	800465c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7fc fcc0 	bl	8000fdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2202      	movs	r2, #2
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	3304      	adds	r3, #4
 800466c:	4619      	mov	r1, r3
 800466e:	4610      	mov	r0, r2
 8004670:	f000 fbb0 	bl	8004dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b082      	sub	sp, #8
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e049      	b.n	8004784 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d106      	bne.n	800470a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 f841 	bl	800478c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2202      	movs	r2, #2
 800470e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	3304      	adds	r3, #4
 800471a:	4619      	mov	r1, r3
 800471c:	4610      	mov	r0, r2
 800471e:	f000 fb59 	bl	8004dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d109      	bne.n	80047c4 <HAL_TIM_PWM_Start+0x24>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	bf14      	ite	ne
 80047bc:	2301      	movne	r3, #1
 80047be:	2300      	moveq	r3, #0
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	e03c      	b.n	800483e <HAL_TIM_PWM_Start+0x9e>
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	d109      	bne.n	80047de <HAL_TIM_PWM_Start+0x3e>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	bf14      	ite	ne
 80047d6:	2301      	movne	r3, #1
 80047d8:	2300      	moveq	r3, #0
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	e02f      	b.n	800483e <HAL_TIM_PWM_Start+0x9e>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d109      	bne.n	80047f8 <HAL_TIM_PWM_Start+0x58>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	bf14      	ite	ne
 80047f0:	2301      	movne	r3, #1
 80047f2:	2300      	moveq	r3, #0
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	e022      	b.n	800483e <HAL_TIM_PWM_Start+0x9e>
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	2b0c      	cmp	r3, #12
 80047fc:	d109      	bne.n	8004812 <HAL_TIM_PWM_Start+0x72>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b01      	cmp	r3, #1
 8004808:	bf14      	ite	ne
 800480a:	2301      	movne	r3, #1
 800480c:	2300      	moveq	r3, #0
 800480e:	b2db      	uxtb	r3, r3
 8004810:	e015      	b.n	800483e <HAL_TIM_PWM_Start+0x9e>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b10      	cmp	r3, #16
 8004816:	d109      	bne.n	800482c <HAL_TIM_PWM_Start+0x8c>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b01      	cmp	r3, #1
 8004822:	bf14      	ite	ne
 8004824:	2301      	movne	r3, #1
 8004826:	2300      	moveq	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	e008      	b.n	800483e <HAL_TIM_PWM_Start+0x9e>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004832:	b2db      	uxtb	r3, r3
 8004834:	2b01      	cmp	r3, #1
 8004836:	bf14      	ite	ne
 8004838:	2301      	movne	r3, #1
 800483a:	2300      	moveq	r3, #0
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e0a1      	b.n	800498a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d104      	bne.n	8004856 <HAL_TIM_PWM_Start+0xb6>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004854:	e023      	b.n	800489e <HAL_TIM_PWM_Start+0xfe>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b04      	cmp	r3, #4
 800485a:	d104      	bne.n	8004866 <HAL_TIM_PWM_Start+0xc6>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2202      	movs	r2, #2
 8004860:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004864:	e01b      	b.n	800489e <HAL_TIM_PWM_Start+0xfe>
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b08      	cmp	r3, #8
 800486a:	d104      	bne.n	8004876 <HAL_TIM_PWM_Start+0xd6>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004874:	e013      	b.n	800489e <HAL_TIM_PWM_Start+0xfe>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	2b0c      	cmp	r3, #12
 800487a:	d104      	bne.n	8004886 <HAL_TIM_PWM_Start+0xe6>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004884:	e00b      	b.n	800489e <HAL_TIM_PWM_Start+0xfe>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b10      	cmp	r3, #16
 800488a:	d104      	bne.n	8004896 <HAL_TIM_PWM_Start+0xf6>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2202      	movs	r2, #2
 8004890:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004894:	e003      	b.n	800489e <HAL_TIM_PWM_Start+0xfe>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2202      	movs	r2, #2
 800489a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2201      	movs	r2, #1
 80048a4:	6839      	ldr	r1, [r7, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 fea8 	bl	80055fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a38      	ldr	r2, [pc, #224]	@ (8004994 <HAL_TIM_PWM_Start+0x1f4>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d013      	beq.n	80048de <HAL_TIM_PWM_Start+0x13e>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a37      	ldr	r2, [pc, #220]	@ (8004998 <HAL_TIM_PWM_Start+0x1f8>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d00e      	beq.n	80048de <HAL_TIM_PWM_Start+0x13e>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a35      	ldr	r2, [pc, #212]	@ (800499c <HAL_TIM_PWM_Start+0x1fc>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d009      	beq.n	80048de <HAL_TIM_PWM_Start+0x13e>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a34      	ldr	r2, [pc, #208]	@ (80049a0 <HAL_TIM_PWM_Start+0x200>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d004      	beq.n	80048de <HAL_TIM_PWM_Start+0x13e>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a32      	ldr	r2, [pc, #200]	@ (80049a4 <HAL_TIM_PWM_Start+0x204>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d101      	bne.n	80048e2 <HAL_TIM_PWM_Start+0x142>
 80048de:	2301      	movs	r3, #1
 80048e0:	e000      	b.n	80048e4 <HAL_TIM_PWM_Start+0x144>
 80048e2:	2300      	movs	r3, #0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d007      	beq.n	80048f8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048f6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a25      	ldr	r2, [pc, #148]	@ (8004994 <HAL_TIM_PWM_Start+0x1f4>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d022      	beq.n	8004948 <HAL_TIM_PWM_Start+0x1a8>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800490a:	d01d      	beq.n	8004948 <HAL_TIM_PWM_Start+0x1a8>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a25      	ldr	r2, [pc, #148]	@ (80049a8 <HAL_TIM_PWM_Start+0x208>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d018      	beq.n	8004948 <HAL_TIM_PWM_Start+0x1a8>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a24      	ldr	r2, [pc, #144]	@ (80049ac <HAL_TIM_PWM_Start+0x20c>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d013      	beq.n	8004948 <HAL_TIM_PWM_Start+0x1a8>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a22      	ldr	r2, [pc, #136]	@ (80049b0 <HAL_TIM_PWM_Start+0x210>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d00e      	beq.n	8004948 <HAL_TIM_PWM_Start+0x1a8>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a1a      	ldr	r2, [pc, #104]	@ (8004998 <HAL_TIM_PWM_Start+0x1f8>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d009      	beq.n	8004948 <HAL_TIM_PWM_Start+0x1a8>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a1e      	ldr	r2, [pc, #120]	@ (80049b4 <HAL_TIM_PWM_Start+0x214>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d004      	beq.n	8004948 <HAL_TIM_PWM_Start+0x1a8>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a16      	ldr	r2, [pc, #88]	@ (800499c <HAL_TIM_PWM_Start+0x1fc>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d115      	bne.n	8004974 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689a      	ldr	r2, [r3, #8]
 800494e:	4b1a      	ldr	r3, [pc, #104]	@ (80049b8 <HAL_TIM_PWM_Start+0x218>)
 8004950:	4013      	ands	r3, r2
 8004952:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2b06      	cmp	r3, #6
 8004958:	d015      	beq.n	8004986 <HAL_TIM_PWM_Start+0x1e6>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004960:	d011      	beq.n	8004986 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f042 0201 	orr.w	r2, r2, #1
 8004970:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004972:	e008      	b.n	8004986 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0201 	orr.w	r2, r2, #1
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	e000      	b.n	8004988 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004986:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	40010000 	.word	0x40010000
 8004998:	40010400 	.word	0x40010400
 800499c:	40014000 	.word	0x40014000
 80049a0:	40014400 	.word	0x40014400
 80049a4:	40014800 	.word	0x40014800
 80049a8:	40000400 	.word	0x40000400
 80049ac:	40000800 	.word	0x40000800
 80049b0:	40000c00 	.word	0x40000c00
 80049b4:	40001800 	.word	0x40001800
 80049b8:	00010007 	.word	0x00010007

080049bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049c8:	2300      	movs	r3, #0
 80049ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d101      	bne.n	80049da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049d6:	2302      	movs	r3, #2
 80049d8:	e0ff      	b.n	8004bda <HAL_TIM_PWM_ConfigChannel+0x21e>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b14      	cmp	r3, #20
 80049e6:	f200 80f0 	bhi.w	8004bca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80049ea:	a201      	add	r2, pc, #4	@ (adr r2, 80049f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f0:	08004a45 	.word	0x08004a45
 80049f4:	08004bcb 	.word	0x08004bcb
 80049f8:	08004bcb 	.word	0x08004bcb
 80049fc:	08004bcb 	.word	0x08004bcb
 8004a00:	08004a85 	.word	0x08004a85
 8004a04:	08004bcb 	.word	0x08004bcb
 8004a08:	08004bcb 	.word	0x08004bcb
 8004a0c:	08004bcb 	.word	0x08004bcb
 8004a10:	08004ac7 	.word	0x08004ac7
 8004a14:	08004bcb 	.word	0x08004bcb
 8004a18:	08004bcb 	.word	0x08004bcb
 8004a1c:	08004bcb 	.word	0x08004bcb
 8004a20:	08004b07 	.word	0x08004b07
 8004a24:	08004bcb 	.word	0x08004bcb
 8004a28:	08004bcb 	.word	0x08004bcb
 8004a2c:	08004bcb 	.word	0x08004bcb
 8004a30:	08004b49 	.word	0x08004b49
 8004a34:	08004bcb 	.word	0x08004bcb
 8004a38:	08004bcb 	.word	0x08004bcb
 8004a3c:	08004bcb 	.word	0x08004bcb
 8004a40:	08004b89 	.word	0x08004b89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68b9      	ldr	r1, [r7, #8]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 fa62 	bl	8004f14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699a      	ldr	r2, [r3, #24]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 0208 	orr.w	r2, r2, #8
 8004a5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	699a      	ldr	r2, [r3, #24]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f022 0204 	bic.w	r2, r2, #4
 8004a6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6999      	ldr	r1, [r3, #24]
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	691a      	ldr	r2, [r3, #16]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	619a      	str	r2, [r3, #24]
      break;
 8004a82:	e0a5      	b.n	8004bd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68b9      	ldr	r1, [r7, #8]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 fad2 	bl	8005034 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	699a      	ldr	r2, [r3, #24]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	699a      	ldr	r2, [r3, #24]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6999      	ldr	r1, [r3, #24]
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	021a      	lsls	r2, r3, #8
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	619a      	str	r2, [r3, #24]
      break;
 8004ac4:	e084      	b.n	8004bd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68b9      	ldr	r1, [r7, #8]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 fb3b 	bl	8005148 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	69da      	ldr	r2, [r3, #28]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f042 0208 	orr.w	r2, r2, #8
 8004ae0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	69da      	ldr	r2, [r3, #28]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f022 0204 	bic.w	r2, r2, #4
 8004af0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	69d9      	ldr	r1, [r3, #28]
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	691a      	ldr	r2, [r3, #16]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	430a      	orrs	r2, r1
 8004b02:	61da      	str	r2, [r3, #28]
      break;
 8004b04:	e064      	b.n	8004bd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68b9      	ldr	r1, [r7, #8]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f000 fba3 	bl	8005258 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	69da      	ldr	r2, [r3, #28]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	69da      	ldr	r2, [r3, #28]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	69d9      	ldr	r1, [r3, #28]
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	021a      	lsls	r2, r3, #8
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	61da      	str	r2, [r3, #28]
      break;
 8004b46:	e043      	b.n	8004bd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68b9      	ldr	r1, [r7, #8]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 fbec 	bl	800532c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f042 0208 	orr.w	r2, r2, #8
 8004b62:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0204 	bic.w	r2, r2, #4
 8004b72:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	691a      	ldr	r2, [r3, #16]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004b86:	e023      	b.n	8004bd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68b9      	ldr	r1, [r7, #8]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 fc30 	bl	80053f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ba2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bb2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	021a      	lsls	r2, r3, #8
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004bc8:	e002      	b.n	8004bd0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	75fb      	strb	r3, [r7, #23]
      break;
 8004bce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004bd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3718      	adds	r7, #24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop

08004be4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d101      	bne.n	8004c00 <HAL_TIM_ConfigClockSource+0x1c>
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	e0dc      	b.n	8004dba <HAL_TIM_ConfigClockSource+0x1d6>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	4b6a      	ldr	r3, [pc, #424]	@ (8004dc4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a64      	ldr	r2, [pc, #400]	@ (8004dc8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	f000 80a9 	beq.w	8004d8e <HAL_TIM_ConfigClockSource+0x1aa>
 8004c3c:	4a62      	ldr	r2, [pc, #392]	@ (8004dc8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	f200 80ae 	bhi.w	8004da0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c44:	4a61      	ldr	r2, [pc, #388]	@ (8004dcc <HAL_TIM_ConfigClockSource+0x1e8>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	f000 80a1 	beq.w	8004d8e <HAL_TIM_ConfigClockSource+0x1aa>
 8004c4c:	4a5f      	ldr	r2, [pc, #380]	@ (8004dcc <HAL_TIM_ConfigClockSource+0x1e8>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	f200 80a6 	bhi.w	8004da0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c54:	4a5e      	ldr	r2, [pc, #376]	@ (8004dd0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	f000 8099 	beq.w	8004d8e <HAL_TIM_ConfigClockSource+0x1aa>
 8004c5c:	4a5c      	ldr	r2, [pc, #368]	@ (8004dd0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	f200 809e 	bhi.w	8004da0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c64:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004c68:	f000 8091 	beq.w	8004d8e <HAL_TIM_ConfigClockSource+0x1aa>
 8004c6c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004c70:	f200 8096 	bhi.w	8004da0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c74:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c78:	f000 8089 	beq.w	8004d8e <HAL_TIM_ConfigClockSource+0x1aa>
 8004c7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c80:	f200 808e 	bhi.w	8004da0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c88:	d03e      	beq.n	8004d08 <HAL_TIM_ConfigClockSource+0x124>
 8004c8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c8e:	f200 8087 	bhi.w	8004da0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c96:	f000 8086 	beq.w	8004da6 <HAL_TIM_ConfigClockSource+0x1c2>
 8004c9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c9e:	d87f      	bhi.n	8004da0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004ca0:	2b70      	cmp	r3, #112	@ 0x70
 8004ca2:	d01a      	beq.n	8004cda <HAL_TIM_ConfigClockSource+0xf6>
 8004ca4:	2b70      	cmp	r3, #112	@ 0x70
 8004ca6:	d87b      	bhi.n	8004da0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004ca8:	2b60      	cmp	r3, #96	@ 0x60
 8004caa:	d050      	beq.n	8004d4e <HAL_TIM_ConfigClockSource+0x16a>
 8004cac:	2b60      	cmp	r3, #96	@ 0x60
 8004cae:	d877      	bhi.n	8004da0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004cb0:	2b50      	cmp	r3, #80	@ 0x50
 8004cb2:	d03c      	beq.n	8004d2e <HAL_TIM_ConfigClockSource+0x14a>
 8004cb4:	2b50      	cmp	r3, #80	@ 0x50
 8004cb6:	d873      	bhi.n	8004da0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004cb8:	2b40      	cmp	r3, #64	@ 0x40
 8004cba:	d058      	beq.n	8004d6e <HAL_TIM_ConfigClockSource+0x18a>
 8004cbc:	2b40      	cmp	r3, #64	@ 0x40
 8004cbe:	d86f      	bhi.n	8004da0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004cc0:	2b30      	cmp	r3, #48	@ 0x30
 8004cc2:	d064      	beq.n	8004d8e <HAL_TIM_ConfigClockSource+0x1aa>
 8004cc4:	2b30      	cmp	r3, #48	@ 0x30
 8004cc6:	d86b      	bhi.n	8004da0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004cc8:	2b20      	cmp	r3, #32
 8004cca:	d060      	beq.n	8004d8e <HAL_TIM_ConfigClockSource+0x1aa>
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	d867      	bhi.n	8004da0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d05c      	beq.n	8004d8e <HAL_TIM_ConfigClockSource+0x1aa>
 8004cd4:	2b10      	cmp	r3, #16
 8004cd6:	d05a      	beq.n	8004d8e <HAL_TIM_ConfigClockSource+0x1aa>
 8004cd8:	e062      	b.n	8004da0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cea:	f000 fc67 	bl	80055bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004cfc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	609a      	str	r2, [r3, #8]
      break;
 8004d06:	e04f      	b.n	8004da8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d18:	f000 fc50 	bl	80055bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689a      	ldr	r2, [r3, #8]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d2a:	609a      	str	r2, [r3, #8]
      break;
 8004d2c:	e03c      	b.n	8004da8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	f000 fbc0 	bl	80054c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2150      	movs	r1, #80	@ 0x50
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 fc1a 	bl	8005580 <TIM_ITRx_SetConfig>
      break;
 8004d4c:	e02c      	b.n	8004da8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	f000 fbdf 	bl	800551e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2160      	movs	r1, #96	@ 0x60
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 fc0a 	bl	8005580 <TIM_ITRx_SetConfig>
      break;
 8004d6c:	e01c      	b.n	8004da8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	f000 fba0 	bl	80054c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2140      	movs	r1, #64	@ 0x40
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 fbfa 	bl	8005580 <TIM_ITRx_SetConfig>
      break;
 8004d8c:	e00c      	b.n	8004da8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4619      	mov	r1, r3
 8004d98:	4610      	mov	r0, r2
 8004d9a:	f000 fbf1 	bl	8005580 <TIM_ITRx_SetConfig>
      break;
 8004d9e:	e003      	b.n	8004da8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	73fb      	strb	r3, [r7, #15]
      break;
 8004da4:	e000      	b.n	8004da8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8004da6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	ffceff88 	.word	0xffceff88
 8004dc8:	00100040 	.word	0x00100040
 8004dcc:	00100030 	.word	0x00100030
 8004dd0:	00100020 	.word	0x00100020

08004dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a43      	ldr	r2, [pc, #268]	@ (8004ef4 <TIM_Base_SetConfig+0x120>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d013      	beq.n	8004e14 <TIM_Base_SetConfig+0x40>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004df2:	d00f      	beq.n	8004e14 <TIM_Base_SetConfig+0x40>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a40      	ldr	r2, [pc, #256]	@ (8004ef8 <TIM_Base_SetConfig+0x124>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d00b      	beq.n	8004e14 <TIM_Base_SetConfig+0x40>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a3f      	ldr	r2, [pc, #252]	@ (8004efc <TIM_Base_SetConfig+0x128>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d007      	beq.n	8004e14 <TIM_Base_SetConfig+0x40>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a3e      	ldr	r2, [pc, #248]	@ (8004f00 <TIM_Base_SetConfig+0x12c>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d003      	beq.n	8004e14 <TIM_Base_SetConfig+0x40>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a3d      	ldr	r2, [pc, #244]	@ (8004f04 <TIM_Base_SetConfig+0x130>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d108      	bne.n	8004e26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a32      	ldr	r2, [pc, #200]	@ (8004ef4 <TIM_Base_SetConfig+0x120>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d01f      	beq.n	8004e6e <TIM_Base_SetConfig+0x9a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e34:	d01b      	beq.n	8004e6e <TIM_Base_SetConfig+0x9a>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a2f      	ldr	r2, [pc, #188]	@ (8004ef8 <TIM_Base_SetConfig+0x124>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d017      	beq.n	8004e6e <TIM_Base_SetConfig+0x9a>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a2e      	ldr	r2, [pc, #184]	@ (8004efc <TIM_Base_SetConfig+0x128>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d013      	beq.n	8004e6e <TIM_Base_SetConfig+0x9a>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a2d      	ldr	r2, [pc, #180]	@ (8004f00 <TIM_Base_SetConfig+0x12c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00f      	beq.n	8004e6e <TIM_Base_SetConfig+0x9a>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a2c      	ldr	r2, [pc, #176]	@ (8004f04 <TIM_Base_SetConfig+0x130>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d00b      	beq.n	8004e6e <TIM_Base_SetConfig+0x9a>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a2b      	ldr	r2, [pc, #172]	@ (8004f08 <TIM_Base_SetConfig+0x134>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d007      	beq.n	8004e6e <TIM_Base_SetConfig+0x9a>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a2a      	ldr	r2, [pc, #168]	@ (8004f0c <TIM_Base_SetConfig+0x138>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d003      	beq.n	8004e6e <TIM_Base_SetConfig+0x9a>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a29      	ldr	r2, [pc, #164]	@ (8004f10 <TIM_Base_SetConfig+0x13c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d108      	bne.n	8004e80 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	689a      	ldr	r2, [r3, #8]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a14      	ldr	r2, [pc, #80]	@ (8004ef4 <TIM_Base_SetConfig+0x120>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d00f      	beq.n	8004ec6 <TIM_Base_SetConfig+0xf2>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a16      	ldr	r2, [pc, #88]	@ (8004f04 <TIM_Base_SetConfig+0x130>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d00b      	beq.n	8004ec6 <TIM_Base_SetConfig+0xf2>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a15      	ldr	r2, [pc, #84]	@ (8004f08 <TIM_Base_SetConfig+0x134>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d007      	beq.n	8004ec6 <TIM_Base_SetConfig+0xf2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a14      	ldr	r2, [pc, #80]	@ (8004f0c <TIM_Base_SetConfig+0x138>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d003      	beq.n	8004ec6 <TIM_Base_SetConfig+0xf2>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a13      	ldr	r2, [pc, #76]	@ (8004f10 <TIM_Base_SetConfig+0x13c>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d103      	bne.n	8004ece <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	691a      	ldr	r2, [r3, #16]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f043 0204 	orr.w	r2, r3, #4
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	601a      	str	r2, [r3, #0]
}
 8004ee6:	bf00      	nop
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	40010000 	.word	0x40010000
 8004ef8:	40000400 	.word	0x40000400
 8004efc:	40000800 	.word	0x40000800
 8004f00:	40000c00 	.word	0x40000c00
 8004f04:	40010400 	.word	0x40010400
 8004f08:	40014000 	.word	0x40014000
 8004f0c:	40014400 	.word	0x40014400
 8004f10:	40014800 	.word	0x40014800

08004f14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b087      	sub	sp, #28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	f023 0201 	bic.w	r2, r3, #1
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	4b37      	ldr	r3, [pc, #220]	@ (800501c <TIM_OC1_SetConfig+0x108>)
 8004f40:	4013      	ands	r3, r2
 8004f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f023 0303 	bic.w	r3, r3, #3
 8004f4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f023 0302 	bic.w	r3, r3, #2
 8004f5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a2d      	ldr	r2, [pc, #180]	@ (8005020 <TIM_OC1_SetConfig+0x10c>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d00f      	beq.n	8004f90 <TIM_OC1_SetConfig+0x7c>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a2c      	ldr	r2, [pc, #176]	@ (8005024 <TIM_OC1_SetConfig+0x110>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d00b      	beq.n	8004f90 <TIM_OC1_SetConfig+0x7c>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a2b      	ldr	r2, [pc, #172]	@ (8005028 <TIM_OC1_SetConfig+0x114>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d007      	beq.n	8004f90 <TIM_OC1_SetConfig+0x7c>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a2a      	ldr	r2, [pc, #168]	@ (800502c <TIM_OC1_SetConfig+0x118>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d003      	beq.n	8004f90 <TIM_OC1_SetConfig+0x7c>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a29      	ldr	r2, [pc, #164]	@ (8005030 <TIM_OC1_SetConfig+0x11c>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d10c      	bne.n	8004faa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f023 0308 	bic.w	r3, r3, #8
 8004f96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f023 0304 	bic.w	r3, r3, #4
 8004fa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a1c      	ldr	r2, [pc, #112]	@ (8005020 <TIM_OC1_SetConfig+0x10c>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d00f      	beq.n	8004fd2 <TIM_OC1_SetConfig+0xbe>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a1b      	ldr	r2, [pc, #108]	@ (8005024 <TIM_OC1_SetConfig+0x110>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d00b      	beq.n	8004fd2 <TIM_OC1_SetConfig+0xbe>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a1a      	ldr	r2, [pc, #104]	@ (8005028 <TIM_OC1_SetConfig+0x114>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d007      	beq.n	8004fd2 <TIM_OC1_SetConfig+0xbe>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a19      	ldr	r2, [pc, #100]	@ (800502c <TIM_OC1_SetConfig+0x118>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d003      	beq.n	8004fd2 <TIM_OC1_SetConfig+0xbe>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a18      	ldr	r2, [pc, #96]	@ (8005030 <TIM_OC1_SetConfig+0x11c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d111      	bne.n	8004ff6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	685a      	ldr	r2, [r3, #4]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	621a      	str	r2, [r3, #32]
}
 8005010:	bf00      	nop
 8005012:	371c      	adds	r7, #28
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	fffeff8f 	.word	0xfffeff8f
 8005020:	40010000 	.word	0x40010000
 8005024:	40010400 	.word	0x40010400
 8005028:	40014000 	.word	0x40014000
 800502c:	40014400 	.word	0x40014400
 8005030:	40014800 	.word	0x40014800

08005034 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005034:	b480      	push	{r7}
 8005036:	b087      	sub	sp, #28
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	f023 0210 	bic.w	r2, r3, #16
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	4b34      	ldr	r3, [pc, #208]	@ (8005130 <TIM_OC2_SetConfig+0xfc>)
 8005060:	4013      	ands	r3, r2
 8005062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800506a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	021b      	lsls	r3, r3, #8
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	4313      	orrs	r3, r2
 8005076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f023 0320 	bic.w	r3, r3, #32
 800507e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	011b      	lsls	r3, r3, #4
 8005086:	697a      	ldr	r2, [r7, #20]
 8005088:	4313      	orrs	r3, r2
 800508a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a29      	ldr	r2, [pc, #164]	@ (8005134 <TIM_OC2_SetConfig+0x100>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d003      	beq.n	800509c <TIM_OC2_SetConfig+0x68>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a28      	ldr	r2, [pc, #160]	@ (8005138 <TIM_OC2_SetConfig+0x104>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d10d      	bne.n	80050b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	011b      	lsls	r3, r3, #4
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80050b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a1e      	ldr	r2, [pc, #120]	@ (8005134 <TIM_OC2_SetConfig+0x100>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d00f      	beq.n	80050e0 <TIM_OC2_SetConfig+0xac>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a1d      	ldr	r2, [pc, #116]	@ (8005138 <TIM_OC2_SetConfig+0x104>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d00b      	beq.n	80050e0 <TIM_OC2_SetConfig+0xac>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a1c      	ldr	r2, [pc, #112]	@ (800513c <TIM_OC2_SetConfig+0x108>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d007      	beq.n	80050e0 <TIM_OC2_SetConfig+0xac>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a1b      	ldr	r2, [pc, #108]	@ (8005140 <TIM_OC2_SetConfig+0x10c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d003      	beq.n	80050e0 <TIM_OC2_SetConfig+0xac>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a1a      	ldr	r2, [pc, #104]	@ (8005144 <TIM_OC2_SetConfig+0x110>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d113      	bne.n	8005108 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	695b      	ldr	r3, [r3, #20]
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	4313      	orrs	r3, r2
 8005106:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	621a      	str	r2, [r3, #32]
}
 8005122:	bf00      	nop
 8005124:	371c      	adds	r7, #28
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	feff8fff 	.word	0xfeff8fff
 8005134:	40010000 	.word	0x40010000
 8005138:	40010400 	.word	0x40010400
 800513c:	40014000 	.word	0x40014000
 8005140:	40014400 	.word	0x40014400
 8005144:	40014800 	.word	0x40014800

08005148 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005148:	b480      	push	{r7}
 800514a:	b087      	sub	sp, #28
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	4b33      	ldr	r3, [pc, #204]	@ (8005240 <TIM_OC3_SetConfig+0xf8>)
 8005174:	4013      	ands	r3, r2
 8005176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f023 0303 	bic.w	r3, r3, #3
 800517e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	4313      	orrs	r3, r2
 8005188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005190:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	021b      	lsls	r3, r3, #8
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	4313      	orrs	r3, r2
 800519c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a28      	ldr	r2, [pc, #160]	@ (8005244 <TIM_OC3_SetConfig+0xfc>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d003      	beq.n	80051ae <TIM_OC3_SetConfig+0x66>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a27      	ldr	r2, [pc, #156]	@ (8005248 <TIM_OC3_SetConfig+0x100>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d10d      	bne.n	80051ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	021b      	lsls	r3, r3, #8
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	4313      	orrs	r3, r2
 80051c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a1d      	ldr	r2, [pc, #116]	@ (8005244 <TIM_OC3_SetConfig+0xfc>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d00f      	beq.n	80051f2 <TIM_OC3_SetConfig+0xaa>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a1c      	ldr	r2, [pc, #112]	@ (8005248 <TIM_OC3_SetConfig+0x100>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d00b      	beq.n	80051f2 <TIM_OC3_SetConfig+0xaa>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a1b      	ldr	r2, [pc, #108]	@ (800524c <TIM_OC3_SetConfig+0x104>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d007      	beq.n	80051f2 <TIM_OC3_SetConfig+0xaa>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a1a      	ldr	r2, [pc, #104]	@ (8005250 <TIM_OC3_SetConfig+0x108>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d003      	beq.n	80051f2 <TIM_OC3_SetConfig+0xaa>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a19      	ldr	r2, [pc, #100]	@ (8005254 <TIM_OC3_SetConfig+0x10c>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d113      	bne.n	800521a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005200:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	011b      	lsls	r3, r3, #4
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	4313      	orrs	r3, r2
 800520c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	011b      	lsls	r3, r3, #4
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	4313      	orrs	r3, r2
 8005218:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685a      	ldr	r2, [r3, #4]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	621a      	str	r2, [r3, #32]
}
 8005234:	bf00      	nop
 8005236:	371c      	adds	r7, #28
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr
 8005240:	fffeff8f 	.word	0xfffeff8f
 8005244:	40010000 	.word	0x40010000
 8005248:	40010400 	.word	0x40010400
 800524c:	40014000 	.word	0x40014000
 8005250:	40014400 	.word	0x40014400
 8005254:	40014800 	.word	0x40014800

08005258 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	4b24      	ldr	r3, [pc, #144]	@ (8005314 <TIM_OC4_SetConfig+0xbc>)
 8005284:	4013      	ands	r3, r2
 8005286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800528e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	021b      	lsls	r3, r3, #8
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	4313      	orrs	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	031b      	lsls	r3, r3, #12
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a19      	ldr	r2, [pc, #100]	@ (8005318 <TIM_OC4_SetConfig+0xc0>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d00f      	beq.n	80052d8 <TIM_OC4_SetConfig+0x80>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a18      	ldr	r2, [pc, #96]	@ (800531c <TIM_OC4_SetConfig+0xc4>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d00b      	beq.n	80052d8 <TIM_OC4_SetConfig+0x80>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a17      	ldr	r2, [pc, #92]	@ (8005320 <TIM_OC4_SetConfig+0xc8>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d007      	beq.n	80052d8 <TIM_OC4_SetConfig+0x80>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a16      	ldr	r2, [pc, #88]	@ (8005324 <TIM_OC4_SetConfig+0xcc>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d003      	beq.n	80052d8 <TIM_OC4_SetConfig+0x80>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a15      	ldr	r2, [pc, #84]	@ (8005328 <TIM_OC4_SetConfig+0xd0>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d109      	bne.n	80052ec <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80052de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	019b      	lsls	r3, r3, #6
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	621a      	str	r2, [r3, #32]
}
 8005306:	bf00      	nop
 8005308:	371c      	adds	r7, #28
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	feff8fff 	.word	0xfeff8fff
 8005318:	40010000 	.word	0x40010000
 800531c:	40010400 	.word	0x40010400
 8005320:	40014000 	.word	0x40014000
 8005324:	40014400 	.word	0x40014400
 8005328:	40014800 	.word	0x40014800

0800532c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800532c:	b480      	push	{r7}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	4b21      	ldr	r3, [pc, #132]	@ (80053dc <TIM_OC5_SetConfig+0xb0>)
 8005358:	4013      	ands	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	4313      	orrs	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800536c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	041b      	lsls	r3, r3, #16
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	4313      	orrs	r3, r2
 8005378:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a18      	ldr	r2, [pc, #96]	@ (80053e0 <TIM_OC5_SetConfig+0xb4>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d00f      	beq.n	80053a2 <TIM_OC5_SetConfig+0x76>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a17      	ldr	r2, [pc, #92]	@ (80053e4 <TIM_OC5_SetConfig+0xb8>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d00b      	beq.n	80053a2 <TIM_OC5_SetConfig+0x76>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a16      	ldr	r2, [pc, #88]	@ (80053e8 <TIM_OC5_SetConfig+0xbc>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d007      	beq.n	80053a2 <TIM_OC5_SetConfig+0x76>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a15      	ldr	r2, [pc, #84]	@ (80053ec <TIM_OC5_SetConfig+0xc0>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d003      	beq.n	80053a2 <TIM_OC5_SetConfig+0x76>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a14      	ldr	r2, [pc, #80]	@ (80053f0 <TIM_OC5_SetConfig+0xc4>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d109      	bne.n	80053b6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	021b      	lsls	r3, r3, #8
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	621a      	str	r2, [r3, #32]
}
 80053d0:	bf00      	nop
 80053d2:	371c      	adds	r7, #28
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	fffeff8f 	.word	0xfffeff8f
 80053e0:	40010000 	.word	0x40010000
 80053e4:	40010400 	.word	0x40010400
 80053e8:	40014000 	.word	0x40014000
 80053ec:	40014400 	.word	0x40014400
 80053f0:	40014800 	.word	0x40014800

080053f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b087      	sub	sp, #28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800541a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	4b22      	ldr	r3, [pc, #136]	@ (80054a8 <TIM_OC6_SetConfig+0xb4>)
 8005420:	4013      	ands	r3, r2
 8005422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	021b      	lsls	r3, r3, #8
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	4313      	orrs	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005436:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	051b      	lsls	r3, r3, #20
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	4313      	orrs	r3, r2
 8005442:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a19      	ldr	r2, [pc, #100]	@ (80054ac <TIM_OC6_SetConfig+0xb8>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d00f      	beq.n	800546c <TIM_OC6_SetConfig+0x78>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a18      	ldr	r2, [pc, #96]	@ (80054b0 <TIM_OC6_SetConfig+0xbc>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d00b      	beq.n	800546c <TIM_OC6_SetConfig+0x78>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a17      	ldr	r2, [pc, #92]	@ (80054b4 <TIM_OC6_SetConfig+0xc0>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d007      	beq.n	800546c <TIM_OC6_SetConfig+0x78>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a16      	ldr	r2, [pc, #88]	@ (80054b8 <TIM_OC6_SetConfig+0xc4>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d003      	beq.n	800546c <TIM_OC6_SetConfig+0x78>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a15      	ldr	r2, [pc, #84]	@ (80054bc <TIM_OC6_SetConfig+0xc8>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d109      	bne.n	8005480 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005472:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	695b      	ldr	r3, [r3, #20]
 8005478:	029b      	lsls	r3, r3, #10
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	4313      	orrs	r3, r2
 800547e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	621a      	str	r2, [r3, #32]
}
 800549a:	bf00      	nop
 800549c:	371c      	adds	r7, #28
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	feff8fff 	.word	0xfeff8fff
 80054ac:	40010000 	.word	0x40010000
 80054b0:	40010400 	.word	0x40010400
 80054b4:	40014000 	.word	0x40014000
 80054b8:	40014400 	.word	0x40014400
 80054bc:	40014800 	.word	0x40014800

080054c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b087      	sub	sp, #28
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	f023 0201 	bic.w	r2, r3, #1
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	011b      	lsls	r3, r3, #4
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f023 030a 	bic.w	r3, r3, #10
 80054fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	4313      	orrs	r3, r2
 8005504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	621a      	str	r2, [r3, #32]
}
 8005512:	bf00      	nop
 8005514:	371c      	adds	r7, #28
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800551e:	b480      	push	{r7}
 8005520:	b087      	sub	sp, #28
 8005522:	af00      	add	r7, sp, #0
 8005524:	60f8      	str	r0, [r7, #12]
 8005526:	60b9      	str	r1, [r7, #8]
 8005528:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6a1b      	ldr	r3, [r3, #32]
 8005534:	f023 0210 	bic.w	r2, r3, #16
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005548:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	031b      	lsls	r3, r3, #12
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	4313      	orrs	r3, r2
 8005552:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800555a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	011b      	lsls	r3, r3, #4
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	4313      	orrs	r3, r2
 8005564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	621a      	str	r2, [r3, #32]
}
 8005572:	bf00      	nop
 8005574:	371c      	adds	r7, #28
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
	...

08005580 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	4b09      	ldr	r3, [pc, #36]	@ (80055b8 <TIM_ITRx_SetConfig+0x38>)
 8005594:	4013      	ands	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	4313      	orrs	r3, r2
 800559e:	f043 0307 	orr.w	r3, r3, #7
 80055a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	609a      	str	r2, [r3, #8]
}
 80055aa:	bf00      	nop
 80055ac:	3714      	adds	r7, #20
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	ffcfff8f 	.word	0xffcfff8f

080055bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055bc:	b480      	push	{r7}
 80055be:	b087      	sub	sp, #28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
 80055c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	021a      	lsls	r2, r3, #8
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	431a      	orrs	r2, r3
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	609a      	str	r2, [r3, #8]
}
 80055f0:	bf00      	nop
 80055f2:	371c      	adds	r7, #28
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b087      	sub	sp, #28
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	f003 031f 	and.w	r3, r3, #31
 800560e:	2201      	movs	r2, #1
 8005610:	fa02 f303 	lsl.w	r3, r2, r3
 8005614:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6a1a      	ldr	r2, [r3, #32]
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	43db      	mvns	r3, r3
 800561e:	401a      	ands	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6a1a      	ldr	r2, [r3, #32]
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	f003 031f 	and.w	r3, r3, #31
 800562e:	6879      	ldr	r1, [r7, #4]
 8005630:	fa01 f303 	lsl.w	r3, r1, r3
 8005634:	431a      	orrs	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	621a      	str	r2, [r3, #32]
}
 800563a:	bf00      	nop
 800563c:	371c      	adds	r7, #28
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
	...

08005648 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005658:	2b01      	cmp	r3, #1
 800565a:	d101      	bne.n	8005660 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800565c:	2302      	movs	r3, #2
 800565e:	e06d      	b.n	800573c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2202      	movs	r2, #2
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a30      	ldr	r2, [pc, #192]	@ (8005748 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d004      	beq.n	8005694 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a2f      	ldr	r2, [pc, #188]	@ (800574c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d108      	bne.n	80056a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800569a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a20      	ldr	r2, [pc, #128]	@ (8005748 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d022      	beq.n	8005710 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056d2:	d01d      	beq.n	8005710 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005750 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d018      	beq.n	8005710 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a1c      	ldr	r2, [pc, #112]	@ (8005754 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d013      	beq.n	8005710 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a1a      	ldr	r2, [pc, #104]	@ (8005758 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d00e      	beq.n	8005710 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a15      	ldr	r2, [pc, #84]	@ (800574c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d009      	beq.n	8005710 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a16      	ldr	r2, [pc, #88]	@ (800575c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d004      	beq.n	8005710 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a15      	ldr	r2, [pc, #84]	@ (8005760 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d10c      	bne.n	800572a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005716:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	4313      	orrs	r3, r2
 8005720:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3714      	adds	r7, #20
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr
 8005748:	40010000 	.word	0x40010000
 800574c:	40010400 	.word	0x40010400
 8005750:	40000400 	.word	0x40000400
 8005754:	40000800 	.word	0x40000800
 8005758:	40000c00 	.word	0x40000c00
 800575c:	40001800 	.word	0x40001800
 8005760:	40014000 	.word	0x40014000

08005764 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800576e:	2300      	movs	r3, #0
 8005770:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005778:	2b01      	cmp	r3, #1
 800577a:	d101      	bne.n	8005780 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800577c:	2302      	movs	r3, #2
 800577e:	e065      	b.n	800584c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	4313      	orrs	r3, r2
 8005794:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4313      	orrs	r3, r2
 80057be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	4313      	orrs	r3, r2
 80057da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e6:	4313      	orrs	r3, r2
 80057e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	699b      	ldr	r3, [r3, #24]
 80057f4:	041b      	lsls	r3, r3, #16
 80057f6:	4313      	orrs	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a16      	ldr	r2, [pc, #88]	@ (8005858 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d004      	beq.n	800580e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a14      	ldr	r2, [pc, #80]	@ (800585c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d115      	bne.n	800583a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005818:	051b      	lsls	r3, r3, #20
 800581a:	4313      	orrs	r3, r2
 800581c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	69db      	ldr	r3, [r3, #28]
 8005828:	4313      	orrs	r3, r2
 800582a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	4313      	orrs	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr
 8005858:	40010000 	.word	0x40010000
 800585c:	40010400 	.word	0x40010400

08005860 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e042      	b.n	80058f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005878:	2b00      	cmp	r3, #0
 800587a:	d106      	bne.n	800588a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f7fb fc53 	bl	8001130 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2224      	movs	r2, #36	@ 0x24
 800588e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 0201 	bic.w	r2, r2, #1
 80058a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d002      	beq.n	80058b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 fee6 	bl	800667c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 f97b 	bl	8005bac <UART_SetConfig>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d101      	bne.n	80058c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e01b      	b.n	80058f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	685a      	ldr	r2, [r3, #4]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80058ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689a      	ldr	r2, [r3, #8]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80058de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f042 0201 	orr.w	r2, r2, #1
 80058ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 ff65 	bl	80067c0 <UART_CheckIdleState>
 80058f6:	4603      	mov	r3, r0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3708      	adds	r7, #8
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b08a      	sub	sp, #40	@ 0x28
 8005904:	af02      	add	r7, sp, #8
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	603b      	str	r3, [r7, #0]
 800590c:	4613      	mov	r3, r2
 800590e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005916:	2b20      	cmp	r3, #32
 8005918:	d17b      	bne.n	8005a12 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <HAL_UART_Transmit+0x26>
 8005920:	88fb      	ldrh	r3, [r7, #6]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e074      	b.n	8005a14 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2221      	movs	r2, #33	@ 0x21
 8005936:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800593a:	f7fb fd2b 	bl	8001394 <HAL_GetTick>
 800593e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	88fa      	ldrh	r2, [r7, #6]
 8005944:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	88fa      	ldrh	r2, [r7, #6]
 800594c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005958:	d108      	bne.n	800596c <HAL_UART_Transmit+0x6c>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d104      	bne.n	800596c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005962:	2300      	movs	r3, #0
 8005964:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	61bb      	str	r3, [r7, #24]
 800596a:	e003      	b.n	8005974 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005970:	2300      	movs	r3, #0
 8005972:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005974:	e030      	b.n	80059d8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	2200      	movs	r2, #0
 800597e:	2180      	movs	r1, #128	@ 0x80
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f000 ffc7 	bl	8006914 <UART_WaitOnFlagUntilTimeout>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d005      	beq.n	8005998 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2220      	movs	r2, #32
 8005990:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e03d      	b.n	8005a14 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10b      	bne.n	80059b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	881b      	ldrh	r3, [r3, #0]
 80059a2:	461a      	mov	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059ac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	3302      	adds	r3, #2
 80059b2:	61bb      	str	r3, [r7, #24]
 80059b4:	e007      	b.n	80059c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	781a      	ldrb	r2, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	3301      	adds	r3, #1
 80059c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	3b01      	subs	r3, #1
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80059de:	b29b      	uxth	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1c8      	bne.n	8005976 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	2200      	movs	r2, #0
 80059ec:	2140      	movs	r1, #64	@ 0x40
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f000 ff90 	bl	8006914 <UART_WaitOnFlagUntilTimeout>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d005      	beq.n	8005a06 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2220      	movs	r2, #32
 80059fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e006      	b.n	8005a14 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2220      	movs	r2, #32
 8005a0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	e000      	b.n	8005a14 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005a12:	2302      	movs	r3, #2
  }
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3720      	adds	r7, #32
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b08a      	sub	sp, #40	@ 0x28
 8005a20:	af02      	add	r7, sp, #8
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	603b      	str	r3, [r7, #0]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a32:	2b20      	cmp	r3, #32
 8005a34:	f040 80b5 	bne.w	8005ba2 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d002      	beq.n	8005a44 <HAL_UART_Receive+0x28>
 8005a3e:	88fb      	ldrh	r3, [r7, #6]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e0ad      	b.n	8005ba4 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2222      	movs	r2, #34	@ 0x22
 8005a54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a5e:	f7fb fc99 	bl	8001394 <HAL_GetTick>
 8005a62:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	88fa      	ldrh	r2, [r7, #6]
 8005a68:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	88fa      	ldrh	r2, [r7, #6]
 8005a70:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a7c:	d10e      	bne.n	8005a9c <HAL_UART_Receive+0x80>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d105      	bne.n	8005a92 <HAL_UART_Receive+0x76>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005a8c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005a90:	e02d      	b.n	8005aee <HAL_UART_Receive+0xd2>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	22ff      	movs	r2, #255	@ 0xff
 8005a96:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005a9a:	e028      	b.n	8005aee <HAL_UART_Receive+0xd2>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10d      	bne.n	8005ac0 <HAL_UART_Receive+0xa4>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d104      	bne.n	8005ab6 <HAL_UART_Receive+0x9a>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	22ff      	movs	r2, #255	@ 0xff
 8005ab0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005ab4:	e01b      	b.n	8005aee <HAL_UART_Receive+0xd2>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	227f      	movs	r2, #127	@ 0x7f
 8005aba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005abe:	e016      	b.n	8005aee <HAL_UART_Receive+0xd2>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ac8:	d10d      	bne.n	8005ae6 <HAL_UART_Receive+0xca>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d104      	bne.n	8005adc <HAL_UART_Receive+0xc0>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	227f      	movs	r2, #127	@ 0x7f
 8005ad6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005ada:	e008      	b.n	8005aee <HAL_UART_Receive+0xd2>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	223f      	movs	r2, #63	@ 0x3f
 8005ae0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005ae4:	e003      	b.n	8005aee <HAL_UART_Receive+0xd2>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005af4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005afe:	d108      	bne.n	8005b12 <HAL_UART_Receive+0xf6>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d104      	bne.n	8005b12 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	61bb      	str	r3, [r7, #24]
 8005b10:	e003      	b.n	8005b1a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b16:	2300      	movs	r3, #0
 8005b18:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005b1a:	e036      	b.n	8005b8a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	2200      	movs	r2, #0
 8005b24:	2120      	movs	r1, #32
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f000 fef4 	bl	8006914 <UART_WaitOnFlagUntilTimeout>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d005      	beq.n	8005b3e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2220      	movs	r2, #32
 8005b36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e032      	b.n	8005ba4 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d10c      	bne.n	8005b5e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	8a7b      	ldrh	r3, [r7, #18]
 8005b4e:	4013      	ands	r3, r2
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	3302      	adds	r3, #2
 8005b5a:	61bb      	str	r3, [r7, #24]
 8005b5c:	e00c      	b.n	8005b78 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	8a7b      	ldrh	r3, [r7, #18]
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	b2da      	uxtb	r2, r3
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	3301      	adds	r3, #1
 8005b76:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	3b01      	subs	r3, #1
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1c2      	bne.n	8005b1c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	e000      	b.n	8005ba4 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8005ba2:	2302      	movs	r3, #2
  }
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3720      	adds	r7, #32
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bb0:	b092      	sub	sp, #72	@ 0x48
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	689a      	ldr	r2, [r3, #8]
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	431a      	orrs	r2, r3
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	69db      	ldr	r3, [r3, #28]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	4bbe      	ldr	r3, [pc, #760]	@ (8005ed4 <UART_SetConfig+0x328>)
 8005bdc:	4013      	ands	r3, r2
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	6812      	ldr	r2, [r2, #0]
 8005be2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005be4:	430b      	orrs	r3, r1
 8005be6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	68da      	ldr	r2, [r3, #12]
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4ab3      	ldr	r2, [pc, #716]	@ (8005ed8 <UART_SetConfig+0x32c>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d004      	beq.n	8005c18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c14:	4313      	orrs	r3, r2
 8005c16:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689a      	ldr	r2, [r3, #8]
 8005c1e:	4baf      	ldr	r3, [pc, #700]	@ (8005edc <UART_SetConfig+0x330>)
 8005c20:	4013      	ands	r3, r2
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	6812      	ldr	r2, [r2, #0]
 8005c26:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005c28:	430b      	orrs	r3, r1
 8005c2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c32:	f023 010f 	bic.w	r1, r3, #15
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4aa6      	ldr	r2, [pc, #664]	@ (8005ee0 <UART_SetConfig+0x334>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d177      	bne.n	8005d3c <UART_SetConfig+0x190>
 8005c4c:	4ba5      	ldr	r3, [pc, #660]	@ (8005ee4 <UART_SetConfig+0x338>)
 8005c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c54:	2b28      	cmp	r3, #40	@ 0x28
 8005c56:	d86d      	bhi.n	8005d34 <UART_SetConfig+0x188>
 8005c58:	a201      	add	r2, pc, #4	@ (adr r2, 8005c60 <UART_SetConfig+0xb4>)
 8005c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c5e:	bf00      	nop
 8005c60:	08005d05 	.word	0x08005d05
 8005c64:	08005d35 	.word	0x08005d35
 8005c68:	08005d35 	.word	0x08005d35
 8005c6c:	08005d35 	.word	0x08005d35
 8005c70:	08005d35 	.word	0x08005d35
 8005c74:	08005d35 	.word	0x08005d35
 8005c78:	08005d35 	.word	0x08005d35
 8005c7c:	08005d35 	.word	0x08005d35
 8005c80:	08005d0d 	.word	0x08005d0d
 8005c84:	08005d35 	.word	0x08005d35
 8005c88:	08005d35 	.word	0x08005d35
 8005c8c:	08005d35 	.word	0x08005d35
 8005c90:	08005d35 	.word	0x08005d35
 8005c94:	08005d35 	.word	0x08005d35
 8005c98:	08005d35 	.word	0x08005d35
 8005c9c:	08005d35 	.word	0x08005d35
 8005ca0:	08005d15 	.word	0x08005d15
 8005ca4:	08005d35 	.word	0x08005d35
 8005ca8:	08005d35 	.word	0x08005d35
 8005cac:	08005d35 	.word	0x08005d35
 8005cb0:	08005d35 	.word	0x08005d35
 8005cb4:	08005d35 	.word	0x08005d35
 8005cb8:	08005d35 	.word	0x08005d35
 8005cbc:	08005d35 	.word	0x08005d35
 8005cc0:	08005d1d 	.word	0x08005d1d
 8005cc4:	08005d35 	.word	0x08005d35
 8005cc8:	08005d35 	.word	0x08005d35
 8005ccc:	08005d35 	.word	0x08005d35
 8005cd0:	08005d35 	.word	0x08005d35
 8005cd4:	08005d35 	.word	0x08005d35
 8005cd8:	08005d35 	.word	0x08005d35
 8005cdc:	08005d35 	.word	0x08005d35
 8005ce0:	08005d25 	.word	0x08005d25
 8005ce4:	08005d35 	.word	0x08005d35
 8005ce8:	08005d35 	.word	0x08005d35
 8005cec:	08005d35 	.word	0x08005d35
 8005cf0:	08005d35 	.word	0x08005d35
 8005cf4:	08005d35 	.word	0x08005d35
 8005cf8:	08005d35 	.word	0x08005d35
 8005cfc:	08005d35 	.word	0x08005d35
 8005d00:	08005d2d 	.word	0x08005d2d
 8005d04:	2301      	movs	r3, #1
 8005d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d0a:	e222      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005d0c:	2304      	movs	r3, #4
 8005d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d12:	e21e      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005d14:	2308      	movs	r3, #8
 8005d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d1a:	e21a      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005d1c:	2310      	movs	r3, #16
 8005d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d22:	e216      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005d24:	2320      	movs	r3, #32
 8005d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d2a:	e212      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005d2c:	2340      	movs	r3, #64	@ 0x40
 8005d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d32:	e20e      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005d34:	2380      	movs	r3, #128	@ 0x80
 8005d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d3a:	e20a      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a69      	ldr	r2, [pc, #420]	@ (8005ee8 <UART_SetConfig+0x33c>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d130      	bne.n	8005da8 <UART_SetConfig+0x1fc>
 8005d46:	4b67      	ldr	r3, [pc, #412]	@ (8005ee4 <UART_SetConfig+0x338>)
 8005d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d4a:	f003 0307 	and.w	r3, r3, #7
 8005d4e:	2b05      	cmp	r3, #5
 8005d50:	d826      	bhi.n	8005da0 <UART_SetConfig+0x1f4>
 8005d52:	a201      	add	r2, pc, #4	@ (adr r2, 8005d58 <UART_SetConfig+0x1ac>)
 8005d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d58:	08005d71 	.word	0x08005d71
 8005d5c:	08005d79 	.word	0x08005d79
 8005d60:	08005d81 	.word	0x08005d81
 8005d64:	08005d89 	.word	0x08005d89
 8005d68:	08005d91 	.word	0x08005d91
 8005d6c:	08005d99 	.word	0x08005d99
 8005d70:	2300      	movs	r3, #0
 8005d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d76:	e1ec      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005d78:	2304      	movs	r3, #4
 8005d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d7e:	e1e8      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005d80:	2308      	movs	r3, #8
 8005d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d86:	e1e4      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005d88:	2310      	movs	r3, #16
 8005d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d8e:	e1e0      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005d90:	2320      	movs	r3, #32
 8005d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d96:	e1dc      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005d98:	2340      	movs	r3, #64	@ 0x40
 8005d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d9e:	e1d8      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005da0:	2380      	movs	r3, #128	@ 0x80
 8005da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005da6:	e1d4      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a4f      	ldr	r2, [pc, #316]	@ (8005eec <UART_SetConfig+0x340>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d130      	bne.n	8005e14 <UART_SetConfig+0x268>
 8005db2:	4b4c      	ldr	r3, [pc, #304]	@ (8005ee4 <UART_SetConfig+0x338>)
 8005db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005db6:	f003 0307 	and.w	r3, r3, #7
 8005dba:	2b05      	cmp	r3, #5
 8005dbc:	d826      	bhi.n	8005e0c <UART_SetConfig+0x260>
 8005dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8005dc4 <UART_SetConfig+0x218>)
 8005dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc4:	08005ddd 	.word	0x08005ddd
 8005dc8:	08005de5 	.word	0x08005de5
 8005dcc:	08005ded 	.word	0x08005ded
 8005dd0:	08005df5 	.word	0x08005df5
 8005dd4:	08005dfd 	.word	0x08005dfd
 8005dd8:	08005e05 	.word	0x08005e05
 8005ddc:	2300      	movs	r3, #0
 8005dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005de2:	e1b6      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005de4:	2304      	movs	r3, #4
 8005de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dea:	e1b2      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005dec:	2308      	movs	r3, #8
 8005dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005df2:	e1ae      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005df4:	2310      	movs	r3, #16
 8005df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dfa:	e1aa      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005dfc:	2320      	movs	r3, #32
 8005dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e02:	e1a6      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005e04:	2340      	movs	r3, #64	@ 0x40
 8005e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e0a:	e1a2      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005e0c:	2380      	movs	r3, #128	@ 0x80
 8005e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e12:	e19e      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a35      	ldr	r2, [pc, #212]	@ (8005ef0 <UART_SetConfig+0x344>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d130      	bne.n	8005e80 <UART_SetConfig+0x2d4>
 8005e1e:	4b31      	ldr	r3, [pc, #196]	@ (8005ee4 <UART_SetConfig+0x338>)
 8005e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e22:	f003 0307 	and.w	r3, r3, #7
 8005e26:	2b05      	cmp	r3, #5
 8005e28:	d826      	bhi.n	8005e78 <UART_SetConfig+0x2cc>
 8005e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e30 <UART_SetConfig+0x284>)
 8005e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e30:	08005e49 	.word	0x08005e49
 8005e34:	08005e51 	.word	0x08005e51
 8005e38:	08005e59 	.word	0x08005e59
 8005e3c:	08005e61 	.word	0x08005e61
 8005e40:	08005e69 	.word	0x08005e69
 8005e44:	08005e71 	.word	0x08005e71
 8005e48:	2300      	movs	r3, #0
 8005e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e4e:	e180      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005e50:	2304      	movs	r3, #4
 8005e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e56:	e17c      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005e58:	2308      	movs	r3, #8
 8005e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e5e:	e178      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005e60:	2310      	movs	r3, #16
 8005e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e66:	e174      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005e68:	2320      	movs	r3, #32
 8005e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e6e:	e170      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005e70:	2340      	movs	r3, #64	@ 0x40
 8005e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e76:	e16c      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005e78:	2380      	movs	r3, #128	@ 0x80
 8005e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e7e:	e168      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a1b      	ldr	r2, [pc, #108]	@ (8005ef4 <UART_SetConfig+0x348>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d142      	bne.n	8005f10 <UART_SetConfig+0x364>
 8005e8a:	4b16      	ldr	r3, [pc, #88]	@ (8005ee4 <UART_SetConfig+0x338>)
 8005e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e8e:	f003 0307 	and.w	r3, r3, #7
 8005e92:	2b05      	cmp	r3, #5
 8005e94:	d838      	bhi.n	8005f08 <UART_SetConfig+0x35c>
 8005e96:	a201      	add	r2, pc, #4	@ (adr r2, 8005e9c <UART_SetConfig+0x2f0>)
 8005e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9c:	08005eb5 	.word	0x08005eb5
 8005ea0:	08005ebd 	.word	0x08005ebd
 8005ea4:	08005ec5 	.word	0x08005ec5
 8005ea8:	08005ecd 	.word	0x08005ecd
 8005eac:	08005ef9 	.word	0x08005ef9
 8005eb0:	08005f01 	.word	0x08005f01
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eba:	e14a      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005ebc:	2304      	movs	r3, #4
 8005ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ec2:	e146      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005ec4:	2308      	movs	r3, #8
 8005ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eca:	e142      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005ecc:	2310      	movs	r3, #16
 8005ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ed2:	e13e      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005ed4:	cfff69f3 	.word	0xcfff69f3
 8005ed8:	58000c00 	.word	0x58000c00
 8005edc:	11fff4ff 	.word	0x11fff4ff
 8005ee0:	40011000 	.word	0x40011000
 8005ee4:	58024400 	.word	0x58024400
 8005ee8:	40004400 	.word	0x40004400
 8005eec:	40004800 	.word	0x40004800
 8005ef0:	40004c00 	.word	0x40004c00
 8005ef4:	40005000 	.word	0x40005000
 8005ef8:	2320      	movs	r3, #32
 8005efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005efe:	e128      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005f00:	2340      	movs	r3, #64	@ 0x40
 8005f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f06:	e124      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005f08:	2380      	movs	r3, #128	@ 0x80
 8005f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f0e:	e120      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4acb      	ldr	r2, [pc, #812]	@ (8006244 <UART_SetConfig+0x698>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d176      	bne.n	8006008 <UART_SetConfig+0x45c>
 8005f1a:	4bcb      	ldr	r3, [pc, #812]	@ (8006248 <UART_SetConfig+0x69c>)
 8005f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f22:	2b28      	cmp	r3, #40	@ 0x28
 8005f24:	d86c      	bhi.n	8006000 <UART_SetConfig+0x454>
 8005f26:	a201      	add	r2, pc, #4	@ (adr r2, 8005f2c <UART_SetConfig+0x380>)
 8005f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2c:	08005fd1 	.word	0x08005fd1
 8005f30:	08006001 	.word	0x08006001
 8005f34:	08006001 	.word	0x08006001
 8005f38:	08006001 	.word	0x08006001
 8005f3c:	08006001 	.word	0x08006001
 8005f40:	08006001 	.word	0x08006001
 8005f44:	08006001 	.word	0x08006001
 8005f48:	08006001 	.word	0x08006001
 8005f4c:	08005fd9 	.word	0x08005fd9
 8005f50:	08006001 	.word	0x08006001
 8005f54:	08006001 	.word	0x08006001
 8005f58:	08006001 	.word	0x08006001
 8005f5c:	08006001 	.word	0x08006001
 8005f60:	08006001 	.word	0x08006001
 8005f64:	08006001 	.word	0x08006001
 8005f68:	08006001 	.word	0x08006001
 8005f6c:	08005fe1 	.word	0x08005fe1
 8005f70:	08006001 	.word	0x08006001
 8005f74:	08006001 	.word	0x08006001
 8005f78:	08006001 	.word	0x08006001
 8005f7c:	08006001 	.word	0x08006001
 8005f80:	08006001 	.word	0x08006001
 8005f84:	08006001 	.word	0x08006001
 8005f88:	08006001 	.word	0x08006001
 8005f8c:	08005fe9 	.word	0x08005fe9
 8005f90:	08006001 	.word	0x08006001
 8005f94:	08006001 	.word	0x08006001
 8005f98:	08006001 	.word	0x08006001
 8005f9c:	08006001 	.word	0x08006001
 8005fa0:	08006001 	.word	0x08006001
 8005fa4:	08006001 	.word	0x08006001
 8005fa8:	08006001 	.word	0x08006001
 8005fac:	08005ff1 	.word	0x08005ff1
 8005fb0:	08006001 	.word	0x08006001
 8005fb4:	08006001 	.word	0x08006001
 8005fb8:	08006001 	.word	0x08006001
 8005fbc:	08006001 	.word	0x08006001
 8005fc0:	08006001 	.word	0x08006001
 8005fc4:	08006001 	.word	0x08006001
 8005fc8:	08006001 	.word	0x08006001
 8005fcc:	08005ff9 	.word	0x08005ff9
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fd6:	e0bc      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005fd8:	2304      	movs	r3, #4
 8005fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fde:	e0b8      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005fe0:	2308      	movs	r3, #8
 8005fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fe6:	e0b4      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005fe8:	2310      	movs	r3, #16
 8005fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fee:	e0b0      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005ff0:	2320      	movs	r3, #32
 8005ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ff6:	e0ac      	b.n	8006152 <UART_SetConfig+0x5a6>
 8005ff8:	2340      	movs	r3, #64	@ 0x40
 8005ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ffe:	e0a8      	b.n	8006152 <UART_SetConfig+0x5a6>
 8006000:	2380      	movs	r3, #128	@ 0x80
 8006002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006006:	e0a4      	b.n	8006152 <UART_SetConfig+0x5a6>
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a8f      	ldr	r2, [pc, #572]	@ (800624c <UART_SetConfig+0x6a0>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d130      	bne.n	8006074 <UART_SetConfig+0x4c8>
 8006012:	4b8d      	ldr	r3, [pc, #564]	@ (8006248 <UART_SetConfig+0x69c>)
 8006014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006016:	f003 0307 	and.w	r3, r3, #7
 800601a:	2b05      	cmp	r3, #5
 800601c:	d826      	bhi.n	800606c <UART_SetConfig+0x4c0>
 800601e:	a201      	add	r2, pc, #4	@ (adr r2, 8006024 <UART_SetConfig+0x478>)
 8006020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006024:	0800603d 	.word	0x0800603d
 8006028:	08006045 	.word	0x08006045
 800602c:	0800604d 	.word	0x0800604d
 8006030:	08006055 	.word	0x08006055
 8006034:	0800605d 	.word	0x0800605d
 8006038:	08006065 	.word	0x08006065
 800603c:	2300      	movs	r3, #0
 800603e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006042:	e086      	b.n	8006152 <UART_SetConfig+0x5a6>
 8006044:	2304      	movs	r3, #4
 8006046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800604a:	e082      	b.n	8006152 <UART_SetConfig+0x5a6>
 800604c:	2308      	movs	r3, #8
 800604e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006052:	e07e      	b.n	8006152 <UART_SetConfig+0x5a6>
 8006054:	2310      	movs	r3, #16
 8006056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800605a:	e07a      	b.n	8006152 <UART_SetConfig+0x5a6>
 800605c:	2320      	movs	r3, #32
 800605e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006062:	e076      	b.n	8006152 <UART_SetConfig+0x5a6>
 8006064:	2340      	movs	r3, #64	@ 0x40
 8006066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800606a:	e072      	b.n	8006152 <UART_SetConfig+0x5a6>
 800606c:	2380      	movs	r3, #128	@ 0x80
 800606e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006072:	e06e      	b.n	8006152 <UART_SetConfig+0x5a6>
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a75      	ldr	r2, [pc, #468]	@ (8006250 <UART_SetConfig+0x6a4>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d130      	bne.n	80060e0 <UART_SetConfig+0x534>
 800607e:	4b72      	ldr	r3, [pc, #456]	@ (8006248 <UART_SetConfig+0x69c>)
 8006080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006082:	f003 0307 	and.w	r3, r3, #7
 8006086:	2b05      	cmp	r3, #5
 8006088:	d826      	bhi.n	80060d8 <UART_SetConfig+0x52c>
 800608a:	a201      	add	r2, pc, #4	@ (adr r2, 8006090 <UART_SetConfig+0x4e4>)
 800608c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006090:	080060a9 	.word	0x080060a9
 8006094:	080060b1 	.word	0x080060b1
 8006098:	080060b9 	.word	0x080060b9
 800609c:	080060c1 	.word	0x080060c1
 80060a0:	080060c9 	.word	0x080060c9
 80060a4:	080060d1 	.word	0x080060d1
 80060a8:	2300      	movs	r3, #0
 80060aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ae:	e050      	b.n	8006152 <UART_SetConfig+0x5a6>
 80060b0:	2304      	movs	r3, #4
 80060b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060b6:	e04c      	b.n	8006152 <UART_SetConfig+0x5a6>
 80060b8:	2308      	movs	r3, #8
 80060ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060be:	e048      	b.n	8006152 <UART_SetConfig+0x5a6>
 80060c0:	2310      	movs	r3, #16
 80060c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060c6:	e044      	b.n	8006152 <UART_SetConfig+0x5a6>
 80060c8:	2320      	movs	r3, #32
 80060ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ce:	e040      	b.n	8006152 <UART_SetConfig+0x5a6>
 80060d0:	2340      	movs	r3, #64	@ 0x40
 80060d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060d6:	e03c      	b.n	8006152 <UART_SetConfig+0x5a6>
 80060d8:	2380      	movs	r3, #128	@ 0x80
 80060da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060de:	e038      	b.n	8006152 <UART_SetConfig+0x5a6>
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a5b      	ldr	r2, [pc, #364]	@ (8006254 <UART_SetConfig+0x6a8>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d130      	bne.n	800614c <UART_SetConfig+0x5a0>
 80060ea:	4b57      	ldr	r3, [pc, #348]	@ (8006248 <UART_SetConfig+0x69c>)
 80060ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060ee:	f003 0307 	and.w	r3, r3, #7
 80060f2:	2b05      	cmp	r3, #5
 80060f4:	d826      	bhi.n	8006144 <UART_SetConfig+0x598>
 80060f6:	a201      	add	r2, pc, #4	@ (adr r2, 80060fc <UART_SetConfig+0x550>)
 80060f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060fc:	08006115 	.word	0x08006115
 8006100:	0800611d 	.word	0x0800611d
 8006104:	08006125 	.word	0x08006125
 8006108:	0800612d 	.word	0x0800612d
 800610c:	08006135 	.word	0x08006135
 8006110:	0800613d 	.word	0x0800613d
 8006114:	2302      	movs	r3, #2
 8006116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800611a:	e01a      	b.n	8006152 <UART_SetConfig+0x5a6>
 800611c:	2304      	movs	r3, #4
 800611e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006122:	e016      	b.n	8006152 <UART_SetConfig+0x5a6>
 8006124:	2308      	movs	r3, #8
 8006126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800612a:	e012      	b.n	8006152 <UART_SetConfig+0x5a6>
 800612c:	2310      	movs	r3, #16
 800612e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006132:	e00e      	b.n	8006152 <UART_SetConfig+0x5a6>
 8006134:	2320      	movs	r3, #32
 8006136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800613a:	e00a      	b.n	8006152 <UART_SetConfig+0x5a6>
 800613c:	2340      	movs	r3, #64	@ 0x40
 800613e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006142:	e006      	b.n	8006152 <UART_SetConfig+0x5a6>
 8006144:	2380      	movs	r3, #128	@ 0x80
 8006146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800614a:	e002      	b.n	8006152 <UART_SetConfig+0x5a6>
 800614c:	2380      	movs	r3, #128	@ 0x80
 800614e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a3f      	ldr	r2, [pc, #252]	@ (8006254 <UART_SetConfig+0x6a8>)
 8006158:	4293      	cmp	r3, r2
 800615a:	f040 80f8 	bne.w	800634e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800615e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006162:	2b20      	cmp	r3, #32
 8006164:	dc46      	bgt.n	80061f4 <UART_SetConfig+0x648>
 8006166:	2b02      	cmp	r3, #2
 8006168:	f2c0 8082 	blt.w	8006270 <UART_SetConfig+0x6c4>
 800616c:	3b02      	subs	r3, #2
 800616e:	2b1e      	cmp	r3, #30
 8006170:	d87e      	bhi.n	8006270 <UART_SetConfig+0x6c4>
 8006172:	a201      	add	r2, pc, #4	@ (adr r2, 8006178 <UART_SetConfig+0x5cc>)
 8006174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006178:	080061fb 	.word	0x080061fb
 800617c:	08006271 	.word	0x08006271
 8006180:	08006203 	.word	0x08006203
 8006184:	08006271 	.word	0x08006271
 8006188:	08006271 	.word	0x08006271
 800618c:	08006271 	.word	0x08006271
 8006190:	08006213 	.word	0x08006213
 8006194:	08006271 	.word	0x08006271
 8006198:	08006271 	.word	0x08006271
 800619c:	08006271 	.word	0x08006271
 80061a0:	08006271 	.word	0x08006271
 80061a4:	08006271 	.word	0x08006271
 80061a8:	08006271 	.word	0x08006271
 80061ac:	08006271 	.word	0x08006271
 80061b0:	08006223 	.word	0x08006223
 80061b4:	08006271 	.word	0x08006271
 80061b8:	08006271 	.word	0x08006271
 80061bc:	08006271 	.word	0x08006271
 80061c0:	08006271 	.word	0x08006271
 80061c4:	08006271 	.word	0x08006271
 80061c8:	08006271 	.word	0x08006271
 80061cc:	08006271 	.word	0x08006271
 80061d0:	08006271 	.word	0x08006271
 80061d4:	08006271 	.word	0x08006271
 80061d8:	08006271 	.word	0x08006271
 80061dc:	08006271 	.word	0x08006271
 80061e0:	08006271 	.word	0x08006271
 80061e4:	08006271 	.word	0x08006271
 80061e8:	08006271 	.word	0x08006271
 80061ec:	08006271 	.word	0x08006271
 80061f0:	08006263 	.word	0x08006263
 80061f4:	2b40      	cmp	r3, #64	@ 0x40
 80061f6:	d037      	beq.n	8006268 <UART_SetConfig+0x6bc>
 80061f8:	e03a      	b.n	8006270 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80061fa:	f7fd fdf7 	bl	8003dec <HAL_RCCEx_GetD3PCLK1Freq>
 80061fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006200:	e03c      	b.n	800627c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006202:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006206:	4618      	mov	r0, r3
 8006208:	f7fd fe06 	bl	8003e18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800620c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800620e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006210:	e034      	b.n	800627c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006212:	f107 0318 	add.w	r3, r7, #24
 8006216:	4618      	mov	r0, r3
 8006218:	f7fd ff52 	bl	80040c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006220:	e02c      	b.n	800627c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006222:	4b09      	ldr	r3, [pc, #36]	@ (8006248 <UART_SetConfig+0x69c>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 0320 	and.w	r3, r3, #32
 800622a:	2b00      	cmp	r3, #0
 800622c:	d016      	beq.n	800625c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800622e:	4b06      	ldr	r3, [pc, #24]	@ (8006248 <UART_SetConfig+0x69c>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	08db      	lsrs	r3, r3, #3
 8006234:	f003 0303 	and.w	r3, r3, #3
 8006238:	4a07      	ldr	r2, [pc, #28]	@ (8006258 <UART_SetConfig+0x6ac>)
 800623a:	fa22 f303 	lsr.w	r3, r2, r3
 800623e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006240:	e01c      	b.n	800627c <UART_SetConfig+0x6d0>
 8006242:	bf00      	nop
 8006244:	40011400 	.word	0x40011400
 8006248:	58024400 	.word	0x58024400
 800624c:	40007800 	.word	0x40007800
 8006250:	40007c00 	.word	0x40007c00
 8006254:	58000c00 	.word	0x58000c00
 8006258:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800625c:	4b9d      	ldr	r3, [pc, #628]	@ (80064d4 <UART_SetConfig+0x928>)
 800625e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006260:	e00c      	b.n	800627c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006262:	4b9d      	ldr	r3, [pc, #628]	@ (80064d8 <UART_SetConfig+0x92c>)
 8006264:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006266:	e009      	b.n	800627c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006268:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800626c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800626e:	e005      	b.n	800627c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006270:	2300      	movs	r3, #0
 8006272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800627a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800627c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800627e:	2b00      	cmp	r3, #0
 8006280:	f000 81de 	beq.w	8006640 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006288:	4a94      	ldr	r2, [pc, #592]	@ (80064dc <UART_SetConfig+0x930>)
 800628a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800628e:	461a      	mov	r2, r3
 8006290:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006292:	fbb3 f3f2 	udiv	r3, r3, r2
 8006296:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	4613      	mov	r3, r2
 800629e:	005b      	lsls	r3, r3, #1
 80062a0:	4413      	add	r3, r2
 80062a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d305      	bcc.n	80062b4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d903      	bls.n	80062bc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80062ba:	e1c1      	b.n	8006640 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062be:	2200      	movs	r2, #0
 80062c0:	60bb      	str	r3, [r7, #8]
 80062c2:	60fa      	str	r2, [r7, #12]
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c8:	4a84      	ldr	r2, [pc, #528]	@ (80064dc <UART_SetConfig+0x930>)
 80062ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	2200      	movs	r2, #0
 80062d2:	603b      	str	r3, [r7, #0]
 80062d4:	607a      	str	r2, [r7, #4]
 80062d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80062de:	f7fa f84f 	bl	8000380 <__aeabi_uldivmod>
 80062e2:	4602      	mov	r2, r0
 80062e4:	460b      	mov	r3, r1
 80062e6:	4610      	mov	r0, r2
 80062e8:	4619      	mov	r1, r3
 80062ea:	f04f 0200 	mov.w	r2, #0
 80062ee:	f04f 0300 	mov.w	r3, #0
 80062f2:	020b      	lsls	r3, r1, #8
 80062f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80062f8:	0202      	lsls	r2, r0, #8
 80062fa:	6979      	ldr	r1, [r7, #20]
 80062fc:	6849      	ldr	r1, [r1, #4]
 80062fe:	0849      	lsrs	r1, r1, #1
 8006300:	2000      	movs	r0, #0
 8006302:	460c      	mov	r4, r1
 8006304:	4605      	mov	r5, r0
 8006306:	eb12 0804 	adds.w	r8, r2, r4
 800630a:	eb43 0905 	adc.w	r9, r3, r5
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	469a      	mov	sl, r3
 8006316:	4693      	mov	fp, r2
 8006318:	4652      	mov	r2, sl
 800631a:	465b      	mov	r3, fp
 800631c:	4640      	mov	r0, r8
 800631e:	4649      	mov	r1, r9
 8006320:	f7fa f82e 	bl	8000380 <__aeabi_uldivmod>
 8006324:	4602      	mov	r2, r0
 8006326:	460b      	mov	r3, r1
 8006328:	4613      	mov	r3, r2
 800632a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800632c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800632e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006332:	d308      	bcc.n	8006346 <UART_SetConfig+0x79a>
 8006334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006336:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800633a:	d204      	bcs.n	8006346 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006342:	60da      	str	r2, [r3, #12]
 8006344:	e17c      	b.n	8006640 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800634c:	e178      	b.n	8006640 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	69db      	ldr	r3, [r3, #28]
 8006352:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006356:	f040 80c5 	bne.w	80064e4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800635a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800635e:	2b20      	cmp	r3, #32
 8006360:	dc48      	bgt.n	80063f4 <UART_SetConfig+0x848>
 8006362:	2b00      	cmp	r3, #0
 8006364:	db7b      	blt.n	800645e <UART_SetConfig+0x8b2>
 8006366:	2b20      	cmp	r3, #32
 8006368:	d879      	bhi.n	800645e <UART_SetConfig+0x8b2>
 800636a:	a201      	add	r2, pc, #4	@ (adr r2, 8006370 <UART_SetConfig+0x7c4>)
 800636c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006370:	080063fb 	.word	0x080063fb
 8006374:	08006403 	.word	0x08006403
 8006378:	0800645f 	.word	0x0800645f
 800637c:	0800645f 	.word	0x0800645f
 8006380:	0800640b 	.word	0x0800640b
 8006384:	0800645f 	.word	0x0800645f
 8006388:	0800645f 	.word	0x0800645f
 800638c:	0800645f 	.word	0x0800645f
 8006390:	0800641b 	.word	0x0800641b
 8006394:	0800645f 	.word	0x0800645f
 8006398:	0800645f 	.word	0x0800645f
 800639c:	0800645f 	.word	0x0800645f
 80063a0:	0800645f 	.word	0x0800645f
 80063a4:	0800645f 	.word	0x0800645f
 80063a8:	0800645f 	.word	0x0800645f
 80063ac:	0800645f 	.word	0x0800645f
 80063b0:	0800642b 	.word	0x0800642b
 80063b4:	0800645f 	.word	0x0800645f
 80063b8:	0800645f 	.word	0x0800645f
 80063bc:	0800645f 	.word	0x0800645f
 80063c0:	0800645f 	.word	0x0800645f
 80063c4:	0800645f 	.word	0x0800645f
 80063c8:	0800645f 	.word	0x0800645f
 80063cc:	0800645f 	.word	0x0800645f
 80063d0:	0800645f 	.word	0x0800645f
 80063d4:	0800645f 	.word	0x0800645f
 80063d8:	0800645f 	.word	0x0800645f
 80063dc:	0800645f 	.word	0x0800645f
 80063e0:	0800645f 	.word	0x0800645f
 80063e4:	0800645f 	.word	0x0800645f
 80063e8:	0800645f 	.word	0x0800645f
 80063ec:	0800645f 	.word	0x0800645f
 80063f0:	08006451 	.word	0x08006451
 80063f4:	2b40      	cmp	r3, #64	@ 0x40
 80063f6:	d02e      	beq.n	8006456 <UART_SetConfig+0x8aa>
 80063f8:	e031      	b.n	800645e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063fa:	f7fc fac1 	bl	8002980 <HAL_RCC_GetPCLK1Freq>
 80063fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006400:	e033      	b.n	800646a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006402:	f7fc fad3 	bl	80029ac <HAL_RCC_GetPCLK2Freq>
 8006406:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006408:	e02f      	b.n	800646a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800640a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800640e:	4618      	mov	r0, r3
 8006410:	f7fd fd02 	bl	8003e18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006416:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006418:	e027      	b.n	800646a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800641a:	f107 0318 	add.w	r3, r7, #24
 800641e:	4618      	mov	r0, r3
 8006420:	f7fd fe4e 	bl	80040c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006428:	e01f      	b.n	800646a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800642a:	4b2d      	ldr	r3, [pc, #180]	@ (80064e0 <UART_SetConfig+0x934>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0320 	and.w	r3, r3, #32
 8006432:	2b00      	cmp	r3, #0
 8006434:	d009      	beq.n	800644a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006436:	4b2a      	ldr	r3, [pc, #168]	@ (80064e0 <UART_SetConfig+0x934>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	08db      	lsrs	r3, r3, #3
 800643c:	f003 0303 	and.w	r3, r3, #3
 8006440:	4a24      	ldr	r2, [pc, #144]	@ (80064d4 <UART_SetConfig+0x928>)
 8006442:	fa22 f303 	lsr.w	r3, r2, r3
 8006446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006448:	e00f      	b.n	800646a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800644a:	4b22      	ldr	r3, [pc, #136]	@ (80064d4 <UART_SetConfig+0x928>)
 800644c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800644e:	e00c      	b.n	800646a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006450:	4b21      	ldr	r3, [pc, #132]	@ (80064d8 <UART_SetConfig+0x92c>)
 8006452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006454:	e009      	b.n	800646a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006456:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800645a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800645c:	e005      	b.n	800646a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800645e:	2300      	movs	r3, #0
 8006460:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006468:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800646a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800646c:	2b00      	cmp	r3, #0
 800646e:	f000 80e7 	beq.w	8006640 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006476:	4a19      	ldr	r2, [pc, #100]	@ (80064dc <UART_SetConfig+0x930>)
 8006478:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800647c:	461a      	mov	r2, r3
 800647e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006480:	fbb3 f3f2 	udiv	r3, r3, r2
 8006484:	005a      	lsls	r2, r3, #1
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	085b      	lsrs	r3, r3, #1
 800648c:	441a      	add	r2, r3
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	fbb2 f3f3 	udiv	r3, r2, r3
 8006496:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800649a:	2b0f      	cmp	r3, #15
 800649c:	d916      	bls.n	80064cc <UART_SetConfig+0x920>
 800649e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064a4:	d212      	bcs.n	80064cc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	f023 030f 	bic.w	r3, r3, #15
 80064ae:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064b2:	085b      	lsrs	r3, r3, #1
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	f003 0307 	and.w	r3, r3, #7
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80064be:	4313      	orrs	r3, r2
 80064c0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80064c8:	60da      	str	r2, [r3, #12]
 80064ca:	e0b9      	b.n	8006640 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80064d2:	e0b5      	b.n	8006640 <UART_SetConfig+0xa94>
 80064d4:	03d09000 	.word	0x03d09000
 80064d8:	003d0900 	.word	0x003d0900
 80064dc:	08007e08 	.word	0x08007e08
 80064e0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80064e4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80064e8:	2b20      	cmp	r3, #32
 80064ea:	dc49      	bgt.n	8006580 <UART_SetConfig+0x9d4>
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	db7c      	blt.n	80065ea <UART_SetConfig+0xa3e>
 80064f0:	2b20      	cmp	r3, #32
 80064f2:	d87a      	bhi.n	80065ea <UART_SetConfig+0xa3e>
 80064f4:	a201      	add	r2, pc, #4	@ (adr r2, 80064fc <UART_SetConfig+0x950>)
 80064f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fa:	bf00      	nop
 80064fc:	08006587 	.word	0x08006587
 8006500:	0800658f 	.word	0x0800658f
 8006504:	080065eb 	.word	0x080065eb
 8006508:	080065eb 	.word	0x080065eb
 800650c:	08006597 	.word	0x08006597
 8006510:	080065eb 	.word	0x080065eb
 8006514:	080065eb 	.word	0x080065eb
 8006518:	080065eb 	.word	0x080065eb
 800651c:	080065a7 	.word	0x080065a7
 8006520:	080065eb 	.word	0x080065eb
 8006524:	080065eb 	.word	0x080065eb
 8006528:	080065eb 	.word	0x080065eb
 800652c:	080065eb 	.word	0x080065eb
 8006530:	080065eb 	.word	0x080065eb
 8006534:	080065eb 	.word	0x080065eb
 8006538:	080065eb 	.word	0x080065eb
 800653c:	080065b7 	.word	0x080065b7
 8006540:	080065eb 	.word	0x080065eb
 8006544:	080065eb 	.word	0x080065eb
 8006548:	080065eb 	.word	0x080065eb
 800654c:	080065eb 	.word	0x080065eb
 8006550:	080065eb 	.word	0x080065eb
 8006554:	080065eb 	.word	0x080065eb
 8006558:	080065eb 	.word	0x080065eb
 800655c:	080065eb 	.word	0x080065eb
 8006560:	080065eb 	.word	0x080065eb
 8006564:	080065eb 	.word	0x080065eb
 8006568:	080065eb 	.word	0x080065eb
 800656c:	080065eb 	.word	0x080065eb
 8006570:	080065eb 	.word	0x080065eb
 8006574:	080065eb 	.word	0x080065eb
 8006578:	080065eb 	.word	0x080065eb
 800657c:	080065dd 	.word	0x080065dd
 8006580:	2b40      	cmp	r3, #64	@ 0x40
 8006582:	d02e      	beq.n	80065e2 <UART_SetConfig+0xa36>
 8006584:	e031      	b.n	80065ea <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006586:	f7fc f9fb 	bl	8002980 <HAL_RCC_GetPCLK1Freq>
 800658a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800658c:	e033      	b.n	80065f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800658e:	f7fc fa0d 	bl	80029ac <HAL_RCC_GetPCLK2Freq>
 8006592:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006594:	e02f      	b.n	80065f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006596:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800659a:	4618      	mov	r0, r3
 800659c:	f7fd fc3c 	bl	8003e18 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80065a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065a4:	e027      	b.n	80065f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065a6:	f107 0318 	add.w	r3, r7, #24
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7fd fd88 	bl	80040c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065b4:	e01f      	b.n	80065f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065b6:	4b2d      	ldr	r3, [pc, #180]	@ (800666c <UART_SetConfig+0xac0>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0320 	and.w	r3, r3, #32
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d009      	beq.n	80065d6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80065c2:	4b2a      	ldr	r3, [pc, #168]	@ (800666c <UART_SetConfig+0xac0>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	08db      	lsrs	r3, r3, #3
 80065c8:	f003 0303 	and.w	r3, r3, #3
 80065cc:	4a28      	ldr	r2, [pc, #160]	@ (8006670 <UART_SetConfig+0xac4>)
 80065ce:	fa22 f303 	lsr.w	r3, r2, r3
 80065d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80065d4:	e00f      	b.n	80065f6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80065d6:	4b26      	ldr	r3, [pc, #152]	@ (8006670 <UART_SetConfig+0xac4>)
 80065d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065da:	e00c      	b.n	80065f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80065dc:	4b25      	ldr	r3, [pc, #148]	@ (8006674 <UART_SetConfig+0xac8>)
 80065de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065e0:	e009      	b.n	80065f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065e8:	e005      	b.n	80065f6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80065ea:	2300      	movs	r3, #0
 80065ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80065f4:	bf00      	nop
    }

    if (pclk != 0U)
 80065f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d021      	beq.n	8006640 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006600:	4a1d      	ldr	r2, [pc, #116]	@ (8006678 <UART_SetConfig+0xacc>)
 8006602:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006606:	461a      	mov	r2, r3
 8006608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800660a:	fbb3 f2f2 	udiv	r2, r3, r2
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	085b      	lsrs	r3, r3, #1
 8006614:	441a      	add	r2, r3
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	fbb2 f3f3 	udiv	r3, r2, r3
 800661e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006622:	2b0f      	cmp	r3, #15
 8006624:	d909      	bls.n	800663a <UART_SetConfig+0xa8e>
 8006626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006628:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800662c:	d205      	bcs.n	800663a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800662e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006630:	b29a      	uxth	r2, r3
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	60da      	str	r2, [r3, #12]
 8006638:	e002      	b.n	8006640 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	2201      	movs	r2, #1
 8006644:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	2201      	movs	r2, #1
 800664c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	2200      	movs	r2, #0
 8006654:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	2200      	movs	r2, #0
 800665a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800665c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006660:	4618      	mov	r0, r3
 8006662:	3748      	adds	r7, #72	@ 0x48
 8006664:	46bd      	mov	sp, r7
 8006666:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800666a:	bf00      	nop
 800666c:	58024400 	.word	0x58024400
 8006670:	03d09000 	.word	0x03d09000
 8006674:	003d0900 	.word	0x003d0900
 8006678:	08007e08 	.word	0x08007e08

0800667c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006688:	f003 0308 	and.w	r3, r3, #8
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00a      	beq.n	80066a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	430a      	orrs	r2, r1
 80066a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00a      	beq.n	80066c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	430a      	orrs	r2, r1
 80066c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066cc:	f003 0302 	and.w	r3, r3, #2
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00a      	beq.n	80066ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	430a      	orrs	r2, r1
 80066e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ee:	f003 0304 	and.w	r3, r3, #4
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00a      	beq.n	800670c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	430a      	orrs	r2, r1
 800670a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006710:	f003 0310 	and.w	r3, r3, #16
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00a      	beq.n	800672e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	430a      	orrs	r2, r1
 800672c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006732:	f003 0320 	and.w	r3, r3, #32
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00a      	beq.n	8006750 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	430a      	orrs	r2, r1
 800674e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006758:	2b00      	cmp	r3, #0
 800675a:	d01a      	beq.n	8006792 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	430a      	orrs	r2, r1
 8006770:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006776:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800677a:	d10a      	bne.n	8006792 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	430a      	orrs	r2, r1
 8006790:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00a      	beq.n	80067b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	430a      	orrs	r2, r1
 80067b2:	605a      	str	r2, [r3, #4]
  }
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b098      	sub	sp, #96	@ 0x60
 80067c4:	af02      	add	r7, sp, #8
 80067c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067d0:	f7fa fde0 	bl	8001394 <HAL_GetTick>
 80067d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 0308 	and.w	r3, r3, #8
 80067e0:	2b08      	cmp	r3, #8
 80067e2:	d12f      	bne.n	8006844 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80067e8:	9300      	str	r3, [sp, #0]
 80067ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067ec:	2200      	movs	r2, #0
 80067ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 f88e 	bl	8006914 <UART_WaitOnFlagUntilTimeout>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d022      	beq.n	8006844 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006806:	e853 3f00 	ldrex	r3, [r3]
 800680a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800680c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800680e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006812:	653b      	str	r3, [r7, #80]	@ 0x50
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	461a      	mov	r2, r3
 800681a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800681c:	647b      	str	r3, [r7, #68]	@ 0x44
 800681e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006820:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006822:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006824:	e841 2300 	strex	r3, r2, [r1]
 8006828:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800682a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1e6      	bne.n	80067fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2220      	movs	r2, #32
 8006834:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e063      	b.n	800690c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0304 	and.w	r3, r3, #4
 800684e:	2b04      	cmp	r3, #4
 8006850:	d149      	bne.n	80068e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006852:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006856:	9300      	str	r3, [sp, #0]
 8006858:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800685a:	2200      	movs	r2, #0
 800685c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 f857 	bl	8006914 <UART_WaitOnFlagUntilTimeout>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d03c      	beq.n	80068e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006874:	e853 3f00 	ldrex	r3, [r3]
 8006878:	623b      	str	r3, [r7, #32]
   return(result);
 800687a:	6a3b      	ldr	r3, [r7, #32]
 800687c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006880:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	461a      	mov	r2, r3
 8006888:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800688a:	633b      	str	r3, [r7, #48]	@ 0x30
 800688c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006890:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006892:	e841 2300 	strex	r3, r2, [r1]
 8006896:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1e6      	bne.n	800686c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	3308      	adds	r3, #8
 80068a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	e853 3f00 	ldrex	r3, [r3]
 80068ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f023 0301 	bic.w	r3, r3, #1
 80068b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	3308      	adds	r3, #8
 80068bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068be:	61fa      	str	r2, [r7, #28]
 80068c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c2:	69b9      	ldr	r1, [r7, #24]
 80068c4:	69fa      	ldr	r2, [r7, #28]
 80068c6:	e841 2300 	strex	r3, r2, [r1]
 80068ca:	617b      	str	r3, [r7, #20]
   return(result);
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1e5      	bne.n	800689e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2220      	movs	r2, #32
 80068d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e012      	b.n	800690c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2220      	movs	r2, #32
 80068ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2220      	movs	r2, #32
 80068f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3758      	adds	r7, #88	@ 0x58
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	603b      	str	r3, [r7, #0]
 8006920:	4613      	mov	r3, r2
 8006922:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006924:	e04f      	b.n	80069c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800692c:	d04b      	beq.n	80069c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800692e:	f7fa fd31 	bl	8001394 <HAL_GetTick>
 8006932:	4602      	mov	r2, r0
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	69ba      	ldr	r2, [r7, #24]
 800693a:	429a      	cmp	r2, r3
 800693c:	d302      	bcc.n	8006944 <UART_WaitOnFlagUntilTimeout+0x30>
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d101      	bne.n	8006948 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006944:	2303      	movs	r3, #3
 8006946:	e04e      	b.n	80069e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0304 	and.w	r3, r3, #4
 8006952:	2b00      	cmp	r3, #0
 8006954:	d037      	beq.n	80069c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	2b80      	cmp	r3, #128	@ 0x80
 800695a:	d034      	beq.n	80069c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	2b40      	cmp	r3, #64	@ 0x40
 8006960:	d031      	beq.n	80069c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	69db      	ldr	r3, [r3, #28]
 8006968:	f003 0308 	and.w	r3, r3, #8
 800696c:	2b08      	cmp	r3, #8
 800696e:	d110      	bne.n	8006992 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	2208      	movs	r2, #8
 8006976:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f000 f839 	bl	80069f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2208      	movs	r2, #8
 8006982:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e029      	b.n	80069e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	69db      	ldr	r3, [r3, #28]
 8006998:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800699c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069a0:	d111      	bne.n	80069c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80069aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f000 f81f 	bl	80069f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2220      	movs	r2, #32
 80069b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e00f      	b.n	80069e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	69da      	ldr	r2, [r3, #28]
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	4013      	ands	r3, r2
 80069d0:	68ba      	ldr	r2, [r7, #8]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	bf0c      	ite	eq
 80069d6:	2301      	moveq	r3, #1
 80069d8:	2300      	movne	r3, #0
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	461a      	mov	r2, r3
 80069de:	79fb      	ldrb	r3, [r7, #7]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d0a0      	beq.n	8006926 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
	...

080069f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b095      	sub	sp, #84	@ 0x54
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a00:	e853 3f00 	ldrex	r3, [r3]
 8006a04:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	461a      	mov	r2, r3
 8006a14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a16:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a18:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a1e:	e841 2300 	strex	r3, r2, [r1]
 8006a22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1e6      	bne.n	80069f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	3308      	adds	r3, #8
 8006a30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a32:	6a3b      	ldr	r3, [r7, #32]
 8006a34:	e853 3f00 	ldrex	r3, [r3]
 8006a38:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a3a:	69fa      	ldr	r2, [r7, #28]
 8006a3c:	4b1e      	ldr	r3, [pc, #120]	@ (8006ab8 <UART_EndRxTransfer+0xc8>)
 8006a3e:	4013      	ands	r3, r2
 8006a40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	3308      	adds	r3, #8
 8006a48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a52:	e841 2300 	strex	r3, r2, [r1]
 8006a56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1e5      	bne.n	8006a2a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d118      	bne.n	8006a98 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	e853 3f00 	ldrex	r3, [r3]
 8006a72:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	f023 0310 	bic.w	r3, r3, #16
 8006a7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	461a      	mov	r2, r3
 8006a82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a84:	61bb      	str	r3, [r7, #24]
 8006a86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a88:	6979      	ldr	r1, [r7, #20]
 8006a8a:	69ba      	ldr	r2, [r7, #24]
 8006a8c:	e841 2300 	strex	r3, r2, [r1]
 8006a90:	613b      	str	r3, [r7, #16]
   return(result);
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d1e6      	bne.n	8006a66 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2220      	movs	r2, #32
 8006a9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006aac:	bf00      	nop
 8006aae:	3754      	adds	r7, #84	@ 0x54
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr
 8006ab8:	effffffe 	.word	0xeffffffe

08006abc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d101      	bne.n	8006ad2 <HAL_UARTEx_DisableFifoMode+0x16>
 8006ace:	2302      	movs	r3, #2
 8006ad0:	e027      	b.n	8006b22 <HAL_UARTEx_DisableFifoMode+0x66>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2224      	movs	r2, #36	@ 0x24
 8006ade:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f022 0201 	bic.w	r2, r2, #1
 8006af8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006b00:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2220      	movs	r2, #32
 8006b14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3714      	adds	r7, #20
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr

08006b2e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b084      	sub	sp, #16
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
 8006b36:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d101      	bne.n	8006b46 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006b42:	2302      	movs	r3, #2
 8006b44:	e02d      	b.n	8006ba2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2224      	movs	r2, #36	@ 0x24
 8006b52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f022 0201 	bic.w	r2, r2, #1
 8006b6c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	683a      	ldr	r2, [r7, #0]
 8006b7e:	430a      	orrs	r2, r1
 8006b80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f850 	bl	8006c28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2220      	movs	r2, #32
 8006b94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b084      	sub	sp, #16
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
 8006bb2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d101      	bne.n	8006bc2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006bbe:	2302      	movs	r3, #2
 8006bc0:	e02d      	b.n	8006c1e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2224      	movs	r2, #36	@ 0x24
 8006bce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f022 0201 	bic.w	r2, r2, #1
 8006be8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f812 	bl	8006c28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2220      	movs	r2, #32
 8006c10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
	...

08006c28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d108      	bne.n	8006c4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006c48:	e031      	b.n	8006cae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006c4a:	2310      	movs	r3, #16
 8006c4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006c4e:	2310      	movs	r3, #16
 8006c50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	0e5b      	lsrs	r3, r3, #25
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	f003 0307 	and.w	r3, r3, #7
 8006c60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	0f5b      	lsrs	r3, r3, #29
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	f003 0307 	and.w	r3, r3, #7
 8006c70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c72:	7bbb      	ldrb	r3, [r7, #14]
 8006c74:	7b3a      	ldrb	r2, [r7, #12]
 8006c76:	4911      	ldr	r1, [pc, #68]	@ (8006cbc <UARTEx_SetNbDataToProcess+0x94>)
 8006c78:	5c8a      	ldrb	r2, [r1, r2]
 8006c7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006c7e:	7b3a      	ldrb	r2, [r7, #12]
 8006c80:	490f      	ldr	r1, [pc, #60]	@ (8006cc0 <UARTEx_SetNbDataToProcess+0x98>)
 8006c82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c84:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c90:	7bfb      	ldrb	r3, [r7, #15]
 8006c92:	7b7a      	ldrb	r2, [r7, #13]
 8006c94:	4909      	ldr	r1, [pc, #36]	@ (8006cbc <UARTEx_SetNbDataToProcess+0x94>)
 8006c96:	5c8a      	ldrb	r2, [r1, r2]
 8006c98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006c9c:	7b7a      	ldrb	r2, [r7, #13]
 8006c9e:	4908      	ldr	r1, [pc, #32]	@ (8006cc0 <UARTEx_SetNbDataToProcess+0x98>)
 8006ca0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ca2:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006cae:	bf00      	nop
 8006cb0:	3714      	adds	r7, #20
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	08007e20 	.word	0x08007e20
 8006cc0:	08007e28 	.word	0x08007e28

08006cc4 <std>:
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	b510      	push	{r4, lr}
 8006cc8:	4604      	mov	r4, r0
 8006cca:	e9c0 3300 	strd	r3, r3, [r0]
 8006cce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cd2:	6083      	str	r3, [r0, #8]
 8006cd4:	8181      	strh	r1, [r0, #12]
 8006cd6:	6643      	str	r3, [r0, #100]	@ 0x64
 8006cd8:	81c2      	strh	r2, [r0, #14]
 8006cda:	6183      	str	r3, [r0, #24]
 8006cdc:	4619      	mov	r1, r3
 8006cde:	2208      	movs	r2, #8
 8006ce0:	305c      	adds	r0, #92	@ 0x5c
 8006ce2:	f000 f9f9 	bl	80070d8 <memset>
 8006ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8006d1c <std+0x58>)
 8006ce8:	6263      	str	r3, [r4, #36]	@ 0x24
 8006cea:	4b0d      	ldr	r3, [pc, #52]	@ (8006d20 <std+0x5c>)
 8006cec:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006cee:	4b0d      	ldr	r3, [pc, #52]	@ (8006d24 <std+0x60>)
 8006cf0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8006d28 <std+0x64>)
 8006cf4:	6323      	str	r3, [r4, #48]	@ 0x30
 8006cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8006d2c <std+0x68>)
 8006cf8:	6224      	str	r4, [r4, #32]
 8006cfa:	429c      	cmp	r4, r3
 8006cfc:	d006      	beq.n	8006d0c <std+0x48>
 8006cfe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006d02:	4294      	cmp	r4, r2
 8006d04:	d002      	beq.n	8006d0c <std+0x48>
 8006d06:	33d0      	adds	r3, #208	@ 0xd0
 8006d08:	429c      	cmp	r4, r3
 8006d0a:	d105      	bne.n	8006d18 <std+0x54>
 8006d0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d14:	f000 ba58 	b.w	80071c8 <__retarget_lock_init_recursive>
 8006d18:	bd10      	pop	{r4, pc}
 8006d1a:	bf00      	nop
 8006d1c:	08006f29 	.word	0x08006f29
 8006d20:	08006f4b 	.word	0x08006f4b
 8006d24:	08006f83 	.word	0x08006f83
 8006d28:	08006fa7 	.word	0x08006fa7
 8006d2c:	24000174 	.word	0x24000174

08006d30 <stdio_exit_handler>:
 8006d30:	4a02      	ldr	r2, [pc, #8]	@ (8006d3c <stdio_exit_handler+0xc>)
 8006d32:	4903      	ldr	r1, [pc, #12]	@ (8006d40 <stdio_exit_handler+0x10>)
 8006d34:	4803      	ldr	r0, [pc, #12]	@ (8006d44 <stdio_exit_handler+0x14>)
 8006d36:	f000 b869 	b.w	8006e0c <_fwalk_sglue>
 8006d3a:	bf00      	nop
 8006d3c:	24000010 	.word	0x24000010
 8006d40:	08007a65 	.word	0x08007a65
 8006d44:	24000020 	.word	0x24000020

08006d48 <cleanup_stdio>:
 8006d48:	6841      	ldr	r1, [r0, #4]
 8006d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8006d7c <cleanup_stdio+0x34>)
 8006d4c:	4299      	cmp	r1, r3
 8006d4e:	b510      	push	{r4, lr}
 8006d50:	4604      	mov	r4, r0
 8006d52:	d001      	beq.n	8006d58 <cleanup_stdio+0x10>
 8006d54:	f000 fe86 	bl	8007a64 <_fflush_r>
 8006d58:	68a1      	ldr	r1, [r4, #8]
 8006d5a:	4b09      	ldr	r3, [pc, #36]	@ (8006d80 <cleanup_stdio+0x38>)
 8006d5c:	4299      	cmp	r1, r3
 8006d5e:	d002      	beq.n	8006d66 <cleanup_stdio+0x1e>
 8006d60:	4620      	mov	r0, r4
 8006d62:	f000 fe7f 	bl	8007a64 <_fflush_r>
 8006d66:	68e1      	ldr	r1, [r4, #12]
 8006d68:	4b06      	ldr	r3, [pc, #24]	@ (8006d84 <cleanup_stdio+0x3c>)
 8006d6a:	4299      	cmp	r1, r3
 8006d6c:	d004      	beq.n	8006d78 <cleanup_stdio+0x30>
 8006d6e:	4620      	mov	r0, r4
 8006d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d74:	f000 be76 	b.w	8007a64 <_fflush_r>
 8006d78:	bd10      	pop	{r4, pc}
 8006d7a:	bf00      	nop
 8006d7c:	24000174 	.word	0x24000174
 8006d80:	240001dc 	.word	0x240001dc
 8006d84:	24000244 	.word	0x24000244

08006d88 <global_stdio_init.part.0>:
 8006d88:	b510      	push	{r4, lr}
 8006d8a:	4b0b      	ldr	r3, [pc, #44]	@ (8006db8 <global_stdio_init.part.0+0x30>)
 8006d8c:	4c0b      	ldr	r4, [pc, #44]	@ (8006dbc <global_stdio_init.part.0+0x34>)
 8006d8e:	4a0c      	ldr	r2, [pc, #48]	@ (8006dc0 <global_stdio_init.part.0+0x38>)
 8006d90:	601a      	str	r2, [r3, #0]
 8006d92:	4620      	mov	r0, r4
 8006d94:	2200      	movs	r2, #0
 8006d96:	2104      	movs	r1, #4
 8006d98:	f7ff ff94 	bl	8006cc4 <std>
 8006d9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006da0:	2201      	movs	r2, #1
 8006da2:	2109      	movs	r1, #9
 8006da4:	f7ff ff8e 	bl	8006cc4 <std>
 8006da8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006dac:	2202      	movs	r2, #2
 8006dae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006db2:	2112      	movs	r1, #18
 8006db4:	f7ff bf86 	b.w	8006cc4 <std>
 8006db8:	240002ac 	.word	0x240002ac
 8006dbc:	24000174 	.word	0x24000174
 8006dc0:	08006d31 	.word	0x08006d31

08006dc4 <__sfp_lock_acquire>:
 8006dc4:	4801      	ldr	r0, [pc, #4]	@ (8006dcc <__sfp_lock_acquire+0x8>)
 8006dc6:	f000 ba00 	b.w	80071ca <__retarget_lock_acquire_recursive>
 8006dca:	bf00      	nop
 8006dcc:	240002b5 	.word	0x240002b5

08006dd0 <__sfp_lock_release>:
 8006dd0:	4801      	ldr	r0, [pc, #4]	@ (8006dd8 <__sfp_lock_release+0x8>)
 8006dd2:	f000 b9fb 	b.w	80071cc <__retarget_lock_release_recursive>
 8006dd6:	bf00      	nop
 8006dd8:	240002b5 	.word	0x240002b5

08006ddc <__sinit>:
 8006ddc:	b510      	push	{r4, lr}
 8006dde:	4604      	mov	r4, r0
 8006de0:	f7ff fff0 	bl	8006dc4 <__sfp_lock_acquire>
 8006de4:	6a23      	ldr	r3, [r4, #32]
 8006de6:	b11b      	cbz	r3, 8006df0 <__sinit+0x14>
 8006de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dec:	f7ff bff0 	b.w	8006dd0 <__sfp_lock_release>
 8006df0:	4b04      	ldr	r3, [pc, #16]	@ (8006e04 <__sinit+0x28>)
 8006df2:	6223      	str	r3, [r4, #32]
 8006df4:	4b04      	ldr	r3, [pc, #16]	@ (8006e08 <__sinit+0x2c>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1f5      	bne.n	8006de8 <__sinit+0xc>
 8006dfc:	f7ff ffc4 	bl	8006d88 <global_stdio_init.part.0>
 8006e00:	e7f2      	b.n	8006de8 <__sinit+0xc>
 8006e02:	bf00      	nop
 8006e04:	08006d49 	.word	0x08006d49
 8006e08:	240002ac 	.word	0x240002ac

08006e0c <_fwalk_sglue>:
 8006e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e10:	4607      	mov	r7, r0
 8006e12:	4688      	mov	r8, r1
 8006e14:	4614      	mov	r4, r2
 8006e16:	2600      	movs	r6, #0
 8006e18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e1c:	f1b9 0901 	subs.w	r9, r9, #1
 8006e20:	d505      	bpl.n	8006e2e <_fwalk_sglue+0x22>
 8006e22:	6824      	ldr	r4, [r4, #0]
 8006e24:	2c00      	cmp	r4, #0
 8006e26:	d1f7      	bne.n	8006e18 <_fwalk_sglue+0xc>
 8006e28:	4630      	mov	r0, r6
 8006e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e2e:	89ab      	ldrh	r3, [r5, #12]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d907      	bls.n	8006e44 <_fwalk_sglue+0x38>
 8006e34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e38:	3301      	adds	r3, #1
 8006e3a:	d003      	beq.n	8006e44 <_fwalk_sglue+0x38>
 8006e3c:	4629      	mov	r1, r5
 8006e3e:	4638      	mov	r0, r7
 8006e40:	47c0      	blx	r8
 8006e42:	4306      	orrs	r6, r0
 8006e44:	3568      	adds	r5, #104	@ 0x68
 8006e46:	e7e9      	b.n	8006e1c <_fwalk_sglue+0x10>

08006e48 <iprintf>:
 8006e48:	b40f      	push	{r0, r1, r2, r3}
 8006e4a:	b507      	push	{r0, r1, r2, lr}
 8006e4c:	4906      	ldr	r1, [pc, #24]	@ (8006e68 <iprintf+0x20>)
 8006e4e:	ab04      	add	r3, sp, #16
 8006e50:	6808      	ldr	r0, [r1, #0]
 8006e52:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e56:	6881      	ldr	r1, [r0, #8]
 8006e58:	9301      	str	r3, [sp, #4]
 8006e5a:	f000 fadb 	bl	8007414 <_vfiprintf_r>
 8006e5e:	b003      	add	sp, #12
 8006e60:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e64:	b004      	add	sp, #16
 8006e66:	4770      	bx	lr
 8006e68:	2400001c 	.word	0x2400001c

08006e6c <_puts_r>:
 8006e6c:	6a03      	ldr	r3, [r0, #32]
 8006e6e:	b570      	push	{r4, r5, r6, lr}
 8006e70:	6884      	ldr	r4, [r0, #8]
 8006e72:	4605      	mov	r5, r0
 8006e74:	460e      	mov	r6, r1
 8006e76:	b90b      	cbnz	r3, 8006e7c <_puts_r+0x10>
 8006e78:	f7ff ffb0 	bl	8006ddc <__sinit>
 8006e7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e7e:	07db      	lsls	r3, r3, #31
 8006e80:	d405      	bmi.n	8006e8e <_puts_r+0x22>
 8006e82:	89a3      	ldrh	r3, [r4, #12]
 8006e84:	0598      	lsls	r0, r3, #22
 8006e86:	d402      	bmi.n	8006e8e <_puts_r+0x22>
 8006e88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e8a:	f000 f99e 	bl	80071ca <__retarget_lock_acquire_recursive>
 8006e8e:	89a3      	ldrh	r3, [r4, #12]
 8006e90:	0719      	lsls	r1, r3, #28
 8006e92:	d502      	bpl.n	8006e9a <_puts_r+0x2e>
 8006e94:	6923      	ldr	r3, [r4, #16]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d135      	bne.n	8006f06 <_puts_r+0x9a>
 8006e9a:	4621      	mov	r1, r4
 8006e9c:	4628      	mov	r0, r5
 8006e9e:	f000 f8c5 	bl	800702c <__swsetup_r>
 8006ea2:	b380      	cbz	r0, 8006f06 <_puts_r+0x9a>
 8006ea4:	f04f 35ff 	mov.w	r5, #4294967295
 8006ea8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006eaa:	07da      	lsls	r2, r3, #31
 8006eac:	d405      	bmi.n	8006eba <_puts_r+0x4e>
 8006eae:	89a3      	ldrh	r3, [r4, #12]
 8006eb0:	059b      	lsls	r3, r3, #22
 8006eb2:	d402      	bmi.n	8006eba <_puts_r+0x4e>
 8006eb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006eb6:	f000 f989 	bl	80071cc <__retarget_lock_release_recursive>
 8006eba:	4628      	mov	r0, r5
 8006ebc:	bd70      	pop	{r4, r5, r6, pc}
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	da04      	bge.n	8006ecc <_puts_r+0x60>
 8006ec2:	69a2      	ldr	r2, [r4, #24]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	dc17      	bgt.n	8006ef8 <_puts_r+0x8c>
 8006ec8:	290a      	cmp	r1, #10
 8006eca:	d015      	beq.n	8006ef8 <_puts_r+0x8c>
 8006ecc:	6823      	ldr	r3, [r4, #0]
 8006ece:	1c5a      	adds	r2, r3, #1
 8006ed0:	6022      	str	r2, [r4, #0]
 8006ed2:	7019      	strb	r1, [r3, #0]
 8006ed4:	68a3      	ldr	r3, [r4, #8]
 8006ed6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006eda:	3b01      	subs	r3, #1
 8006edc:	60a3      	str	r3, [r4, #8]
 8006ede:	2900      	cmp	r1, #0
 8006ee0:	d1ed      	bne.n	8006ebe <_puts_r+0x52>
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	da11      	bge.n	8006f0a <_puts_r+0x9e>
 8006ee6:	4622      	mov	r2, r4
 8006ee8:	210a      	movs	r1, #10
 8006eea:	4628      	mov	r0, r5
 8006eec:	f000 f85f 	bl	8006fae <__swbuf_r>
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	d0d7      	beq.n	8006ea4 <_puts_r+0x38>
 8006ef4:	250a      	movs	r5, #10
 8006ef6:	e7d7      	b.n	8006ea8 <_puts_r+0x3c>
 8006ef8:	4622      	mov	r2, r4
 8006efa:	4628      	mov	r0, r5
 8006efc:	f000 f857 	bl	8006fae <__swbuf_r>
 8006f00:	3001      	adds	r0, #1
 8006f02:	d1e7      	bne.n	8006ed4 <_puts_r+0x68>
 8006f04:	e7ce      	b.n	8006ea4 <_puts_r+0x38>
 8006f06:	3e01      	subs	r6, #1
 8006f08:	e7e4      	b.n	8006ed4 <_puts_r+0x68>
 8006f0a:	6823      	ldr	r3, [r4, #0]
 8006f0c:	1c5a      	adds	r2, r3, #1
 8006f0e:	6022      	str	r2, [r4, #0]
 8006f10:	220a      	movs	r2, #10
 8006f12:	701a      	strb	r2, [r3, #0]
 8006f14:	e7ee      	b.n	8006ef4 <_puts_r+0x88>
	...

08006f18 <puts>:
 8006f18:	4b02      	ldr	r3, [pc, #8]	@ (8006f24 <puts+0xc>)
 8006f1a:	4601      	mov	r1, r0
 8006f1c:	6818      	ldr	r0, [r3, #0]
 8006f1e:	f7ff bfa5 	b.w	8006e6c <_puts_r>
 8006f22:	bf00      	nop
 8006f24:	2400001c 	.word	0x2400001c

08006f28 <__sread>:
 8006f28:	b510      	push	{r4, lr}
 8006f2a:	460c      	mov	r4, r1
 8006f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f30:	f000 f8fc 	bl	800712c <_read_r>
 8006f34:	2800      	cmp	r0, #0
 8006f36:	bfab      	itete	ge
 8006f38:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006f3a:	89a3      	ldrhlt	r3, [r4, #12]
 8006f3c:	181b      	addge	r3, r3, r0
 8006f3e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006f42:	bfac      	ite	ge
 8006f44:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006f46:	81a3      	strhlt	r3, [r4, #12]
 8006f48:	bd10      	pop	{r4, pc}

08006f4a <__swrite>:
 8006f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f4e:	461f      	mov	r7, r3
 8006f50:	898b      	ldrh	r3, [r1, #12]
 8006f52:	05db      	lsls	r3, r3, #23
 8006f54:	4605      	mov	r5, r0
 8006f56:	460c      	mov	r4, r1
 8006f58:	4616      	mov	r6, r2
 8006f5a:	d505      	bpl.n	8006f68 <__swrite+0x1e>
 8006f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f60:	2302      	movs	r3, #2
 8006f62:	2200      	movs	r2, #0
 8006f64:	f000 f8d0 	bl	8007108 <_lseek_r>
 8006f68:	89a3      	ldrh	r3, [r4, #12]
 8006f6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f72:	81a3      	strh	r3, [r4, #12]
 8006f74:	4632      	mov	r2, r6
 8006f76:	463b      	mov	r3, r7
 8006f78:	4628      	mov	r0, r5
 8006f7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f7e:	f000 b8e7 	b.w	8007150 <_write_r>

08006f82 <__sseek>:
 8006f82:	b510      	push	{r4, lr}
 8006f84:	460c      	mov	r4, r1
 8006f86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f8a:	f000 f8bd 	bl	8007108 <_lseek_r>
 8006f8e:	1c43      	adds	r3, r0, #1
 8006f90:	89a3      	ldrh	r3, [r4, #12]
 8006f92:	bf15      	itete	ne
 8006f94:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006f96:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006f9a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006f9e:	81a3      	strheq	r3, [r4, #12]
 8006fa0:	bf18      	it	ne
 8006fa2:	81a3      	strhne	r3, [r4, #12]
 8006fa4:	bd10      	pop	{r4, pc}

08006fa6 <__sclose>:
 8006fa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006faa:	f000 b89d 	b.w	80070e8 <_close_r>

08006fae <__swbuf_r>:
 8006fae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fb0:	460e      	mov	r6, r1
 8006fb2:	4614      	mov	r4, r2
 8006fb4:	4605      	mov	r5, r0
 8006fb6:	b118      	cbz	r0, 8006fc0 <__swbuf_r+0x12>
 8006fb8:	6a03      	ldr	r3, [r0, #32]
 8006fba:	b90b      	cbnz	r3, 8006fc0 <__swbuf_r+0x12>
 8006fbc:	f7ff ff0e 	bl	8006ddc <__sinit>
 8006fc0:	69a3      	ldr	r3, [r4, #24]
 8006fc2:	60a3      	str	r3, [r4, #8]
 8006fc4:	89a3      	ldrh	r3, [r4, #12]
 8006fc6:	071a      	lsls	r2, r3, #28
 8006fc8:	d501      	bpl.n	8006fce <__swbuf_r+0x20>
 8006fca:	6923      	ldr	r3, [r4, #16]
 8006fcc:	b943      	cbnz	r3, 8006fe0 <__swbuf_r+0x32>
 8006fce:	4621      	mov	r1, r4
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	f000 f82b 	bl	800702c <__swsetup_r>
 8006fd6:	b118      	cbz	r0, 8006fe0 <__swbuf_r+0x32>
 8006fd8:	f04f 37ff 	mov.w	r7, #4294967295
 8006fdc:	4638      	mov	r0, r7
 8006fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fe0:	6823      	ldr	r3, [r4, #0]
 8006fe2:	6922      	ldr	r2, [r4, #16]
 8006fe4:	1a98      	subs	r0, r3, r2
 8006fe6:	6963      	ldr	r3, [r4, #20]
 8006fe8:	b2f6      	uxtb	r6, r6
 8006fea:	4283      	cmp	r3, r0
 8006fec:	4637      	mov	r7, r6
 8006fee:	dc05      	bgt.n	8006ffc <__swbuf_r+0x4e>
 8006ff0:	4621      	mov	r1, r4
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	f000 fd36 	bl	8007a64 <_fflush_r>
 8006ff8:	2800      	cmp	r0, #0
 8006ffa:	d1ed      	bne.n	8006fd8 <__swbuf_r+0x2a>
 8006ffc:	68a3      	ldr	r3, [r4, #8]
 8006ffe:	3b01      	subs	r3, #1
 8007000:	60a3      	str	r3, [r4, #8]
 8007002:	6823      	ldr	r3, [r4, #0]
 8007004:	1c5a      	adds	r2, r3, #1
 8007006:	6022      	str	r2, [r4, #0]
 8007008:	701e      	strb	r6, [r3, #0]
 800700a:	6962      	ldr	r2, [r4, #20]
 800700c:	1c43      	adds	r3, r0, #1
 800700e:	429a      	cmp	r2, r3
 8007010:	d004      	beq.n	800701c <__swbuf_r+0x6e>
 8007012:	89a3      	ldrh	r3, [r4, #12]
 8007014:	07db      	lsls	r3, r3, #31
 8007016:	d5e1      	bpl.n	8006fdc <__swbuf_r+0x2e>
 8007018:	2e0a      	cmp	r6, #10
 800701a:	d1df      	bne.n	8006fdc <__swbuf_r+0x2e>
 800701c:	4621      	mov	r1, r4
 800701e:	4628      	mov	r0, r5
 8007020:	f000 fd20 	bl	8007a64 <_fflush_r>
 8007024:	2800      	cmp	r0, #0
 8007026:	d0d9      	beq.n	8006fdc <__swbuf_r+0x2e>
 8007028:	e7d6      	b.n	8006fd8 <__swbuf_r+0x2a>
	...

0800702c <__swsetup_r>:
 800702c:	b538      	push	{r3, r4, r5, lr}
 800702e:	4b29      	ldr	r3, [pc, #164]	@ (80070d4 <__swsetup_r+0xa8>)
 8007030:	4605      	mov	r5, r0
 8007032:	6818      	ldr	r0, [r3, #0]
 8007034:	460c      	mov	r4, r1
 8007036:	b118      	cbz	r0, 8007040 <__swsetup_r+0x14>
 8007038:	6a03      	ldr	r3, [r0, #32]
 800703a:	b90b      	cbnz	r3, 8007040 <__swsetup_r+0x14>
 800703c:	f7ff fece 	bl	8006ddc <__sinit>
 8007040:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007044:	0719      	lsls	r1, r3, #28
 8007046:	d422      	bmi.n	800708e <__swsetup_r+0x62>
 8007048:	06da      	lsls	r2, r3, #27
 800704a:	d407      	bmi.n	800705c <__swsetup_r+0x30>
 800704c:	2209      	movs	r2, #9
 800704e:	602a      	str	r2, [r5, #0]
 8007050:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007054:	81a3      	strh	r3, [r4, #12]
 8007056:	f04f 30ff 	mov.w	r0, #4294967295
 800705a:	e033      	b.n	80070c4 <__swsetup_r+0x98>
 800705c:	0758      	lsls	r0, r3, #29
 800705e:	d512      	bpl.n	8007086 <__swsetup_r+0x5a>
 8007060:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007062:	b141      	cbz	r1, 8007076 <__swsetup_r+0x4a>
 8007064:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007068:	4299      	cmp	r1, r3
 800706a:	d002      	beq.n	8007072 <__swsetup_r+0x46>
 800706c:	4628      	mov	r0, r5
 800706e:	f000 f8af 	bl	80071d0 <_free_r>
 8007072:	2300      	movs	r3, #0
 8007074:	6363      	str	r3, [r4, #52]	@ 0x34
 8007076:	89a3      	ldrh	r3, [r4, #12]
 8007078:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800707c:	81a3      	strh	r3, [r4, #12]
 800707e:	2300      	movs	r3, #0
 8007080:	6063      	str	r3, [r4, #4]
 8007082:	6923      	ldr	r3, [r4, #16]
 8007084:	6023      	str	r3, [r4, #0]
 8007086:	89a3      	ldrh	r3, [r4, #12]
 8007088:	f043 0308 	orr.w	r3, r3, #8
 800708c:	81a3      	strh	r3, [r4, #12]
 800708e:	6923      	ldr	r3, [r4, #16]
 8007090:	b94b      	cbnz	r3, 80070a6 <__swsetup_r+0x7a>
 8007092:	89a3      	ldrh	r3, [r4, #12]
 8007094:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007098:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800709c:	d003      	beq.n	80070a6 <__swsetup_r+0x7a>
 800709e:	4621      	mov	r1, r4
 80070a0:	4628      	mov	r0, r5
 80070a2:	f000 fd2d 	bl	8007b00 <__smakebuf_r>
 80070a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070aa:	f013 0201 	ands.w	r2, r3, #1
 80070ae:	d00a      	beq.n	80070c6 <__swsetup_r+0x9a>
 80070b0:	2200      	movs	r2, #0
 80070b2:	60a2      	str	r2, [r4, #8]
 80070b4:	6962      	ldr	r2, [r4, #20]
 80070b6:	4252      	negs	r2, r2
 80070b8:	61a2      	str	r2, [r4, #24]
 80070ba:	6922      	ldr	r2, [r4, #16]
 80070bc:	b942      	cbnz	r2, 80070d0 <__swsetup_r+0xa4>
 80070be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80070c2:	d1c5      	bne.n	8007050 <__swsetup_r+0x24>
 80070c4:	bd38      	pop	{r3, r4, r5, pc}
 80070c6:	0799      	lsls	r1, r3, #30
 80070c8:	bf58      	it	pl
 80070ca:	6962      	ldrpl	r2, [r4, #20]
 80070cc:	60a2      	str	r2, [r4, #8]
 80070ce:	e7f4      	b.n	80070ba <__swsetup_r+0x8e>
 80070d0:	2000      	movs	r0, #0
 80070d2:	e7f7      	b.n	80070c4 <__swsetup_r+0x98>
 80070d4:	2400001c 	.word	0x2400001c

080070d8 <memset>:
 80070d8:	4402      	add	r2, r0
 80070da:	4603      	mov	r3, r0
 80070dc:	4293      	cmp	r3, r2
 80070de:	d100      	bne.n	80070e2 <memset+0xa>
 80070e0:	4770      	bx	lr
 80070e2:	f803 1b01 	strb.w	r1, [r3], #1
 80070e6:	e7f9      	b.n	80070dc <memset+0x4>

080070e8 <_close_r>:
 80070e8:	b538      	push	{r3, r4, r5, lr}
 80070ea:	4d06      	ldr	r5, [pc, #24]	@ (8007104 <_close_r+0x1c>)
 80070ec:	2300      	movs	r3, #0
 80070ee:	4604      	mov	r4, r0
 80070f0:	4608      	mov	r0, r1
 80070f2:	602b      	str	r3, [r5, #0]
 80070f4:	f7f9 fda4 	bl	8000c40 <_close>
 80070f8:	1c43      	adds	r3, r0, #1
 80070fa:	d102      	bne.n	8007102 <_close_r+0x1a>
 80070fc:	682b      	ldr	r3, [r5, #0]
 80070fe:	b103      	cbz	r3, 8007102 <_close_r+0x1a>
 8007100:	6023      	str	r3, [r4, #0]
 8007102:	bd38      	pop	{r3, r4, r5, pc}
 8007104:	240002b0 	.word	0x240002b0

08007108 <_lseek_r>:
 8007108:	b538      	push	{r3, r4, r5, lr}
 800710a:	4d07      	ldr	r5, [pc, #28]	@ (8007128 <_lseek_r+0x20>)
 800710c:	4604      	mov	r4, r0
 800710e:	4608      	mov	r0, r1
 8007110:	4611      	mov	r1, r2
 8007112:	2200      	movs	r2, #0
 8007114:	602a      	str	r2, [r5, #0]
 8007116:	461a      	mov	r2, r3
 8007118:	f7f9 fdb9 	bl	8000c8e <_lseek>
 800711c:	1c43      	adds	r3, r0, #1
 800711e:	d102      	bne.n	8007126 <_lseek_r+0x1e>
 8007120:	682b      	ldr	r3, [r5, #0]
 8007122:	b103      	cbz	r3, 8007126 <_lseek_r+0x1e>
 8007124:	6023      	str	r3, [r4, #0]
 8007126:	bd38      	pop	{r3, r4, r5, pc}
 8007128:	240002b0 	.word	0x240002b0

0800712c <_read_r>:
 800712c:	b538      	push	{r3, r4, r5, lr}
 800712e:	4d07      	ldr	r5, [pc, #28]	@ (800714c <_read_r+0x20>)
 8007130:	4604      	mov	r4, r0
 8007132:	4608      	mov	r0, r1
 8007134:	4611      	mov	r1, r2
 8007136:	2200      	movs	r2, #0
 8007138:	602a      	str	r2, [r5, #0]
 800713a:	461a      	mov	r2, r3
 800713c:	f7f9 fd63 	bl	8000c06 <_read>
 8007140:	1c43      	adds	r3, r0, #1
 8007142:	d102      	bne.n	800714a <_read_r+0x1e>
 8007144:	682b      	ldr	r3, [r5, #0]
 8007146:	b103      	cbz	r3, 800714a <_read_r+0x1e>
 8007148:	6023      	str	r3, [r4, #0]
 800714a:	bd38      	pop	{r3, r4, r5, pc}
 800714c:	240002b0 	.word	0x240002b0

08007150 <_write_r>:
 8007150:	b538      	push	{r3, r4, r5, lr}
 8007152:	4d07      	ldr	r5, [pc, #28]	@ (8007170 <_write_r+0x20>)
 8007154:	4604      	mov	r4, r0
 8007156:	4608      	mov	r0, r1
 8007158:	4611      	mov	r1, r2
 800715a:	2200      	movs	r2, #0
 800715c:	602a      	str	r2, [r5, #0]
 800715e:	461a      	mov	r2, r3
 8007160:	f7fa f850 	bl	8001204 <_write>
 8007164:	1c43      	adds	r3, r0, #1
 8007166:	d102      	bne.n	800716e <_write_r+0x1e>
 8007168:	682b      	ldr	r3, [r5, #0]
 800716a:	b103      	cbz	r3, 800716e <_write_r+0x1e>
 800716c:	6023      	str	r3, [r4, #0]
 800716e:	bd38      	pop	{r3, r4, r5, pc}
 8007170:	240002b0 	.word	0x240002b0

08007174 <__errno>:
 8007174:	4b01      	ldr	r3, [pc, #4]	@ (800717c <__errno+0x8>)
 8007176:	6818      	ldr	r0, [r3, #0]
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	2400001c 	.word	0x2400001c

08007180 <__libc_init_array>:
 8007180:	b570      	push	{r4, r5, r6, lr}
 8007182:	4d0d      	ldr	r5, [pc, #52]	@ (80071b8 <__libc_init_array+0x38>)
 8007184:	4c0d      	ldr	r4, [pc, #52]	@ (80071bc <__libc_init_array+0x3c>)
 8007186:	1b64      	subs	r4, r4, r5
 8007188:	10a4      	asrs	r4, r4, #2
 800718a:	2600      	movs	r6, #0
 800718c:	42a6      	cmp	r6, r4
 800718e:	d109      	bne.n	80071a4 <__libc_init_array+0x24>
 8007190:	4d0b      	ldr	r5, [pc, #44]	@ (80071c0 <__libc_init_array+0x40>)
 8007192:	4c0c      	ldr	r4, [pc, #48]	@ (80071c4 <__libc_init_array+0x44>)
 8007194:	f000 fd22 	bl	8007bdc <_init>
 8007198:	1b64      	subs	r4, r4, r5
 800719a:	10a4      	asrs	r4, r4, #2
 800719c:	2600      	movs	r6, #0
 800719e:	42a6      	cmp	r6, r4
 80071a0:	d105      	bne.n	80071ae <__libc_init_array+0x2e>
 80071a2:	bd70      	pop	{r4, r5, r6, pc}
 80071a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80071a8:	4798      	blx	r3
 80071aa:	3601      	adds	r6, #1
 80071ac:	e7ee      	b.n	800718c <__libc_init_array+0xc>
 80071ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80071b2:	4798      	blx	r3
 80071b4:	3601      	adds	r6, #1
 80071b6:	e7f2      	b.n	800719e <__libc_init_array+0x1e>
 80071b8:	08007e6c 	.word	0x08007e6c
 80071bc:	08007e6c 	.word	0x08007e6c
 80071c0:	08007e6c 	.word	0x08007e6c
 80071c4:	08007e70 	.word	0x08007e70

080071c8 <__retarget_lock_init_recursive>:
 80071c8:	4770      	bx	lr

080071ca <__retarget_lock_acquire_recursive>:
 80071ca:	4770      	bx	lr

080071cc <__retarget_lock_release_recursive>:
 80071cc:	4770      	bx	lr
	...

080071d0 <_free_r>:
 80071d0:	b538      	push	{r3, r4, r5, lr}
 80071d2:	4605      	mov	r5, r0
 80071d4:	2900      	cmp	r1, #0
 80071d6:	d041      	beq.n	800725c <_free_r+0x8c>
 80071d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071dc:	1f0c      	subs	r4, r1, #4
 80071de:	2b00      	cmp	r3, #0
 80071e0:	bfb8      	it	lt
 80071e2:	18e4      	addlt	r4, r4, r3
 80071e4:	f000 f8e0 	bl	80073a8 <__malloc_lock>
 80071e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007260 <_free_r+0x90>)
 80071ea:	6813      	ldr	r3, [r2, #0]
 80071ec:	b933      	cbnz	r3, 80071fc <_free_r+0x2c>
 80071ee:	6063      	str	r3, [r4, #4]
 80071f0:	6014      	str	r4, [r2, #0]
 80071f2:	4628      	mov	r0, r5
 80071f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071f8:	f000 b8dc 	b.w	80073b4 <__malloc_unlock>
 80071fc:	42a3      	cmp	r3, r4
 80071fe:	d908      	bls.n	8007212 <_free_r+0x42>
 8007200:	6820      	ldr	r0, [r4, #0]
 8007202:	1821      	adds	r1, r4, r0
 8007204:	428b      	cmp	r3, r1
 8007206:	bf01      	itttt	eq
 8007208:	6819      	ldreq	r1, [r3, #0]
 800720a:	685b      	ldreq	r3, [r3, #4]
 800720c:	1809      	addeq	r1, r1, r0
 800720e:	6021      	streq	r1, [r4, #0]
 8007210:	e7ed      	b.n	80071ee <_free_r+0x1e>
 8007212:	461a      	mov	r2, r3
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	b10b      	cbz	r3, 800721c <_free_r+0x4c>
 8007218:	42a3      	cmp	r3, r4
 800721a:	d9fa      	bls.n	8007212 <_free_r+0x42>
 800721c:	6811      	ldr	r1, [r2, #0]
 800721e:	1850      	adds	r0, r2, r1
 8007220:	42a0      	cmp	r0, r4
 8007222:	d10b      	bne.n	800723c <_free_r+0x6c>
 8007224:	6820      	ldr	r0, [r4, #0]
 8007226:	4401      	add	r1, r0
 8007228:	1850      	adds	r0, r2, r1
 800722a:	4283      	cmp	r3, r0
 800722c:	6011      	str	r1, [r2, #0]
 800722e:	d1e0      	bne.n	80071f2 <_free_r+0x22>
 8007230:	6818      	ldr	r0, [r3, #0]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	6053      	str	r3, [r2, #4]
 8007236:	4408      	add	r0, r1
 8007238:	6010      	str	r0, [r2, #0]
 800723a:	e7da      	b.n	80071f2 <_free_r+0x22>
 800723c:	d902      	bls.n	8007244 <_free_r+0x74>
 800723e:	230c      	movs	r3, #12
 8007240:	602b      	str	r3, [r5, #0]
 8007242:	e7d6      	b.n	80071f2 <_free_r+0x22>
 8007244:	6820      	ldr	r0, [r4, #0]
 8007246:	1821      	adds	r1, r4, r0
 8007248:	428b      	cmp	r3, r1
 800724a:	bf04      	itt	eq
 800724c:	6819      	ldreq	r1, [r3, #0]
 800724e:	685b      	ldreq	r3, [r3, #4]
 8007250:	6063      	str	r3, [r4, #4]
 8007252:	bf04      	itt	eq
 8007254:	1809      	addeq	r1, r1, r0
 8007256:	6021      	streq	r1, [r4, #0]
 8007258:	6054      	str	r4, [r2, #4]
 800725a:	e7ca      	b.n	80071f2 <_free_r+0x22>
 800725c:	bd38      	pop	{r3, r4, r5, pc}
 800725e:	bf00      	nop
 8007260:	240002bc 	.word	0x240002bc

08007264 <sbrk_aligned>:
 8007264:	b570      	push	{r4, r5, r6, lr}
 8007266:	4e0f      	ldr	r6, [pc, #60]	@ (80072a4 <sbrk_aligned+0x40>)
 8007268:	460c      	mov	r4, r1
 800726a:	6831      	ldr	r1, [r6, #0]
 800726c:	4605      	mov	r5, r0
 800726e:	b911      	cbnz	r1, 8007276 <sbrk_aligned+0x12>
 8007270:	f000 fca4 	bl	8007bbc <_sbrk_r>
 8007274:	6030      	str	r0, [r6, #0]
 8007276:	4621      	mov	r1, r4
 8007278:	4628      	mov	r0, r5
 800727a:	f000 fc9f 	bl	8007bbc <_sbrk_r>
 800727e:	1c43      	adds	r3, r0, #1
 8007280:	d103      	bne.n	800728a <sbrk_aligned+0x26>
 8007282:	f04f 34ff 	mov.w	r4, #4294967295
 8007286:	4620      	mov	r0, r4
 8007288:	bd70      	pop	{r4, r5, r6, pc}
 800728a:	1cc4      	adds	r4, r0, #3
 800728c:	f024 0403 	bic.w	r4, r4, #3
 8007290:	42a0      	cmp	r0, r4
 8007292:	d0f8      	beq.n	8007286 <sbrk_aligned+0x22>
 8007294:	1a21      	subs	r1, r4, r0
 8007296:	4628      	mov	r0, r5
 8007298:	f000 fc90 	bl	8007bbc <_sbrk_r>
 800729c:	3001      	adds	r0, #1
 800729e:	d1f2      	bne.n	8007286 <sbrk_aligned+0x22>
 80072a0:	e7ef      	b.n	8007282 <sbrk_aligned+0x1e>
 80072a2:	bf00      	nop
 80072a4:	240002b8 	.word	0x240002b8

080072a8 <_malloc_r>:
 80072a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072ac:	1ccd      	adds	r5, r1, #3
 80072ae:	f025 0503 	bic.w	r5, r5, #3
 80072b2:	3508      	adds	r5, #8
 80072b4:	2d0c      	cmp	r5, #12
 80072b6:	bf38      	it	cc
 80072b8:	250c      	movcc	r5, #12
 80072ba:	2d00      	cmp	r5, #0
 80072bc:	4606      	mov	r6, r0
 80072be:	db01      	blt.n	80072c4 <_malloc_r+0x1c>
 80072c0:	42a9      	cmp	r1, r5
 80072c2:	d904      	bls.n	80072ce <_malloc_r+0x26>
 80072c4:	230c      	movs	r3, #12
 80072c6:	6033      	str	r3, [r6, #0]
 80072c8:	2000      	movs	r0, #0
 80072ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80073a4 <_malloc_r+0xfc>
 80072d2:	f000 f869 	bl	80073a8 <__malloc_lock>
 80072d6:	f8d8 3000 	ldr.w	r3, [r8]
 80072da:	461c      	mov	r4, r3
 80072dc:	bb44      	cbnz	r4, 8007330 <_malloc_r+0x88>
 80072de:	4629      	mov	r1, r5
 80072e0:	4630      	mov	r0, r6
 80072e2:	f7ff ffbf 	bl	8007264 <sbrk_aligned>
 80072e6:	1c43      	adds	r3, r0, #1
 80072e8:	4604      	mov	r4, r0
 80072ea:	d158      	bne.n	800739e <_malloc_r+0xf6>
 80072ec:	f8d8 4000 	ldr.w	r4, [r8]
 80072f0:	4627      	mov	r7, r4
 80072f2:	2f00      	cmp	r7, #0
 80072f4:	d143      	bne.n	800737e <_malloc_r+0xd6>
 80072f6:	2c00      	cmp	r4, #0
 80072f8:	d04b      	beq.n	8007392 <_malloc_r+0xea>
 80072fa:	6823      	ldr	r3, [r4, #0]
 80072fc:	4639      	mov	r1, r7
 80072fe:	4630      	mov	r0, r6
 8007300:	eb04 0903 	add.w	r9, r4, r3
 8007304:	f000 fc5a 	bl	8007bbc <_sbrk_r>
 8007308:	4581      	cmp	r9, r0
 800730a:	d142      	bne.n	8007392 <_malloc_r+0xea>
 800730c:	6821      	ldr	r1, [r4, #0]
 800730e:	1a6d      	subs	r5, r5, r1
 8007310:	4629      	mov	r1, r5
 8007312:	4630      	mov	r0, r6
 8007314:	f7ff ffa6 	bl	8007264 <sbrk_aligned>
 8007318:	3001      	adds	r0, #1
 800731a:	d03a      	beq.n	8007392 <_malloc_r+0xea>
 800731c:	6823      	ldr	r3, [r4, #0]
 800731e:	442b      	add	r3, r5
 8007320:	6023      	str	r3, [r4, #0]
 8007322:	f8d8 3000 	ldr.w	r3, [r8]
 8007326:	685a      	ldr	r2, [r3, #4]
 8007328:	bb62      	cbnz	r2, 8007384 <_malloc_r+0xdc>
 800732a:	f8c8 7000 	str.w	r7, [r8]
 800732e:	e00f      	b.n	8007350 <_malloc_r+0xa8>
 8007330:	6822      	ldr	r2, [r4, #0]
 8007332:	1b52      	subs	r2, r2, r5
 8007334:	d420      	bmi.n	8007378 <_malloc_r+0xd0>
 8007336:	2a0b      	cmp	r2, #11
 8007338:	d917      	bls.n	800736a <_malloc_r+0xc2>
 800733a:	1961      	adds	r1, r4, r5
 800733c:	42a3      	cmp	r3, r4
 800733e:	6025      	str	r5, [r4, #0]
 8007340:	bf18      	it	ne
 8007342:	6059      	strne	r1, [r3, #4]
 8007344:	6863      	ldr	r3, [r4, #4]
 8007346:	bf08      	it	eq
 8007348:	f8c8 1000 	streq.w	r1, [r8]
 800734c:	5162      	str	r2, [r4, r5]
 800734e:	604b      	str	r3, [r1, #4]
 8007350:	4630      	mov	r0, r6
 8007352:	f000 f82f 	bl	80073b4 <__malloc_unlock>
 8007356:	f104 000b 	add.w	r0, r4, #11
 800735a:	1d23      	adds	r3, r4, #4
 800735c:	f020 0007 	bic.w	r0, r0, #7
 8007360:	1ac2      	subs	r2, r0, r3
 8007362:	bf1c      	itt	ne
 8007364:	1a1b      	subne	r3, r3, r0
 8007366:	50a3      	strne	r3, [r4, r2]
 8007368:	e7af      	b.n	80072ca <_malloc_r+0x22>
 800736a:	6862      	ldr	r2, [r4, #4]
 800736c:	42a3      	cmp	r3, r4
 800736e:	bf0c      	ite	eq
 8007370:	f8c8 2000 	streq.w	r2, [r8]
 8007374:	605a      	strne	r2, [r3, #4]
 8007376:	e7eb      	b.n	8007350 <_malloc_r+0xa8>
 8007378:	4623      	mov	r3, r4
 800737a:	6864      	ldr	r4, [r4, #4]
 800737c:	e7ae      	b.n	80072dc <_malloc_r+0x34>
 800737e:	463c      	mov	r4, r7
 8007380:	687f      	ldr	r7, [r7, #4]
 8007382:	e7b6      	b.n	80072f2 <_malloc_r+0x4a>
 8007384:	461a      	mov	r2, r3
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	42a3      	cmp	r3, r4
 800738a:	d1fb      	bne.n	8007384 <_malloc_r+0xdc>
 800738c:	2300      	movs	r3, #0
 800738e:	6053      	str	r3, [r2, #4]
 8007390:	e7de      	b.n	8007350 <_malloc_r+0xa8>
 8007392:	230c      	movs	r3, #12
 8007394:	6033      	str	r3, [r6, #0]
 8007396:	4630      	mov	r0, r6
 8007398:	f000 f80c 	bl	80073b4 <__malloc_unlock>
 800739c:	e794      	b.n	80072c8 <_malloc_r+0x20>
 800739e:	6005      	str	r5, [r0, #0]
 80073a0:	e7d6      	b.n	8007350 <_malloc_r+0xa8>
 80073a2:	bf00      	nop
 80073a4:	240002bc 	.word	0x240002bc

080073a8 <__malloc_lock>:
 80073a8:	4801      	ldr	r0, [pc, #4]	@ (80073b0 <__malloc_lock+0x8>)
 80073aa:	f7ff bf0e 	b.w	80071ca <__retarget_lock_acquire_recursive>
 80073ae:	bf00      	nop
 80073b0:	240002b4 	.word	0x240002b4

080073b4 <__malloc_unlock>:
 80073b4:	4801      	ldr	r0, [pc, #4]	@ (80073bc <__malloc_unlock+0x8>)
 80073b6:	f7ff bf09 	b.w	80071cc <__retarget_lock_release_recursive>
 80073ba:	bf00      	nop
 80073bc:	240002b4 	.word	0x240002b4

080073c0 <__sfputc_r>:
 80073c0:	6893      	ldr	r3, [r2, #8]
 80073c2:	3b01      	subs	r3, #1
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	b410      	push	{r4}
 80073c8:	6093      	str	r3, [r2, #8]
 80073ca:	da08      	bge.n	80073de <__sfputc_r+0x1e>
 80073cc:	6994      	ldr	r4, [r2, #24]
 80073ce:	42a3      	cmp	r3, r4
 80073d0:	db01      	blt.n	80073d6 <__sfputc_r+0x16>
 80073d2:	290a      	cmp	r1, #10
 80073d4:	d103      	bne.n	80073de <__sfputc_r+0x1e>
 80073d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073da:	f7ff bde8 	b.w	8006fae <__swbuf_r>
 80073de:	6813      	ldr	r3, [r2, #0]
 80073e0:	1c58      	adds	r0, r3, #1
 80073e2:	6010      	str	r0, [r2, #0]
 80073e4:	7019      	strb	r1, [r3, #0]
 80073e6:	4608      	mov	r0, r1
 80073e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <__sfputs_r>:
 80073ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f0:	4606      	mov	r6, r0
 80073f2:	460f      	mov	r7, r1
 80073f4:	4614      	mov	r4, r2
 80073f6:	18d5      	adds	r5, r2, r3
 80073f8:	42ac      	cmp	r4, r5
 80073fa:	d101      	bne.n	8007400 <__sfputs_r+0x12>
 80073fc:	2000      	movs	r0, #0
 80073fe:	e007      	b.n	8007410 <__sfputs_r+0x22>
 8007400:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007404:	463a      	mov	r2, r7
 8007406:	4630      	mov	r0, r6
 8007408:	f7ff ffda 	bl	80073c0 <__sfputc_r>
 800740c:	1c43      	adds	r3, r0, #1
 800740e:	d1f3      	bne.n	80073f8 <__sfputs_r+0xa>
 8007410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007414 <_vfiprintf_r>:
 8007414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007418:	460d      	mov	r5, r1
 800741a:	b09d      	sub	sp, #116	@ 0x74
 800741c:	4614      	mov	r4, r2
 800741e:	4698      	mov	r8, r3
 8007420:	4606      	mov	r6, r0
 8007422:	b118      	cbz	r0, 800742c <_vfiprintf_r+0x18>
 8007424:	6a03      	ldr	r3, [r0, #32]
 8007426:	b90b      	cbnz	r3, 800742c <_vfiprintf_r+0x18>
 8007428:	f7ff fcd8 	bl	8006ddc <__sinit>
 800742c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800742e:	07d9      	lsls	r1, r3, #31
 8007430:	d405      	bmi.n	800743e <_vfiprintf_r+0x2a>
 8007432:	89ab      	ldrh	r3, [r5, #12]
 8007434:	059a      	lsls	r2, r3, #22
 8007436:	d402      	bmi.n	800743e <_vfiprintf_r+0x2a>
 8007438:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800743a:	f7ff fec6 	bl	80071ca <__retarget_lock_acquire_recursive>
 800743e:	89ab      	ldrh	r3, [r5, #12]
 8007440:	071b      	lsls	r3, r3, #28
 8007442:	d501      	bpl.n	8007448 <_vfiprintf_r+0x34>
 8007444:	692b      	ldr	r3, [r5, #16]
 8007446:	b99b      	cbnz	r3, 8007470 <_vfiprintf_r+0x5c>
 8007448:	4629      	mov	r1, r5
 800744a:	4630      	mov	r0, r6
 800744c:	f7ff fdee 	bl	800702c <__swsetup_r>
 8007450:	b170      	cbz	r0, 8007470 <_vfiprintf_r+0x5c>
 8007452:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007454:	07dc      	lsls	r4, r3, #31
 8007456:	d504      	bpl.n	8007462 <_vfiprintf_r+0x4e>
 8007458:	f04f 30ff 	mov.w	r0, #4294967295
 800745c:	b01d      	add	sp, #116	@ 0x74
 800745e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007462:	89ab      	ldrh	r3, [r5, #12]
 8007464:	0598      	lsls	r0, r3, #22
 8007466:	d4f7      	bmi.n	8007458 <_vfiprintf_r+0x44>
 8007468:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800746a:	f7ff feaf 	bl	80071cc <__retarget_lock_release_recursive>
 800746e:	e7f3      	b.n	8007458 <_vfiprintf_r+0x44>
 8007470:	2300      	movs	r3, #0
 8007472:	9309      	str	r3, [sp, #36]	@ 0x24
 8007474:	2320      	movs	r3, #32
 8007476:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800747a:	f8cd 800c 	str.w	r8, [sp, #12]
 800747e:	2330      	movs	r3, #48	@ 0x30
 8007480:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007630 <_vfiprintf_r+0x21c>
 8007484:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007488:	f04f 0901 	mov.w	r9, #1
 800748c:	4623      	mov	r3, r4
 800748e:	469a      	mov	sl, r3
 8007490:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007494:	b10a      	cbz	r2, 800749a <_vfiprintf_r+0x86>
 8007496:	2a25      	cmp	r2, #37	@ 0x25
 8007498:	d1f9      	bne.n	800748e <_vfiprintf_r+0x7a>
 800749a:	ebba 0b04 	subs.w	fp, sl, r4
 800749e:	d00b      	beq.n	80074b8 <_vfiprintf_r+0xa4>
 80074a0:	465b      	mov	r3, fp
 80074a2:	4622      	mov	r2, r4
 80074a4:	4629      	mov	r1, r5
 80074a6:	4630      	mov	r0, r6
 80074a8:	f7ff ffa1 	bl	80073ee <__sfputs_r>
 80074ac:	3001      	adds	r0, #1
 80074ae:	f000 80a7 	beq.w	8007600 <_vfiprintf_r+0x1ec>
 80074b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074b4:	445a      	add	r2, fp
 80074b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80074b8:	f89a 3000 	ldrb.w	r3, [sl]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f000 809f 	beq.w	8007600 <_vfiprintf_r+0x1ec>
 80074c2:	2300      	movs	r3, #0
 80074c4:	f04f 32ff 	mov.w	r2, #4294967295
 80074c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074cc:	f10a 0a01 	add.w	sl, sl, #1
 80074d0:	9304      	str	r3, [sp, #16]
 80074d2:	9307      	str	r3, [sp, #28]
 80074d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80074d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80074da:	4654      	mov	r4, sl
 80074dc:	2205      	movs	r2, #5
 80074de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074e2:	4853      	ldr	r0, [pc, #332]	@ (8007630 <_vfiprintf_r+0x21c>)
 80074e4:	f7f8 fefc 	bl	80002e0 <memchr>
 80074e8:	9a04      	ldr	r2, [sp, #16]
 80074ea:	b9d8      	cbnz	r0, 8007524 <_vfiprintf_r+0x110>
 80074ec:	06d1      	lsls	r1, r2, #27
 80074ee:	bf44      	itt	mi
 80074f0:	2320      	movmi	r3, #32
 80074f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074f6:	0713      	lsls	r3, r2, #28
 80074f8:	bf44      	itt	mi
 80074fa:	232b      	movmi	r3, #43	@ 0x2b
 80074fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007500:	f89a 3000 	ldrb.w	r3, [sl]
 8007504:	2b2a      	cmp	r3, #42	@ 0x2a
 8007506:	d015      	beq.n	8007534 <_vfiprintf_r+0x120>
 8007508:	9a07      	ldr	r2, [sp, #28]
 800750a:	4654      	mov	r4, sl
 800750c:	2000      	movs	r0, #0
 800750e:	f04f 0c0a 	mov.w	ip, #10
 8007512:	4621      	mov	r1, r4
 8007514:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007518:	3b30      	subs	r3, #48	@ 0x30
 800751a:	2b09      	cmp	r3, #9
 800751c:	d94b      	bls.n	80075b6 <_vfiprintf_r+0x1a2>
 800751e:	b1b0      	cbz	r0, 800754e <_vfiprintf_r+0x13a>
 8007520:	9207      	str	r2, [sp, #28]
 8007522:	e014      	b.n	800754e <_vfiprintf_r+0x13a>
 8007524:	eba0 0308 	sub.w	r3, r0, r8
 8007528:	fa09 f303 	lsl.w	r3, r9, r3
 800752c:	4313      	orrs	r3, r2
 800752e:	9304      	str	r3, [sp, #16]
 8007530:	46a2      	mov	sl, r4
 8007532:	e7d2      	b.n	80074da <_vfiprintf_r+0xc6>
 8007534:	9b03      	ldr	r3, [sp, #12]
 8007536:	1d19      	adds	r1, r3, #4
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	9103      	str	r1, [sp, #12]
 800753c:	2b00      	cmp	r3, #0
 800753e:	bfbb      	ittet	lt
 8007540:	425b      	neglt	r3, r3
 8007542:	f042 0202 	orrlt.w	r2, r2, #2
 8007546:	9307      	strge	r3, [sp, #28]
 8007548:	9307      	strlt	r3, [sp, #28]
 800754a:	bfb8      	it	lt
 800754c:	9204      	strlt	r2, [sp, #16]
 800754e:	7823      	ldrb	r3, [r4, #0]
 8007550:	2b2e      	cmp	r3, #46	@ 0x2e
 8007552:	d10a      	bne.n	800756a <_vfiprintf_r+0x156>
 8007554:	7863      	ldrb	r3, [r4, #1]
 8007556:	2b2a      	cmp	r3, #42	@ 0x2a
 8007558:	d132      	bne.n	80075c0 <_vfiprintf_r+0x1ac>
 800755a:	9b03      	ldr	r3, [sp, #12]
 800755c:	1d1a      	adds	r2, r3, #4
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	9203      	str	r2, [sp, #12]
 8007562:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007566:	3402      	adds	r4, #2
 8007568:	9305      	str	r3, [sp, #20]
 800756a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007640 <_vfiprintf_r+0x22c>
 800756e:	7821      	ldrb	r1, [r4, #0]
 8007570:	2203      	movs	r2, #3
 8007572:	4650      	mov	r0, sl
 8007574:	f7f8 feb4 	bl	80002e0 <memchr>
 8007578:	b138      	cbz	r0, 800758a <_vfiprintf_r+0x176>
 800757a:	9b04      	ldr	r3, [sp, #16]
 800757c:	eba0 000a 	sub.w	r0, r0, sl
 8007580:	2240      	movs	r2, #64	@ 0x40
 8007582:	4082      	lsls	r2, r0
 8007584:	4313      	orrs	r3, r2
 8007586:	3401      	adds	r4, #1
 8007588:	9304      	str	r3, [sp, #16]
 800758a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800758e:	4829      	ldr	r0, [pc, #164]	@ (8007634 <_vfiprintf_r+0x220>)
 8007590:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007594:	2206      	movs	r2, #6
 8007596:	f7f8 fea3 	bl	80002e0 <memchr>
 800759a:	2800      	cmp	r0, #0
 800759c:	d03f      	beq.n	800761e <_vfiprintf_r+0x20a>
 800759e:	4b26      	ldr	r3, [pc, #152]	@ (8007638 <_vfiprintf_r+0x224>)
 80075a0:	bb1b      	cbnz	r3, 80075ea <_vfiprintf_r+0x1d6>
 80075a2:	9b03      	ldr	r3, [sp, #12]
 80075a4:	3307      	adds	r3, #7
 80075a6:	f023 0307 	bic.w	r3, r3, #7
 80075aa:	3308      	adds	r3, #8
 80075ac:	9303      	str	r3, [sp, #12]
 80075ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075b0:	443b      	add	r3, r7
 80075b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80075b4:	e76a      	b.n	800748c <_vfiprintf_r+0x78>
 80075b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80075ba:	460c      	mov	r4, r1
 80075bc:	2001      	movs	r0, #1
 80075be:	e7a8      	b.n	8007512 <_vfiprintf_r+0xfe>
 80075c0:	2300      	movs	r3, #0
 80075c2:	3401      	adds	r4, #1
 80075c4:	9305      	str	r3, [sp, #20]
 80075c6:	4619      	mov	r1, r3
 80075c8:	f04f 0c0a 	mov.w	ip, #10
 80075cc:	4620      	mov	r0, r4
 80075ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075d2:	3a30      	subs	r2, #48	@ 0x30
 80075d4:	2a09      	cmp	r2, #9
 80075d6:	d903      	bls.n	80075e0 <_vfiprintf_r+0x1cc>
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d0c6      	beq.n	800756a <_vfiprintf_r+0x156>
 80075dc:	9105      	str	r1, [sp, #20]
 80075de:	e7c4      	b.n	800756a <_vfiprintf_r+0x156>
 80075e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80075e4:	4604      	mov	r4, r0
 80075e6:	2301      	movs	r3, #1
 80075e8:	e7f0      	b.n	80075cc <_vfiprintf_r+0x1b8>
 80075ea:	ab03      	add	r3, sp, #12
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	462a      	mov	r2, r5
 80075f0:	4b12      	ldr	r3, [pc, #72]	@ (800763c <_vfiprintf_r+0x228>)
 80075f2:	a904      	add	r1, sp, #16
 80075f4:	4630      	mov	r0, r6
 80075f6:	f3af 8000 	nop.w
 80075fa:	4607      	mov	r7, r0
 80075fc:	1c78      	adds	r0, r7, #1
 80075fe:	d1d6      	bne.n	80075ae <_vfiprintf_r+0x19a>
 8007600:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007602:	07d9      	lsls	r1, r3, #31
 8007604:	d405      	bmi.n	8007612 <_vfiprintf_r+0x1fe>
 8007606:	89ab      	ldrh	r3, [r5, #12]
 8007608:	059a      	lsls	r2, r3, #22
 800760a:	d402      	bmi.n	8007612 <_vfiprintf_r+0x1fe>
 800760c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800760e:	f7ff fddd 	bl	80071cc <__retarget_lock_release_recursive>
 8007612:	89ab      	ldrh	r3, [r5, #12]
 8007614:	065b      	lsls	r3, r3, #25
 8007616:	f53f af1f 	bmi.w	8007458 <_vfiprintf_r+0x44>
 800761a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800761c:	e71e      	b.n	800745c <_vfiprintf_r+0x48>
 800761e:	ab03      	add	r3, sp, #12
 8007620:	9300      	str	r3, [sp, #0]
 8007622:	462a      	mov	r2, r5
 8007624:	4b05      	ldr	r3, [pc, #20]	@ (800763c <_vfiprintf_r+0x228>)
 8007626:	a904      	add	r1, sp, #16
 8007628:	4630      	mov	r0, r6
 800762a:	f000 f879 	bl	8007720 <_printf_i>
 800762e:	e7e4      	b.n	80075fa <_vfiprintf_r+0x1e6>
 8007630:	08007e30 	.word	0x08007e30
 8007634:	08007e3a 	.word	0x08007e3a
 8007638:	00000000 	.word	0x00000000
 800763c:	080073ef 	.word	0x080073ef
 8007640:	08007e36 	.word	0x08007e36

08007644 <_printf_common>:
 8007644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007648:	4616      	mov	r6, r2
 800764a:	4698      	mov	r8, r3
 800764c:	688a      	ldr	r2, [r1, #8]
 800764e:	690b      	ldr	r3, [r1, #16]
 8007650:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007654:	4293      	cmp	r3, r2
 8007656:	bfb8      	it	lt
 8007658:	4613      	movlt	r3, r2
 800765a:	6033      	str	r3, [r6, #0]
 800765c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007660:	4607      	mov	r7, r0
 8007662:	460c      	mov	r4, r1
 8007664:	b10a      	cbz	r2, 800766a <_printf_common+0x26>
 8007666:	3301      	adds	r3, #1
 8007668:	6033      	str	r3, [r6, #0]
 800766a:	6823      	ldr	r3, [r4, #0]
 800766c:	0699      	lsls	r1, r3, #26
 800766e:	bf42      	ittt	mi
 8007670:	6833      	ldrmi	r3, [r6, #0]
 8007672:	3302      	addmi	r3, #2
 8007674:	6033      	strmi	r3, [r6, #0]
 8007676:	6825      	ldr	r5, [r4, #0]
 8007678:	f015 0506 	ands.w	r5, r5, #6
 800767c:	d106      	bne.n	800768c <_printf_common+0x48>
 800767e:	f104 0a19 	add.w	sl, r4, #25
 8007682:	68e3      	ldr	r3, [r4, #12]
 8007684:	6832      	ldr	r2, [r6, #0]
 8007686:	1a9b      	subs	r3, r3, r2
 8007688:	42ab      	cmp	r3, r5
 800768a:	dc26      	bgt.n	80076da <_printf_common+0x96>
 800768c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007690:	6822      	ldr	r2, [r4, #0]
 8007692:	3b00      	subs	r3, #0
 8007694:	bf18      	it	ne
 8007696:	2301      	movne	r3, #1
 8007698:	0692      	lsls	r2, r2, #26
 800769a:	d42b      	bmi.n	80076f4 <_printf_common+0xb0>
 800769c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80076a0:	4641      	mov	r1, r8
 80076a2:	4638      	mov	r0, r7
 80076a4:	47c8      	blx	r9
 80076a6:	3001      	adds	r0, #1
 80076a8:	d01e      	beq.n	80076e8 <_printf_common+0xa4>
 80076aa:	6823      	ldr	r3, [r4, #0]
 80076ac:	6922      	ldr	r2, [r4, #16]
 80076ae:	f003 0306 	and.w	r3, r3, #6
 80076b2:	2b04      	cmp	r3, #4
 80076b4:	bf02      	ittt	eq
 80076b6:	68e5      	ldreq	r5, [r4, #12]
 80076b8:	6833      	ldreq	r3, [r6, #0]
 80076ba:	1aed      	subeq	r5, r5, r3
 80076bc:	68a3      	ldr	r3, [r4, #8]
 80076be:	bf0c      	ite	eq
 80076c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076c4:	2500      	movne	r5, #0
 80076c6:	4293      	cmp	r3, r2
 80076c8:	bfc4      	itt	gt
 80076ca:	1a9b      	subgt	r3, r3, r2
 80076cc:	18ed      	addgt	r5, r5, r3
 80076ce:	2600      	movs	r6, #0
 80076d0:	341a      	adds	r4, #26
 80076d2:	42b5      	cmp	r5, r6
 80076d4:	d11a      	bne.n	800770c <_printf_common+0xc8>
 80076d6:	2000      	movs	r0, #0
 80076d8:	e008      	b.n	80076ec <_printf_common+0xa8>
 80076da:	2301      	movs	r3, #1
 80076dc:	4652      	mov	r2, sl
 80076de:	4641      	mov	r1, r8
 80076e0:	4638      	mov	r0, r7
 80076e2:	47c8      	blx	r9
 80076e4:	3001      	adds	r0, #1
 80076e6:	d103      	bne.n	80076f0 <_printf_common+0xac>
 80076e8:	f04f 30ff 	mov.w	r0, #4294967295
 80076ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076f0:	3501      	adds	r5, #1
 80076f2:	e7c6      	b.n	8007682 <_printf_common+0x3e>
 80076f4:	18e1      	adds	r1, r4, r3
 80076f6:	1c5a      	adds	r2, r3, #1
 80076f8:	2030      	movs	r0, #48	@ 0x30
 80076fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80076fe:	4422      	add	r2, r4
 8007700:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007704:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007708:	3302      	adds	r3, #2
 800770a:	e7c7      	b.n	800769c <_printf_common+0x58>
 800770c:	2301      	movs	r3, #1
 800770e:	4622      	mov	r2, r4
 8007710:	4641      	mov	r1, r8
 8007712:	4638      	mov	r0, r7
 8007714:	47c8      	blx	r9
 8007716:	3001      	adds	r0, #1
 8007718:	d0e6      	beq.n	80076e8 <_printf_common+0xa4>
 800771a:	3601      	adds	r6, #1
 800771c:	e7d9      	b.n	80076d2 <_printf_common+0x8e>
	...

08007720 <_printf_i>:
 8007720:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007724:	7e0f      	ldrb	r7, [r1, #24]
 8007726:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007728:	2f78      	cmp	r7, #120	@ 0x78
 800772a:	4691      	mov	r9, r2
 800772c:	4680      	mov	r8, r0
 800772e:	460c      	mov	r4, r1
 8007730:	469a      	mov	sl, r3
 8007732:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007736:	d807      	bhi.n	8007748 <_printf_i+0x28>
 8007738:	2f62      	cmp	r7, #98	@ 0x62
 800773a:	d80a      	bhi.n	8007752 <_printf_i+0x32>
 800773c:	2f00      	cmp	r7, #0
 800773e:	f000 80d1 	beq.w	80078e4 <_printf_i+0x1c4>
 8007742:	2f58      	cmp	r7, #88	@ 0x58
 8007744:	f000 80b8 	beq.w	80078b8 <_printf_i+0x198>
 8007748:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800774c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007750:	e03a      	b.n	80077c8 <_printf_i+0xa8>
 8007752:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007756:	2b15      	cmp	r3, #21
 8007758:	d8f6      	bhi.n	8007748 <_printf_i+0x28>
 800775a:	a101      	add	r1, pc, #4	@ (adr r1, 8007760 <_printf_i+0x40>)
 800775c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007760:	080077b9 	.word	0x080077b9
 8007764:	080077cd 	.word	0x080077cd
 8007768:	08007749 	.word	0x08007749
 800776c:	08007749 	.word	0x08007749
 8007770:	08007749 	.word	0x08007749
 8007774:	08007749 	.word	0x08007749
 8007778:	080077cd 	.word	0x080077cd
 800777c:	08007749 	.word	0x08007749
 8007780:	08007749 	.word	0x08007749
 8007784:	08007749 	.word	0x08007749
 8007788:	08007749 	.word	0x08007749
 800778c:	080078cb 	.word	0x080078cb
 8007790:	080077f7 	.word	0x080077f7
 8007794:	08007885 	.word	0x08007885
 8007798:	08007749 	.word	0x08007749
 800779c:	08007749 	.word	0x08007749
 80077a0:	080078ed 	.word	0x080078ed
 80077a4:	08007749 	.word	0x08007749
 80077a8:	080077f7 	.word	0x080077f7
 80077ac:	08007749 	.word	0x08007749
 80077b0:	08007749 	.word	0x08007749
 80077b4:	0800788d 	.word	0x0800788d
 80077b8:	6833      	ldr	r3, [r6, #0]
 80077ba:	1d1a      	adds	r2, r3, #4
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	6032      	str	r2, [r6, #0]
 80077c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80077c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80077c8:	2301      	movs	r3, #1
 80077ca:	e09c      	b.n	8007906 <_printf_i+0x1e6>
 80077cc:	6833      	ldr	r3, [r6, #0]
 80077ce:	6820      	ldr	r0, [r4, #0]
 80077d0:	1d19      	adds	r1, r3, #4
 80077d2:	6031      	str	r1, [r6, #0]
 80077d4:	0606      	lsls	r6, r0, #24
 80077d6:	d501      	bpl.n	80077dc <_printf_i+0xbc>
 80077d8:	681d      	ldr	r5, [r3, #0]
 80077da:	e003      	b.n	80077e4 <_printf_i+0xc4>
 80077dc:	0645      	lsls	r5, r0, #25
 80077de:	d5fb      	bpl.n	80077d8 <_printf_i+0xb8>
 80077e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80077e4:	2d00      	cmp	r5, #0
 80077e6:	da03      	bge.n	80077f0 <_printf_i+0xd0>
 80077e8:	232d      	movs	r3, #45	@ 0x2d
 80077ea:	426d      	negs	r5, r5
 80077ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077f0:	4858      	ldr	r0, [pc, #352]	@ (8007954 <_printf_i+0x234>)
 80077f2:	230a      	movs	r3, #10
 80077f4:	e011      	b.n	800781a <_printf_i+0xfa>
 80077f6:	6821      	ldr	r1, [r4, #0]
 80077f8:	6833      	ldr	r3, [r6, #0]
 80077fa:	0608      	lsls	r0, r1, #24
 80077fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8007800:	d402      	bmi.n	8007808 <_printf_i+0xe8>
 8007802:	0649      	lsls	r1, r1, #25
 8007804:	bf48      	it	mi
 8007806:	b2ad      	uxthmi	r5, r5
 8007808:	2f6f      	cmp	r7, #111	@ 0x6f
 800780a:	4852      	ldr	r0, [pc, #328]	@ (8007954 <_printf_i+0x234>)
 800780c:	6033      	str	r3, [r6, #0]
 800780e:	bf14      	ite	ne
 8007810:	230a      	movne	r3, #10
 8007812:	2308      	moveq	r3, #8
 8007814:	2100      	movs	r1, #0
 8007816:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800781a:	6866      	ldr	r6, [r4, #4]
 800781c:	60a6      	str	r6, [r4, #8]
 800781e:	2e00      	cmp	r6, #0
 8007820:	db05      	blt.n	800782e <_printf_i+0x10e>
 8007822:	6821      	ldr	r1, [r4, #0]
 8007824:	432e      	orrs	r6, r5
 8007826:	f021 0104 	bic.w	r1, r1, #4
 800782a:	6021      	str	r1, [r4, #0]
 800782c:	d04b      	beq.n	80078c6 <_printf_i+0x1a6>
 800782e:	4616      	mov	r6, r2
 8007830:	fbb5 f1f3 	udiv	r1, r5, r3
 8007834:	fb03 5711 	mls	r7, r3, r1, r5
 8007838:	5dc7      	ldrb	r7, [r0, r7]
 800783a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800783e:	462f      	mov	r7, r5
 8007840:	42bb      	cmp	r3, r7
 8007842:	460d      	mov	r5, r1
 8007844:	d9f4      	bls.n	8007830 <_printf_i+0x110>
 8007846:	2b08      	cmp	r3, #8
 8007848:	d10b      	bne.n	8007862 <_printf_i+0x142>
 800784a:	6823      	ldr	r3, [r4, #0]
 800784c:	07df      	lsls	r7, r3, #31
 800784e:	d508      	bpl.n	8007862 <_printf_i+0x142>
 8007850:	6923      	ldr	r3, [r4, #16]
 8007852:	6861      	ldr	r1, [r4, #4]
 8007854:	4299      	cmp	r1, r3
 8007856:	bfde      	ittt	le
 8007858:	2330      	movle	r3, #48	@ 0x30
 800785a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800785e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007862:	1b92      	subs	r2, r2, r6
 8007864:	6122      	str	r2, [r4, #16]
 8007866:	f8cd a000 	str.w	sl, [sp]
 800786a:	464b      	mov	r3, r9
 800786c:	aa03      	add	r2, sp, #12
 800786e:	4621      	mov	r1, r4
 8007870:	4640      	mov	r0, r8
 8007872:	f7ff fee7 	bl	8007644 <_printf_common>
 8007876:	3001      	adds	r0, #1
 8007878:	d14a      	bne.n	8007910 <_printf_i+0x1f0>
 800787a:	f04f 30ff 	mov.w	r0, #4294967295
 800787e:	b004      	add	sp, #16
 8007880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007884:	6823      	ldr	r3, [r4, #0]
 8007886:	f043 0320 	orr.w	r3, r3, #32
 800788a:	6023      	str	r3, [r4, #0]
 800788c:	4832      	ldr	r0, [pc, #200]	@ (8007958 <_printf_i+0x238>)
 800788e:	2778      	movs	r7, #120	@ 0x78
 8007890:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007894:	6823      	ldr	r3, [r4, #0]
 8007896:	6831      	ldr	r1, [r6, #0]
 8007898:	061f      	lsls	r7, r3, #24
 800789a:	f851 5b04 	ldr.w	r5, [r1], #4
 800789e:	d402      	bmi.n	80078a6 <_printf_i+0x186>
 80078a0:	065f      	lsls	r7, r3, #25
 80078a2:	bf48      	it	mi
 80078a4:	b2ad      	uxthmi	r5, r5
 80078a6:	6031      	str	r1, [r6, #0]
 80078a8:	07d9      	lsls	r1, r3, #31
 80078aa:	bf44      	itt	mi
 80078ac:	f043 0320 	orrmi.w	r3, r3, #32
 80078b0:	6023      	strmi	r3, [r4, #0]
 80078b2:	b11d      	cbz	r5, 80078bc <_printf_i+0x19c>
 80078b4:	2310      	movs	r3, #16
 80078b6:	e7ad      	b.n	8007814 <_printf_i+0xf4>
 80078b8:	4826      	ldr	r0, [pc, #152]	@ (8007954 <_printf_i+0x234>)
 80078ba:	e7e9      	b.n	8007890 <_printf_i+0x170>
 80078bc:	6823      	ldr	r3, [r4, #0]
 80078be:	f023 0320 	bic.w	r3, r3, #32
 80078c2:	6023      	str	r3, [r4, #0]
 80078c4:	e7f6      	b.n	80078b4 <_printf_i+0x194>
 80078c6:	4616      	mov	r6, r2
 80078c8:	e7bd      	b.n	8007846 <_printf_i+0x126>
 80078ca:	6833      	ldr	r3, [r6, #0]
 80078cc:	6825      	ldr	r5, [r4, #0]
 80078ce:	6961      	ldr	r1, [r4, #20]
 80078d0:	1d18      	adds	r0, r3, #4
 80078d2:	6030      	str	r0, [r6, #0]
 80078d4:	062e      	lsls	r6, r5, #24
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	d501      	bpl.n	80078de <_printf_i+0x1be>
 80078da:	6019      	str	r1, [r3, #0]
 80078dc:	e002      	b.n	80078e4 <_printf_i+0x1c4>
 80078de:	0668      	lsls	r0, r5, #25
 80078e0:	d5fb      	bpl.n	80078da <_printf_i+0x1ba>
 80078e2:	8019      	strh	r1, [r3, #0]
 80078e4:	2300      	movs	r3, #0
 80078e6:	6123      	str	r3, [r4, #16]
 80078e8:	4616      	mov	r6, r2
 80078ea:	e7bc      	b.n	8007866 <_printf_i+0x146>
 80078ec:	6833      	ldr	r3, [r6, #0]
 80078ee:	1d1a      	adds	r2, r3, #4
 80078f0:	6032      	str	r2, [r6, #0]
 80078f2:	681e      	ldr	r6, [r3, #0]
 80078f4:	6862      	ldr	r2, [r4, #4]
 80078f6:	2100      	movs	r1, #0
 80078f8:	4630      	mov	r0, r6
 80078fa:	f7f8 fcf1 	bl	80002e0 <memchr>
 80078fe:	b108      	cbz	r0, 8007904 <_printf_i+0x1e4>
 8007900:	1b80      	subs	r0, r0, r6
 8007902:	6060      	str	r0, [r4, #4]
 8007904:	6863      	ldr	r3, [r4, #4]
 8007906:	6123      	str	r3, [r4, #16]
 8007908:	2300      	movs	r3, #0
 800790a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800790e:	e7aa      	b.n	8007866 <_printf_i+0x146>
 8007910:	6923      	ldr	r3, [r4, #16]
 8007912:	4632      	mov	r2, r6
 8007914:	4649      	mov	r1, r9
 8007916:	4640      	mov	r0, r8
 8007918:	47d0      	blx	sl
 800791a:	3001      	adds	r0, #1
 800791c:	d0ad      	beq.n	800787a <_printf_i+0x15a>
 800791e:	6823      	ldr	r3, [r4, #0]
 8007920:	079b      	lsls	r3, r3, #30
 8007922:	d413      	bmi.n	800794c <_printf_i+0x22c>
 8007924:	68e0      	ldr	r0, [r4, #12]
 8007926:	9b03      	ldr	r3, [sp, #12]
 8007928:	4298      	cmp	r0, r3
 800792a:	bfb8      	it	lt
 800792c:	4618      	movlt	r0, r3
 800792e:	e7a6      	b.n	800787e <_printf_i+0x15e>
 8007930:	2301      	movs	r3, #1
 8007932:	4632      	mov	r2, r6
 8007934:	4649      	mov	r1, r9
 8007936:	4640      	mov	r0, r8
 8007938:	47d0      	blx	sl
 800793a:	3001      	adds	r0, #1
 800793c:	d09d      	beq.n	800787a <_printf_i+0x15a>
 800793e:	3501      	adds	r5, #1
 8007940:	68e3      	ldr	r3, [r4, #12]
 8007942:	9903      	ldr	r1, [sp, #12]
 8007944:	1a5b      	subs	r3, r3, r1
 8007946:	42ab      	cmp	r3, r5
 8007948:	dcf2      	bgt.n	8007930 <_printf_i+0x210>
 800794a:	e7eb      	b.n	8007924 <_printf_i+0x204>
 800794c:	2500      	movs	r5, #0
 800794e:	f104 0619 	add.w	r6, r4, #25
 8007952:	e7f5      	b.n	8007940 <_printf_i+0x220>
 8007954:	08007e41 	.word	0x08007e41
 8007958:	08007e52 	.word	0x08007e52

0800795c <__sflush_r>:
 800795c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007964:	0716      	lsls	r6, r2, #28
 8007966:	4605      	mov	r5, r0
 8007968:	460c      	mov	r4, r1
 800796a:	d454      	bmi.n	8007a16 <__sflush_r+0xba>
 800796c:	684b      	ldr	r3, [r1, #4]
 800796e:	2b00      	cmp	r3, #0
 8007970:	dc02      	bgt.n	8007978 <__sflush_r+0x1c>
 8007972:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007974:	2b00      	cmp	r3, #0
 8007976:	dd48      	ble.n	8007a0a <__sflush_r+0xae>
 8007978:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800797a:	2e00      	cmp	r6, #0
 800797c:	d045      	beq.n	8007a0a <__sflush_r+0xae>
 800797e:	2300      	movs	r3, #0
 8007980:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007984:	682f      	ldr	r7, [r5, #0]
 8007986:	6a21      	ldr	r1, [r4, #32]
 8007988:	602b      	str	r3, [r5, #0]
 800798a:	d030      	beq.n	80079ee <__sflush_r+0x92>
 800798c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800798e:	89a3      	ldrh	r3, [r4, #12]
 8007990:	0759      	lsls	r1, r3, #29
 8007992:	d505      	bpl.n	80079a0 <__sflush_r+0x44>
 8007994:	6863      	ldr	r3, [r4, #4]
 8007996:	1ad2      	subs	r2, r2, r3
 8007998:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800799a:	b10b      	cbz	r3, 80079a0 <__sflush_r+0x44>
 800799c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800799e:	1ad2      	subs	r2, r2, r3
 80079a0:	2300      	movs	r3, #0
 80079a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80079a4:	6a21      	ldr	r1, [r4, #32]
 80079a6:	4628      	mov	r0, r5
 80079a8:	47b0      	blx	r6
 80079aa:	1c43      	adds	r3, r0, #1
 80079ac:	89a3      	ldrh	r3, [r4, #12]
 80079ae:	d106      	bne.n	80079be <__sflush_r+0x62>
 80079b0:	6829      	ldr	r1, [r5, #0]
 80079b2:	291d      	cmp	r1, #29
 80079b4:	d82b      	bhi.n	8007a0e <__sflush_r+0xb2>
 80079b6:	4a2a      	ldr	r2, [pc, #168]	@ (8007a60 <__sflush_r+0x104>)
 80079b8:	40ca      	lsrs	r2, r1
 80079ba:	07d6      	lsls	r6, r2, #31
 80079bc:	d527      	bpl.n	8007a0e <__sflush_r+0xb2>
 80079be:	2200      	movs	r2, #0
 80079c0:	6062      	str	r2, [r4, #4]
 80079c2:	04d9      	lsls	r1, r3, #19
 80079c4:	6922      	ldr	r2, [r4, #16]
 80079c6:	6022      	str	r2, [r4, #0]
 80079c8:	d504      	bpl.n	80079d4 <__sflush_r+0x78>
 80079ca:	1c42      	adds	r2, r0, #1
 80079cc:	d101      	bne.n	80079d2 <__sflush_r+0x76>
 80079ce:	682b      	ldr	r3, [r5, #0]
 80079d0:	b903      	cbnz	r3, 80079d4 <__sflush_r+0x78>
 80079d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80079d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079d6:	602f      	str	r7, [r5, #0]
 80079d8:	b1b9      	cbz	r1, 8007a0a <__sflush_r+0xae>
 80079da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80079de:	4299      	cmp	r1, r3
 80079e0:	d002      	beq.n	80079e8 <__sflush_r+0x8c>
 80079e2:	4628      	mov	r0, r5
 80079e4:	f7ff fbf4 	bl	80071d0 <_free_r>
 80079e8:	2300      	movs	r3, #0
 80079ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80079ec:	e00d      	b.n	8007a0a <__sflush_r+0xae>
 80079ee:	2301      	movs	r3, #1
 80079f0:	4628      	mov	r0, r5
 80079f2:	47b0      	blx	r6
 80079f4:	4602      	mov	r2, r0
 80079f6:	1c50      	adds	r0, r2, #1
 80079f8:	d1c9      	bne.n	800798e <__sflush_r+0x32>
 80079fa:	682b      	ldr	r3, [r5, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d0c6      	beq.n	800798e <__sflush_r+0x32>
 8007a00:	2b1d      	cmp	r3, #29
 8007a02:	d001      	beq.n	8007a08 <__sflush_r+0xac>
 8007a04:	2b16      	cmp	r3, #22
 8007a06:	d11e      	bne.n	8007a46 <__sflush_r+0xea>
 8007a08:	602f      	str	r7, [r5, #0]
 8007a0a:	2000      	movs	r0, #0
 8007a0c:	e022      	b.n	8007a54 <__sflush_r+0xf8>
 8007a0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a12:	b21b      	sxth	r3, r3
 8007a14:	e01b      	b.n	8007a4e <__sflush_r+0xf2>
 8007a16:	690f      	ldr	r7, [r1, #16]
 8007a18:	2f00      	cmp	r7, #0
 8007a1a:	d0f6      	beq.n	8007a0a <__sflush_r+0xae>
 8007a1c:	0793      	lsls	r3, r2, #30
 8007a1e:	680e      	ldr	r6, [r1, #0]
 8007a20:	bf08      	it	eq
 8007a22:	694b      	ldreq	r3, [r1, #20]
 8007a24:	600f      	str	r7, [r1, #0]
 8007a26:	bf18      	it	ne
 8007a28:	2300      	movne	r3, #0
 8007a2a:	eba6 0807 	sub.w	r8, r6, r7
 8007a2e:	608b      	str	r3, [r1, #8]
 8007a30:	f1b8 0f00 	cmp.w	r8, #0
 8007a34:	dde9      	ble.n	8007a0a <__sflush_r+0xae>
 8007a36:	6a21      	ldr	r1, [r4, #32]
 8007a38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007a3a:	4643      	mov	r3, r8
 8007a3c:	463a      	mov	r2, r7
 8007a3e:	4628      	mov	r0, r5
 8007a40:	47b0      	blx	r6
 8007a42:	2800      	cmp	r0, #0
 8007a44:	dc08      	bgt.n	8007a58 <__sflush_r+0xfc>
 8007a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a4e:	81a3      	strh	r3, [r4, #12]
 8007a50:	f04f 30ff 	mov.w	r0, #4294967295
 8007a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a58:	4407      	add	r7, r0
 8007a5a:	eba8 0800 	sub.w	r8, r8, r0
 8007a5e:	e7e7      	b.n	8007a30 <__sflush_r+0xd4>
 8007a60:	20400001 	.word	0x20400001

08007a64 <_fflush_r>:
 8007a64:	b538      	push	{r3, r4, r5, lr}
 8007a66:	690b      	ldr	r3, [r1, #16]
 8007a68:	4605      	mov	r5, r0
 8007a6a:	460c      	mov	r4, r1
 8007a6c:	b913      	cbnz	r3, 8007a74 <_fflush_r+0x10>
 8007a6e:	2500      	movs	r5, #0
 8007a70:	4628      	mov	r0, r5
 8007a72:	bd38      	pop	{r3, r4, r5, pc}
 8007a74:	b118      	cbz	r0, 8007a7e <_fflush_r+0x1a>
 8007a76:	6a03      	ldr	r3, [r0, #32]
 8007a78:	b90b      	cbnz	r3, 8007a7e <_fflush_r+0x1a>
 8007a7a:	f7ff f9af 	bl	8006ddc <__sinit>
 8007a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d0f3      	beq.n	8007a6e <_fflush_r+0xa>
 8007a86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007a88:	07d0      	lsls	r0, r2, #31
 8007a8a:	d404      	bmi.n	8007a96 <_fflush_r+0x32>
 8007a8c:	0599      	lsls	r1, r3, #22
 8007a8e:	d402      	bmi.n	8007a96 <_fflush_r+0x32>
 8007a90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a92:	f7ff fb9a 	bl	80071ca <__retarget_lock_acquire_recursive>
 8007a96:	4628      	mov	r0, r5
 8007a98:	4621      	mov	r1, r4
 8007a9a:	f7ff ff5f 	bl	800795c <__sflush_r>
 8007a9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007aa0:	07da      	lsls	r2, r3, #31
 8007aa2:	4605      	mov	r5, r0
 8007aa4:	d4e4      	bmi.n	8007a70 <_fflush_r+0xc>
 8007aa6:	89a3      	ldrh	r3, [r4, #12]
 8007aa8:	059b      	lsls	r3, r3, #22
 8007aaa:	d4e1      	bmi.n	8007a70 <_fflush_r+0xc>
 8007aac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007aae:	f7ff fb8d 	bl	80071cc <__retarget_lock_release_recursive>
 8007ab2:	e7dd      	b.n	8007a70 <_fflush_r+0xc>

08007ab4 <__swhatbuf_r>:
 8007ab4:	b570      	push	{r4, r5, r6, lr}
 8007ab6:	460c      	mov	r4, r1
 8007ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007abc:	2900      	cmp	r1, #0
 8007abe:	b096      	sub	sp, #88	@ 0x58
 8007ac0:	4615      	mov	r5, r2
 8007ac2:	461e      	mov	r6, r3
 8007ac4:	da0d      	bge.n	8007ae2 <__swhatbuf_r+0x2e>
 8007ac6:	89a3      	ldrh	r3, [r4, #12]
 8007ac8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007acc:	f04f 0100 	mov.w	r1, #0
 8007ad0:	bf14      	ite	ne
 8007ad2:	2340      	movne	r3, #64	@ 0x40
 8007ad4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007ad8:	2000      	movs	r0, #0
 8007ada:	6031      	str	r1, [r6, #0]
 8007adc:	602b      	str	r3, [r5, #0]
 8007ade:	b016      	add	sp, #88	@ 0x58
 8007ae0:	bd70      	pop	{r4, r5, r6, pc}
 8007ae2:	466a      	mov	r2, sp
 8007ae4:	f000 f848 	bl	8007b78 <_fstat_r>
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	dbec      	blt.n	8007ac6 <__swhatbuf_r+0x12>
 8007aec:	9901      	ldr	r1, [sp, #4]
 8007aee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007af2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007af6:	4259      	negs	r1, r3
 8007af8:	4159      	adcs	r1, r3
 8007afa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007afe:	e7eb      	b.n	8007ad8 <__swhatbuf_r+0x24>

08007b00 <__smakebuf_r>:
 8007b00:	898b      	ldrh	r3, [r1, #12]
 8007b02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b04:	079d      	lsls	r5, r3, #30
 8007b06:	4606      	mov	r6, r0
 8007b08:	460c      	mov	r4, r1
 8007b0a:	d507      	bpl.n	8007b1c <__smakebuf_r+0x1c>
 8007b0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007b10:	6023      	str	r3, [r4, #0]
 8007b12:	6123      	str	r3, [r4, #16]
 8007b14:	2301      	movs	r3, #1
 8007b16:	6163      	str	r3, [r4, #20]
 8007b18:	b003      	add	sp, #12
 8007b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b1c:	ab01      	add	r3, sp, #4
 8007b1e:	466a      	mov	r2, sp
 8007b20:	f7ff ffc8 	bl	8007ab4 <__swhatbuf_r>
 8007b24:	9f00      	ldr	r7, [sp, #0]
 8007b26:	4605      	mov	r5, r0
 8007b28:	4639      	mov	r1, r7
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	f7ff fbbc 	bl	80072a8 <_malloc_r>
 8007b30:	b948      	cbnz	r0, 8007b46 <__smakebuf_r+0x46>
 8007b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b36:	059a      	lsls	r2, r3, #22
 8007b38:	d4ee      	bmi.n	8007b18 <__smakebuf_r+0x18>
 8007b3a:	f023 0303 	bic.w	r3, r3, #3
 8007b3e:	f043 0302 	orr.w	r3, r3, #2
 8007b42:	81a3      	strh	r3, [r4, #12]
 8007b44:	e7e2      	b.n	8007b0c <__smakebuf_r+0xc>
 8007b46:	89a3      	ldrh	r3, [r4, #12]
 8007b48:	6020      	str	r0, [r4, #0]
 8007b4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b4e:	81a3      	strh	r3, [r4, #12]
 8007b50:	9b01      	ldr	r3, [sp, #4]
 8007b52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007b56:	b15b      	cbz	r3, 8007b70 <__smakebuf_r+0x70>
 8007b58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b5c:	4630      	mov	r0, r6
 8007b5e:	f000 f81d 	bl	8007b9c <_isatty_r>
 8007b62:	b128      	cbz	r0, 8007b70 <__smakebuf_r+0x70>
 8007b64:	89a3      	ldrh	r3, [r4, #12]
 8007b66:	f023 0303 	bic.w	r3, r3, #3
 8007b6a:	f043 0301 	orr.w	r3, r3, #1
 8007b6e:	81a3      	strh	r3, [r4, #12]
 8007b70:	89a3      	ldrh	r3, [r4, #12]
 8007b72:	431d      	orrs	r5, r3
 8007b74:	81a5      	strh	r5, [r4, #12]
 8007b76:	e7cf      	b.n	8007b18 <__smakebuf_r+0x18>

08007b78 <_fstat_r>:
 8007b78:	b538      	push	{r3, r4, r5, lr}
 8007b7a:	4d07      	ldr	r5, [pc, #28]	@ (8007b98 <_fstat_r+0x20>)
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	4604      	mov	r4, r0
 8007b80:	4608      	mov	r0, r1
 8007b82:	4611      	mov	r1, r2
 8007b84:	602b      	str	r3, [r5, #0]
 8007b86:	f7f9 f867 	bl	8000c58 <_fstat>
 8007b8a:	1c43      	adds	r3, r0, #1
 8007b8c:	d102      	bne.n	8007b94 <_fstat_r+0x1c>
 8007b8e:	682b      	ldr	r3, [r5, #0]
 8007b90:	b103      	cbz	r3, 8007b94 <_fstat_r+0x1c>
 8007b92:	6023      	str	r3, [r4, #0]
 8007b94:	bd38      	pop	{r3, r4, r5, pc}
 8007b96:	bf00      	nop
 8007b98:	240002b0 	.word	0x240002b0

08007b9c <_isatty_r>:
 8007b9c:	b538      	push	{r3, r4, r5, lr}
 8007b9e:	4d06      	ldr	r5, [pc, #24]	@ (8007bb8 <_isatty_r+0x1c>)
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	4604      	mov	r4, r0
 8007ba4:	4608      	mov	r0, r1
 8007ba6:	602b      	str	r3, [r5, #0]
 8007ba8:	f7f9 f866 	bl	8000c78 <_isatty>
 8007bac:	1c43      	adds	r3, r0, #1
 8007bae:	d102      	bne.n	8007bb6 <_isatty_r+0x1a>
 8007bb0:	682b      	ldr	r3, [r5, #0]
 8007bb2:	b103      	cbz	r3, 8007bb6 <_isatty_r+0x1a>
 8007bb4:	6023      	str	r3, [r4, #0]
 8007bb6:	bd38      	pop	{r3, r4, r5, pc}
 8007bb8:	240002b0 	.word	0x240002b0

08007bbc <_sbrk_r>:
 8007bbc:	b538      	push	{r3, r4, r5, lr}
 8007bbe:	4d06      	ldr	r5, [pc, #24]	@ (8007bd8 <_sbrk_r+0x1c>)
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	4608      	mov	r0, r1
 8007bc6:	602b      	str	r3, [r5, #0]
 8007bc8:	f7f9 f86e 	bl	8000ca8 <_sbrk>
 8007bcc:	1c43      	adds	r3, r0, #1
 8007bce:	d102      	bne.n	8007bd6 <_sbrk_r+0x1a>
 8007bd0:	682b      	ldr	r3, [r5, #0]
 8007bd2:	b103      	cbz	r3, 8007bd6 <_sbrk_r+0x1a>
 8007bd4:	6023      	str	r3, [r4, #0]
 8007bd6:	bd38      	pop	{r3, r4, r5, pc}
 8007bd8:	240002b0 	.word	0x240002b0

08007bdc <_init>:
 8007bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bde:	bf00      	nop
 8007be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007be2:	bc08      	pop	{r3}
 8007be4:	469e      	mov	lr, r3
 8007be6:	4770      	bx	lr

08007be8 <_fini>:
 8007be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bea:	bf00      	nop
 8007bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bee:	bc08      	pop	{r3}
 8007bf0:	469e      	mov	lr, r3
 8007bf2:	4770      	bx	lr


H7_EXERCICIO_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007908  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  08007ba8  08007ba8  00008ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007dfc  08007dfc  00008dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007e04  08007e04  00008e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08007e08  08007e08  00008e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  08007e0c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000254  2400006c  08007e78  0000906c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240002c0  08007e78  000092c0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015744  00000000  00000000  0000909a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002932  00000000  00000000  0001e7de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010d0  00000000  00000000  00021110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d12  00000000  00000000  000221e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038d11  00000000  00000000  00022ef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000166ef  00000000  00000000  0005bc03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00167648  00000000  00000000  000722f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d993a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004e28  00000000  00000000  001d9980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000069  00000000  00000000  001de7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400006c 	.word	0x2400006c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007b90 	.word	0x08007b90

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000070 	.word	0x24000070
 80002dc:	08007b90 	.word	0x08007b90

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	@ 0x28
 80006b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c2:	4b42      	ldr	r3, [pc, #264]	@ (80007cc <MX_GPIO_Init+0x120>)
 80006c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006c8:	4a40      	ldr	r2, [pc, #256]	@ (80007cc <MX_GPIO_Init+0x120>)
 80006ca:	f043 0304 	orr.w	r3, r3, #4
 80006ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006d2:	4b3e      	ldr	r3, [pc, #248]	@ (80007cc <MX_GPIO_Init+0x120>)
 80006d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d8:	f003 0304 	and.w	r3, r3, #4
 80006dc:	613b      	str	r3, [r7, #16]
 80006de:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e0:	4b3a      	ldr	r3, [pc, #232]	@ (80007cc <MX_GPIO_Init+0x120>)
 80006e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e6:	4a39      	ldr	r2, [pc, #228]	@ (80007cc <MX_GPIO_Init+0x120>)
 80006e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006f0:	4b36      	ldr	r3, [pc, #216]	@ (80007cc <MX_GPIO_Init+0x120>)
 80006f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fe:	4b33      	ldr	r3, [pc, #204]	@ (80007cc <MX_GPIO_Init+0x120>)
 8000700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000704:	4a31      	ldr	r2, [pc, #196]	@ (80007cc <MX_GPIO_Init+0x120>)
 8000706:	f043 0302 	orr.w	r3, r3, #2
 800070a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800070e:	4b2f      	ldr	r3, [pc, #188]	@ (80007cc <MX_GPIO_Init+0x120>)
 8000710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000714:	f003 0302 	and.w	r3, r3, #2
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800071c:	4b2b      	ldr	r3, [pc, #172]	@ (80007cc <MX_GPIO_Init+0x120>)
 800071e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000722:	4a2a      	ldr	r2, [pc, #168]	@ (80007cc <MX_GPIO_Init+0x120>)
 8000724:	f043 0310 	orr.w	r3, r3, #16
 8000728:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800072c:	4b27      	ldr	r3, [pc, #156]	@ (80007cc <MX_GPIO_Init+0x120>)
 800072e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000732:	f003 0310 	and.w	r3, r3, #16
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073a:	4b24      	ldr	r3, [pc, #144]	@ (80007cc <MX_GPIO_Init+0x120>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000740:	4a22      	ldr	r2, [pc, #136]	@ (80007cc <MX_GPIO_Init+0x120>)
 8000742:	f043 0308 	orr.w	r3, r3, #8
 8000746:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800074a:	4b20      	ldr	r3, [pc, #128]	@ (80007cc <MX_GPIO_Init+0x120>)
 800074c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000750:	f003 0308 	and.w	r3, r3, #8
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	f244 0101 	movw	r1, #16385	@ 0x4001
 800075e:	481c      	ldr	r0, [pc, #112]	@ (80007d0 <MX_GPIO_Init+0x124>)
 8000760:	f001 f8da 	bl	8001918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2102      	movs	r1, #2
 8000768:	481a      	ldr	r0, [pc, #104]	@ (80007d4 <MX_GPIO_Init+0x128>)
 800076a:	f001 f8d5 	bl	8001918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800076e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000774:	2300      	movs	r3, #0
 8000776:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800077c:	f107 0314 	add.w	r3, r7, #20
 8000780:	4619      	mov	r1, r3
 8000782:	4815      	ldr	r0, [pc, #84]	@ (80007d8 <MX_GPIO_Init+0x12c>)
 8000784:	f000 ff00 	bl	8001588 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000788:	f244 0301 	movw	r3, #16385	@ 0x4001
 800078c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078e:	2301      	movs	r3, #1
 8000790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000796:	2300      	movs	r3, #0
 8000798:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	4619      	mov	r1, r3
 80007a0:	480b      	ldr	r0, [pc, #44]	@ (80007d0 <MX_GPIO_Init+0x124>)
 80007a2:	f000 fef1 	bl	8001588 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007a6:	2302      	movs	r3, #2
 80007a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	4805      	ldr	r0, [pc, #20]	@ (80007d4 <MX_GPIO_Init+0x128>)
 80007be:	f000 fee3 	bl	8001588 <HAL_GPIO_Init>

}
 80007c2:	bf00      	nop
 80007c4:	3728      	adds	r7, #40	@ 0x28
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	58024400 	.word	0x58024400
 80007d0:	58020400 	.word	0x58020400
 80007d4:	58021000 	.word	0x58021000
 80007d8:	58020800 	.word	0x58020800

080007dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e0:	f000 fd2c 	bl	800123c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e4:	f000 f85e 	bl	80008a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e8:	f7ff ff60 	bl	80006ac <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007ec:	f000 fc2e 	bl	800104c <MX_USART3_UART_Init>
  MX_TIM1_Init(); // Inicialize o Timer configurado (ex: MX_TIM1_Init();)
 80007f0:	f000 fb22 	bl	8000e38 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // Inicia o PWM
  HAL_TIM_PWM_Start(&PWM_TIMER_HANDLE, PWM_TIMER_CHANNEL);
 80007f4:	2100      	movs	r1, #0
 80007f6:	4822      	ldr	r0, [pc, #136]	@ (8000880 <main+0xa4>)
 80007f8:	f003 ffac 	bl	8004754 <HAL_TIM_PWM_Start>
  Set_PWM_Duty(0); // Inicia com o PWM em 0%
 80007fc:	2000      	movs	r0, #0
 80007fe:	f000 f8e3 	bl	80009c8 <Set_PWM_Duty>
  printf(">> PWM iniciado em 0%%\r\n");
 8000802:	4820      	ldr	r0, [pc, #128]	@ (8000884 <main+0xa8>)
 8000804:	f006 fafa 	bl	8006dfc <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    Display_Menu();
 8000808:	f000 f8b6 	bl	8000978 <Display_Menu>

    // Aguarda entrada do usuário
    if (HAL_UART_Receive(&huart3, &rx_data, 1, HAL_MAX_DELAY) == HAL_OK)
 800080c:	f04f 33ff 	mov.w	r3, #4294967295
 8000810:	2201      	movs	r2, #1
 8000812:	491d      	ldr	r1, [pc, #116]	@ (8000888 <main+0xac>)
 8000814:	481d      	ldr	r0, [pc, #116]	@ (800088c <main+0xb0>)
 8000816:	f005 f8db 	bl	80059d0 <HAL_UART_Receive>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d1f3      	bne.n	8000808 <main+0x2c>
    {
      switch (rx_data)
 8000820:	4b19      	ldr	r3, [pc, #100]	@ (8000888 <main+0xac>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	3b31      	subs	r3, #49	@ 0x31
 8000826:	2b03      	cmp	r3, #3
 8000828:	d824      	bhi.n	8000874 <main+0x98>
 800082a:	a201      	add	r2, pc, #4	@ (adr r2, 8000830 <main+0x54>)
 800082c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000830:	08000841 	.word	0x08000841
 8000834:	0800084f 	.word	0x0800084f
 8000838:	0800085d 	.word	0x0800085d
 800083c:	08000869 	.word	0x08000869
      {
        case '1':
          printf(">> Duty fixo 20%% selecionado.\r\n");
 8000840:	4813      	ldr	r0, [pc, #76]	@ (8000890 <main+0xb4>)
 8000842:	f006 fadb 	bl	8006dfc <iprintf>
          Set_PWM_Duty(20);
 8000846:	2014      	movs	r0, #20
 8000848:	f000 f8be 	bl	80009c8 <Set_PWM_Duty>
          break;
 800084c:	e016      	b.n	800087c <main+0xa0>

        case '2':
          printf(">> Duty fixo 80%% selecionado.\r\n");
 800084e:	4811      	ldr	r0, [pc, #68]	@ (8000894 <main+0xb8>)
 8000850:	f006 fad4 	bl	8006dfc <iprintf>
          Set_PWM_Duty(80);
 8000854:	2050      	movs	r0, #80	@ 0x50
 8000856:	f000 f8b7 	bl	80009c8 <Set_PWM_Duty>
          break;
 800085a:	e00f      	b.n	800087c <main+0xa0>

        case '3':
          printf(">> Ramp 0-100%% em 5s selecionado.\r\n");
 800085c:	480e      	ldr	r0, [pc, #56]	@ (8000898 <main+0xbc>)
 800085e:	f006 facd 	bl	8006dfc <iprintf>
          ramp_pwm();
 8000862:	f000 f8e7 	bl	8000a34 <ramp_pwm>
          break;
 8000866:	e009      	b.n	800087c <main+0xa0>

        case '4':
          printf(">> Incremento de 10%% por clique no botao. Pressione o botao de usuario.\r\n");
 8000868:	480c      	ldr	r0, [pc, #48]	@ (800089c <main+0xc0>)
 800086a:	f006 fac7 	bl	8006dfc <iprintf>
          handle_button_increment();
 800086e:	f000 f901 	bl	8000a74 <handle_button_increment>
          break;
 8000872:	e003      	b.n	800087c <main+0xa0>

        default:
          printf(">> Opcao invalida. Tente novamente.\r\n");
 8000874:	480a      	ldr	r0, [pc, #40]	@ (80008a0 <main+0xc4>)
 8000876:	f006 fb29 	bl	8006ecc <puts>
          break;
 800087a:	bf00      	nop
    Display_Menu();
 800087c:	e7c4      	b.n	8000808 <main+0x2c>
 800087e:	bf00      	nop
 8000880:	24000090 	.word	0x24000090
 8000884:	08007ba8 	.word	0x08007ba8
 8000888:	24000088 	.word	0x24000088
 800088c:	240000dc 	.word	0x240000dc
 8000890:	08007bc4 	.word	0x08007bc4
 8000894:	08007be8 	.word	0x08007be8
 8000898:	08007c0c 	.word	0x08007c0c
 800089c:	08007c34 	.word	0x08007c34
 80008a0:	08007c80 	.word	0x08007c80

080008a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b09c      	sub	sp, #112	@ 0x70
 80008a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ae:	224c      	movs	r2, #76	@ 0x4c
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f006 fbea 	bl	800708c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	2220      	movs	r2, #32
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f006 fbe4 	bl	800708c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008c4:	2002      	movs	r0, #2
 80008c6:	f001 f841 	bl	800194c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008ca:	2300      	movs	r3, #0
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	4b28      	ldr	r3, [pc, #160]	@ (8000970 <SystemClock_Config+0xcc>)
 80008d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008d2:	4a27      	ldr	r2, [pc, #156]	@ (8000970 <SystemClock_Config+0xcc>)
 80008d4:	f023 0301 	bic.w	r3, r3, #1
 80008d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008da:	4b25      	ldr	r3, [pc, #148]	@ (8000970 <SystemClock_Config+0xcc>)
 80008dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	603b      	str	r3, [r7, #0]
 80008e4:	4b23      	ldr	r3, [pc, #140]	@ (8000974 <SystemClock_Config+0xd0>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008ec:	4a21      	ldr	r2, [pc, #132]	@ (8000974 <SystemClock_Config+0xd0>)
 80008ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008f2:	6193      	str	r3, [r2, #24]
 80008f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000974 <SystemClock_Config+0xd0>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000900:	bf00      	nop
 8000902:	4b1c      	ldr	r3, [pc, #112]	@ (8000974 <SystemClock_Config+0xd0>)
 8000904:	699b      	ldr	r3, [r3, #24]
 8000906:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800090a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800090e:	d1f8      	bne.n	8000902 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000910:	2302      	movs	r3, #2
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000914:	2301      	movs	r3, #1
 8000916:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000918:	2340      	movs	r3, #64	@ 0x40
 800091a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800091c:	2300      	movs	r3, #0
 800091e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000920:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000924:	4618      	mov	r0, r3
 8000926:	f001 f84b 	bl	80019c0 <HAL_RCC_OscConfig>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000930:	f000 f8f4 	bl	8000b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000934:	233f      	movs	r3, #63	@ 0x3f
 8000936:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000940:	2300      	movs	r3, #0
 8000942:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000950:	2300      	movs	r3, #0
 8000952:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	2101      	movs	r1, #1
 8000958:	4618      	mov	r0, r3
 800095a:	f001 fc8b 	bl	8002274 <HAL_RCC_ClockConfig>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000964:	f000 f8da 	bl	8000b1c <Error_Handler>
  }
}
 8000968:	bf00      	nop
 800096a:	3770      	adds	r7, #112	@ 0x70
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	58000400 	.word	0x58000400
 8000974:	58024800 	.word	0x58024800

08000978 <Display_Menu>:
/* USER CODE BEGIN 4 */
/**
  * @brief Exibe o menu de opções via UART.
  * @retval None
  */
void Display_Menu(void) {
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
    printf("\r\n"); // Nova linha para melhor formatação
 800097c:	480b      	ldr	r0, [pc, #44]	@ (80009ac <Display_Menu+0x34>)
 800097e:	f006 faa5 	bl	8006ecc <puts>
    printf("===== CONTROLE DE PWM =====\r\n");
 8000982:	480b      	ldr	r0, [pc, #44]	@ (80009b0 <Display_Menu+0x38>)
 8000984:	f006 faa2 	bl	8006ecc <puts>
    printf("[1] Duty fixo 20%%\r\n");
 8000988:	480a      	ldr	r0, [pc, #40]	@ (80009b4 <Display_Menu+0x3c>)
 800098a:	f006 fa37 	bl	8006dfc <iprintf>
    printf("[2] Duty fixo 80%%\r\n");
 800098e:	480a      	ldr	r0, [pc, #40]	@ (80009b8 <Display_Menu+0x40>)
 8000990:	f006 fa34 	bl	8006dfc <iprintf>
    printf("[3] Ramp 0-100%% em 5 s\r\n");
 8000994:	4809      	ldr	r0, [pc, #36]	@ (80009bc <Display_Menu+0x44>)
 8000996:	f006 fa31 	bl	8006dfc <iprintf>
    printf("[4] +10%% por clique no botao\r\n");
 800099a:	4809      	ldr	r0, [pc, #36]	@ (80009c0 <Display_Menu+0x48>)
 800099c:	f006 fa2e 	bl	8006dfc <iprintf>
    printf("Selecione a opcao: ");
 80009a0:	4808      	ldr	r0, [pc, #32]	@ (80009c4 <Display_Menu+0x4c>)
 80009a2:	f006 fa2b 	bl	8006dfc <iprintf>
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	08007ca8 	.word	0x08007ca8
 80009b0:	08007cac 	.word	0x08007cac
 80009b4:	08007ccc 	.word	0x08007ccc
 80009b8:	08007ce4 	.word	0x08007ce4
 80009bc:	08007cfc 	.word	0x08007cfc
 80009c0:	08007d18 	.word	0x08007d18
 80009c4:	08007d38 	.word	0x08007d38

080009c8 <Set_PWM_Duty>:
/**
  * @brief Ajusta o duty cycle do PWM.
  * @param duty_percent: O duty cycle em porcentagem (0-100).
  * @retval None
  */
void Set_PWM_Duty(uint8_t duty_percent) {
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	71fb      	strb	r3, [r7, #7]
    if (duty_percent > 100) {
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	2b64      	cmp	r3, #100	@ 0x64
 80009d6:	d901      	bls.n	80009dc <Set_PWM_Duty+0x14>
        duty_percent = 100;
 80009d8:	2364      	movs	r3, #100	@ 0x64
 80009da:	71fb      	strb	r3, [r7, #7]
    }
    // Calcula o valor do registrador de comparação (CCR)
    // O valor do CCR é duty_percent * PWM_PERIOD / 100
    uint32_t ccr_value = (uint32_t)((float)PWM_PERIOD * duty_percent / 100.0f);
 80009dc:	4b12      	ldr	r3, [pc, #72]	@ (8000a28 <Set_PWM_Duty+0x60>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009e2:	3301      	adds	r3, #1
 80009e4:	ee07 3a90 	vmov	s15, r3
 80009e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	ee07 3a90 	vmov	s15, r3
 80009f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009fa:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8000a2c <Set_PWM_Duty+0x64>
 80009fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a06:	ee17 3a90 	vmov	r3, s15
 8000a0a:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_COMPARE(&PWM_TIMER_HANDLE, PWM_TIMER_CHANNEL, ccr_value);
 8000a0c:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <Set_PWM_Duty+0x60>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	68fa      	ldr	r2, [r7, #12]
 8000a12:	635a      	str	r2, [r3, #52]	@ 0x34
    current_duty_cycle = duty_percent; // Atualiza o duty cycle atual
 8000a14:	4a06      	ldr	r2, [pc, #24]	@ (8000a30 <Set_PWM_Duty+0x68>)
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	7013      	strb	r3, [r2, #0]
}
 8000a1a:	bf00      	nop
 8000a1c:	3714      	adds	r7, #20
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	24000090 	.word	0x24000090
 8000a2c:	42c80000 	.word	0x42c80000
 8000a30:	24000089 	.word	0x24000089

08000a34 <ramp_pwm>:

/**
  * @brief Implementa uma rampa de PWM de 0% a 100% em 5 segundos.
  * @retval None
  */
void ramp_pwm(void) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
    uint16_t delay_ms = 5000 / 101; // 5 segundos (5000 ms) dividido por 101 passos (0 a 100)
 8000a3a:	2331      	movs	r3, #49	@ 0x31
 8000a3c:	80bb      	strh	r3, [r7, #4]
    for (uint8_t duty = 0; duty <= 100; duty++) {
 8000a3e:	2300      	movs	r3, #0
 8000a40:	71fb      	strb	r3, [r7, #7]
 8000a42:	e00a      	b.n	8000a5a <ramp_pwm+0x26>
        Set_PWM_Duty(duty);
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff ffbe 	bl	80009c8 <Set_PWM_Duty>
        HAL_Delay(delay_ms);
 8000a4c:	88bb      	ldrh	r3, [r7, #4]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 fc86 	bl	8001360 <HAL_Delay>
    for (uint8_t duty = 0; duty <= 100; duty++) {
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	3301      	adds	r3, #1
 8000a58:	71fb      	strb	r3, [r7, #7]
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	2b64      	cmp	r3, #100	@ 0x64
 8000a5e:	d9f1      	bls.n	8000a44 <ramp_pwm+0x10>
    }
    printf(">> Rampa concluida. Duty cycle em 100%%\r\n");
 8000a60:	4803      	ldr	r0, [pc, #12]	@ (8000a70 <ramp_pwm+0x3c>)
 8000a62:	f006 f9cb 	bl	8006dfc <iprintf>
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	08007d4c 	.word	0x08007d4c

08000a74 <handle_button_increment>:

/**
  * @brief Lida com o incremento de 10% no duty cycle via botão.
  * @retval None
  */
void handle_button_increment(void) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
    uint8_t last_duty = current_duty_cycle;
 8000a7a:	4b23      	ldr	r3, [pc, #140]	@ (8000b08 <handle_button_increment+0x94>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	71fb      	strb	r3, [r7, #7]
    // Loop para esperar o botão ou uma nova entrada UART
    while (HAL_UART_Receive(&huart3, &rx_data, 1, 0) != HAL_OK) { // Non-blocking receive
 8000a80:	e02e      	b.n	8000ae0 <handle_button_increment+0x6c>
        if (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_RESET) { // Botão pressionado (assumindo pull-up)
 8000a82:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a86:	4821      	ldr	r0, [pc, #132]	@ (8000b0c <handle_button_increment+0x98>)
 8000a88:	f000 ff2e 	bl	80018e8 <HAL_GPIO_ReadPin>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d123      	bne.n	8000ada <handle_button_increment+0x66>
            HAL_Delay(50); // Debounce
 8000a92:	2032      	movs	r0, #50	@ 0x32
 8000a94:	f000 fc64 	bl	8001360 <HAL_Delay>
            while(HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_RESET); // Espera soltar o botão
 8000a98:	bf00      	nop
 8000a9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a9e:	481b      	ldr	r0, [pc, #108]	@ (8000b0c <handle_button_increment+0x98>)
 8000aa0:	f000 ff22 	bl	80018e8 <HAL_GPIO_ReadPin>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d0f7      	beq.n	8000a9a <handle_button_increment+0x26>

            current_duty_cycle += 10;
 8000aaa:	4b17      	ldr	r3, [pc, #92]	@ (8000b08 <handle_button_increment+0x94>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	330a      	adds	r3, #10
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4b15      	ldr	r3, [pc, #84]	@ (8000b08 <handle_button_increment+0x94>)
 8000ab4:	701a      	strb	r2, [r3, #0]
            if (current_duty_cycle > 100) {
 8000ab6:	4b14      	ldr	r3, [pc, #80]	@ (8000b08 <handle_button_increment+0x94>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b64      	cmp	r3, #100	@ 0x64
 8000abc:	d902      	bls.n	8000ac4 <handle_button_increment+0x50>
                current_duty_cycle = 0;
 8000abe:	4b12      	ldr	r3, [pc, #72]	@ (8000b08 <handle_button_increment+0x94>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	701a      	strb	r2, [r3, #0]
            }
            Set_PWM_Duty(current_duty_cycle);
 8000ac4:	4b10      	ldr	r3, [pc, #64]	@ (8000b08 <handle_button_increment+0x94>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ff7d 	bl	80009c8 <Set_PWM_Duty>
            printf(">> Duty atual: %d%%\r\n", current_duty_cycle);
 8000ace:	4b0e      	ldr	r3, [pc, #56]	@ (8000b08 <handle_button_increment+0x94>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	480e      	ldr	r0, [pc, #56]	@ (8000b10 <handle_button_increment+0x9c>)
 8000ad6:	f006 f991 	bl	8006dfc <iprintf>
        }
        // Pequeno delay para evitar loop muito rápido
        HAL_Delay(10);
 8000ada:	200a      	movs	r0, #10
 8000adc:	f000 fc40 	bl	8001360 <HAL_Delay>
    while (HAL_UART_Receive(&huart3, &rx_data, 1, 0) != HAL_OK) { // Non-blocking receive
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	490b      	ldr	r1, [pc, #44]	@ (8000b14 <handle_button_increment+0xa0>)
 8000ae6:	480c      	ldr	r0, [pc, #48]	@ (8000b18 <handle_button_increment+0xa4>)
 8000ae8:	f004 ff72 	bl	80059d0 <HAL_UART_Receive>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d1c7      	bne.n	8000a82 <handle_button_increment+0xe>
    }
    // Se uma nova entrada UART for recebida, saia da função para o loop principal
    // A variável rx_data já conterá o novo valor digitado.
    // Restaura o último duty cycle para a opção 4, caso não seja mantido pela próxima opção.
    if (rx_data != '4') {
 8000af2:	4b08      	ldr	r3, [pc, #32]	@ (8000b14 <handle_button_increment+0xa0>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b34      	cmp	r3, #52	@ 0x34
 8000af8:	d002      	beq.n	8000b00 <handle_button_increment+0x8c>
        current_duty_cycle = last_duty;
 8000afa:	4a03      	ldr	r2, [pc, #12]	@ (8000b08 <handle_button_increment+0x94>)
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	7013      	strb	r3, [r2, #0]
    }
}
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	24000089 	.word	0x24000089
 8000b0c:	58020800 	.word	0x58020800
 8000b10:	08007d78 	.word	0x08007d78
 8000b14:	24000088 	.word	0x24000088
 8000b18:	240000dc 	.word	0x240000dc

08000b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b20:	b672      	cpsid	i
}
 8000b22:	bf00      	nop
  __disable_irq();


    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <Error_Handler+0x8>

08000b28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b58 <HAL_MspInit+0x30>)
 8000b30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b34:	4a08      	ldr	r2, [pc, #32]	@ (8000b58 <HAL_MspInit+0x30>)
 8000b36:	f043 0302 	orr.w	r3, r3, #2
 8000b3a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b3e:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <HAL_MspInit+0x30>)
 8000b40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b44:	f003 0302 	and.w	r3, r3, #2
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	58024400 	.word	0x58024400

08000b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <NMI_Handler+0x4>

08000b64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <HardFault_Handler+0x4>

08000b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <MemManage_Handler+0x4>

08000b74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <BusFault_Handler+0x4>

08000b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <UsageFault_Handler+0x4>

08000b84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb2:	f000 fbb5 	bl	8001320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b086      	sub	sp, #24
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	60f8      	str	r0, [r7, #12]
 8000bc2:	60b9      	str	r1, [r7, #8]
 8000bc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
 8000bca:	e00a      	b.n	8000be2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bcc:	f3af 8000 	nop.w
 8000bd0:	4601      	mov	r1, r0
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	1c5a      	adds	r2, r3, #1
 8000bd6:	60ba      	str	r2, [r7, #8]
 8000bd8:	b2ca      	uxtb	r2, r1
 8000bda:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	3301      	adds	r3, #1
 8000be0:	617b      	str	r3, [r7, #20]
 8000be2:	697a      	ldr	r2, [r7, #20]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	dbf0      	blt.n	8000bcc <_read+0x12>
  }

  return len;
 8000bea:	687b      	ldr	r3, [r7, #4]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3718      	adds	r7, #24
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c1c:	605a      	str	r2, [r3, #4]
  return 0;
 8000c1e:	2300      	movs	r3, #0
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <_isatty>:

int _isatty(int file)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c34:	2301      	movs	r3, #1
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c42:	b480      	push	{r7}
 8000c44:	b085      	sub	sp, #20
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	60f8      	str	r0, [r7, #12]
 8000c4a:	60b9      	str	r1, [r7, #8]
 8000c4c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c4e:	2300      	movs	r3, #0
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c64:	4a14      	ldr	r2, [pc, #80]	@ (8000cb8 <_sbrk+0x5c>)
 8000c66:	4b15      	ldr	r3, [pc, #84]	@ (8000cbc <_sbrk+0x60>)
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c70:	4b13      	ldr	r3, [pc, #76]	@ (8000cc0 <_sbrk+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d102      	bne.n	8000c7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c78:	4b11      	ldr	r3, [pc, #68]	@ (8000cc0 <_sbrk+0x64>)
 8000c7a:	4a12      	ldr	r2, [pc, #72]	@ (8000cc4 <_sbrk+0x68>)
 8000c7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c7e:	4b10      	ldr	r3, [pc, #64]	@ (8000cc0 <_sbrk+0x64>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d207      	bcs.n	8000c9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c8c:	f006 fa4c 	bl	8007128 <__errno>
 8000c90:	4603      	mov	r3, r0
 8000c92:	220c      	movs	r2, #12
 8000c94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9a:	e009      	b.n	8000cb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c9c:	4b08      	ldr	r3, [pc, #32]	@ (8000cc0 <_sbrk+0x64>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ca2:	4b07      	ldr	r3, [pc, #28]	@ (8000cc0 <_sbrk+0x64>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4413      	add	r3, r2
 8000caa:	4a05      	ldr	r2, [pc, #20]	@ (8000cc0 <_sbrk+0x64>)
 8000cac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cae:	68fb      	ldr	r3, [r7, #12]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	24080000 	.word	0x24080000
 8000cbc:	00000400 	.word	0x00000400
 8000cc0:	2400008c 	.word	0x2400008c
 8000cc4:	240002c0 	.word	0x240002c0

08000cc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ccc:	4b43      	ldr	r3, [pc, #268]	@ (8000ddc <SystemInit+0x114>)
 8000cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cd2:	4a42      	ldr	r2, [pc, #264]	@ (8000ddc <SystemInit+0x114>)
 8000cd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cdc:	4b40      	ldr	r3, [pc, #256]	@ (8000de0 <SystemInit+0x118>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f003 030f 	and.w	r3, r3, #15
 8000ce4:	2b06      	cmp	r3, #6
 8000ce6:	d807      	bhi.n	8000cf8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ce8:	4b3d      	ldr	r3, [pc, #244]	@ (8000de0 <SystemInit+0x118>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f023 030f 	bic.w	r3, r3, #15
 8000cf0:	4a3b      	ldr	r2, [pc, #236]	@ (8000de0 <SystemInit+0x118>)
 8000cf2:	f043 0307 	orr.w	r3, r3, #7
 8000cf6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000cf8:	4b3a      	ldr	r3, [pc, #232]	@ (8000de4 <SystemInit+0x11c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a39      	ldr	r2, [pc, #228]	@ (8000de4 <SystemInit+0x11c>)
 8000cfe:	f043 0301 	orr.w	r3, r3, #1
 8000d02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d04:	4b37      	ldr	r3, [pc, #220]	@ (8000de4 <SystemInit+0x11c>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d0a:	4b36      	ldr	r3, [pc, #216]	@ (8000de4 <SystemInit+0x11c>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	4935      	ldr	r1, [pc, #212]	@ (8000de4 <SystemInit+0x11c>)
 8000d10:	4b35      	ldr	r3, [pc, #212]	@ (8000de8 <SystemInit+0x120>)
 8000d12:	4013      	ands	r3, r2
 8000d14:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d16:	4b32      	ldr	r3, [pc, #200]	@ (8000de0 <SystemInit+0x118>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f003 0308 	and.w	r3, r3, #8
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d007      	beq.n	8000d32 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d22:	4b2f      	ldr	r3, [pc, #188]	@ (8000de0 <SystemInit+0x118>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f023 030f 	bic.w	r3, r3, #15
 8000d2a:	4a2d      	ldr	r2, [pc, #180]	@ (8000de0 <SystemInit+0x118>)
 8000d2c:	f043 0307 	orr.w	r3, r3, #7
 8000d30:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000d32:	4b2c      	ldr	r3, [pc, #176]	@ (8000de4 <SystemInit+0x11c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000d38:	4b2a      	ldr	r3, [pc, #168]	@ (8000de4 <SystemInit+0x11c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000d3e:	4b29      	ldr	r3, [pc, #164]	@ (8000de4 <SystemInit+0x11c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d44:	4b27      	ldr	r3, [pc, #156]	@ (8000de4 <SystemInit+0x11c>)
 8000d46:	4a29      	ldr	r2, [pc, #164]	@ (8000dec <SystemInit+0x124>)
 8000d48:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d4a:	4b26      	ldr	r3, [pc, #152]	@ (8000de4 <SystemInit+0x11c>)
 8000d4c:	4a28      	ldr	r2, [pc, #160]	@ (8000df0 <SystemInit+0x128>)
 8000d4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d50:	4b24      	ldr	r3, [pc, #144]	@ (8000de4 <SystemInit+0x11c>)
 8000d52:	4a28      	ldr	r2, [pc, #160]	@ (8000df4 <SystemInit+0x12c>)
 8000d54:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d56:	4b23      	ldr	r3, [pc, #140]	@ (8000de4 <SystemInit+0x11c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d5c:	4b21      	ldr	r3, [pc, #132]	@ (8000de4 <SystemInit+0x11c>)
 8000d5e:	4a25      	ldr	r2, [pc, #148]	@ (8000df4 <SystemInit+0x12c>)
 8000d60:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d62:	4b20      	ldr	r3, [pc, #128]	@ (8000de4 <SystemInit+0x11c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d68:	4b1e      	ldr	r3, [pc, #120]	@ (8000de4 <SystemInit+0x11c>)
 8000d6a:	4a22      	ldr	r2, [pc, #136]	@ (8000df4 <SystemInit+0x12c>)
 8000d6c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000de4 <SystemInit+0x11c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d74:	4b1b      	ldr	r3, [pc, #108]	@ (8000de4 <SystemInit+0x11c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a1a      	ldr	r2, [pc, #104]	@ (8000de4 <SystemInit+0x11c>)
 8000d7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d7e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d80:	4b18      	ldr	r3, [pc, #96]	@ (8000de4 <SystemInit+0x11c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000d86:	4b1c      	ldr	r3, [pc, #112]	@ (8000df8 <SystemInit+0x130>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dfc <SystemInit+0x134>)
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000d92:	d202      	bcs.n	8000d9a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000d94:	4b1a      	ldr	r3, [pc, #104]	@ (8000e00 <SystemInit+0x138>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000d9a:	4b12      	ldr	r3, [pc, #72]	@ (8000de4 <SystemInit+0x11c>)
 8000d9c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000da0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d113      	bne.n	8000dd0 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000da8:	4b0e      	ldr	r3, [pc, #56]	@ (8000de4 <SystemInit+0x11c>)
 8000daa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000dae:	4a0d      	ldr	r2, [pc, #52]	@ (8000de4 <SystemInit+0x11c>)
 8000db0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000db4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000db8:	4b12      	ldr	r3, [pc, #72]	@ (8000e04 <SystemInit+0x13c>)
 8000dba:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000dbe:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000dc0:	4b08      	ldr	r3, [pc, #32]	@ (8000de4 <SystemInit+0x11c>)
 8000dc2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000dc6:	4a07      	ldr	r2, [pc, #28]	@ (8000de4 <SystemInit+0x11c>)
 8000dc8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000dcc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000ed00 	.word	0xe000ed00
 8000de0:	52002000 	.word	0x52002000
 8000de4:	58024400 	.word	0x58024400
 8000de8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000dec:	02020200 	.word	0x02020200
 8000df0:	01ff0000 	.word	0x01ff0000
 8000df4:	01010280 	.word	0x01010280
 8000df8:	5c001000 	.word	0x5c001000
 8000dfc:	ffff0000 	.word	0xffff0000
 8000e00:	51008108 	.word	0x51008108
 8000e04:	52004000 	.word	0x52004000

08000e08 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000e0c:	4b09      	ldr	r3, [pc, #36]	@ (8000e34 <ExitRun0Mode+0x2c>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	4a08      	ldr	r2, [pc, #32]	@ (8000e34 <ExitRun0Mode+0x2c>)
 8000e12:	f043 0302 	orr.w	r3, r3, #2
 8000e16:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000e18:	bf00      	nop
 8000e1a:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <ExitRun0Mode+0x2c>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d0f9      	beq.n	8000e1a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000e26:	bf00      	nop
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	58024800 	.word	0x58024800

08000e38 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b09a      	sub	sp, #104	@ 0x68
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e3e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e4c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e58:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
 8000e68:	615a      	str	r2, [r3, #20]
 8000e6a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e6c:	1d3b      	adds	r3, r7, #4
 8000e6e:	222c      	movs	r2, #44	@ 0x2c
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f006 f90a 	bl	800708c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e78:	4b43      	ldr	r3, [pc, #268]	@ (8000f88 <MX_TIM1_Init+0x150>)
 8000e7a:	4a44      	ldr	r2, [pc, #272]	@ (8000f8c <MX_TIM1_Init+0x154>)
 8000e7c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e7e:	4b42      	ldr	r3, [pc, #264]	@ (8000f88 <MX_TIM1_Init+0x150>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e84:	4b40      	ldr	r3, [pc, #256]	@ (8000f88 <MX_TIM1_Init+0x150>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000e8a:	4b3f      	ldr	r3, [pc, #252]	@ (8000f88 <MX_TIM1_Init+0x150>)
 8000e8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e90:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e92:	4b3d      	ldr	r3, [pc, #244]	@ (8000f88 <MX_TIM1_Init+0x150>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e98:	4b3b      	ldr	r3, [pc, #236]	@ (8000f88 <MX_TIM1_Init+0x150>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e9e:	4b3a      	ldr	r3, [pc, #232]	@ (8000f88 <MX_TIM1_Init+0x150>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ea4:	4838      	ldr	r0, [pc, #224]	@ (8000f88 <MX_TIM1_Init+0x150>)
 8000ea6:	f003 fb9d 	bl	80045e4 <HAL_TIM_Base_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000eb0:	f7ff fe34 	bl	8000b1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eb8:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000eba:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4831      	ldr	r0, [pc, #196]	@ (8000f88 <MX_TIM1_Init+0x150>)
 8000ec2:	f003 fe69 	bl	8004b98 <HAL_TIM_ConfigClockSource>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000ecc:	f7ff fe26 	bl	8000b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ed0:	482d      	ldr	r0, [pc, #180]	@ (8000f88 <MX_TIM1_Init+0x150>)
 8000ed2:	f003 fbde 	bl	8004692 <HAL_TIM_PWM_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000edc:	f7ff fe1e 	bl	8000b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000eec:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4825      	ldr	r0, [pc, #148]	@ (8000f88 <MX_TIM1_Init+0x150>)
 8000ef4:	f004 fb82 	bl	80055fc <HAL_TIMEx_MasterConfigSynchronization>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000efe:	f7ff fe0d 	bl	8000b1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f02:	2360      	movs	r3, #96	@ 0x60
 8000f04:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f12:	2300      	movs	r3, #0
 8000f14:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f16:	2300      	movs	r3, #0
 8000f18:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f1e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f22:	2200      	movs	r2, #0
 8000f24:	4619      	mov	r1, r3
 8000f26:	4818      	ldr	r0, [pc, #96]	@ (8000f88 <MX_TIM1_Init+0x150>)
 8000f28:	f003 fd22 	bl	8004970 <HAL_TIM_PWM_ConfigChannel>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000f32:	f7ff fdf3 	bl	8000b1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f4e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f58:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000f5c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f62:	2300      	movs	r3, #0
 8000f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4807      	ldr	r0, [pc, #28]	@ (8000f88 <MX_TIM1_Init+0x150>)
 8000f6c:	f004 fbd4 	bl	8005718 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000f76:	f7ff fdd1 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f7a:	4803      	ldr	r0, [pc, #12]	@ (8000f88 <MX_TIM1_Init+0x150>)
 8000f7c:	f000 f82a 	bl	8000fd4 <HAL_TIM_MspPostInit>

}
 8000f80:	bf00      	nop
 8000f82:	3768      	adds	r7, #104	@ 0x68
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	24000090 	.word	0x24000090
 8000f8c:	40010000 	.word	0x40010000

08000f90 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0b      	ldr	r2, [pc, #44]	@ (8000fcc <HAL_TIM_Base_MspInit+0x3c>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d10e      	bne.n	8000fc0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd0 <HAL_TIM_Base_MspInit+0x40>)
 8000fa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000fa8:	4a09      	ldr	r2, [pc, #36]	@ (8000fd0 <HAL_TIM_Base_MspInit+0x40>)
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000fb2:	4b07      	ldr	r3, [pc, #28]	@ (8000fd0 <HAL_TIM_Base_MspInit+0x40>)
 8000fb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000fb8:	f003 0301 	and.w	r3, r3, #1
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000fc0:	bf00      	nop
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	40010000 	.word	0x40010000
 8000fd0:	58024400 	.word	0x58024400

08000fd4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b088      	sub	sp, #32
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a13      	ldr	r2, [pc, #76]	@ (8001040 <HAL_TIM_MspPostInit+0x6c>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d11f      	bne.n	8001036 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ff6:	4b13      	ldr	r3, [pc, #76]	@ (8001044 <HAL_TIM_MspPostInit+0x70>)
 8000ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ffc:	4a11      	ldr	r2, [pc, #68]	@ (8001044 <HAL_TIM_MspPostInit+0x70>)
 8000ffe:	f043 0310 	orr.w	r3, r3, #16
 8001002:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001006:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <HAL_TIM_MspPostInit+0x70>)
 8001008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800100c:	f003 0310 	and.w	r3, r3, #16
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001014:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001018:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	2300      	movs	r3, #0
 8001024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001026:	2301      	movs	r3, #1
 8001028:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	4619      	mov	r1, r3
 8001030:	4805      	ldr	r0, [pc, #20]	@ (8001048 <HAL_TIM_MspPostInit+0x74>)
 8001032:	f000 faa9 	bl	8001588 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001036:	bf00      	nop
 8001038:	3720      	adds	r7, #32
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40010000 	.word	0x40010000
 8001044:	58024400 	.word	0x58024400
 8001048:	58021000 	.word	0x58021000

0800104c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001050:	4b22      	ldr	r3, [pc, #136]	@ (80010dc <MX_USART3_UART_Init+0x90>)
 8001052:	4a23      	ldr	r2, [pc, #140]	@ (80010e0 <MX_USART3_UART_Init+0x94>)
 8001054:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001056:	4b21      	ldr	r3, [pc, #132]	@ (80010dc <MX_USART3_UART_Init+0x90>)
 8001058:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800105c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800105e:	4b1f      	ldr	r3, [pc, #124]	@ (80010dc <MX_USART3_UART_Init+0x90>)
 8001060:	2200      	movs	r2, #0
 8001062:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001064:	4b1d      	ldr	r3, [pc, #116]	@ (80010dc <MX_USART3_UART_Init+0x90>)
 8001066:	2200      	movs	r2, #0
 8001068:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800106a:	4b1c      	ldr	r3, [pc, #112]	@ (80010dc <MX_USART3_UART_Init+0x90>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001070:	4b1a      	ldr	r3, [pc, #104]	@ (80010dc <MX_USART3_UART_Init+0x90>)
 8001072:	220c      	movs	r2, #12
 8001074:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001076:	4b19      	ldr	r3, [pc, #100]	@ (80010dc <MX_USART3_UART_Init+0x90>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800107c:	4b17      	ldr	r3, [pc, #92]	@ (80010dc <MX_USART3_UART_Init+0x90>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001082:	4b16      	ldr	r3, [pc, #88]	@ (80010dc <MX_USART3_UART_Init+0x90>)
 8001084:	2200      	movs	r2, #0
 8001086:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001088:	4b14      	ldr	r3, [pc, #80]	@ (80010dc <MX_USART3_UART_Init+0x90>)
 800108a:	2200      	movs	r2, #0
 800108c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800108e:	4b13      	ldr	r3, [pc, #76]	@ (80010dc <MX_USART3_UART_Init+0x90>)
 8001090:	2200      	movs	r2, #0
 8001092:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001094:	4811      	ldr	r0, [pc, #68]	@ (80010dc <MX_USART3_UART_Init+0x90>)
 8001096:	f004 fbbd 	bl	8005814 <HAL_UART_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80010a0:	f7ff fd3c 	bl	8000b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010a4:	2100      	movs	r1, #0
 80010a6:	480d      	ldr	r0, [pc, #52]	@ (80010dc <MX_USART3_UART_Init+0x90>)
 80010a8:	f005 fd1b 	bl	8006ae2 <HAL_UARTEx_SetTxFifoThreshold>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80010b2:	f7ff fd33 	bl	8000b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010b6:	2100      	movs	r1, #0
 80010b8:	4808      	ldr	r0, [pc, #32]	@ (80010dc <MX_USART3_UART_Init+0x90>)
 80010ba:	f005 fd50 	bl	8006b5e <HAL_UARTEx_SetRxFifoThreshold>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80010c4:	f7ff fd2a 	bl	8000b1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80010c8:	4804      	ldr	r0, [pc, #16]	@ (80010dc <MX_USART3_UART_Init+0x90>)
 80010ca:	f005 fcd1 	bl	8006a70 <HAL_UARTEx_DisableFifoMode>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80010d4:	f7ff fd22 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	240000dc 	.word	0x240000dc
 80010e0:	40004800 	.word	0x40004800

080010e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b0ba      	sub	sp, #232	@ 0xe8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010fc:	f107 0310 	add.w	r3, r7, #16
 8001100:	22c0      	movs	r2, #192	@ 0xc0
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f005 ffc1 	bl	800708c <memset>
  if(uartHandle->Instance==USART3)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a27      	ldr	r2, [pc, #156]	@ (80011ac <HAL_UART_MspInit+0xc8>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d146      	bne.n	80011a2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001114:	f04f 0202 	mov.w	r2, #2
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001120:	2300      	movs	r3, #0
 8001122:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001126:	f107 0310 	add.w	r3, r7, #16
 800112a:	4618      	mov	r0, r3
 800112c:	f001 fc2e 	bl	800298c <HAL_RCCEx_PeriphCLKConfig>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001136:	f7ff fcf1 	bl	8000b1c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800113a:	4b1d      	ldr	r3, [pc, #116]	@ (80011b0 <HAL_UART_MspInit+0xcc>)
 800113c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001140:	4a1b      	ldr	r2, [pc, #108]	@ (80011b0 <HAL_UART_MspInit+0xcc>)
 8001142:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001146:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800114a:	4b19      	ldr	r3, [pc, #100]	@ (80011b0 <HAL_UART_MspInit+0xcc>)
 800114c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001150:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001158:	4b15      	ldr	r3, [pc, #84]	@ (80011b0 <HAL_UART_MspInit+0xcc>)
 800115a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800115e:	4a14      	ldr	r2, [pc, #80]	@ (80011b0 <HAL_UART_MspInit+0xcc>)
 8001160:	f043 0308 	orr.w	r3, r3, #8
 8001164:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001168:	4b11      	ldr	r3, [pc, #68]	@ (80011b0 <HAL_UART_MspInit+0xcc>)
 800116a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800116e:	f003 0308 	and.w	r3, r3, #8
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001176:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800117a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	2300      	movs	r3, #0
 800118c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001190:	2307      	movs	r3, #7
 8001192:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001196:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800119a:	4619      	mov	r1, r3
 800119c:	4805      	ldr	r0, [pc, #20]	@ (80011b4 <HAL_UART_MspInit+0xd0>)
 800119e:	f000 f9f3 	bl	8001588 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80011a2:	bf00      	nop
 80011a4:	37e8      	adds	r7, #232	@ 0xe8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40004800 	.word	0x40004800
 80011b0:	58024400 	.word	0x58024400
 80011b4:	58020c00 	.word	0x58020c00

080011b8 <_write>:
  }
}

/* USER CODE BEGIN 1 */
int _write(int file, char *ptr, int len)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *) ptr, len, 1000);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011cc:	68b9      	ldr	r1, [r7, #8]
 80011ce:	4804      	ldr	r0, [pc, #16]	@ (80011e0 <_write+0x28>)
 80011d0:	f004 fb70 	bl	80058b4 <HAL_UART_Transmit>
  return len;
 80011d4:	687b      	ldr	r3, [r7, #4]
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	240000dc 	.word	0x240000dc

080011e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011e4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001220 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80011e8:	f7ff fe0e 	bl	8000e08 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80011ec:	f7ff fd6c 	bl	8000cc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f0:	480c      	ldr	r0, [pc, #48]	@ (8001224 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011f2:	490d      	ldr	r1, [pc, #52]	@ (8001228 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011f4:	4a0d      	ldr	r2, [pc, #52]	@ (800122c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f8:	e002      	b.n	8001200 <LoopCopyDataInit>

080011fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fe:	3304      	adds	r3, #4

08001200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001204:	d3f9      	bcc.n	80011fa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001206:	4a0a      	ldr	r2, [pc, #40]	@ (8001230 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001208:	4c0a      	ldr	r4, [pc, #40]	@ (8001234 <LoopFillZerobss+0x22>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800120c:	e001      	b.n	8001212 <LoopFillZerobss>

0800120e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001210:	3204      	adds	r2, #4

08001212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001214:	d3fb      	bcc.n	800120e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001216:	f005 ff8d 	bl	8007134 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800121a:	f7ff fadf 	bl	80007dc <main>
  bx  lr
 800121e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001220:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001224:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001228:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 800122c:	08007e0c 	.word	0x08007e0c
  ldr r2, =_sbss
 8001230:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8001234:	240002c0 	.word	0x240002c0

08001238 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001238:	e7fe      	b.n	8001238 <ADC3_IRQHandler>
	...

0800123c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001242:	2003      	movs	r0, #3
 8001244:	f000 f96e 	bl	8001524 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001248:	f001 f9ca 	bl	80025e0 <HAL_RCC_GetSysClockFreq>
 800124c:	4602      	mov	r2, r0
 800124e:	4b15      	ldr	r3, [pc, #84]	@ (80012a4 <HAL_Init+0x68>)
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	0a1b      	lsrs	r3, r3, #8
 8001254:	f003 030f 	and.w	r3, r3, #15
 8001258:	4913      	ldr	r1, [pc, #76]	@ (80012a8 <HAL_Init+0x6c>)
 800125a:	5ccb      	ldrb	r3, [r1, r3]
 800125c:	f003 031f 	and.w	r3, r3, #31
 8001260:	fa22 f303 	lsr.w	r3, r2, r3
 8001264:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001266:	4b0f      	ldr	r3, [pc, #60]	@ (80012a4 <HAL_Init+0x68>)
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	4a0e      	ldr	r2, [pc, #56]	@ (80012a8 <HAL_Init+0x6c>)
 8001270:	5cd3      	ldrb	r3, [r2, r3]
 8001272:	f003 031f 	and.w	r3, r3, #31
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	fa22 f303 	lsr.w	r3, r2, r3
 800127c:	4a0b      	ldr	r2, [pc, #44]	@ (80012ac <HAL_Init+0x70>)
 800127e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001280:	4a0b      	ldr	r2, [pc, #44]	@ (80012b0 <HAL_Init+0x74>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001286:	2000      	movs	r0, #0
 8001288:	f000 f814 	bl	80012b4 <HAL_InitTick>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e002      	b.n	800129c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001296:	f7ff fc47 	bl	8000b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	58024400 	.word	0x58024400
 80012a8:	08007d90 	.word	0x08007d90
 80012ac:	24000004 	.word	0x24000004
 80012b0:	24000000 	.word	0x24000000

080012b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012bc:	4b15      	ldr	r3, [pc, #84]	@ (8001314 <HAL_InitTick+0x60>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d101      	bne.n	80012c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e021      	b.n	800130c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012c8:	4b13      	ldr	r3, [pc, #76]	@ (8001318 <HAL_InitTick+0x64>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	4b11      	ldr	r3, [pc, #68]	@ (8001314 <HAL_InitTick+0x60>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	4619      	mov	r1, r3
 80012d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012da:	fbb2 f3f3 	udiv	r3, r2, r3
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 f945 	bl	800156e <HAL_SYSTICK_Config>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00e      	b.n	800130c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b0f      	cmp	r3, #15
 80012f2:	d80a      	bhi.n	800130a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f4:	2200      	movs	r2, #0
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295
 80012fc:	f000 f91d 	bl	800153a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001300:	4a06      	ldr	r2, [pc, #24]	@ (800131c <HAL_InitTick+0x68>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001306:	2300      	movs	r3, #0
 8001308:	e000      	b.n	800130c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
}
 800130c:	4618      	mov	r0, r3
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	2400000c 	.word	0x2400000c
 8001318:	24000000 	.word	0x24000000
 800131c:	24000008 	.word	0x24000008

08001320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001324:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <HAL_IncTick+0x20>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	461a      	mov	r2, r3
 800132a:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <HAL_IncTick+0x24>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4413      	add	r3, r2
 8001330:	4a04      	ldr	r2, [pc, #16]	@ (8001344 <HAL_IncTick+0x24>)
 8001332:	6013      	str	r3, [r2, #0]
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	2400000c 	.word	0x2400000c
 8001344:	24000170 	.word	0x24000170

08001348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return uwTick;
 800134c:	4b03      	ldr	r3, [pc, #12]	@ (800135c <HAL_GetTick+0x14>)
 800134e:	681b      	ldr	r3, [r3, #0]
}
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	24000170 	.word	0x24000170

08001360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001368:	f7ff ffee 	bl	8001348 <HAL_GetTick>
 800136c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001378:	d005      	beq.n	8001386 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800137a:	4b0a      	ldr	r3, [pc, #40]	@ (80013a4 <HAL_Delay+0x44>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	4413      	add	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001386:	bf00      	nop
 8001388:	f7ff ffde 	bl	8001348 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	429a      	cmp	r2, r3
 8001396:	d8f7      	bhi.n	8001388 <HAL_Delay+0x28>
  {
  }
}
 8001398:	bf00      	nop
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2400000c 	.word	0x2400000c

080013a8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80013ac:	4b03      	ldr	r3, [pc, #12]	@ (80013bc <HAL_GetREVID+0x14>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	0c1b      	lsrs	r3, r3, #16
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	5c001000 	.word	0x5c001000

080013c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001400 <__NVIC_SetPriorityGrouping+0x40>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013d6:	68ba      	ldr	r2, [r7, #8]
 80013d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013dc:	4013      	ands	r3, r2
 80013de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013e8:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <__NVIC_SetPriorityGrouping+0x44>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ee:	4a04      	ldr	r2, [pc, #16]	@ (8001400 <__NVIC_SetPriorityGrouping+0x40>)
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	60d3      	str	r3, [r2, #12]
}
 80013f4:	bf00      	nop
 80013f6:	3714      	adds	r7, #20
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	e000ed00 	.word	0xe000ed00
 8001404:	05fa0000 	.word	0x05fa0000

08001408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800140c:	4b04      	ldr	r3, [pc, #16]	@ (8001420 <__NVIC_GetPriorityGrouping+0x18>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	0a1b      	lsrs	r3, r3, #8
 8001412:	f003 0307 	and.w	r3, r3, #7
}
 8001416:	4618      	mov	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	6039      	str	r1, [r7, #0]
 800142e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001430:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001434:	2b00      	cmp	r3, #0
 8001436:	db0a      	blt.n	800144e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	b2da      	uxtb	r2, r3
 800143c:	490c      	ldr	r1, [pc, #48]	@ (8001470 <__NVIC_SetPriority+0x4c>)
 800143e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001442:	0112      	lsls	r2, r2, #4
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	440b      	add	r3, r1
 8001448:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800144c:	e00a      	b.n	8001464 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4908      	ldr	r1, [pc, #32]	@ (8001474 <__NVIC_SetPriority+0x50>)
 8001454:	88fb      	ldrh	r3, [r7, #6]
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	3b04      	subs	r3, #4
 800145c:	0112      	lsls	r2, r2, #4
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	440b      	add	r3, r1
 8001462:	761a      	strb	r2, [r3, #24]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000e100 	.word	0xe000e100
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001478:	b480      	push	{r7}
 800147a:	b089      	sub	sp, #36	@ 0x24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f1c3 0307 	rsb	r3, r3, #7
 8001492:	2b04      	cmp	r3, #4
 8001494:	bf28      	it	cs
 8001496:	2304      	movcs	r3, #4
 8001498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3304      	adds	r3, #4
 800149e:	2b06      	cmp	r3, #6
 80014a0:	d902      	bls.n	80014a8 <NVIC_EncodePriority+0x30>
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3b03      	subs	r3, #3
 80014a6:	e000      	b.n	80014aa <NVIC_EncodePriority+0x32>
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	f04f 32ff 	mov.w	r2, #4294967295
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43da      	mvns	r2, r3
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	401a      	ands	r2, r3
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c0:	f04f 31ff 	mov.w	r1, #4294967295
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ca:	43d9      	mvns	r1, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	4313      	orrs	r3, r2
         );
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3724      	adds	r7, #36	@ 0x24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014f0:	d301      	bcc.n	80014f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014f2:	2301      	movs	r3, #1
 80014f4:	e00f      	b.n	8001516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001520 <SysTick_Config+0x40>)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014fe:	210f      	movs	r1, #15
 8001500:	f04f 30ff 	mov.w	r0, #4294967295
 8001504:	f7ff ff8e 	bl	8001424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001508:	4b05      	ldr	r3, [pc, #20]	@ (8001520 <SysTick_Config+0x40>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800150e:	4b04      	ldr	r3, [pc, #16]	@ (8001520 <SysTick_Config+0x40>)
 8001510:	2207      	movs	r2, #7
 8001512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	e000e010 	.word	0xe000e010

08001524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ff47 	bl	80013c0 <__NVIC_SetPriorityGrouping>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b086      	sub	sp, #24
 800153e:	af00      	add	r7, sp, #0
 8001540:	4603      	mov	r3, r0
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	607a      	str	r2, [r7, #4]
 8001546:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001548:	f7ff ff5e 	bl	8001408 <__NVIC_GetPriorityGrouping>
 800154c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	68b9      	ldr	r1, [r7, #8]
 8001552:	6978      	ldr	r0, [r7, #20]
 8001554:	f7ff ff90 	bl	8001478 <NVIC_EncodePriority>
 8001558:	4602      	mov	r2, r0
 800155a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800155e:	4611      	mov	r1, r2
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff5f 	bl	8001424 <__NVIC_SetPriority>
}
 8001566:	bf00      	nop
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff ffb2 	bl	80014e0 <SysTick_Config>
 800157c:	4603      	mov	r3, r0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001588:	b480      	push	{r7}
 800158a:	b089      	sub	sp, #36	@ 0x24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001596:	4b89      	ldr	r3, [pc, #548]	@ (80017bc <HAL_GPIO_Init+0x234>)
 8001598:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800159a:	e194      	b.n	80018c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	2101      	movs	r1, #1
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	fa01 f303 	lsl.w	r3, r1, r3
 80015a8:	4013      	ands	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 8186 	beq.w	80018c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d005      	beq.n	80015cc <HAL_GPIO_Init+0x44>
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d130      	bne.n	800162e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	2203      	movs	r2, #3
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	68da      	ldr	r2, [r3, #12]
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001602:	2201      	movs	r2, #1
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	091b      	lsrs	r3, r3, #4
 8001618:	f003 0201 	and.w	r2, r3, #1
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4313      	orrs	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 0303 	and.w	r3, r3, #3
 8001636:	2b03      	cmp	r3, #3
 8001638:	d017      	beq.n	800166a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	2203      	movs	r2, #3
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4013      	ands	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4313      	orrs	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 0303 	and.w	r3, r3, #3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d123      	bne.n	80016be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	08da      	lsrs	r2, r3, #3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3208      	adds	r2, #8
 800167e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001682:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	220f      	movs	r2, #15
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43db      	mvns	r3, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4013      	ands	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	691a      	ldr	r2, [r3, #16]
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	08da      	lsrs	r2, r3, #3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3208      	adds	r2, #8
 80016b8:	69b9      	ldr	r1, [r7, #24]
 80016ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	2203      	movs	r2, #3
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f003 0203 	and.w	r2, r3, #3
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f000 80e0 	beq.w	80018c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001700:	4b2f      	ldr	r3, [pc, #188]	@ (80017c0 <HAL_GPIO_Init+0x238>)
 8001702:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001706:	4a2e      	ldr	r2, [pc, #184]	@ (80017c0 <HAL_GPIO_Init+0x238>)
 8001708:	f043 0302 	orr.w	r3, r3, #2
 800170c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001710:	4b2b      	ldr	r3, [pc, #172]	@ (80017c0 <HAL_GPIO_Init+0x238>)
 8001712:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800171e:	4a29      	ldr	r2, [pc, #164]	@ (80017c4 <HAL_GPIO_Init+0x23c>)
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	089b      	lsrs	r3, r3, #2
 8001724:	3302      	adds	r3, #2
 8001726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	f003 0303 	and.w	r3, r3, #3
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	220f      	movs	r2, #15
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43db      	mvns	r3, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4013      	ands	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a20      	ldr	r2, [pc, #128]	@ (80017c8 <HAL_GPIO_Init+0x240>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d052      	beq.n	80017f0 <HAL_GPIO_Init+0x268>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a1f      	ldr	r2, [pc, #124]	@ (80017cc <HAL_GPIO_Init+0x244>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d031      	beq.n	80017b6 <HAL_GPIO_Init+0x22e>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a1e      	ldr	r2, [pc, #120]	@ (80017d0 <HAL_GPIO_Init+0x248>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d02b      	beq.n	80017b2 <HAL_GPIO_Init+0x22a>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a1d      	ldr	r2, [pc, #116]	@ (80017d4 <HAL_GPIO_Init+0x24c>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d025      	beq.n	80017ae <HAL_GPIO_Init+0x226>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a1c      	ldr	r2, [pc, #112]	@ (80017d8 <HAL_GPIO_Init+0x250>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d01f      	beq.n	80017aa <HAL_GPIO_Init+0x222>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a1b      	ldr	r2, [pc, #108]	@ (80017dc <HAL_GPIO_Init+0x254>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d019      	beq.n	80017a6 <HAL_GPIO_Init+0x21e>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a1a      	ldr	r2, [pc, #104]	@ (80017e0 <HAL_GPIO_Init+0x258>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d013      	beq.n	80017a2 <HAL_GPIO_Init+0x21a>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a19      	ldr	r2, [pc, #100]	@ (80017e4 <HAL_GPIO_Init+0x25c>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d00d      	beq.n	800179e <HAL_GPIO_Init+0x216>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a18      	ldr	r2, [pc, #96]	@ (80017e8 <HAL_GPIO_Init+0x260>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d007      	beq.n	800179a <HAL_GPIO_Init+0x212>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a17      	ldr	r2, [pc, #92]	@ (80017ec <HAL_GPIO_Init+0x264>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d101      	bne.n	8001796 <HAL_GPIO_Init+0x20e>
 8001792:	2309      	movs	r3, #9
 8001794:	e02d      	b.n	80017f2 <HAL_GPIO_Init+0x26a>
 8001796:	230a      	movs	r3, #10
 8001798:	e02b      	b.n	80017f2 <HAL_GPIO_Init+0x26a>
 800179a:	2308      	movs	r3, #8
 800179c:	e029      	b.n	80017f2 <HAL_GPIO_Init+0x26a>
 800179e:	2307      	movs	r3, #7
 80017a0:	e027      	b.n	80017f2 <HAL_GPIO_Init+0x26a>
 80017a2:	2306      	movs	r3, #6
 80017a4:	e025      	b.n	80017f2 <HAL_GPIO_Init+0x26a>
 80017a6:	2305      	movs	r3, #5
 80017a8:	e023      	b.n	80017f2 <HAL_GPIO_Init+0x26a>
 80017aa:	2304      	movs	r3, #4
 80017ac:	e021      	b.n	80017f2 <HAL_GPIO_Init+0x26a>
 80017ae:	2303      	movs	r3, #3
 80017b0:	e01f      	b.n	80017f2 <HAL_GPIO_Init+0x26a>
 80017b2:	2302      	movs	r3, #2
 80017b4:	e01d      	b.n	80017f2 <HAL_GPIO_Init+0x26a>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e01b      	b.n	80017f2 <HAL_GPIO_Init+0x26a>
 80017ba:	bf00      	nop
 80017bc:	58000080 	.word	0x58000080
 80017c0:	58024400 	.word	0x58024400
 80017c4:	58000400 	.word	0x58000400
 80017c8:	58020000 	.word	0x58020000
 80017cc:	58020400 	.word	0x58020400
 80017d0:	58020800 	.word	0x58020800
 80017d4:	58020c00 	.word	0x58020c00
 80017d8:	58021000 	.word	0x58021000
 80017dc:	58021400 	.word	0x58021400
 80017e0:	58021800 	.word	0x58021800
 80017e4:	58021c00 	.word	0x58021c00
 80017e8:	58022000 	.word	0x58022000
 80017ec:	58022400 	.word	0x58022400
 80017f0:	2300      	movs	r3, #0
 80017f2:	69fa      	ldr	r2, [r7, #28]
 80017f4:	f002 0203 	and.w	r2, r2, #3
 80017f8:	0092      	lsls	r2, r2, #2
 80017fa:	4093      	lsls	r3, r2
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4313      	orrs	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001802:	4938      	ldr	r1, [pc, #224]	@ (80018e4 <HAL_GPIO_Init+0x35c>)
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	089b      	lsrs	r3, r3, #2
 8001808:	3302      	adds	r3, #2
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001810:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	43db      	mvns	r3, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4013      	ands	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	4313      	orrs	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001836:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800183e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	43db      	mvns	r3, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	4313      	orrs	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001864:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	43db      	mvns	r3, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	4313      	orrs	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	43db      	mvns	r3, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4013      	ands	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	3301      	adds	r3, #1
 80018c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	fa22 f303 	lsr.w	r3, r2, r3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f47f ae63 	bne.w	800159c <HAL_GPIO_Init+0x14>
  }
}
 80018d6:	bf00      	nop
 80018d8:	bf00      	nop
 80018da:	3724      	adds	r7, #36	@ 0x24
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	58000400 	.word	0x58000400

080018e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691a      	ldr	r2, [r3, #16]
 80018f8:	887b      	ldrh	r3, [r7, #2]
 80018fa:	4013      	ands	r3, r2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d002      	beq.n	8001906 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001900:	2301      	movs	r3, #1
 8001902:	73fb      	strb	r3, [r7, #15]
 8001904:	e001      	b.n	800190a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001906:	2300      	movs	r3, #0
 8001908:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800190a:	7bfb      	ldrb	r3, [r7, #15]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	807b      	strh	r3, [r7, #2]
 8001924:	4613      	mov	r3, r2
 8001926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001928:	787b      	ldrb	r3, [r7, #1]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800192e:	887a      	ldrh	r2, [r7, #2]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001934:	e003      	b.n	800193e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001936:	887b      	ldrh	r3, [r7, #2]
 8001938:	041a      	lsls	r2, r3, #16
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	619a      	str	r2, [r3, #24]
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
	...

0800194c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001954:	4b19      	ldr	r3, [pc, #100]	@ (80019bc <HAL_PWREx_ConfigSupply+0x70>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b04      	cmp	r3, #4
 800195e:	d00a      	beq.n	8001976 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001960:	4b16      	ldr	r3, [pc, #88]	@ (80019bc <HAL_PWREx_ConfigSupply+0x70>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	429a      	cmp	r2, r3
 800196c:	d001      	beq.n	8001972 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e01f      	b.n	80019b2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	e01d      	b.n	80019b2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001976:	4b11      	ldr	r3, [pc, #68]	@ (80019bc <HAL_PWREx_ConfigSupply+0x70>)
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	f023 0207 	bic.w	r2, r3, #7
 800197e:	490f      	ldr	r1, [pc, #60]	@ (80019bc <HAL_PWREx_ConfigSupply+0x70>)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4313      	orrs	r3, r2
 8001984:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001986:	f7ff fcdf 	bl	8001348 <HAL_GetTick>
 800198a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800198c:	e009      	b.n	80019a2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800198e:	f7ff fcdb 	bl	8001348 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800199c:	d901      	bls.n	80019a2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e007      	b.n	80019b2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80019a2:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <HAL_PWREx_ConfigSupply+0x70>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019ae:	d1ee      	bne.n	800198e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	58024800 	.word	0x58024800

080019c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08c      	sub	sp, #48	@ 0x30
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d102      	bne.n	80019d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	f000 bc48 	b.w	8002264 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f000 8088 	beq.w	8001af2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019e2:	4b99      	ldr	r3, [pc, #612]	@ (8001c48 <HAL_RCC_OscConfig+0x288>)
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80019ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80019ec:	4b96      	ldr	r3, [pc, #600]	@ (8001c48 <HAL_RCC_OscConfig+0x288>)
 80019ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80019f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019f4:	2b10      	cmp	r3, #16
 80019f6:	d007      	beq.n	8001a08 <HAL_RCC_OscConfig+0x48>
 80019f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019fa:	2b18      	cmp	r3, #24
 80019fc:	d111      	bne.n	8001a22 <HAL_RCC_OscConfig+0x62>
 80019fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d10c      	bne.n	8001a22 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a08:	4b8f      	ldr	r3, [pc, #572]	@ (8001c48 <HAL_RCC_OscConfig+0x288>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d06d      	beq.n	8001af0 <HAL_RCC_OscConfig+0x130>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d169      	bne.n	8001af0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	f000 bc21 	b.w	8002264 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a2a:	d106      	bne.n	8001a3a <HAL_RCC_OscConfig+0x7a>
 8001a2c:	4b86      	ldr	r3, [pc, #536]	@ (8001c48 <HAL_RCC_OscConfig+0x288>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a85      	ldr	r2, [pc, #532]	@ (8001c48 <HAL_RCC_OscConfig+0x288>)
 8001a32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	e02e      	b.n	8001a98 <HAL_RCC_OscConfig+0xd8>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10c      	bne.n	8001a5c <HAL_RCC_OscConfig+0x9c>
 8001a42:	4b81      	ldr	r3, [pc, #516]	@ (8001c48 <HAL_RCC_OscConfig+0x288>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a80      	ldr	r2, [pc, #512]	@ (8001c48 <HAL_RCC_OscConfig+0x288>)
 8001a48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	4b7e      	ldr	r3, [pc, #504]	@ (8001c48 <HAL_RCC_OscConfig+0x288>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a7d      	ldr	r2, [pc, #500]	@ (8001c48 <HAL_RCC_OscConfig+0x288>)
 8001a54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	e01d      	b.n	8001a98 <HAL_RCC_OscConfig+0xd8>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a64:	d10c      	bne.n	8001a80 <HAL_RCC_OscConfig+0xc0>
 8001a66:	4b78      	ldr	r3, [pc, #480]	@ (8001c48 <HAL_RCC_OscConfig+0x288>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a77      	ldr	r2, [pc, #476]	@ (8001c48 <HAL_RCC_OscConfig+0x288>)
 8001a6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	4b75      	ldr	r3, [pc, #468]	@ (8001c48 <HAL_RCC_OscConfig+0x288>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a74      	ldr	r2, [pc, #464]	@ (8001c48 <HAL_RCC_OscConfig+0x288>)
 8001a78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	e00b      	b.n	8001a98 <HAL_RCC_OscConfig+0xd8>
 8001a80:	4b71      	ldr	r3, [pc, #452]	@ (8001c48 <HAL_RCC_OscConfig+0x288>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a70      	ldr	r2, [pc, #448]	@ (8001c48 <HAL_RCC_OscConfig+0x288>)
 8001a86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a8a:	6013      	str	r3, [r2, #0]
 8001a8c:	4b6e      	ldr	r3, [pc, #440]	@ (8001c48 <HAL_RCC_OscConfig+0x288>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a6d      	ldr	r2, [pc, #436]	@ (8001c48 <HAL_RCC_OscConfig+0x288>)
 8001a92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d013      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa0:	f7ff fc52 	bl	8001348 <HAL_GetTick>
 8001aa4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa8:	f7ff fc4e 	bl	8001348 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b64      	cmp	r3, #100	@ 0x64
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e3d4      	b.n	8002264 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001aba:	4b63      	ldr	r3, [pc, #396]	@ (8001c48 <HAL_RCC_OscConfig+0x288>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0xe8>
 8001ac6:	e014      	b.n	8001af2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac8:	f7ff fc3e 	bl	8001348 <HAL_GetTick>
 8001acc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad0:	f7ff fc3a 	bl	8001348 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b64      	cmp	r3, #100	@ 0x64
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e3c0      	b.n	8002264 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ae2:	4b59      	ldr	r3, [pc, #356]	@ (8001c48 <HAL_RCC_OscConfig+0x288>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f0      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x110>
 8001aee:	e000      	b.n	8001af2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 80ca 	beq.w	8001c94 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b00:	4b51      	ldr	r3, [pc, #324]	@ (8001c48 <HAL_RCC_OscConfig+0x288>)
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b08:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b0a:	4b4f      	ldr	r3, [pc, #316]	@ (8001c48 <HAL_RCC_OscConfig+0x288>)
 8001b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b0e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001b10:	6a3b      	ldr	r3, [r7, #32]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d007      	beq.n	8001b26 <HAL_RCC_OscConfig+0x166>
 8001b16:	6a3b      	ldr	r3, [r7, #32]
 8001b18:	2b18      	cmp	r3, #24
 8001b1a:	d156      	bne.n	8001bca <HAL_RCC_OscConfig+0x20a>
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d151      	bne.n	8001bca <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b26:	4b48      	ldr	r3, [pc, #288]	@ (8001c48 <HAL_RCC_OscConfig+0x288>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d005      	beq.n	8001b3e <HAL_RCC_OscConfig+0x17e>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e392      	b.n	8002264 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b3e:	4b42      	ldr	r3, [pc, #264]	@ (8001c48 <HAL_RCC_OscConfig+0x288>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f023 0219 	bic.w	r2, r3, #25
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	493f      	ldr	r1, [pc, #252]	@ (8001c48 <HAL_RCC_OscConfig+0x288>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b50:	f7ff fbfa 	bl	8001348 <HAL_GetTick>
 8001b54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b58:	f7ff fbf6 	bl	8001348 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e37c      	b.n	8002264 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b6a:	4b37      	ldr	r3, [pc, #220]	@ (8001c48 <HAL_RCC_OscConfig+0x288>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0f0      	beq.n	8001b58 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b76:	f7ff fc17 	bl	80013a8 <HAL_GetREVID>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d817      	bhi.n	8001bb4 <HAL_RCC_OscConfig+0x1f4>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	2b40      	cmp	r3, #64	@ 0x40
 8001b8a:	d108      	bne.n	8001b9e <HAL_RCC_OscConfig+0x1de>
 8001b8c:	4b2e      	ldr	r3, [pc, #184]	@ (8001c48 <HAL_RCC_OscConfig+0x288>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001b94:	4a2c      	ldr	r2, [pc, #176]	@ (8001c48 <HAL_RCC_OscConfig+0x288>)
 8001b96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b9a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b9c:	e07a      	b.n	8001c94 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b9e:	4b2a      	ldr	r3, [pc, #168]	@ (8001c48 <HAL_RCC_OscConfig+0x288>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691b      	ldr	r3, [r3, #16]
 8001baa:	031b      	lsls	r3, r3, #12
 8001bac:	4926      	ldr	r1, [pc, #152]	@ (8001c48 <HAL_RCC_OscConfig+0x288>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bb2:	e06f      	b.n	8001c94 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb4:	4b24      	ldr	r3, [pc, #144]	@ (8001c48 <HAL_RCC_OscConfig+0x288>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	061b      	lsls	r3, r3, #24
 8001bc2:	4921      	ldr	r1, [pc, #132]	@ (8001c48 <HAL_RCC_OscConfig+0x288>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bc8:	e064      	b.n	8001c94 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d047      	beq.n	8001c62 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001bd2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c48 <HAL_RCC_OscConfig+0x288>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f023 0219 	bic.w	r2, r3, #25
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	491a      	ldr	r1, [pc, #104]	@ (8001c48 <HAL_RCC_OscConfig+0x288>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be4:	f7ff fbb0 	bl	8001348 <HAL_GetTick>
 8001be8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bec:	f7ff fbac 	bl	8001348 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e332      	b.n	8002264 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bfe:	4b12      	ldr	r3, [pc, #72]	@ (8001c48 <HAL_RCC_OscConfig+0x288>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0304 	and.w	r3, r3, #4
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c0a:	f7ff fbcd 	bl	80013a8 <HAL_GetREVID>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d819      	bhi.n	8001c4c <HAL_RCC_OscConfig+0x28c>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	2b40      	cmp	r3, #64	@ 0x40
 8001c1e:	d108      	bne.n	8001c32 <HAL_RCC_OscConfig+0x272>
 8001c20:	4b09      	ldr	r3, [pc, #36]	@ (8001c48 <HAL_RCC_OscConfig+0x288>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001c28:	4a07      	ldr	r2, [pc, #28]	@ (8001c48 <HAL_RCC_OscConfig+0x288>)
 8001c2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c2e:	6053      	str	r3, [r2, #4]
 8001c30:	e030      	b.n	8001c94 <HAL_RCC_OscConfig+0x2d4>
 8001c32:	4b05      	ldr	r3, [pc, #20]	@ (8001c48 <HAL_RCC_OscConfig+0x288>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	031b      	lsls	r3, r3, #12
 8001c40:	4901      	ldr	r1, [pc, #4]	@ (8001c48 <HAL_RCC_OscConfig+0x288>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	604b      	str	r3, [r1, #4]
 8001c46:	e025      	b.n	8001c94 <HAL_RCC_OscConfig+0x2d4>
 8001c48:	58024400 	.word	0x58024400
 8001c4c:	4b9a      	ldr	r3, [pc, #616]	@ (8001eb8 <HAL_RCC_OscConfig+0x4f8>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	061b      	lsls	r3, r3, #24
 8001c5a:	4997      	ldr	r1, [pc, #604]	@ (8001eb8 <HAL_RCC_OscConfig+0x4f8>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	604b      	str	r3, [r1, #4]
 8001c60:	e018      	b.n	8001c94 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c62:	4b95      	ldr	r3, [pc, #596]	@ (8001eb8 <HAL_RCC_OscConfig+0x4f8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a94      	ldr	r2, [pc, #592]	@ (8001eb8 <HAL_RCC_OscConfig+0x4f8>)
 8001c68:	f023 0301 	bic.w	r3, r3, #1
 8001c6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6e:	f7ff fb6b 	bl	8001348 <HAL_GetTick>
 8001c72:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c76:	f7ff fb67 	bl	8001348 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e2ed      	b.n	8002264 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c88:	4b8b      	ldr	r3, [pc, #556]	@ (8001eb8 <HAL_RCC_OscConfig+0x4f8>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1f0      	bne.n	8001c76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0310 	and.w	r3, r3, #16
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f000 80a9 	beq.w	8001df4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ca2:	4b85      	ldr	r3, [pc, #532]	@ (8001eb8 <HAL_RCC_OscConfig+0x4f8>)
 8001ca4:	691b      	ldr	r3, [r3, #16]
 8001ca6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001caa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001cac:	4b82      	ldr	r3, [pc, #520]	@ (8001eb8 <HAL_RCC_OscConfig+0x4f8>)
 8001cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d007      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x308>
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	2b18      	cmp	r3, #24
 8001cbc:	d13a      	bne.n	8001d34 <HAL_RCC_OscConfig+0x374>
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f003 0303 	and.w	r3, r3, #3
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d135      	bne.n	8001d34 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cc8:	4b7b      	ldr	r3, [pc, #492]	@ (8001eb8 <HAL_RCC_OscConfig+0x4f8>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d005      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x320>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	69db      	ldr	r3, [r3, #28]
 8001cd8:	2b80      	cmp	r3, #128	@ 0x80
 8001cda:	d001      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e2c1      	b.n	8002264 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ce0:	f7ff fb62 	bl	80013a8 <HAL_GetREVID>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d817      	bhi.n	8001d1e <HAL_RCC_OscConfig+0x35e>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	2b20      	cmp	r3, #32
 8001cf4:	d108      	bne.n	8001d08 <HAL_RCC_OscConfig+0x348>
 8001cf6:	4b70      	ldr	r3, [pc, #448]	@ (8001eb8 <HAL_RCC_OscConfig+0x4f8>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001cfe:	4a6e      	ldr	r2, [pc, #440]	@ (8001eb8 <HAL_RCC_OscConfig+0x4f8>)
 8001d00:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001d04:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d06:	e075      	b.n	8001df4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d08:	4b6b      	ldr	r3, [pc, #428]	@ (8001eb8 <HAL_RCC_OscConfig+0x4f8>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	069b      	lsls	r3, r3, #26
 8001d16:	4968      	ldr	r1, [pc, #416]	@ (8001eb8 <HAL_RCC_OscConfig+0x4f8>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d1c:	e06a      	b.n	8001df4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d1e:	4b66      	ldr	r3, [pc, #408]	@ (8001eb8 <HAL_RCC_OscConfig+0x4f8>)
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	061b      	lsls	r3, r3, #24
 8001d2c:	4962      	ldr	r1, [pc, #392]	@ (8001eb8 <HAL_RCC_OscConfig+0x4f8>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001d32:	e05f      	b.n	8001df4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69db      	ldr	r3, [r3, #28]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d042      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001d3c:	4b5e      	ldr	r3, [pc, #376]	@ (8001eb8 <HAL_RCC_OscConfig+0x4f8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a5d      	ldr	r2, [pc, #372]	@ (8001eb8 <HAL_RCC_OscConfig+0x4f8>)
 8001d42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d48:	f7ff fafe 	bl	8001348 <HAL_GetTick>
 8001d4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001d50:	f7ff fafa 	bl	8001348 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e280      	b.n	8002264 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d62:	4b55      	ldr	r3, [pc, #340]	@ (8001eb8 <HAL_RCC_OscConfig+0x4f8>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0f0      	beq.n	8001d50 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d6e:	f7ff fb1b 	bl	80013a8 <HAL_GetREVID>
 8001d72:	4603      	mov	r3, r0
 8001d74:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d817      	bhi.n	8001dac <HAL_RCC_OscConfig+0x3ec>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	2b20      	cmp	r3, #32
 8001d82:	d108      	bne.n	8001d96 <HAL_RCC_OscConfig+0x3d6>
 8001d84:	4b4c      	ldr	r3, [pc, #304]	@ (8001eb8 <HAL_RCC_OscConfig+0x4f8>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001d8c:	4a4a      	ldr	r2, [pc, #296]	@ (8001eb8 <HAL_RCC_OscConfig+0x4f8>)
 8001d8e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001d92:	6053      	str	r3, [r2, #4]
 8001d94:	e02e      	b.n	8001df4 <HAL_RCC_OscConfig+0x434>
 8001d96:	4b48      	ldr	r3, [pc, #288]	@ (8001eb8 <HAL_RCC_OscConfig+0x4f8>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	069b      	lsls	r3, r3, #26
 8001da4:	4944      	ldr	r1, [pc, #272]	@ (8001eb8 <HAL_RCC_OscConfig+0x4f8>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	604b      	str	r3, [r1, #4]
 8001daa:	e023      	b.n	8001df4 <HAL_RCC_OscConfig+0x434>
 8001dac:	4b42      	ldr	r3, [pc, #264]	@ (8001eb8 <HAL_RCC_OscConfig+0x4f8>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	061b      	lsls	r3, r3, #24
 8001dba:	493f      	ldr	r1, [pc, #252]	@ (8001eb8 <HAL_RCC_OscConfig+0x4f8>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	60cb      	str	r3, [r1, #12]
 8001dc0:	e018      	b.n	8001df4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001dc2:	4b3d      	ldr	r3, [pc, #244]	@ (8001eb8 <HAL_RCC_OscConfig+0x4f8>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a3c      	ldr	r2, [pc, #240]	@ (8001eb8 <HAL_RCC_OscConfig+0x4f8>)
 8001dc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001dcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dce:	f7ff fabb 	bl	8001348 <HAL_GetTick>
 8001dd2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001dd6:	f7ff fab7 	bl	8001348 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e23d      	b.n	8002264 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001de8:	4b33      	ldr	r3, [pc, #204]	@ (8001eb8 <HAL_RCC_OscConfig+0x4f8>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1f0      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0308 	and.w	r3, r3, #8
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d036      	beq.n	8001e6e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d019      	beq.n	8001e3c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e08:	4b2b      	ldr	r3, [pc, #172]	@ (8001eb8 <HAL_RCC_OscConfig+0x4f8>)
 8001e0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e0c:	4a2a      	ldr	r2, [pc, #168]	@ (8001eb8 <HAL_RCC_OscConfig+0x4f8>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e14:	f7ff fa98 	bl	8001348 <HAL_GetTick>
 8001e18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e1c:	f7ff fa94 	bl	8001348 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e21a      	b.n	8002264 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e2e:	4b22      	ldr	r3, [pc, #136]	@ (8001eb8 <HAL_RCC_OscConfig+0x4f8>)
 8001e30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0f0      	beq.n	8001e1c <HAL_RCC_OscConfig+0x45c>
 8001e3a:	e018      	b.n	8001e6e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb8 <HAL_RCC_OscConfig+0x4f8>)
 8001e3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e40:	4a1d      	ldr	r2, [pc, #116]	@ (8001eb8 <HAL_RCC_OscConfig+0x4f8>)
 8001e42:	f023 0301 	bic.w	r3, r3, #1
 8001e46:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e48:	f7ff fa7e 	bl	8001348 <HAL_GetTick>
 8001e4c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e4e:	e008      	b.n	8001e62 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e50:	f7ff fa7a 	bl	8001348 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e200      	b.n	8002264 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e62:	4b15      	ldr	r3, [pc, #84]	@ (8001eb8 <HAL_RCC_OscConfig+0x4f8>)
 8001e64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f0      	bne.n	8001e50 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0320 	and.w	r3, r3, #32
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d039      	beq.n	8001eee <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d01c      	beq.n	8001ebc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e82:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb8 <HAL_RCC_OscConfig+0x4f8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a0c      	ldr	r2, [pc, #48]	@ (8001eb8 <HAL_RCC_OscConfig+0x4f8>)
 8001e88:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e8c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e8e:	f7ff fa5b 	bl	8001348 <HAL_GetTick>
 8001e92:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e96:	f7ff fa57 	bl	8001348 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e1dd      	b.n	8002264 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ea8:	4b03      	ldr	r3, [pc, #12]	@ (8001eb8 <HAL_RCC_OscConfig+0x4f8>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0f0      	beq.n	8001e96 <HAL_RCC_OscConfig+0x4d6>
 8001eb4:	e01b      	b.n	8001eee <HAL_RCC_OscConfig+0x52e>
 8001eb6:	bf00      	nop
 8001eb8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ebc:	4b9b      	ldr	r3, [pc, #620]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a9a      	ldr	r2, [pc, #616]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 8001ec2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001ec6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ec8:	f7ff fa3e 	bl	8001348 <HAL_GetTick>
 8001ecc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ed0:	f7ff fa3a 	bl	8001348 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e1c0      	b.n	8002264 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ee2:	4b92      	ldr	r3, [pc, #584]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 8081 	beq.w	8001ffe <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001efc:	4b8c      	ldr	r3, [pc, #560]	@ (8002130 <HAL_RCC_OscConfig+0x770>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a8b      	ldr	r2, [pc, #556]	@ (8002130 <HAL_RCC_OscConfig+0x770>)
 8001f02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f08:	f7ff fa1e 	bl	8001348 <HAL_GetTick>
 8001f0c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f10:	f7ff fa1a 	bl	8001348 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b64      	cmp	r3, #100	@ 0x64
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e1a0      	b.n	8002264 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f22:	4b83      	ldr	r3, [pc, #524]	@ (8002130 <HAL_RCC_OscConfig+0x770>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d106      	bne.n	8001f44 <HAL_RCC_OscConfig+0x584>
 8001f36:	4b7d      	ldr	r3, [pc, #500]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 8001f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f3a:	4a7c      	ldr	r2, [pc, #496]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f42:	e02d      	b.n	8001fa0 <HAL_RCC_OscConfig+0x5e0>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10c      	bne.n	8001f66 <HAL_RCC_OscConfig+0x5a6>
 8001f4c:	4b77      	ldr	r3, [pc, #476]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 8001f4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f50:	4a76      	ldr	r2, [pc, #472]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 8001f52:	f023 0301 	bic.w	r3, r3, #1
 8001f56:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f58:	4b74      	ldr	r3, [pc, #464]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 8001f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f5c:	4a73      	ldr	r2, [pc, #460]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 8001f5e:	f023 0304 	bic.w	r3, r3, #4
 8001f62:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f64:	e01c      	b.n	8001fa0 <HAL_RCC_OscConfig+0x5e0>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2b05      	cmp	r3, #5
 8001f6c:	d10c      	bne.n	8001f88 <HAL_RCC_OscConfig+0x5c8>
 8001f6e:	4b6f      	ldr	r3, [pc, #444]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 8001f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f72:	4a6e      	ldr	r2, [pc, #440]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 8001f74:	f043 0304 	orr.w	r3, r3, #4
 8001f78:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f7a:	4b6c      	ldr	r3, [pc, #432]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 8001f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f7e:	4a6b      	ldr	r2, [pc, #428]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f86:	e00b      	b.n	8001fa0 <HAL_RCC_OscConfig+0x5e0>
 8001f88:	4b68      	ldr	r3, [pc, #416]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 8001f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f8c:	4a67      	ldr	r2, [pc, #412]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 8001f8e:	f023 0301 	bic.w	r3, r3, #1
 8001f92:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f94:	4b65      	ldr	r3, [pc, #404]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 8001f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f98:	4a64      	ldr	r2, [pc, #400]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 8001f9a:	f023 0304 	bic.w	r3, r3, #4
 8001f9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d015      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa8:	f7ff f9ce 	bl	8001348 <HAL_GetTick>
 8001fac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fae:	e00a      	b.n	8001fc6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb0:	f7ff f9ca 	bl	8001348 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e14e      	b.n	8002264 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fc6:	4b59      	ldr	r3, [pc, #356]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 8001fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0ee      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x5f0>
 8001fd2:	e014      	b.n	8001ffe <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd4:	f7ff f9b8 	bl	8001348 <HAL_GetTick>
 8001fd8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fda:	e00a      	b.n	8001ff2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fdc:	f7ff f9b4 	bl	8001348 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e138      	b.n	8002264 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ff2:	4b4e      	ldr	r3, [pc, #312]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 8001ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1ee      	bne.n	8001fdc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 812d 	beq.w	8002262 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002008:	4b48      	ldr	r3, [pc, #288]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002010:	2b18      	cmp	r3, #24
 8002012:	f000 80bd 	beq.w	8002190 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201a:	2b02      	cmp	r3, #2
 800201c:	f040 809e 	bne.w	800215c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002020:	4b42      	ldr	r3, [pc, #264]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a41      	ldr	r2, [pc, #260]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 8002026:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800202a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202c:	f7ff f98c 	bl	8001348 <HAL_GetTick>
 8002030:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002034:	f7ff f988 	bl	8001348 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e10e      	b.n	8002264 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002046:	4b39      	ldr	r3, [pc, #228]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002052:	4b36      	ldr	r3, [pc, #216]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 8002054:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002056:	4b37      	ldr	r3, [pc, #220]	@ (8002134 <HAL_RCC_OscConfig+0x774>)
 8002058:	4013      	ands	r3, r2
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002062:	0112      	lsls	r2, r2, #4
 8002064:	430a      	orrs	r2, r1
 8002066:	4931      	ldr	r1, [pc, #196]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 8002068:	4313      	orrs	r3, r2
 800206a:	628b      	str	r3, [r1, #40]	@ 0x28
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002070:	3b01      	subs	r3, #1
 8002072:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800207a:	3b01      	subs	r3, #1
 800207c:	025b      	lsls	r3, r3, #9
 800207e:	b29b      	uxth	r3, r3
 8002080:	431a      	orrs	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002086:	3b01      	subs	r3, #1
 8002088:	041b      	lsls	r3, r3, #16
 800208a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002094:	3b01      	subs	r3, #1
 8002096:	061b      	lsls	r3, r3, #24
 8002098:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800209c:	4923      	ldr	r1, [pc, #140]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80020a2:	4b22      	ldr	r3, [pc, #136]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 80020a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a6:	4a21      	ldr	r2, [pc, #132]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 80020a8:	f023 0301 	bic.w	r3, r3, #1
 80020ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80020ae:	4b1f      	ldr	r3, [pc, #124]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 80020b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020b2:	4b21      	ldr	r3, [pc, #132]	@ (8002138 <HAL_RCC_OscConfig+0x778>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80020ba:	00d2      	lsls	r2, r2, #3
 80020bc:	491b      	ldr	r1, [pc, #108]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80020c2:	4b1a      	ldr	r3, [pc, #104]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 80020c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c6:	f023 020c 	bic.w	r2, r3, #12
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ce:	4917      	ldr	r1, [pc, #92]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80020d4:	4b15      	ldr	r3, [pc, #84]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 80020d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d8:	f023 0202 	bic.w	r2, r3, #2
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e0:	4912      	ldr	r1, [pc, #72]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80020e6:	4b11      	ldr	r3, [pc, #68]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 80020e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ea:	4a10      	ldr	r2, [pc, #64]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 80020ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020f2:	4b0e      	ldr	r3, [pc, #56]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 80020f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f6:	4a0d      	ldr	r2, [pc, #52]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 80020f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80020fe:	4b0b      	ldr	r3, [pc, #44]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 8002100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002102:	4a0a      	ldr	r2, [pc, #40]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 8002104:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002108:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800210a:	4b08      	ldr	r3, [pc, #32]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 800210c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800210e:	4a07      	ldr	r2, [pc, #28]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002116:	4b05      	ldr	r3, [pc, #20]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a04      	ldr	r2, [pc, #16]	@ (800212c <HAL_RCC_OscConfig+0x76c>)
 800211c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002120:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002122:	f7ff f911 	bl	8001348 <HAL_GetTick>
 8002126:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002128:	e011      	b.n	800214e <HAL_RCC_OscConfig+0x78e>
 800212a:	bf00      	nop
 800212c:	58024400 	.word	0x58024400
 8002130:	58024800 	.word	0x58024800
 8002134:	fffffc0c 	.word	0xfffffc0c
 8002138:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800213c:	f7ff f904 	bl	8001348 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e08a      	b.n	8002264 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800214e:	4b47      	ldr	r3, [pc, #284]	@ (800226c <HAL_RCC_OscConfig+0x8ac>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0f0      	beq.n	800213c <HAL_RCC_OscConfig+0x77c>
 800215a:	e082      	b.n	8002262 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800215c:	4b43      	ldr	r3, [pc, #268]	@ (800226c <HAL_RCC_OscConfig+0x8ac>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a42      	ldr	r2, [pc, #264]	@ (800226c <HAL_RCC_OscConfig+0x8ac>)
 8002162:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002168:	f7ff f8ee 	bl	8001348 <HAL_GetTick>
 800216c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002170:	f7ff f8ea 	bl	8001348 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e070      	b.n	8002264 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002182:	4b3a      	ldr	r3, [pc, #232]	@ (800226c <HAL_RCC_OscConfig+0x8ac>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f0      	bne.n	8002170 <HAL_RCC_OscConfig+0x7b0>
 800218e:	e068      	b.n	8002262 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002190:	4b36      	ldr	r3, [pc, #216]	@ (800226c <HAL_RCC_OscConfig+0x8ac>)
 8002192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002194:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002196:	4b35      	ldr	r3, [pc, #212]	@ (800226c <HAL_RCC_OscConfig+0x8ac>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d031      	beq.n	8002208 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	f003 0203 	and.w	r2, r3, #3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d12a      	bne.n	8002208 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	091b      	lsrs	r3, r3, #4
 80021b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021be:	429a      	cmp	r2, r3
 80021c0:	d122      	bne.n	8002208 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d11a      	bne.n	8002208 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	0a5b      	lsrs	r3, r3, #9
 80021d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021de:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d111      	bne.n	8002208 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	0c1b      	lsrs	r3, r3, #16
 80021e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d108      	bne.n	8002208 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	0e1b      	lsrs	r3, r3, #24
 80021fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002202:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002204:	429a      	cmp	r2, r3
 8002206:	d001      	beq.n	800220c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e02b      	b.n	8002264 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800220c:	4b17      	ldr	r3, [pc, #92]	@ (800226c <HAL_RCC_OscConfig+0x8ac>)
 800220e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002210:	08db      	lsrs	r3, r3, #3
 8002212:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002216:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	429a      	cmp	r2, r3
 8002220:	d01f      	beq.n	8002262 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002222:	4b12      	ldr	r3, [pc, #72]	@ (800226c <HAL_RCC_OscConfig+0x8ac>)
 8002224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002226:	4a11      	ldr	r2, [pc, #68]	@ (800226c <HAL_RCC_OscConfig+0x8ac>)
 8002228:	f023 0301 	bic.w	r3, r3, #1
 800222c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800222e:	f7ff f88b 	bl	8001348 <HAL_GetTick>
 8002232:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002234:	bf00      	nop
 8002236:	f7ff f887 	bl	8001348 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223e:	4293      	cmp	r3, r2
 8002240:	d0f9      	beq.n	8002236 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002242:	4b0a      	ldr	r3, [pc, #40]	@ (800226c <HAL_RCC_OscConfig+0x8ac>)
 8002244:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002246:	4b0a      	ldr	r3, [pc, #40]	@ (8002270 <HAL_RCC_OscConfig+0x8b0>)
 8002248:	4013      	ands	r3, r2
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800224e:	00d2      	lsls	r2, r2, #3
 8002250:	4906      	ldr	r1, [pc, #24]	@ (800226c <HAL_RCC_OscConfig+0x8ac>)
 8002252:	4313      	orrs	r3, r2
 8002254:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002256:	4b05      	ldr	r3, [pc, #20]	@ (800226c <HAL_RCC_OscConfig+0x8ac>)
 8002258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800225a:	4a04      	ldr	r2, [pc, #16]	@ (800226c <HAL_RCC_OscConfig+0x8ac>)
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3730      	adds	r7, #48	@ 0x30
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	58024400 	.word	0x58024400
 8002270:	ffff0007 	.word	0xffff0007

08002274 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d101      	bne.n	8002288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e19c      	b.n	80025c2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002288:	4b8a      	ldr	r3, [pc, #552]	@ (80024b4 <HAL_RCC_ClockConfig+0x240>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 030f 	and.w	r3, r3, #15
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	429a      	cmp	r2, r3
 8002294:	d910      	bls.n	80022b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002296:	4b87      	ldr	r3, [pc, #540]	@ (80024b4 <HAL_RCC_ClockConfig+0x240>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f023 020f 	bic.w	r2, r3, #15
 800229e:	4985      	ldr	r1, [pc, #532]	@ (80024b4 <HAL_RCC_ClockConfig+0x240>)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022a6:	4b83      	ldr	r3, [pc, #524]	@ (80024b4 <HAL_RCC_ClockConfig+0x240>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d001      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e184      	b.n	80025c2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d010      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691a      	ldr	r2, [r3, #16]
 80022c8:	4b7b      	ldr	r3, [pc, #492]	@ (80024b8 <HAL_RCC_ClockConfig+0x244>)
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d908      	bls.n	80022e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022d4:	4b78      	ldr	r3, [pc, #480]	@ (80024b8 <HAL_RCC_ClockConfig+0x244>)
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	4975      	ldr	r1, [pc, #468]	@ (80024b8 <HAL_RCC_ClockConfig+0x244>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d010      	beq.n	8002314 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	695a      	ldr	r2, [r3, #20]
 80022f6:	4b70      	ldr	r3, [pc, #448]	@ (80024b8 <HAL_RCC_ClockConfig+0x244>)
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022fe:	429a      	cmp	r2, r3
 8002300:	d908      	bls.n	8002314 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002302:	4b6d      	ldr	r3, [pc, #436]	@ (80024b8 <HAL_RCC_ClockConfig+0x244>)
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	496a      	ldr	r1, [pc, #424]	@ (80024b8 <HAL_RCC_ClockConfig+0x244>)
 8002310:	4313      	orrs	r3, r2
 8002312:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0310 	and.w	r3, r3, #16
 800231c:	2b00      	cmp	r3, #0
 800231e:	d010      	beq.n	8002342 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	699a      	ldr	r2, [r3, #24]
 8002324:	4b64      	ldr	r3, [pc, #400]	@ (80024b8 <HAL_RCC_ClockConfig+0x244>)
 8002326:	69db      	ldr	r3, [r3, #28]
 8002328:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800232c:	429a      	cmp	r2, r3
 800232e:	d908      	bls.n	8002342 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002330:	4b61      	ldr	r3, [pc, #388]	@ (80024b8 <HAL_RCC_ClockConfig+0x244>)
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	495e      	ldr	r1, [pc, #376]	@ (80024b8 <HAL_RCC_ClockConfig+0x244>)
 800233e:	4313      	orrs	r3, r2
 8002340:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0320 	and.w	r3, r3, #32
 800234a:	2b00      	cmp	r3, #0
 800234c:	d010      	beq.n	8002370 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69da      	ldr	r2, [r3, #28]
 8002352:	4b59      	ldr	r3, [pc, #356]	@ (80024b8 <HAL_RCC_ClockConfig+0x244>)
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800235a:	429a      	cmp	r2, r3
 800235c:	d908      	bls.n	8002370 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800235e:	4b56      	ldr	r3, [pc, #344]	@ (80024b8 <HAL_RCC_ClockConfig+0x244>)
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	4953      	ldr	r1, [pc, #332]	@ (80024b8 <HAL_RCC_ClockConfig+0x244>)
 800236c:	4313      	orrs	r3, r2
 800236e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d010      	beq.n	800239e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68da      	ldr	r2, [r3, #12]
 8002380:	4b4d      	ldr	r3, [pc, #308]	@ (80024b8 <HAL_RCC_ClockConfig+0x244>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	f003 030f 	and.w	r3, r3, #15
 8002388:	429a      	cmp	r2, r3
 800238a:	d908      	bls.n	800239e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800238c:	4b4a      	ldr	r3, [pc, #296]	@ (80024b8 <HAL_RCC_ClockConfig+0x244>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	f023 020f 	bic.w	r2, r3, #15
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	4947      	ldr	r1, [pc, #284]	@ (80024b8 <HAL_RCC_ClockConfig+0x244>)
 800239a:	4313      	orrs	r3, r2
 800239c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d055      	beq.n	8002456 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80023aa:	4b43      	ldr	r3, [pc, #268]	@ (80024b8 <HAL_RCC_ClockConfig+0x244>)
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	4940      	ldr	r1, [pc, #256]	@ (80024b8 <HAL_RCC_ClockConfig+0x244>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d107      	bne.n	80023d4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023c4:	4b3c      	ldr	r3, [pc, #240]	@ (80024b8 <HAL_RCC_ClockConfig+0x244>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d121      	bne.n	8002414 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e0f6      	b.n	80025c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b03      	cmp	r3, #3
 80023da:	d107      	bne.n	80023ec <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80023dc:	4b36      	ldr	r3, [pc, #216]	@ (80024b8 <HAL_RCC_ClockConfig+0x244>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d115      	bne.n	8002414 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e0ea      	b.n	80025c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d107      	bne.n	8002404 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80023f4:	4b30      	ldr	r3, [pc, #192]	@ (80024b8 <HAL_RCC_ClockConfig+0x244>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d109      	bne.n	8002414 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e0de      	b.n	80025c2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002404:	4b2c      	ldr	r3, [pc, #176]	@ (80024b8 <HAL_RCC_ClockConfig+0x244>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0d6      	b.n	80025c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002414:	4b28      	ldr	r3, [pc, #160]	@ (80024b8 <HAL_RCC_ClockConfig+0x244>)
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	f023 0207 	bic.w	r2, r3, #7
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	4925      	ldr	r1, [pc, #148]	@ (80024b8 <HAL_RCC_ClockConfig+0x244>)
 8002422:	4313      	orrs	r3, r2
 8002424:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002426:	f7fe ff8f 	bl	8001348 <HAL_GetTick>
 800242a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242c:	e00a      	b.n	8002444 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800242e:	f7fe ff8b 	bl	8001348 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	f241 3288 	movw	r2, #5000	@ 0x1388
 800243c:	4293      	cmp	r3, r2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e0be      	b.n	80025c2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002444:	4b1c      	ldr	r3, [pc, #112]	@ (80024b8 <HAL_RCC_ClockConfig+0x244>)
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	429a      	cmp	r2, r3
 8002454:	d1eb      	bne.n	800242e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d010      	beq.n	8002484 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	4b14      	ldr	r3, [pc, #80]	@ (80024b8 <HAL_RCC_ClockConfig+0x244>)
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	429a      	cmp	r2, r3
 8002470:	d208      	bcs.n	8002484 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002472:	4b11      	ldr	r3, [pc, #68]	@ (80024b8 <HAL_RCC_ClockConfig+0x244>)
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	f023 020f 	bic.w	r2, r3, #15
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	490e      	ldr	r1, [pc, #56]	@ (80024b8 <HAL_RCC_ClockConfig+0x244>)
 8002480:	4313      	orrs	r3, r2
 8002482:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002484:	4b0b      	ldr	r3, [pc, #44]	@ (80024b4 <HAL_RCC_ClockConfig+0x240>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 030f 	and.w	r3, r3, #15
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d214      	bcs.n	80024bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002492:	4b08      	ldr	r3, [pc, #32]	@ (80024b4 <HAL_RCC_ClockConfig+0x240>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f023 020f 	bic.w	r2, r3, #15
 800249a:	4906      	ldr	r1, [pc, #24]	@ (80024b4 <HAL_RCC_ClockConfig+0x240>)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	4313      	orrs	r3, r2
 80024a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a2:	4b04      	ldr	r3, [pc, #16]	@ (80024b4 <HAL_RCC_ClockConfig+0x240>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d005      	beq.n	80024bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e086      	b.n	80025c2 <HAL_RCC_ClockConfig+0x34e>
 80024b4:	52002000 	.word	0x52002000
 80024b8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d010      	beq.n	80024ea <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691a      	ldr	r2, [r3, #16]
 80024cc:	4b3f      	ldr	r3, [pc, #252]	@ (80025cc <HAL_RCC_ClockConfig+0x358>)
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d208      	bcs.n	80024ea <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80024d8:	4b3c      	ldr	r3, [pc, #240]	@ (80025cc <HAL_RCC_ClockConfig+0x358>)
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	4939      	ldr	r1, [pc, #228]	@ (80025cc <HAL_RCC_ClockConfig+0x358>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d010      	beq.n	8002518 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	695a      	ldr	r2, [r3, #20]
 80024fa:	4b34      	ldr	r3, [pc, #208]	@ (80025cc <HAL_RCC_ClockConfig+0x358>)
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002502:	429a      	cmp	r2, r3
 8002504:	d208      	bcs.n	8002518 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002506:	4b31      	ldr	r3, [pc, #196]	@ (80025cc <HAL_RCC_ClockConfig+0x358>)
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	492e      	ldr	r1, [pc, #184]	@ (80025cc <HAL_RCC_ClockConfig+0x358>)
 8002514:	4313      	orrs	r3, r2
 8002516:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0310 	and.w	r3, r3, #16
 8002520:	2b00      	cmp	r3, #0
 8002522:	d010      	beq.n	8002546 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	699a      	ldr	r2, [r3, #24]
 8002528:	4b28      	ldr	r3, [pc, #160]	@ (80025cc <HAL_RCC_ClockConfig+0x358>)
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002530:	429a      	cmp	r2, r3
 8002532:	d208      	bcs.n	8002546 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002534:	4b25      	ldr	r3, [pc, #148]	@ (80025cc <HAL_RCC_ClockConfig+0x358>)
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	4922      	ldr	r1, [pc, #136]	@ (80025cc <HAL_RCC_ClockConfig+0x358>)
 8002542:	4313      	orrs	r3, r2
 8002544:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0320 	and.w	r3, r3, #32
 800254e:	2b00      	cmp	r3, #0
 8002550:	d010      	beq.n	8002574 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69da      	ldr	r2, [r3, #28]
 8002556:	4b1d      	ldr	r3, [pc, #116]	@ (80025cc <HAL_RCC_ClockConfig+0x358>)
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800255e:	429a      	cmp	r2, r3
 8002560:	d208      	bcs.n	8002574 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002562:	4b1a      	ldr	r3, [pc, #104]	@ (80025cc <HAL_RCC_ClockConfig+0x358>)
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	4917      	ldr	r1, [pc, #92]	@ (80025cc <HAL_RCC_ClockConfig+0x358>)
 8002570:	4313      	orrs	r3, r2
 8002572:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002574:	f000 f834 	bl	80025e0 <HAL_RCC_GetSysClockFreq>
 8002578:	4602      	mov	r2, r0
 800257a:	4b14      	ldr	r3, [pc, #80]	@ (80025cc <HAL_RCC_ClockConfig+0x358>)
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	0a1b      	lsrs	r3, r3, #8
 8002580:	f003 030f 	and.w	r3, r3, #15
 8002584:	4912      	ldr	r1, [pc, #72]	@ (80025d0 <HAL_RCC_ClockConfig+0x35c>)
 8002586:	5ccb      	ldrb	r3, [r1, r3]
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	fa22 f303 	lsr.w	r3, r2, r3
 8002590:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002592:	4b0e      	ldr	r3, [pc, #56]	@ (80025cc <HAL_RCC_ClockConfig+0x358>)
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	4a0d      	ldr	r2, [pc, #52]	@ (80025d0 <HAL_RCC_ClockConfig+0x35c>)
 800259c:	5cd3      	ldrb	r3, [r2, r3]
 800259e:	f003 031f 	and.w	r3, r3, #31
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	fa22 f303 	lsr.w	r3, r2, r3
 80025a8:	4a0a      	ldr	r2, [pc, #40]	@ (80025d4 <HAL_RCC_ClockConfig+0x360>)
 80025aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80025ac:	4a0a      	ldr	r2, [pc, #40]	@ (80025d8 <HAL_RCC_ClockConfig+0x364>)
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80025b2:	4b0a      	ldr	r3, [pc, #40]	@ (80025dc <HAL_RCC_ClockConfig+0x368>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe fe7c 	bl	80012b4 <HAL_InitTick>
 80025bc:	4603      	mov	r3, r0
 80025be:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	58024400 	.word	0x58024400
 80025d0:	08007d90 	.word	0x08007d90
 80025d4:	24000004 	.word	0x24000004
 80025d8:	24000000 	.word	0x24000000
 80025dc:	24000008 	.word	0x24000008

080025e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b089      	sub	sp, #36	@ 0x24
 80025e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025e6:	4bb3      	ldr	r3, [pc, #716]	@ (80028b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025ee:	2b18      	cmp	r3, #24
 80025f0:	f200 8155 	bhi.w	800289e <HAL_RCC_GetSysClockFreq+0x2be>
 80025f4:	a201      	add	r2, pc, #4	@ (adr r2, 80025fc <HAL_RCC_GetSysClockFreq+0x1c>)
 80025f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025fa:	bf00      	nop
 80025fc:	08002661 	.word	0x08002661
 8002600:	0800289f 	.word	0x0800289f
 8002604:	0800289f 	.word	0x0800289f
 8002608:	0800289f 	.word	0x0800289f
 800260c:	0800289f 	.word	0x0800289f
 8002610:	0800289f 	.word	0x0800289f
 8002614:	0800289f 	.word	0x0800289f
 8002618:	0800289f 	.word	0x0800289f
 800261c:	08002687 	.word	0x08002687
 8002620:	0800289f 	.word	0x0800289f
 8002624:	0800289f 	.word	0x0800289f
 8002628:	0800289f 	.word	0x0800289f
 800262c:	0800289f 	.word	0x0800289f
 8002630:	0800289f 	.word	0x0800289f
 8002634:	0800289f 	.word	0x0800289f
 8002638:	0800289f 	.word	0x0800289f
 800263c:	0800268d 	.word	0x0800268d
 8002640:	0800289f 	.word	0x0800289f
 8002644:	0800289f 	.word	0x0800289f
 8002648:	0800289f 	.word	0x0800289f
 800264c:	0800289f 	.word	0x0800289f
 8002650:	0800289f 	.word	0x0800289f
 8002654:	0800289f 	.word	0x0800289f
 8002658:	0800289f 	.word	0x0800289f
 800265c:	08002693 	.word	0x08002693
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002660:	4b94      	ldr	r3, [pc, #592]	@ (80028b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0320 	and.w	r3, r3, #32
 8002668:	2b00      	cmp	r3, #0
 800266a:	d009      	beq.n	8002680 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800266c:	4b91      	ldr	r3, [pc, #580]	@ (80028b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	08db      	lsrs	r3, r3, #3
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	4a90      	ldr	r2, [pc, #576]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002678:	fa22 f303 	lsr.w	r3, r2, r3
 800267c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800267e:	e111      	b.n	80028a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002680:	4b8d      	ldr	r3, [pc, #564]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002682:	61bb      	str	r3, [r7, #24]
      break;
 8002684:	e10e      	b.n	80028a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002686:	4b8d      	ldr	r3, [pc, #564]	@ (80028bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002688:	61bb      	str	r3, [r7, #24]
      break;
 800268a:	e10b      	b.n	80028a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800268c:	4b8c      	ldr	r3, [pc, #560]	@ (80028c0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800268e:	61bb      	str	r3, [r7, #24]
      break;
 8002690:	e108      	b.n	80028a4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002692:	4b88      	ldr	r3, [pc, #544]	@ (80028b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800269c:	4b85      	ldr	r3, [pc, #532]	@ (80028b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800269e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a0:	091b      	lsrs	r3, r3, #4
 80026a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026a6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80026a8:	4b82      	ldr	r3, [pc, #520]	@ (80028b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80026b2:	4b80      	ldr	r3, [pc, #512]	@ (80028b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026b6:	08db      	lsrs	r3, r3, #3
 80026b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	fb02 f303 	mul.w	r3, r2, r3
 80026c2:	ee07 3a90 	vmov	s15, r3
 80026c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ca:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 80e1 	beq.w	8002898 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	2b02      	cmp	r3, #2
 80026da:	f000 8083 	beq.w	80027e4 <HAL_RCC_GetSysClockFreq+0x204>
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	f200 80a1 	bhi.w	8002828 <HAL_RCC_GetSysClockFreq+0x248>
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <HAL_RCC_GetSysClockFreq+0x114>
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d056      	beq.n	80027a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 80026f2:	e099      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026f4:	4b6f      	ldr	r3, [pc, #444]	@ (80028b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0320 	and.w	r3, r3, #32
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d02d      	beq.n	800275c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002700:	4b6c      	ldr	r3, [pc, #432]	@ (80028b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	08db      	lsrs	r3, r3, #3
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	4a6b      	ldr	r2, [pc, #428]	@ (80028b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800270c:	fa22 f303 	lsr.w	r3, r2, r3
 8002710:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	ee07 3a90 	vmov	s15, r3
 8002718:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	ee07 3a90 	vmov	s15, r3
 8002722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800272a:	4b62      	ldr	r3, [pc, #392]	@ (80028b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002732:	ee07 3a90 	vmov	s15, r3
 8002736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800273a:	ed97 6a02 	vldr	s12, [r7, #8]
 800273e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80028c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800274a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800274e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002756:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800275a:	e087      	b.n	800286c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	ee07 3a90 	vmov	s15, r3
 8002762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002766:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80028c8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800276a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800276e:	4b51      	ldr	r3, [pc, #324]	@ (80028b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002776:	ee07 3a90 	vmov	s15, r3
 800277a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800277e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002782:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80028c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800278a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800278e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800279a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800279e:	e065      	b.n	800286c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	ee07 3a90 	vmov	s15, r3
 80027a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027aa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80028cc <HAL_RCC_GetSysClockFreq+0x2ec>
 80027ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027b2:	4b40      	ldr	r3, [pc, #256]	@ (80028b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ba:	ee07 3a90 	vmov	s15, r3
 80027be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80027c6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80028c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80027e2:	e043      	b.n	800286c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	ee07 3a90 	vmov	s15, r3
 80027ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ee:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80028d0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80027f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027f6:	4b2f      	ldr	r3, [pc, #188]	@ (80028b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027fe:	ee07 3a90 	vmov	s15, r3
 8002802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002806:	ed97 6a02 	vldr	s12, [r7, #8]
 800280a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80028c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800280e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002816:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800281a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800281e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002822:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002826:	e021      	b.n	800286c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	ee07 3a90 	vmov	s15, r3
 800282e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002832:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80028cc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800283a:	4b1e      	ldr	r3, [pc, #120]	@ (80028b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002842:	ee07 3a90 	vmov	s15, r3
 8002846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800284a:	ed97 6a02 	vldr	s12, [r7, #8]
 800284e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80028c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800285a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800285e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002866:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800286a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800286c:	4b11      	ldr	r3, [pc, #68]	@ (80028b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800286e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002870:	0a5b      	lsrs	r3, r3, #9
 8002872:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002876:	3301      	adds	r3, #1
 8002878:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	ee07 3a90 	vmov	s15, r3
 8002880:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002884:	edd7 6a07 	vldr	s13, [r7, #28]
 8002888:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800288c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002890:	ee17 3a90 	vmov	r3, s15
 8002894:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002896:	e005      	b.n	80028a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002898:	2300      	movs	r3, #0
 800289a:	61bb      	str	r3, [r7, #24]
      break;
 800289c:	e002      	b.n	80028a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800289e:	4b07      	ldr	r3, [pc, #28]	@ (80028bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80028a0:	61bb      	str	r3, [r7, #24]
      break;
 80028a2:	bf00      	nop
  }

  return sysclockfreq;
 80028a4:	69bb      	ldr	r3, [r7, #24]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3724      	adds	r7, #36	@ 0x24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	58024400 	.word	0x58024400
 80028b8:	03d09000 	.word	0x03d09000
 80028bc:	003d0900 	.word	0x003d0900
 80028c0:	007a1200 	.word	0x007a1200
 80028c4:	46000000 	.word	0x46000000
 80028c8:	4c742400 	.word	0x4c742400
 80028cc:	4a742400 	.word	0x4a742400
 80028d0:	4af42400 	.word	0x4af42400

080028d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80028da:	f7ff fe81 	bl	80025e0 <HAL_RCC_GetSysClockFreq>
 80028de:	4602      	mov	r2, r0
 80028e0:	4b10      	ldr	r3, [pc, #64]	@ (8002924 <HAL_RCC_GetHCLKFreq+0x50>)
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	0a1b      	lsrs	r3, r3, #8
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	490f      	ldr	r1, [pc, #60]	@ (8002928 <HAL_RCC_GetHCLKFreq+0x54>)
 80028ec:	5ccb      	ldrb	r3, [r1, r3]
 80028ee:	f003 031f 	and.w	r3, r3, #31
 80028f2:	fa22 f303 	lsr.w	r3, r2, r3
 80028f6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002924 <HAL_RCC_GetHCLKFreq+0x50>)
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	f003 030f 	and.w	r3, r3, #15
 8002900:	4a09      	ldr	r2, [pc, #36]	@ (8002928 <HAL_RCC_GetHCLKFreq+0x54>)
 8002902:	5cd3      	ldrb	r3, [r2, r3]
 8002904:	f003 031f 	and.w	r3, r3, #31
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	fa22 f303 	lsr.w	r3, r2, r3
 800290e:	4a07      	ldr	r2, [pc, #28]	@ (800292c <HAL_RCC_GetHCLKFreq+0x58>)
 8002910:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002912:	4a07      	ldr	r2, [pc, #28]	@ (8002930 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002918:	4b04      	ldr	r3, [pc, #16]	@ (800292c <HAL_RCC_GetHCLKFreq+0x58>)
 800291a:	681b      	ldr	r3, [r3, #0]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	58024400 	.word	0x58024400
 8002928:	08007d90 	.word	0x08007d90
 800292c:	24000004 	.word	0x24000004
 8002930:	24000000 	.word	0x24000000

08002934 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002938:	f7ff ffcc 	bl	80028d4 <HAL_RCC_GetHCLKFreq>
 800293c:	4602      	mov	r2, r0
 800293e:	4b06      	ldr	r3, [pc, #24]	@ (8002958 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	091b      	lsrs	r3, r3, #4
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	4904      	ldr	r1, [pc, #16]	@ (800295c <HAL_RCC_GetPCLK1Freq+0x28>)
 800294a:	5ccb      	ldrb	r3, [r1, r3]
 800294c:	f003 031f 	and.w	r3, r3, #31
 8002950:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002954:	4618      	mov	r0, r3
 8002956:	bd80      	pop	{r7, pc}
 8002958:	58024400 	.word	0x58024400
 800295c:	08007d90 	.word	0x08007d90

08002960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002964:	f7ff ffb6 	bl	80028d4 <HAL_RCC_GetHCLKFreq>
 8002968:	4602      	mov	r2, r0
 800296a:	4b06      	ldr	r3, [pc, #24]	@ (8002984 <HAL_RCC_GetPCLK2Freq+0x24>)
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	0a1b      	lsrs	r3, r3, #8
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	4904      	ldr	r1, [pc, #16]	@ (8002988 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002976:	5ccb      	ldrb	r3, [r1, r3]
 8002978:	f003 031f 	and.w	r3, r3, #31
 800297c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002980:	4618      	mov	r0, r3
 8002982:	bd80      	pop	{r7, pc}
 8002984:	58024400 	.word	0x58024400
 8002988:	08007d90 	.word	0x08007d90

0800298c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800298c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002990:	b0ca      	sub	sp, #296	@ 0x128
 8002992:	af00      	add	r7, sp, #0
 8002994:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002998:	2300      	movs	r3, #0
 800299a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800299e:	2300      	movs	r3, #0
 80029a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ac:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80029b0:	2500      	movs	r5, #0
 80029b2:	ea54 0305 	orrs.w	r3, r4, r5
 80029b6:	d049      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80029b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80029c2:	d02f      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80029c4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80029c8:	d828      	bhi.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80029ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029ce:	d01a      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80029d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029d4:	d822      	bhi.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80029da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029de:	d007      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80029e0:	e01c      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029e2:	4bb8      	ldr	r3, [pc, #736]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e6:	4ab7      	ldr	r2, [pc, #732]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80029ee:	e01a      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80029f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029f4:	3308      	adds	r3, #8
 80029f6:	2102      	movs	r1, #2
 80029f8:	4618      	mov	r0, r3
 80029fa:	f001 fc8f 	bl	800431c <RCCEx_PLL2_Config>
 80029fe:	4603      	mov	r3, r0
 8002a00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002a04:	e00f      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a0a:	3328      	adds	r3, #40	@ 0x28
 8002a0c:	2102      	movs	r1, #2
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f001 fd36 	bl	8004480 <RCCEx_PLL3_Config>
 8002a14:	4603      	mov	r3, r0
 8002a16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002a1a:	e004      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a22:	e000      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002a24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10a      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002a2e:	4ba5      	ldr	r3, [pc, #660]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a32:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a3c:	4aa1      	ldr	r2, [pc, #644]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a3e:	430b      	orrs	r3, r1
 8002a40:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a42:	e003      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a54:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002a58:	f04f 0900 	mov.w	r9, #0
 8002a5c:	ea58 0309 	orrs.w	r3, r8, r9
 8002a60:	d047      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a68:	2b04      	cmp	r3, #4
 8002a6a:	d82a      	bhi.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002a6c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a74 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a72:	bf00      	nop
 8002a74:	08002a89 	.word	0x08002a89
 8002a78:	08002a97 	.word	0x08002a97
 8002a7c:	08002aad 	.word	0x08002aad
 8002a80:	08002acb 	.word	0x08002acb
 8002a84:	08002acb 	.word	0x08002acb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a88:	4b8e      	ldr	r3, [pc, #568]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8c:	4a8d      	ldr	r2, [pc, #564]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a94:	e01a      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a9a:	3308      	adds	r3, #8
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f001 fc3c 	bl	800431c <RCCEx_PLL2_Config>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002aaa:	e00f      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ab0:	3328      	adds	r3, #40	@ 0x28
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f001 fce3 	bl	8004480 <RCCEx_PLL3_Config>
 8002aba:	4603      	mov	r3, r0
 8002abc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ac0:	e004      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ac8:	e000      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002aca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002acc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10a      	bne.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ad4:	4b7b      	ldr	r3, [pc, #492]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ad6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ad8:	f023 0107 	bic.w	r1, r3, #7
 8002adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae2:	4a78      	ldr	r2, [pc, #480]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ae4:	430b      	orrs	r3, r1
 8002ae6:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ae8:	e003      	b.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002aee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afa:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002afe:	f04f 0b00 	mov.w	fp, #0
 8002b02:	ea5a 030b 	orrs.w	r3, sl, fp
 8002b06:	d04c      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b12:	d030      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002b14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b18:	d829      	bhi.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002b1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002b1c:	d02d      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002b1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002b20:	d825      	bhi.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002b22:	2b80      	cmp	r3, #128	@ 0x80
 8002b24:	d018      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002b26:	2b80      	cmp	r3, #128	@ 0x80
 8002b28:	d821      	bhi.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002b2e:	2b40      	cmp	r3, #64	@ 0x40
 8002b30:	d007      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002b32:	e01c      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b34:	4b63      	ldr	r3, [pc, #396]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b38:	4a62      	ldr	r2, [pc, #392]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002b40:	e01c      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b46:	3308      	adds	r3, #8
 8002b48:	2100      	movs	r1, #0
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f001 fbe6 	bl	800431c <RCCEx_PLL2_Config>
 8002b50:	4603      	mov	r3, r0
 8002b52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002b56:	e011      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b5c:	3328      	adds	r3, #40	@ 0x28
 8002b5e:	2100      	movs	r1, #0
 8002b60:	4618      	mov	r0, r3
 8002b62:	f001 fc8d 	bl	8004480 <RCCEx_PLL3_Config>
 8002b66:	4603      	mov	r3, r0
 8002b68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002b6c:	e006      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b74:	e002      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002b76:	bf00      	nop
 8002b78:	e000      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002b7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10a      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002b84:	4b4f      	ldr	r3, [pc, #316]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b88:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b92:	4a4c      	ldr	r2, [pc, #304]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b94:	430b      	orrs	r3, r1
 8002b96:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b98:	e003      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002baa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002bae:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002bb8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	d053      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bc6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002bca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002bce:	d035      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002bd0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002bd4:	d82e      	bhi.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002bd6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002bda:	d031      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002bdc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002be0:	d828      	bhi.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002be2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002be6:	d01a      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002be8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bec:	d822      	bhi.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002bf2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002bf6:	d007      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002bf8:	e01c      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bfa:	4b32      	ldr	r3, [pc, #200]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfe:	4a31      	ldr	r2, [pc, #196]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c06:	e01c      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c0c:	3308      	adds	r3, #8
 8002c0e:	2100      	movs	r1, #0
 8002c10:	4618      	mov	r0, r3
 8002c12:	f001 fb83 	bl	800431c <RCCEx_PLL2_Config>
 8002c16:	4603      	mov	r3, r0
 8002c18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002c1c:	e011      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c22:	3328      	adds	r3, #40	@ 0x28
 8002c24:	2100      	movs	r1, #0
 8002c26:	4618      	mov	r0, r3
 8002c28:	f001 fc2a 	bl	8004480 <RCCEx_PLL3_Config>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c32:	e006      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c3a:	e002      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002c3c:	bf00      	nop
 8002c3e:	e000      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002c40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10b      	bne.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c4e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002c5a:	4a1a      	ldr	r2, [pc, #104]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c5c:	430b      	orrs	r3, r1
 8002c5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c60:	e003      	b.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c72:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002c76:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002c80:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002c84:	460b      	mov	r3, r1
 8002c86:	4313      	orrs	r3, r2
 8002c88:	d056      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002c92:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c96:	d038      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002c98:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c9c:	d831      	bhi.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002c9e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002ca2:	d034      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002ca4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002ca8:	d82b      	bhi.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002caa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002cae:	d01d      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002cb0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002cb4:	d825      	bhi.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d006      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002cba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cbe:	d00a      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002cc0:	e01f      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002cc2:	bf00      	nop
 8002cc4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cc8:	4ba2      	ldr	r3, [pc, #648]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ccc:	4aa1      	ldr	r2, [pc, #644]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002cd4:	e01c      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cda:	3308      	adds	r3, #8
 8002cdc:	2100      	movs	r1, #0
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f001 fb1c 	bl	800431c <RCCEx_PLL2_Config>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002cea:	e011      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cf0:	3328      	adds	r3, #40	@ 0x28
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f001 fbc3 	bl	8004480 <RCCEx_PLL3_Config>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d00:	e006      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d08:	e002      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002d0a:	bf00      	nop
 8002d0c:	e000      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002d0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10b      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002d18:	4b8e      	ldr	r3, [pc, #568]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d1c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002d28:	4a8a      	ldr	r2, [pc, #552]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d2a:	430b      	orrs	r3, r1
 8002d2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d2e:	e003      	b.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d40:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002d44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002d4e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002d52:	460b      	mov	r3, r1
 8002d54:	4313      	orrs	r3, r2
 8002d56:	d03a      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d5e:	2b30      	cmp	r3, #48	@ 0x30
 8002d60:	d01f      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002d62:	2b30      	cmp	r3, #48	@ 0x30
 8002d64:	d819      	bhi.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002d66:	2b20      	cmp	r3, #32
 8002d68:	d00c      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002d6a:	2b20      	cmp	r3, #32
 8002d6c:	d815      	bhi.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d019      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002d72:	2b10      	cmp	r3, #16
 8002d74:	d111      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d76:	4b77      	ldr	r3, [pc, #476]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d7a:	4a76      	ldr	r2, [pc, #472]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002d82:	e011      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d88:	3308      	adds	r3, #8
 8002d8a:	2102      	movs	r1, #2
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f001 fac5 	bl	800431c <RCCEx_PLL2_Config>
 8002d92:	4603      	mov	r3, r0
 8002d94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002d98:	e006      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002da0:	e002      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002da2:	bf00      	nop
 8002da4:	e000      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002da6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002da8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10a      	bne.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002db0:	4b68      	ldr	r3, [pc, #416]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002db2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002db4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dbe:	4a65      	ldr	r2, [pc, #404]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002dc0:	430b      	orrs	r3, r1
 8002dc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dc4:	e003      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002dda:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002dde:	2300      	movs	r3, #0
 8002de0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002de4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002de8:	460b      	mov	r3, r1
 8002dea:	4313      	orrs	r3, r2
 8002dec:	d051      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002df2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002df4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002df8:	d035      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002dfa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002dfe:	d82e      	bhi.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002e00:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002e04:	d031      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002e06:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002e0a:	d828      	bhi.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002e0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e10:	d01a      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002e12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e16:	d822      	bhi.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e20:	d007      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002e22:	e01c      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e24:	4b4b      	ldr	r3, [pc, #300]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e28:	4a4a      	ldr	r2, [pc, #296]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e30:	e01c      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e36:	3308      	adds	r3, #8
 8002e38:	2100      	movs	r1, #0
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f001 fa6e 	bl	800431c <RCCEx_PLL2_Config>
 8002e40:	4603      	mov	r3, r0
 8002e42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e46:	e011      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e4c:	3328      	adds	r3, #40	@ 0x28
 8002e4e:	2100      	movs	r1, #0
 8002e50:	4618      	mov	r0, r3
 8002e52:	f001 fb15 	bl	8004480 <RCCEx_PLL3_Config>
 8002e56:	4603      	mov	r3, r0
 8002e58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002e5c:	e006      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e64:	e002      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002e66:	bf00      	nop
 8002e68:	e000      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002e6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10a      	bne.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002e74:	4b37      	ldr	r3, [pc, #220]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e78:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e82:	4a34      	ldr	r2, [pc, #208]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e84:	430b      	orrs	r3, r1
 8002e86:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e88:	e003      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002e9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002ea8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002eac:	460b      	mov	r3, r1
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	d056      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002eb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ebc:	d033      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002ebe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ec2:	d82c      	bhi.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002ec4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ec8:	d02f      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002eca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002ece:	d826      	bhi.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002ed0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002ed4:	d02b      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002ed6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002eda:	d820      	bhi.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002edc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ee0:	d012      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002ee2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ee6:	d81a      	bhi.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d022      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002eec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ef0:	d115      	bne.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ef6:	3308      	adds	r3, #8
 8002ef8:	2101      	movs	r1, #1
 8002efa:	4618      	mov	r0, r3
 8002efc:	f001 fa0e 	bl	800431c <RCCEx_PLL2_Config>
 8002f00:	4603      	mov	r3, r0
 8002f02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002f06:	e015      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f0c:	3328      	adds	r3, #40	@ 0x28
 8002f0e:	2101      	movs	r1, #1
 8002f10:	4618      	mov	r0, r3
 8002f12:	f001 fab5 	bl	8004480 <RCCEx_PLL3_Config>
 8002f16:	4603      	mov	r3, r0
 8002f18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002f1c:	e00a      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f24:	e006      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f26:	bf00      	nop
 8002f28:	e004      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f2a:	bf00      	nop
 8002f2c:	e002      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f2e:	bf00      	nop
 8002f30:	e000      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002f32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10d      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002f3c:	4b05      	ldr	r3, [pc, #20]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f40:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f4a:	4a02      	ldr	r2, [pc, #8]	@ (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f4c:	430b      	orrs	r3, r1
 8002f4e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002f50:	e006      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002f52:	bf00      	nop
 8002f54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f68:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002f6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f70:	2300      	movs	r3, #0
 8002f72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f76:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	d055      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002f88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f8c:	d033      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002f8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f92:	d82c      	bhi.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002f94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f98:	d02f      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f9e:	d826      	bhi.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002fa0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002fa4:	d02b      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002fa6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002faa:	d820      	bhi.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002fac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fb0:	d012      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002fb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002fb6:	d81a      	bhi.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d022      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002fbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002fc0:	d115      	bne.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fc6:	3308      	adds	r3, #8
 8002fc8:	2101      	movs	r1, #1
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f001 f9a6 	bl	800431c <RCCEx_PLL2_Config>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002fd6:	e015      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fdc:	3328      	adds	r3, #40	@ 0x28
 8002fde:	2101      	movs	r1, #1
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f001 fa4d 	bl	8004480 <RCCEx_PLL3_Config>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002fec:	e00a      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ff4:	e006      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002ff6:	bf00      	nop
 8002ff8:	e004      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002ffa:	bf00      	nop
 8002ffc:	e002      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002ffe:	bf00      	nop
 8003000:	e000      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003002:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003004:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10b      	bne.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800300c:	4ba3      	ldr	r3, [pc, #652]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800300e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003010:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003018:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800301c:	4a9f      	ldr	r2, [pc, #636]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800301e:	430b      	orrs	r3, r1
 8003020:	6593      	str	r3, [r2, #88]	@ 0x58
 8003022:	e003      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003024:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003028:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800302c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003034:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003038:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800303c:	2300      	movs	r3, #0
 800303e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003042:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003046:	460b      	mov	r3, r1
 8003048:	4313      	orrs	r3, r2
 800304a:	d037      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800304c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003052:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003056:	d00e      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003058:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800305c:	d816      	bhi.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800305e:	2b00      	cmp	r3, #0
 8003060:	d018      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003062:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003066:	d111      	bne.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003068:	4b8c      	ldr	r3, [pc, #560]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800306a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800306c:	4a8b      	ldr	r2, [pc, #556]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800306e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003072:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003074:	e00f      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800307a:	3308      	adds	r3, #8
 800307c:	2101      	movs	r1, #1
 800307e:	4618      	mov	r0, r3
 8003080:	f001 f94c 	bl	800431c <RCCEx_PLL2_Config>
 8003084:	4603      	mov	r3, r0
 8003086:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800308a:	e004      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003092:	e000      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003094:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003096:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10a      	bne.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800309e:	4b7f      	ldr	r3, [pc, #508]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030a2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80030a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ac:	4a7b      	ldr	r2, [pc, #492]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030ae:	430b      	orrs	r3, r1
 80030b0:	6513      	str	r3, [r2, #80]	@ 0x50
 80030b2:	e003      	b.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80030bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80030c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80030cc:	2300      	movs	r3, #0
 80030ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80030d2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80030d6:	460b      	mov	r3, r1
 80030d8:	4313      	orrs	r3, r2
 80030da:	d039      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80030dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030e2:	2b03      	cmp	r3, #3
 80030e4:	d81c      	bhi.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80030e6:	a201      	add	r2, pc, #4	@ (adr r2, 80030ec <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80030e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ec:	08003129 	.word	0x08003129
 80030f0:	080030fd 	.word	0x080030fd
 80030f4:	0800310b 	.word	0x0800310b
 80030f8:	08003129 	.word	0x08003129
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030fc:	4b67      	ldr	r3, [pc, #412]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80030fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003100:	4a66      	ldr	r2, [pc, #408]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003102:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003106:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003108:	e00f      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800310a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800310e:	3308      	adds	r3, #8
 8003110:	2102      	movs	r1, #2
 8003112:	4618      	mov	r0, r3
 8003114:	f001 f902 	bl	800431c <RCCEx_PLL2_Config>
 8003118:	4603      	mov	r3, r0
 800311a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800311e:	e004      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003126:	e000      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003128:	bf00      	nop
    }

    if (ret == HAL_OK)
 800312a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10a      	bne.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003132:	4b5a      	ldr	r3, [pc, #360]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003136:	f023 0103 	bic.w	r1, r3, #3
 800313a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800313e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003140:	4a56      	ldr	r2, [pc, #344]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003142:	430b      	orrs	r3, r1
 8003144:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003146:	e003      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003148:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800314c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003158:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800315c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003160:	2300      	movs	r3, #0
 8003162:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003166:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800316a:	460b      	mov	r3, r1
 800316c:	4313      	orrs	r3, r2
 800316e:	f000 809f 	beq.w	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003172:	4b4b      	ldr	r3, [pc, #300]	@ (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a4a      	ldr	r2, [pc, #296]	@ (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003178:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800317c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800317e:	f7fe f8e3 	bl	8001348 <HAL_GetTick>
 8003182:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003186:	e00b      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003188:	f7fe f8de 	bl	8001348 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b64      	cmp	r3, #100	@ 0x64
 8003196:	d903      	bls.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800319e:	e005      	b.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80031a0:	4b3f      	ldr	r3, [pc, #252]	@ (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0ed      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80031ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d179      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80031b4:	4b39      	ldr	r3, [pc, #228]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031b6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80031b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80031c0:	4053      	eors	r3, r2
 80031c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d015      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031ca:	4b34      	ldr	r3, [pc, #208]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031d2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031d6:	4b31      	ldr	r3, [pc, #196]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031da:	4a30      	ldr	r2, [pc, #192]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031e0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031e2:	4b2e      	ldr	r3, [pc, #184]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031e6:	4a2d      	ldr	r2, [pc, #180]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031ec:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80031ee:	4a2b      	ldr	r2, [pc, #172]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031f4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80031f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80031fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003202:	d118      	bne.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003204:	f7fe f8a0 	bl	8001348 <HAL_GetTick>
 8003208:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800320c:	e00d      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800320e:	f7fe f89b 	bl	8001348 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003218:	1ad2      	subs	r2, r2, r3
 800321a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800321e:	429a      	cmp	r2, r3
 8003220:	d903      	bls.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003228:	e005      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800322a:	4b1c      	ldr	r3, [pc, #112]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800322c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0eb      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003236:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800323a:	2b00      	cmp	r3, #0
 800323c:	d129      	bne.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800323e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003242:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003246:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800324a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800324e:	d10e      	bne.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003250:	4b12      	ldr	r3, [pc, #72]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800325c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003260:	091a      	lsrs	r2, r3, #4
 8003262:	4b10      	ldr	r3, [pc, #64]	@ (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003264:	4013      	ands	r3, r2
 8003266:	4a0d      	ldr	r2, [pc, #52]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003268:	430b      	orrs	r3, r1
 800326a:	6113      	str	r3, [r2, #16]
 800326c:	e005      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800326e:	4b0b      	ldr	r3, [pc, #44]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	4a0a      	ldr	r2, [pc, #40]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003274:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003278:	6113      	str	r3, [r2, #16]
 800327a:	4b08      	ldr	r3, [pc, #32]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800327c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800327e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003282:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003286:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800328a:	4a04      	ldr	r2, [pc, #16]	@ (800329c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800328c:	430b      	orrs	r3, r1
 800328e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003290:	e00e      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003292:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003296:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800329a:	e009      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800329c:	58024400 	.word	0x58024400
 80032a0:	58024800 	.word	0x58024800
 80032a4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80032b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b8:	f002 0301 	and.w	r3, r2, #1
 80032bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032c0:	2300      	movs	r3, #0
 80032c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80032c6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80032ca:	460b      	mov	r3, r1
 80032cc:	4313      	orrs	r3, r2
 80032ce:	f000 8089 	beq.w	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80032d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032d8:	2b28      	cmp	r3, #40	@ 0x28
 80032da:	d86b      	bhi.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80032dc:	a201      	add	r2, pc, #4	@ (adr r2, 80032e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80032de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e2:	bf00      	nop
 80032e4:	080033bd 	.word	0x080033bd
 80032e8:	080033b5 	.word	0x080033b5
 80032ec:	080033b5 	.word	0x080033b5
 80032f0:	080033b5 	.word	0x080033b5
 80032f4:	080033b5 	.word	0x080033b5
 80032f8:	080033b5 	.word	0x080033b5
 80032fc:	080033b5 	.word	0x080033b5
 8003300:	080033b5 	.word	0x080033b5
 8003304:	08003389 	.word	0x08003389
 8003308:	080033b5 	.word	0x080033b5
 800330c:	080033b5 	.word	0x080033b5
 8003310:	080033b5 	.word	0x080033b5
 8003314:	080033b5 	.word	0x080033b5
 8003318:	080033b5 	.word	0x080033b5
 800331c:	080033b5 	.word	0x080033b5
 8003320:	080033b5 	.word	0x080033b5
 8003324:	0800339f 	.word	0x0800339f
 8003328:	080033b5 	.word	0x080033b5
 800332c:	080033b5 	.word	0x080033b5
 8003330:	080033b5 	.word	0x080033b5
 8003334:	080033b5 	.word	0x080033b5
 8003338:	080033b5 	.word	0x080033b5
 800333c:	080033b5 	.word	0x080033b5
 8003340:	080033b5 	.word	0x080033b5
 8003344:	080033bd 	.word	0x080033bd
 8003348:	080033b5 	.word	0x080033b5
 800334c:	080033b5 	.word	0x080033b5
 8003350:	080033b5 	.word	0x080033b5
 8003354:	080033b5 	.word	0x080033b5
 8003358:	080033b5 	.word	0x080033b5
 800335c:	080033b5 	.word	0x080033b5
 8003360:	080033b5 	.word	0x080033b5
 8003364:	080033bd 	.word	0x080033bd
 8003368:	080033b5 	.word	0x080033b5
 800336c:	080033b5 	.word	0x080033b5
 8003370:	080033b5 	.word	0x080033b5
 8003374:	080033b5 	.word	0x080033b5
 8003378:	080033b5 	.word	0x080033b5
 800337c:	080033b5 	.word	0x080033b5
 8003380:	080033b5 	.word	0x080033b5
 8003384:	080033bd 	.word	0x080033bd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800338c:	3308      	adds	r3, #8
 800338e:	2101      	movs	r1, #1
 8003390:	4618      	mov	r0, r3
 8003392:	f000 ffc3 	bl	800431c <RCCEx_PLL2_Config>
 8003396:	4603      	mov	r3, r0
 8003398:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800339c:	e00f      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800339e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033a2:	3328      	adds	r3, #40	@ 0x28
 80033a4:	2101      	movs	r1, #1
 80033a6:	4618      	mov	r0, r3
 80033a8:	f001 f86a 	bl	8004480 <RCCEx_PLL3_Config>
 80033ac:	4603      	mov	r3, r0
 80033ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80033b2:	e004      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033ba:	e000      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80033bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10a      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80033c6:	4bbf      	ldr	r3, [pc, #764]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ca:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80033ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033d4:	4abb      	ldr	r2, [pc, #748]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033d6:	430b      	orrs	r3, r1
 80033d8:	6553      	str	r3, [r2, #84]	@ 0x54
 80033da:	e003      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80033e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ec:	f002 0302 	and.w	r3, r2, #2
 80033f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033f4:	2300      	movs	r3, #0
 80033f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80033fa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80033fe:	460b      	mov	r3, r1
 8003400:	4313      	orrs	r3, r2
 8003402:	d041      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003408:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800340a:	2b05      	cmp	r3, #5
 800340c:	d824      	bhi.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800340e:	a201      	add	r2, pc, #4	@ (adr r2, 8003414 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003414:	08003461 	.word	0x08003461
 8003418:	0800342d 	.word	0x0800342d
 800341c:	08003443 	.word	0x08003443
 8003420:	08003461 	.word	0x08003461
 8003424:	08003461 	.word	0x08003461
 8003428:	08003461 	.word	0x08003461
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800342c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003430:	3308      	adds	r3, #8
 8003432:	2101      	movs	r1, #1
 8003434:	4618      	mov	r0, r3
 8003436:	f000 ff71 	bl	800431c <RCCEx_PLL2_Config>
 800343a:	4603      	mov	r3, r0
 800343c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003440:	e00f      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003446:	3328      	adds	r3, #40	@ 0x28
 8003448:	2101      	movs	r1, #1
 800344a:	4618      	mov	r0, r3
 800344c:	f001 f818 	bl	8004480 <RCCEx_PLL3_Config>
 8003450:	4603      	mov	r3, r0
 8003452:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003456:	e004      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800345e:	e000      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003460:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003462:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10a      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800346a:	4b96      	ldr	r3, [pc, #600]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800346c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800346e:	f023 0107 	bic.w	r1, r3, #7
 8003472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003476:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003478:	4a92      	ldr	r2, [pc, #584]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800347a:	430b      	orrs	r3, r1
 800347c:	6553      	str	r3, [r2, #84]	@ 0x54
 800347e:	e003      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003480:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003484:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800348c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003490:	f002 0304 	and.w	r3, r2, #4
 8003494:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003498:	2300      	movs	r3, #0
 800349a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800349e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80034a2:	460b      	mov	r3, r1
 80034a4:	4313      	orrs	r3, r2
 80034a6:	d044      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80034a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80034b0:	2b05      	cmp	r3, #5
 80034b2:	d825      	bhi.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80034b4:	a201      	add	r2, pc, #4	@ (adr r2, 80034bc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80034b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ba:	bf00      	nop
 80034bc:	08003509 	.word	0x08003509
 80034c0:	080034d5 	.word	0x080034d5
 80034c4:	080034eb 	.word	0x080034eb
 80034c8:	08003509 	.word	0x08003509
 80034cc:	08003509 	.word	0x08003509
 80034d0:	08003509 	.word	0x08003509
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034d8:	3308      	adds	r3, #8
 80034da:	2101      	movs	r1, #1
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 ff1d 	bl	800431c <RCCEx_PLL2_Config>
 80034e2:	4603      	mov	r3, r0
 80034e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80034e8:	e00f      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ee:	3328      	adds	r3, #40	@ 0x28
 80034f0:	2101      	movs	r1, #1
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 ffc4 	bl	8004480 <RCCEx_PLL3_Config>
 80034f8:	4603      	mov	r3, r0
 80034fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80034fe:	e004      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003506:	e000      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003508:	bf00      	nop
    }

    if (ret == HAL_OK)
 800350a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10b      	bne.n	800352a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003512:	4b6c      	ldr	r3, [pc, #432]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003514:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003516:	f023 0107 	bic.w	r1, r3, #7
 800351a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800351e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003522:	4a68      	ldr	r2, [pc, #416]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003524:	430b      	orrs	r3, r1
 8003526:	6593      	str	r3, [r2, #88]	@ 0x58
 8003528:	e003      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800352a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800352e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353a:	f002 0320 	and.w	r3, r2, #32
 800353e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003542:	2300      	movs	r3, #0
 8003544:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003548:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800354c:	460b      	mov	r3, r1
 800354e:	4313      	orrs	r3, r2
 8003550:	d055      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800355a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800355e:	d033      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003560:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003564:	d82c      	bhi.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003566:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800356a:	d02f      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800356c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003570:	d826      	bhi.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003572:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003576:	d02b      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003578:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800357c:	d820      	bhi.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800357e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003582:	d012      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003584:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003588:	d81a      	bhi.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800358a:	2b00      	cmp	r3, #0
 800358c:	d022      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800358e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003592:	d115      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003598:	3308      	adds	r3, #8
 800359a:	2100      	movs	r1, #0
 800359c:	4618      	mov	r0, r3
 800359e:	f000 febd 	bl	800431c <RCCEx_PLL2_Config>
 80035a2:	4603      	mov	r3, r0
 80035a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80035a8:	e015      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ae:	3328      	adds	r3, #40	@ 0x28
 80035b0:	2102      	movs	r1, #2
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 ff64 	bl	8004480 <RCCEx_PLL3_Config>
 80035b8:	4603      	mov	r3, r0
 80035ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80035be:	e00a      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035c6:	e006      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80035c8:	bf00      	nop
 80035ca:	e004      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80035cc:	bf00      	nop
 80035ce:	e002      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80035d0:	bf00      	nop
 80035d2:	e000      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80035d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10b      	bne.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035de:	4b39      	ldr	r3, [pc, #228]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80035e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035ee:	4a35      	ldr	r2, [pc, #212]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035f0:	430b      	orrs	r3, r1
 80035f2:	6553      	str	r3, [r2, #84]	@ 0x54
 80035f4:	e003      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80035fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003606:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800360a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800360e:	2300      	movs	r3, #0
 8003610:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003614:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003618:	460b      	mov	r3, r1
 800361a:	4313      	orrs	r3, r2
 800361c:	d058      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800361e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003622:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003626:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800362a:	d033      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800362c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003630:	d82c      	bhi.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003632:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003636:	d02f      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003638:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800363c:	d826      	bhi.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800363e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003642:	d02b      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003644:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003648:	d820      	bhi.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800364a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800364e:	d012      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003650:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003654:	d81a      	bhi.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003656:	2b00      	cmp	r3, #0
 8003658:	d022      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800365a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800365e:	d115      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003664:	3308      	adds	r3, #8
 8003666:	2100      	movs	r1, #0
 8003668:	4618      	mov	r0, r3
 800366a:	f000 fe57 	bl	800431c <RCCEx_PLL2_Config>
 800366e:	4603      	mov	r3, r0
 8003670:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003674:	e015      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367a:	3328      	adds	r3, #40	@ 0x28
 800367c:	2102      	movs	r1, #2
 800367e:	4618      	mov	r0, r3
 8003680:	f000 fefe 	bl	8004480 <RCCEx_PLL3_Config>
 8003684:	4603      	mov	r3, r0
 8003686:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800368a:	e00a      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003692:	e006      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003694:	bf00      	nop
 8003696:	e004      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003698:	bf00      	nop
 800369a:	e002      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800369c:	bf00      	nop
 800369e:	e000      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80036a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10e      	bne.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036aa:	4b06      	ldr	r3, [pc, #24]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80036ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ae:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80036b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80036ba:	4a02      	ldr	r2, [pc, #8]	@ (80036c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80036bc:	430b      	orrs	r3, r1
 80036be:	6593      	str	r3, [r2, #88]	@ 0x58
 80036c0:	e006      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80036c2:	bf00      	nop
 80036c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80036d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80036dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80036e0:	2300      	movs	r3, #0
 80036e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80036e6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80036ea:	460b      	mov	r3, r1
 80036ec:	4313      	orrs	r3, r2
 80036ee:	d055      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80036f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80036f8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80036fc:	d033      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80036fe:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003702:	d82c      	bhi.n	800375e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003704:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003708:	d02f      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800370a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800370e:	d826      	bhi.n	800375e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003710:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003714:	d02b      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003716:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800371a:	d820      	bhi.n	800375e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800371c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003720:	d012      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003722:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003726:	d81a      	bhi.n	800375e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003728:	2b00      	cmp	r3, #0
 800372a:	d022      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800372c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003730:	d115      	bne.n	800375e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003736:	3308      	adds	r3, #8
 8003738:	2100      	movs	r1, #0
 800373a:	4618      	mov	r0, r3
 800373c:	f000 fdee 	bl	800431c <RCCEx_PLL2_Config>
 8003740:	4603      	mov	r3, r0
 8003742:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003746:	e015      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800374c:	3328      	adds	r3, #40	@ 0x28
 800374e:	2102      	movs	r1, #2
 8003750:	4618      	mov	r0, r3
 8003752:	f000 fe95 	bl	8004480 <RCCEx_PLL3_Config>
 8003756:	4603      	mov	r3, r0
 8003758:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800375c:	e00a      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003764:	e006      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003766:	bf00      	nop
 8003768:	e004      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800376a:	bf00      	nop
 800376c:	e002      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800376e:	bf00      	nop
 8003770:	e000      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003772:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003774:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10b      	bne.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800377c:	4ba1      	ldr	r3, [pc, #644]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800377e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003780:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003788:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800378c:	4a9d      	ldr	r2, [pc, #628]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800378e:	430b      	orrs	r3, r1
 8003790:	6593      	str	r3, [r2, #88]	@ 0x58
 8003792:	e003      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003794:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003798:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800379c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a4:	f002 0308 	and.w	r3, r2, #8
 80037a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80037ac:	2300      	movs	r3, #0
 80037ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80037b2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80037b6:	460b      	mov	r3, r1
 80037b8:	4313      	orrs	r3, r2
 80037ba:	d01e      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80037bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037c8:	d10c      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80037ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ce:	3328      	adds	r3, #40	@ 0x28
 80037d0:	2102      	movs	r1, #2
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 fe54 	bl	8004480 <RCCEx_PLL3_Config>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d002      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80037e4:	4b87      	ldr	r3, [pc, #540]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80037ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037f4:	4a83      	ldr	r2, [pc, #524]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037f6:	430b      	orrs	r3, r1
 80037f8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80037fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003802:	f002 0310 	and.w	r3, r2, #16
 8003806:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800380a:	2300      	movs	r3, #0
 800380c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003810:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003814:	460b      	mov	r3, r1
 8003816:	4313      	orrs	r3, r2
 8003818:	d01e      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800381a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800381e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003822:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003826:	d10c      	bne.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800382c:	3328      	adds	r3, #40	@ 0x28
 800382e:	2102      	movs	r1, #2
 8003830:	4618      	mov	r0, r3
 8003832:	f000 fe25 	bl	8004480 <RCCEx_PLL3_Config>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d002      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003842:	4b70      	ldr	r3, [pc, #448]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003846:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800384a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800384e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003852:	4a6c      	ldr	r2, [pc, #432]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003854:	430b      	orrs	r3, r1
 8003856:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800385c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003860:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003864:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003868:	2300      	movs	r3, #0
 800386a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800386e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003872:	460b      	mov	r3, r1
 8003874:	4313      	orrs	r3, r2
 8003876:	d03e      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800387c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003880:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003884:	d022      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003886:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800388a:	d81b      	bhi.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003894:	d00b      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003896:	e015      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800389c:	3308      	adds	r3, #8
 800389e:	2100      	movs	r1, #0
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 fd3b 	bl	800431c <RCCEx_PLL2_Config>
 80038a6:	4603      	mov	r3, r0
 80038a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80038ac:	e00f      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b2:	3328      	adds	r3, #40	@ 0x28
 80038b4:	2102      	movs	r1, #2
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 fde2 	bl	8004480 <RCCEx_PLL3_Config>
 80038bc:	4603      	mov	r3, r0
 80038be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80038c2:	e004      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038ca:	e000      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80038cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10b      	bne.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038d6:	4b4b      	ldr	r3, [pc, #300]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038da:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80038de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80038e6:	4a47      	ldr	r2, [pc, #284]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038e8:	430b      	orrs	r3, r1
 80038ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80038ec:	e003      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fe:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003902:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003904:	2300      	movs	r3, #0
 8003906:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003908:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800390c:	460b      	mov	r3, r1
 800390e:	4313      	orrs	r3, r2
 8003910:	d03b      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800391a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800391e:	d01f      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003920:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003924:	d818      	bhi.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003926:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800392a:	d003      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800392c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003930:	d007      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003932:	e011      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003934:	4b33      	ldr	r3, [pc, #204]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003938:	4a32      	ldr	r2, [pc, #200]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800393a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800393e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003940:	e00f      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003946:	3328      	adds	r3, #40	@ 0x28
 8003948:	2101      	movs	r1, #1
 800394a:	4618      	mov	r0, r3
 800394c:	f000 fd98 	bl	8004480 <RCCEx_PLL3_Config>
 8003950:	4603      	mov	r3, r0
 8003952:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003956:	e004      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800395e:	e000      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003960:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003962:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10b      	bne.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800396a:	4b26      	ldr	r3, [pc, #152]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800396c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800396e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800397a:	4a22      	ldr	r2, [pc, #136]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800397c:	430b      	orrs	r3, r1
 800397e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003980:	e003      	b.n	800398a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003982:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003986:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800398a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800398e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003992:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003996:	673b      	str	r3, [r7, #112]	@ 0x70
 8003998:	2300      	movs	r3, #0
 800399a:	677b      	str	r3, [r7, #116]	@ 0x74
 800399c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80039a0:	460b      	mov	r3, r1
 80039a2:	4313      	orrs	r3, r2
 80039a4:	d034      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80039a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80039b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039b4:	d007      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80039b6:	e011      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039b8:	4b12      	ldr	r3, [pc, #72]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039bc:	4a11      	ldr	r2, [pc, #68]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80039c4:	e00e      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ca:	3308      	adds	r3, #8
 80039cc:	2102      	movs	r1, #2
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 fca4 	bl	800431c <RCCEx_PLL2_Config>
 80039d4:	4603      	mov	r3, r0
 80039d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80039da:	e003      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10d      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80039ec:	4b05      	ldr	r3, [pc, #20]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039f0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80039f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039fa:	4a02      	ldr	r2, [pc, #8]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039fc:	430b      	orrs	r3, r1
 80039fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a00:	e006      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003a02:	bf00      	nop
 8003a04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a18:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003a1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a1e:	2300      	movs	r3, #0
 8003a20:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a22:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003a26:	460b      	mov	r3, r1
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	d00c      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a30:	3328      	adds	r3, #40	@ 0x28
 8003a32:	2102      	movs	r1, #2
 8003a34:	4618      	mov	r0, r3
 8003a36:	f000 fd23 	bl	8004480 <RCCEx_PLL3_Config>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d002      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003a52:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a54:	2300      	movs	r3, #0
 8003a56:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a58:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	d038      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a6e:	d018      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003a70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a74:	d811      	bhi.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003a76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a7a:	d014      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003a7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a80:	d80b      	bhi.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d011      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003a86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a8a:	d106      	bne.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a8c:	4bc3      	ldr	r3, [pc, #780]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a90:	4ac2      	ldr	r2, [pc, #776]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003a92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003a98:	e008      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003aa0:	e004      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003aa2:	bf00      	nop
 8003aa4:	e002      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003aa6:	bf00      	nop
 8003aa8:	e000      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003aaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10b      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ab4:	4bb9      	ldr	r3, [pc, #740]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ab8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ac4:	4ab5      	ldr	r2, [pc, #724]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ac6:	430b      	orrs	r3, r1
 8003ac8:	6553      	str	r3, [r2, #84]	@ 0x54
 8003aca:	e003      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003acc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ad0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003adc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003ae0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ae6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003aea:	460b      	mov	r3, r1
 8003aec:	4313      	orrs	r3, r2
 8003aee:	d009      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003af0:	4baa      	ldr	r3, [pc, #680]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003af4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003afc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003afe:	4aa7      	ldr	r2, [pc, #668]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b00:	430b      	orrs	r3, r1
 8003b02:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003b10:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b12:	2300      	movs	r3, #0
 8003b14:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b16:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	d00a      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003b20:	4b9e      	ldr	r3, [pc, #632]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b2c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003b30:	4a9a      	ldr	r2, [pc, #616]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b32:	430b      	orrs	r3, r1
 8003b34:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003b42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b44:	2300      	movs	r3, #0
 8003b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b48:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	d009      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b52:	4b92      	ldr	r3, [pc, #584]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b56:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b60:	4a8e      	ldr	r2, [pc, #568]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b62:	430b      	orrs	r3, r1
 8003b64:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003b72:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b74:	2300      	movs	r3, #0
 8003b76:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b78:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	d00e      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b82:	4b86      	ldr	r3, [pc, #536]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	4a85      	ldr	r2, [pc, #532]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b88:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003b8c:	6113      	str	r3, [r2, #16]
 8003b8e:	4b83      	ldr	r3, [pc, #524]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b90:	6919      	ldr	r1, [r3, #16]
 8003b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b96:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003b9a:	4a80      	ldr	r2, [pc, #512]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003b9c:	430b      	orrs	r3, r1
 8003b9e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003bac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003bae:	2300      	movs	r3, #0
 8003bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bb2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	d009      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003bbc:	4b77      	ldr	r3, [pc, #476]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bc0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bca:	4a74      	ldr	r2, [pc, #464]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bcc:	430b      	orrs	r3, r1
 8003bce:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003bdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bde:	2300      	movs	r3, #0
 8003be0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003be2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003be6:	460b      	mov	r3, r1
 8003be8:	4313      	orrs	r3, r2
 8003bea:	d00a      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003bec:	4b6b      	ldr	r3, [pc, #428]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bfc:	4a67      	ldr	r2, [pc, #412]	@ (8003d9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bfe:	430b      	orrs	r3, r1
 8003c00:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c14:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003c18:	460b      	mov	r3, r1
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	d011      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c22:	3308      	adds	r3, #8
 8003c24:	2100      	movs	r1, #0
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 fb78 	bl	800431c <RCCEx_PLL2_Config>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003c32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	6239      	str	r1, [r7, #32]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c54:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003c58:	460b      	mov	r3, r1
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	d011      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c62:	3308      	adds	r3, #8
 8003c64:	2101      	movs	r1, #1
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 fb58 	bl	800431c <RCCEx_PLL2_Config>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003c72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	61b9      	str	r1, [r7, #24]
 8003c8e:	f003 0304 	and.w	r3, r3, #4
 8003c92:	61fb      	str	r3, [r7, #28]
 8003c94:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	d011      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca2:	3308      	adds	r3, #8
 8003ca4:	2102      	movs	r1, #2
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 fb38 	bl	800431c <RCCEx_PLL2_Config>
 8003cac:	4603      	mov	r3, r0
 8003cae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cca:	2100      	movs	r1, #0
 8003ccc:	6139      	str	r1, [r7, #16]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	d011      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce2:	3328      	adds	r3, #40	@ 0x28
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 fbca 	bl	8004480 <RCCEx_PLL3_Config>
 8003cec:	4603      	mov	r3, r0
 8003cee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003cf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	f003 0310 	and.w	r3, r3, #16
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	d011      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d22:	3328      	adds	r3, #40	@ 0x28
 8003d24:	2101      	movs	r1, #1
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 fbaa 	bl	8004480 <RCCEx_PLL3_Config>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003d32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	6039      	str	r1, [r7, #0]
 8003d4e:	f003 0320 	and.w	r3, r3, #32
 8003d52:	607b      	str	r3, [r7, #4]
 8003d54:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	d011      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d62:	3328      	adds	r3, #40	@ 0x28
 8003d64:	2102      	movs	r1, #2
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 fb8a 	bl	8004480 <RCCEx_PLL3_Config>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003d72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003d82:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	e000      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003d96:	46bd      	mov	sp, r7
 8003d98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d9c:	58024400 	.word	0x58024400

08003da0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003da4:	f7fe fd96 	bl	80028d4 <HAL_RCC_GetHCLKFreq>
 8003da8:	4602      	mov	r2, r0
 8003daa:	4b06      	ldr	r3, [pc, #24]	@ (8003dc4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	091b      	lsrs	r3, r3, #4
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	4904      	ldr	r1, [pc, #16]	@ (8003dc8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003db6:	5ccb      	ldrb	r3, [r1, r3]
 8003db8:	f003 031f 	and.w	r3, r3, #31
 8003dbc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	58024400 	.word	0x58024400
 8003dc8:	08007d90 	.word	0x08007d90

08003dcc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b089      	sub	sp, #36	@ 0x24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003dd4:	4ba1      	ldr	r3, [pc, #644]	@ (800405c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd8:	f003 0303 	and.w	r3, r3, #3
 8003ddc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003dde:	4b9f      	ldr	r3, [pc, #636]	@ (800405c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de2:	0b1b      	lsrs	r3, r3, #12
 8003de4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003de8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003dea:	4b9c      	ldr	r3, [pc, #624]	@ (800405c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dee:	091b      	lsrs	r3, r3, #4
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003df6:	4b99      	ldr	r3, [pc, #612]	@ (800405c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003df8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dfa:	08db      	lsrs	r3, r3, #3
 8003dfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	fb02 f303 	mul.w	r3, r2, r3
 8003e06:	ee07 3a90 	vmov	s15, r3
 8003e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 8111 	beq.w	800403c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	f000 8083 	beq.w	8003f28 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	f200 80a1 	bhi.w	8003f6c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d003      	beq.n	8003e38 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d056      	beq.n	8003ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003e36:	e099      	b.n	8003f6c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e38:	4b88      	ldr	r3, [pc, #544]	@ (800405c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0320 	and.w	r3, r3, #32
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d02d      	beq.n	8003ea0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e44:	4b85      	ldr	r3, [pc, #532]	@ (800405c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	08db      	lsrs	r3, r3, #3
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	4a84      	ldr	r2, [pc, #528]	@ (8004060 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003e50:	fa22 f303 	lsr.w	r3, r2, r3
 8003e54:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	ee07 3a90 	vmov	s15, r3
 8003e5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	ee07 3a90 	vmov	s15, r3
 8003e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e6e:	4b7b      	ldr	r3, [pc, #492]	@ (800405c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e76:	ee07 3a90 	vmov	s15, r3
 8003e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e82:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004064 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e9a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003e9e:	e087      	b.n	8003fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	ee07 3a90 	vmov	s15, r3
 8003ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eaa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004068 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eb2:	4b6a      	ldr	r3, [pc, #424]	@ (800405c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eba:	ee07 3a90 	vmov	s15, r3
 8003ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ec2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ec6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004064 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ed2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ede:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ee2:	e065      	b.n	8003fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	ee07 3a90 	vmov	s15, r3
 8003eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eee:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800406c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ef6:	4b59      	ldr	r3, [pc, #356]	@ (800405c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003efe:	ee07 3a90 	vmov	s15, r3
 8003f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f06:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f0a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004064 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f26:	e043      	b.n	8003fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	ee07 3a90 	vmov	s15, r3
 8003f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f32:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004070 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f3a:	4b48      	ldr	r3, [pc, #288]	@ (800405c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f42:	ee07 3a90 	vmov	s15, r3
 8003f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f4e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004064 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f6a:	e021      	b.n	8003fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	ee07 3a90 	vmov	s15, r3
 8003f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f76:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800406c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f7e:	4b37      	ldr	r3, [pc, #220]	@ (800405c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f86:	ee07 3a90 	vmov	s15, r3
 8003f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f92:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004064 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003faa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003fb0:	4b2a      	ldr	r3, [pc, #168]	@ (800405c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb4:	0a5b      	lsrs	r3, r3, #9
 8003fb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fba:	ee07 3a90 	vmov	s15, r3
 8003fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003fc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003fca:	edd7 6a07 	vldr	s13, [r7, #28]
 8003fce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fd6:	ee17 2a90 	vmov	r2, s15
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003fde:	4b1f      	ldr	r3, [pc, #124]	@ (800405c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fe2:	0c1b      	lsrs	r3, r3, #16
 8003fe4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fe8:	ee07 3a90 	vmov	s15, r3
 8003fec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ff0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ff4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ff8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ffc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004000:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004004:	ee17 2a90 	vmov	r2, s15
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800400c:	4b13      	ldr	r3, [pc, #76]	@ (800405c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800400e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004010:	0e1b      	lsrs	r3, r3, #24
 8004012:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004016:	ee07 3a90 	vmov	s15, r3
 800401a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800401e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004022:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004026:	edd7 6a07 	vldr	s13, [r7, #28]
 800402a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800402e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004032:	ee17 2a90 	vmov	r2, s15
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800403a:	e008      	b.n	800404e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	609a      	str	r2, [r3, #8]
}
 800404e:	bf00      	nop
 8004050:	3724      	adds	r7, #36	@ 0x24
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	58024400 	.word	0x58024400
 8004060:	03d09000 	.word	0x03d09000
 8004064:	46000000 	.word	0x46000000
 8004068:	4c742400 	.word	0x4c742400
 800406c:	4a742400 	.word	0x4a742400
 8004070:	4af42400 	.word	0x4af42400

08004074 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004074:	b480      	push	{r7}
 8004076:	b089      	sub	sp, #36	@ 0x24
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800407c:	4ba1      	ldr	r3, [pc, #644]	@ (8004304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800407e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004080:	f003 0303 	and.w	r3, r3, #3
 8004084:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004086:	4b9f      	ldr	r3, [pc, #636]	@ (8004304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800408a:	0d1b      	lsrs	r3, r3, #20
 800408c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004090:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004092:	4b9c      	ldr	r3, [pc, #624]	@ (8004304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004096:	0a1b      	lsrs	r3, r3, #8
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800409e:	4b99      	ldr	r3, [pc, #612]	@ (8004304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040a2:	08db      	lsrs	r3, r3, #3
 80040a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	fb02 f303 	mul.w	r3, r2, r3
 80040ae:	ee07 3a90 	vmov	s15, r3
 80040b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 8111 	beq.w	80042e4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	f000 8083 	beq.w	80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	f200 80a1 	bhi.w	8004214 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d056      	beq.n	800418c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80040de:	e099      	b.n	8004214 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040e0:	4b88      	ldr	r3, [pc, #544]	@ (8004304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0320 	and.w	r3, r3, #32
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d02d      	beq.n	8004148 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80040ec:	4b85      	ldr	r3, [pc, #532]	@ (8004304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	08db      	lsrs	r3, r3, #3
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	4a84      	ldr	r2, [pc, #528]	@ (8004308 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80040f8:	fa22 f303 	lsr.w	r3, r2, r3
 80040fc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	ee07 3a90 	vmov	s15, r3
 8004104:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	ee07 3a90 	vmov	s15, r3
 800410e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004116:	4b7b      	ldr	r3, [pc, #492]	@ (8004304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800411e:	ee07 3a90 	vmov	s15, r3
 8004122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004126:	ed97 6a03 	vldr	s12, [r7, #12]
 800412a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800430c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800412e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004136:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800413a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800413e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004142:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004146:	e087      	b.n	8004258 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	ee07 3a90 	vmov	s15, r3
 800414e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004152:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004310 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800415a:	4b6a      	ldr	r3, [pc, #424]	@ (8004304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800415c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004162:	ee07 3a90 	vmov	s15, r3
 8004166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800416a:	ed97 6a03 	vldr	s12, [r7, #12]
 800416e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800430c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800417a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800417e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004186:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800418a:	e065      	b.n	8004258 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	ee07 3a90 	vmov	s15, r3
 8004192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004196:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004314 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800419a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800419e:	4b59      	ldr	r3, [pc, #356]	@ (8004304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041a6:	ee07 3a90 	vmov	s15, r3
 80041aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80041b2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800430c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80041b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041ce:	e043      	b.n	8004258 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	ee07 3a90 	vmov	s15, r3
 80041d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041da:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004318 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80041de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041e2:	4b48      	ldr	r3, [pc, #288]	@ (8004304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ea:	ee07 3a90 	vmov	s15, r3
 80041ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80041f6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800430c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80041fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004202:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800420a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800420e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004212:	e021      	b.n	8004258 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	ee07 3a90 	vmov	s15, r3
 800421a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800421e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004314 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004226:	4b37      	ldr	r3, [pc, #220]	@ (8004304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800422e:	ee07 3a90 	vmov	s15, r3
 8004232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004236:	ed97 6a03 	vldr	s12, [r7, #12]
 800423a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800430c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800423e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004246:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800424a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800424e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004252:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004256:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004258:	4b2a      	ldr	r3, [pc, #168]	@ (8004304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800425a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425c:	0a5b      	lsrs	r3, r3, #9
 800425e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004262:	ee07 3a90 	vmov	s15, r3
 8004266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800426a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800426e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004272:	edd7 6a07 	vldr	s13, [r7, #28]
 8004276:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800427a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800427e:	ee17 2a90 	vmov	r2, s15
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004286:	4b1f      	ldr	r3, [pc, #124]	@ (8004304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428a:	0c1b      	lsrs	r3, r3, #16
 800428c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004290:	ee07 3a90 	vmov	s15, r3
 8004294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004298:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800429c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80042a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042ac:	ee17 2a90 	vmov	r2, s15
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80042b4:	4b13      	ldr	r3, [pc, #76]	@ (8004304 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b8:	0e1b      	lsrs	r3, r3, #24
 80042ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042be:	ee07 3a90 	vmov	s15, r3
 80042c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80042ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80042d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042da:	ee17 2a90 	vmov	r2, s15
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80042e2:	e008      	b.n	80042f6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	609a      	str	r2, [r3, #8]
}
 80042f6:	bf00      	nop
 80042f8:	3724      	adds	r7, #36	@ 0x24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	58024400 	.word	0x58024400
 8004308:	03d09000 	.word	0x03d09000
 800430c:	46000000 	.word	0x46000000
 8004310:	4c742400 	.word	0x4c742400
 8004314:	4a742400 	.word	0x4a742400
 8004318:	4af42400 	.word	0x4af42400

0800431c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004326:	2300      	movs	r3, #0
 8004328:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800432a:	4b53      	ldr	r3, [pc, #332]	@ (8004478 <RCCEx_PLL2_Config+0x15c>)
 800432c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800432e:	f003 0303 	and.w	r3, r3, #3
 8004332:	2b03      	cmp	r3, #3
 8004334:	d101      	bne.n	800433a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e099      	b.n	800446e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800433a:	4b4f      	ldr	r3, [pc, #316]	@ (8004478 <RCCEx_PLL2_Config+0x15c>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a4e      	ldr	r2, [pc, #312]	@ (8004478 <RCCEx_PLL2_Config+0x15c>)
 8004340:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004344:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004346:	f7fc ffff 	bl	8001348 <HAL_GetTick>
 800434a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800434c:	e008      	b.n	8004360 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800434e:	f7fc fffb 	bl	8001348 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d901      	bls.n	8004360 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e086      	b.n	800446e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004360:	4b45      	ldr	r3, [pc, #276]	@ (8004478 <RCCEx_PLL2_Config+0x15c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1f0      	bne.n	800434e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800436c:	4b42      	ldr	r3, [pc, #264]	@ (8004478 <RCCEx_PLL2_Config+0x15c>)
 800436e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004370:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	031b      	lsls	r3, r3, #12
 800437a:	493f      	ldr	r1, [pc, #252]	@ (8004478 <RCCEx_PLL2_Config+0x15c>)
 800437c:	4313      	orrs	r3, r2
 800437e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	3b01      	subs	r3, #1
 8004386:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	3b01      	subs	r3, #1
 8004390:	025b      	lsls	r3, r3, #9
 8004392:	b29b      	uxth	r3, r3
 8004394:	431a      	orrs	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	3b01      	subs	r3, #1
 800439c:	041b      	lsls	r3, r3, #16
 800439e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	3b01      	subs	r3, #1
 80043aa:	061b      	lsls	r3, r3, #24
 80043ac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80043b0:	4931      	ldr	r1, [pc, #196]	@ (8004478 <RCCEx_PLL2_Config+0x15c>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80043b6:	4b30      	ldr	r3, [pc, #192]	@ (8004478 <RCCEx_PLL2_Config+0x15c>)
 80043b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	492d      	ldr	r1, [pc, #180]	@ (8004478 <RCCEx_PLL2_Config+0x15c>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80043c8:	4b2b      	ldr	r3, [pc, #172]	@ (8004478 <RCCEx_PLL2_Config+0x15c>)
 80043ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043cc:	f023 0220 	bic.w	r2, r3, #32
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	4928      	ldr	r1, [pc, #160]	@ (8004478 <RCCEx_PLL2_Config+0x15c>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80043da:	4b27      	ldr	r3, [pc, #156]	@ (8004478 <RCCEx_PLL2_Config+0x15c>)
 80043dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043de:	4a26      	ldr	r2, [pc, #152]	@ (8004478 <RCCEx_PLL2_Config+0x15c>)
 80043e0:	f023 0310 	bic.w	r3, r3, #16
 80043e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80043e6:	4b24      	ldr	r3, [pc, #144]	@ (8004478 <RCCEx_PLL2_Config+0x15c>)
 80043e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80043ea:	4b24      	ldr	r3, [pc, #144]	@ (800447c <RCCEx_PLL2_Config+0x160>)
 80043ec:	4013      	ands	r3, r2
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	69d2      	ldr	r2, [r2, #28]
 80043f2:	00d2      	lsls	r2, r2, #3
 80043f4:	4920      	ldr	r1, [pc, #128]	@ (8004478 <RCCEx_PLL2_Config+0x15c>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80043fa:	4b1f      	ldr	r3, [pc, #124]	@ (8004478 <RCCEx_PLL2_Config+0x15c>)
 80043fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fe:	4a1e      	ldr	r2, [pc, #120]	@ (8004478 <RCCEx_PLL2_Config+0x15c>)
 8004400:	f043 0310 	orr.w	r3, r3, #16
 8004404:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d106      	bne.n	800441a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800440c:	4b1a      	ldr	r3, [pc, #104]	@ (8004478 <RCCEx_PLL2_Config+0x15c>)
 800440e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004410:	4a19      	ldr	r2, [pc, #100]	@ (8004478 <RCCEx_PLL2_Config+0x15c>)
 8004412:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004416:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004418:	e00f      	b.n	800443a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d106      	bne.n	800442e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004420:	4b15      	ldr	r3, [pc, #84]	@ (8004478 <RCCEx_PLL2_Config+0x15c>)
 8004422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004424:	4a14      	ldr	r2, [pc, #80]	@ (8004478 <RCCEx_PLL2_Config+0x15c>)
 8004426:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800442a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800442c:	e005      	b.n	800443a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800442e:	4b12      	ldr	r3, [pc, #72]	@ (8004478 <RCCEx_PLL2_Config+0x15c>)
 8004430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004432:	4a11      	ldr	r2, [pc, #68]	@ (8004478 <RCCEx_PLL2_Config+0x15c>)
 8004434:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004438:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800443a:	4b0f      	ldr	r3, [pc, #60]	@ (8004478 <RCCEx_PLL2_Config+0x15c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a0e      	ldr	r2, [pc, #56]	@ (8004478 <RCCEx_PLL2_Config+0x15c>)
 8004440:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004444:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004446:	f7fc ff7f 	bl	8001348 <HAL_GetTick>
 800444a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800444c:	e008      	b.n	8004460 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800444e:	f7fc ff7b 	bl	8001348 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d901      	bls.n	8004460 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e006      	b.n	800446e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004460:	4b05      	ldr	r3, [pc, #20]	@ (8004478 <RCCEx_PLL2_Config+0x15c>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d0f0      	beq.n	800444e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800446c:	7bfb      	ldrb	r3, [r7, #15]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	58024400 	.word	0x58024400
 800447c:	ffff0007 	.word	0xffff0007

08004480 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800448a:	2300      	movs	r3, #0
 800448c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800448e:	4b53      	ldr	r3, [pc, #332]	@ (80045dc <RCCEx_PLL3_Config+0x15c>)
 8004490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004492:	f003 0303 	and.w	r3, r3, #3
 8004496:	2b03      	cmp	r3, #3
 8004498:	d101      	bne.n	800449e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e099      	b.n	80045d2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800449e:	4b4f      	ldr	r3, [pc, #316]	@ (80045dc <RCCEx_PLL3_Config+0x15c>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a4e      	ldr	r2, [pc, #312]	@ (80045dc <RCCEx_PLL3_Config+0x15c>)
 80044a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044aa:	f7fc ff4d 	bl	8001348 <HAL_GetTick>
 80044ae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80044b0:	e008      	b.n	80044c4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80044b2:	f7fc ff49 	bl	8001348 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d901      	bls.n	80044c4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e086      	b.n	80045d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80044c4:	4b45      	ldr	r3, [pc, #276]	@ (80045dc <RCCEx_PLL3_Config+0x15c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1f0      	bne.n	80044b2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80044d0:	4b42      	ldr	r3, [pc, #264]	@ (80045dc <RCCEx_PLL3_Config+0x15c>)
 80044d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	051b      	lsls	r3, r3, #20
 80044de:	493f      	ldr	r1, [pc, #252]	@ (80045dc <RCCEx_PLL3_Config+0x15c>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	3b01      	subs	r3, #1
 80044ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	3b01      	subs	r3, #1
 80044f4:	025b      	lsls	r3, r3, #9
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	431a      	orrs	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	3b01      	subs	r3, #1
 8004500:	041b      	lsls	r3, r3, #16
 8004502:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004506:	431a      	orrs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	3b01      	subs	r3, #1
 800450e:	061b      	lsls	r3, r3, #24
 8004510:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004514:	4931      	ldr	r1, [pc, #196]	@ (80045dc <RCCEx_PLL3_Config+0x15c>)
 8004516:	4313      	orrs	r3, r2
 8004518:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800451a:	4b30      	ldr	r3, [pc, #192]	@ (80045dc <RCCEx_PLL3_Config+0x15c>)
 800451c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800451e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	492d      	ldr	r1, [pc, #180]	@ (80045dc <RCCEx_PLL3_Config+0x15c>)
 8004528:	4313      	orrs	r3, r2
 800452a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800452c:	4b2b      	ldr	r3, [pc, #172]	@ (80045dc <RCCEx_PLL3_Config+0x15c>)
 800452e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004530:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	4928      	ldr	r1, [pc, #160]	@ (80045dc <RCCEx_PLL3_Config+0x15c>)
 800453a:	4313      	orrs	r3, r2
 800453c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800453e:	4b27      	ldr	r3, [pc, #156]	@ (80045dc <RCCEx_PLL3_Config+0x15c>)
 8004540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004542:	4a26      	ldr	r2, [pc, #152]	@ (80045dc <RCCEx_PLL3_Config+0x15c>)
 8004544:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004548:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800454a:	4b24      	ldr	r3, [pc, #144]	@ (80045dc <RCCEx_PLL3_Config+0x15c>)
 800454c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800454e:	4b24      	ldr	r3, [pc, #144]	@ (80045e0 <RCCEx_PLL3_Config+0x160>)
 8004550:	4013      	ands	r3, r2
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	69d2      	ldr	r2, [r2, #28]
 8004556:	00d2      	lsls	r2, r2, #3
 8004558:	4920      	ldr	r1, [pc, #128]	@ (80045dc <RCCEx_PLL3_Config+0x15c>)
 800455a:	4313      	orrs	r3, r2
 800455c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800455e:	4b1f      	ldr	r3, [pc, #124]	@ (80045dc <RCCEx_PLL3_Config+0x15c>)
 8004560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004562:	4a1e      	ldr	r2, [pc, #120]	@ (80045dc <RCCEx_PLL3_Config+0x15c>)
 8004564:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004568:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d106      	bne.n	800457e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004570:	4b1a      	ldr	r3, [pc, #104]	@ (80045dc <RCCEx_PLL3_Config+0x15c>)
 8004572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004574:	4a19      	ldr	r2, [pc, #100]	@ (80045dc <RCCEx_PLL3_Config+0x15c>)
 8004576:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800457a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800457c:	e00f      	b.n	800459e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d106      	bne.n	8004592 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004584:	4b15      	ldr	r3, [pc, #84]	@ (80045dc <RCCEx_PLL3_Config+0x15c>)
 8004586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004588:	4a14      	ldr	r2, [pc, #80]	@ (80045dc <RCCEx_PLL3_Config+0x15c>)
 800458a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800458e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004590:	e005      	b.n	800459e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004592:	4b12      	ldr	r3, [pc, #72]	@ (80045dc <RCCEx_PLL3_Config+0x15c>)
 8004594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004596:	4a11      	ldr	r2, [pc, #68]	@ (80045dc <RCCEx_PLL3_Config+0x15c>)
 8004598:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800459c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800459e:	4b0f      	ldr	r3, [pc, #60]	@ (80045dc <RCCEx_PLL3_Config+0x15c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a0e      	ldr	r2, [pc, #56]	@ (80045dc <RCCEx_PLL3_Config+0x15c>)
 80045a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045aa:	f7fc fecd 	bl	8001348 <HAL_GetTick>
 80045ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80045b0:	e008      	b.n	80045c4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80045b2:	f7fc fec9 	bl	8001348 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d901      	bls.n	80045c4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e006      	b.n	80045d2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80045c4:	4b05      	ldr	r3, [pc, #20]	@ (80045dc <RCCEx_PLL3_Config+0x15c>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d0f0      	beq.n	80045b2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	58024400 	.word	0x58024400
 80045e0:	ffff0007 	.word	0xffff0007

080045e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e049      	b.n	800468a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d106      	bne.n	8004610 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7fc fcc0 	bl	8000f90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3304      	adds	r3, #4
 8004620:	4619      	mov	r1, r3
 8004622:	4610      	mov	r0, r2
 8004624:	f000 fbb0 	bl	8004d88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b082      	sub	sp, #8
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e049      	b.n	8004738 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d106      	bne.n	80046be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 f841 	bl	8004740 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2202      	movs	r2, #2
 80046c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	3304      	adds	r3, #4
 80046ce:	4619      	mov	r1, r3
 80046d0:	4610      	mov	r0, r2
 80046d2:	f000 fb59 	bl	8004d88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3708      	adds	r7, #8
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d109      	bne.n	8004778 <HAL_TIM_PWM_Start+0x24>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b01      	cmp	r3, #1
 800476e:	bf14      	ite	ne
 8004770:	2301      	movne	r3, #1
 8004772:	2300      	moveq	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	e03c      	b.n	80047f2 <HAL_TIM_PWM_Start+0x9e>
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	2b04      	cmp	r3, #4
 800477c:	d109      	bne.n	8004792 <HAL_TIM_PWM_Start+0x3e>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b01      	cmp	r3, #1
 8004788:	bf14      	ite	ne
 800478a:	2301      	movne	r3, #1
 800478c:	2300      	moveq	r3, #0
 800478e:	b2db      	uxtb	r3, r3
 8004790:	e02f      	b.n	80047f2 <HAL_TIM_PWM_Start+0x9e>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b08      	cmp	r3, #8
 8004796:	d109      	bne.n	80047ac <HAL_TIM_PWM_Start+0x58>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	bf14      	ite	ne
 80047a4:	2301      	movne	r3, #1
 80047a6:	2300      	moveq	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	e022      	b.n	80047f2 <HAL_TIM_PWM_Start+0x9e>
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	2b0c      	cmp	r3, #12
 80047b0:	d109      	bne.n	80047c6 <HAL_TIM_PWM_Start+0x72>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	bf14      	ite	ne
 80047be:	2301      	movne	r3, #1
 80047c0:	2300      	moveq	r3, #0
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	e015      	b.n	80047f2 <HAL_TIM_PWM_Start+0x9e>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b10      	cmp	r3, #16
 80047ca:	d109      	bne.n	80047e0 <HAL_TIM_PWM_Start+0x8c>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	bf14      	ite	ne
 80047d8:	2301      	movne	r3, #1
 80047da:	2300      	moveq	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	e008      	b.n	80047f2 <HAL_TIM_PWM_Start+0x9e>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	bf14      	ite	ne
 80047ec:	2301      	movne	r3, #1
 80047ee:	2300      	moveq	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e0a1      	b.n	800493e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d104      	bne.n	800480a <HAL_TIM_PWM_Start+0xb6>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004808:	e023      	b.n	8004852 <HAL_TIM_PWM_Start+0xfe>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b04      	cmp	r3, #4
 800480e:	d104      	bne.n	800481a <HAL_TIM_PWM_Start+0xc6>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004818:	e01b      	b.n	8004852 <HAL_TIM_PWM_Start+0xfe>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b08      	cmp	r3, #8
 800481e:	d104      	bne.n	800482a <HAL_TIM_PWM_Start+0xd6>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004828:	e013      	b.n	8004852 <HAL_TIM_PWM_Start+0xfe>
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b0c      	cmp	r3, #12
 800482e:	d104      	bne.n	800483a <HAL_TIM_PWM_Start+0xe6>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004838:	e00b      	b.n	8004852 <HAL_TIM_PWM_Start+0xfe>
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b10      	cmp	r3, #16
 800483e:	d104      	bne.n	800484a <HAL_TIM_PWM_Start+0xf6>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2202      	movs	r2, #2
 8004844:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004848:	e003      	b.n	8004852 <HAL_TIM_PWM_Start+0xfe>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2202      	movs	r2, #2
 800484e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2201      	movs	r2, #1
 8004858:	6839      	ldr	r1, [r7, #0]
 800485a:	4618      	mov	r0, r3
 800485c:	f000 fea8 	bl	80055b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a38      	ldr	r2, [pc, #224]	@ (8004948 <HAL_TIM_PWM_Start+0x1f4>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d013      	beq.n	8004892 <HAL_TIM_PWM_Start+0x13e>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a37      	ldr	r2, [pc, #220]	@ (800494c <HAL_TIM_PWM_Start+0x1f8>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d00e      	beq.n	8004892 <HAL_TIM_PWM_Start+0x13e>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a35      	ldr	r2, [pc, #212]	@ (8004950 <HAL_TIM_PWM_Start+0x1fc>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d009      	beq.n	8004892 <HAL_TIM_PWM_Start+0x13e>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a34      	ldr	r2, [pc, #208]	@ (8004954 <HAL_TIM_PWM_Start+0x200>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d004      	beq.n	8004892 <HAL_TIM_PWM_Start+0x13e>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a32      	ldr	r2, [pc, #200]	@ (8004958 <HAL_TIM_PWM_Start+0x204>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d101      	bne.n	8004896 <HAL_TIM_PWM_Start+0x142>
 8004892:	2301      	movs	r3, #1
 8004894:	e000      	b.n	8004898 <HAL_TIM_PWM_Start+0x144>
 8004896:	2300      	movs	r3, #0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d007      	beq.n	80048ac <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048aa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a25      	ldr	r2, [pc, #148]	@ (8004948 <HAL_TIM_PWM_Start+0x1f4>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d022      	beq.n	80048fc <HAL_TIM_PWM_Start+0x1a8>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048be:	d01d      	beq.n	80048fc <HAL_TIM_PWM_Start+0x1a8>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a25      	ldr	r2, [pc, #148]	@ (800495c <HAL_TIM_PWM_Start+0x208>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d018      	beq.n	80048fc <HAL_TIM_PWM_Start+0x1a8>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a24      	ldr	r2, [pc, #144]	@ (8004960 <HAL_TIM_PWM_Start+0x20c>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d013      	beq.n	80048fc <HAL_TIM_PWM_Start+0x1a8>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a22      	ldr	r2, [pc, #136]	@ (8004964 <HAL_TIM_PWM_Start+0x210>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d00e      	beq.n	80048fc <HAL_TIM_PWM_Start+0x1a8>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a1a      	ldr	r2, [pc, #104]	@ (800494c <HAL_TIM_PWM_Start+0x1f8>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d009      	beq.n	80048fc <HAL_TIM_PWM_Start+0x1a8>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a1e      	ldr	r2, [pc, #120]	@ (8004968 <HAL_TIM_PWM_Start+0x214>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d004      	beq.n	80048fc <HAL_TIM_PWM_Start+0x1a8>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a16      	ldr	r2, [pc, #88]	@ (8004950 <HAL_TIM_PWM_Start+0x1fc>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d115      	bne.n	8004928 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689a      	ldr	r2, [r3, #8]
 8004902:	4b1a      	ldr	r3, [pc, #104]	@ (800496c <HAL_TIM_PWM_Start+0x218>)
 8004904:	4013      	ands	r3, r2
 8004906:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2b06      	cmp	r3, #6
 800490c:	d015      	beq.n	800493a <HAL_TIM_PWM_Start+0x1e6>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004914:	d011      	beq.n	800493a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f042 0201 	orr.w	r2, r2, #1
 8004924:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004926:	e008      	b.n	800493a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0201 	orr.w	r2, r2, #1
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	e000      	b.n	800493c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800493a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	40010000 	.word	0x40010000
 800494c:	40010400 	.word	0x40010400
 8004950:	40014000 	.word	0x40014000
 8004954:	40014400 	.word	0x40014400
 8004958:	40014800 	.word	0x40014800
 800495c:	40000400 	.word	0x40000400
 8004960:	40000800 	.word	0x40000800
 8004964:	40000c00 	.word	0x40000c00
 8004968:	40001800 	.word	0x40001800
 800496c:	00010007 	.word	0x00010007

08004970 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800497c:	2300      	movs	r3, #0
 800497e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004986:	2b01      	cmp	r3, #1
 8004988:	d101      	bne.n	800498e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800498a:	2302      	movs	r3, #2
 800498c:	e0ff      	b.n	8004b8e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b14      	cmp	r3, #20
 800499a:	f200 80f0 	bhi.w	8004b7e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800499e:	a201      	add	r2, pc, #4	@ (adr r2, 80049a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a4:	080049f9 	.word	0x080049f9
 80049a8:	08004b7f 	.word	0x08004b7f
 80049ac:	08004b7f 	.word	0x08004b7f
 80049b0:	08004b7f 	.word	0x08004b7f
 80049b4:	08004a39 	.word	0x08004a39
 80049b8:	08004b7f 	.word	0x08004b7f
 80049bc:	08004b7f 	.word	0x08004b7f
 80049c0:	08004b7f 	.word	0x08004b7f
 80049c4:	08004a7b 	.word	0x08004a7b
 80049c8:	08004b7f 	.word	0x08004b7f
 80049cc:	08004b7f 	.word	0x08004b7f
 80049d0:	08004b7f 	.word	0x08004b7f
 80049d4:	08004abb 	.word	0x08004abb
 80049d8:	08004b7f 	.word	0x08004b7f
 80049dc:	08004b7f 	.word	0x08004b7f
 80049e0:	08004b7f 	.word	0x08004b7f
 80049e4:	08004afd 	.word	0x08004afd
 80049e8:	08004b7f 	.word	0x08004b7f
 80049ec:	08004b7f 	.word	0x08004b7f
 80049f0:	08004b7f 	.word	0x08004b7f
 80049f4:	08004b3d 	.word	0x08004b3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68b9      	ldr	r1, [r7, #8]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 fa62 	bl	8004ec8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	699a      	ldr	r2, [r3, #24]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f042 0208 	orr.w	r2, r2, #8
 8004a12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	699a      	ldr	r2, [r3, #24]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 0204 	bic.w	r2, r2, #4
 8004a22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6999      	ldr	r1, [r3, #24]
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	691a      	ldr	r2, [r3, #16]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	619a      	str	r2, [r3, #24]
      break;
 8004a36:	e0a5      	b.n	8004b84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68b9      	ldr	r1, [r7, #8]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 fad2 	bl	8004fe8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	699a      	ldr	r2, [r3, #24]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	699a      	ldr	r2, [r3, #24]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6999      	ldr	r1, [r3, #24]
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	021a      	lsls	r2, r3, #8
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	430a      	orrs	r2, r1
 8004a76:	619a      	str	r2, [r3, #24]
      break;
 8004a78:	e084      	b.n	8004b84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68b9      	ldr	r1, [r7, #8]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 fb3b 	bl	80050fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	69da      	ldr	r2, [r3, #28]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f042 0208 	orr.w	r2, r2, #8
 8004a94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	69da      	ldr	r2, [r3, #28]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f022 0204 	bic.w	r2, r2, #4
 8004aa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	69d9      	ldr	r1, [r3, #28]
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	691a      	ldr	r2, [r3, #16]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	61da      	str	r2, [r3, #28]
      break;
 8004ab8:	e064      	b.n	8004b84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68b9      	ldr	r1, [r7, #8]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f000 fba3 	bl	800520c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	69da      	ldr	r2, [r3, #28]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ad4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	69da      	ldr	r2, [r3, #28]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ae4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	69d9      	ldr	r1, [r3, #28]
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	021a      	lsls	r2, r3, #8
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	61da      	str	r2, [r3, #28]
      break;
 8004afa:	e043      	b.n	8004b84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68b9      	ldr	r1, [r7, #8]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 fbec 	bl	80052e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 0208 	orr.w	r2, r2, #8
 8004b16:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f022 0204 	bic.w	r2, r2, #4
 8004b26:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	691a      	ldr	r2, [r3, #16]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004b3a:	e023      	b.n	8004b84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68b9      	ldr	r1, [r7, #8]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 fc30 	bl	80053a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b56:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b66:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	021a      	lsls	r2, r3, #8
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004b7c:	e002      	b.n	8004b84 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	75fb      	strb	r3, [r7, #23]
      break;
 8004b82:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3718      	adds	r7, #24
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop

08004b98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d101      	bne.n	8004bb4 <HAL_TIM_ConfigClockSource+0x1c>
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	e0dc      	b.n	8004d6e <HAL_TIM_ConfigClockSource+0x1d6>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	4b6a      	ldr	r3, [pc, #424]	@ (8004d78 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a64      	ldr	r2, [pc, #400]	@ (8004d7c <HAL_TIM_ConfigClockSource+0x1e4>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	f000 80a9 	beq.w	8004d42 <HAL_TIM_ConfigClockSource+0x1aa>
 8004bf0:	4a62      	ldr	r2, [pc, #392]	@ (8004d7c <HAL_TIM_ConfigClockSource+0x1e4>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	f200 80ae 	bhi.w	8004d54 <HAL_TIM_ConfigClockSource+0x1bc>
 8004bf8:	4a61      	ldr	r2, [pc, #388]	@ (8004d80 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	f000 80a1 	beq.w	8004d42 <HAL_TIM_ConfigClockSource+0x1aa>
 8004c00:	4a5f      	ldr	r2, [pc, #380]	@ (8004d80 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	f200 80a6 	bhi.w	8004d54 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c08:	4a5e      	ldr	r2, [pc, #376]	@ (8004d84 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	f000 8099 	beq.w	8004d42 <HAL_TIM_ConfigClockSource+0x1aa>
 8004c10:	4a5c      	ldr	r2, [pc, #368]	@ (8004d84 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	f200 809e 	bhi.w	8004d54 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c18:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004c1c:	f000 8091 	beq.w	8004d42 <HAL_TIM_ConfigClockSource+0x1aa>
 8004c20:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004c24:	f200 8096 	bhi.w	8004d54 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c2c:	f000 8089 	beq.w	8004d42 <HAL_TIM_ConfigClockSource+0x1aa>
 8004c30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c34:	f200 808e 	bhi.w	8004d54 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c3c:	d03e      	beq.n	8004cbc <HAL_TIM_ConfigClockSource+0x124>
 8004c3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c42:	f200 8087 	bhi.w	8004d54 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c4a:	f000 8086 	beq.w	8004d5a <HAL_TIM_ConfigClockSource+0x1c2>
 8004c4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c52:	d87f      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c54:	2b70      	cmp	r3, #112	@ 0x70
 8004c56:	d01a      	beq.n	8004c8e <HAL_TIM_ConfigClockSource+0xf6>
 8004c58:	2b70      	cmp	r3, #112	@ 0x70
 8004c5a:	d87b      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c5c:	2b60      	cmp	r3, #96	@ 0x60
 8004c5e:	d050      	beq.n	8004d02 <HAL_TIM_ConfigClockSource+0x16a>
 8004c60:	2b60      	cmp	r3, #96	@ 0x60
 8004c62:	d877      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c64:	2b50      	cmp	r3, #80	@ 0x50
 8004c66:	d03c      	beq.n	8004ce2 <HAL_TIM_ConfigClockSource+0x14a>
 8004c68:	2b50      	cmp	r3, #80	@ 0x50
 8004c6a:	d873      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c6c:	2b40      	cmp	r3, #64	@ 0x40
 8004c6e:	d058      	beq.n	8004d22 <HAL_TIM_ConfigClockSource+0x18a>
 8004c70:	2b40      	cmp	r3, #64	@ 0x40
 8004c72:	d86f      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c74:	2b30      	cmp	r3, #48	@ 0x30
 8004c76:	d064      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x1aa>
 8004c78:	2b30      	cmp	r3, #48	@ 0x30
 8004c7a:	d86b      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c7c:	2b20      	cmp	r3, #32
 8004c7e:	d060      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x1aa>
 8004c80:	2b20      	cmp	r3, #32
 8004c82:	d867      	bhi.n	8004d54 <HAL_TIM_ConfigClockSource+0x1bc>
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d05c      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x1aa>
 8004c88:	2b10      	cmp	r3, #16
 8004c8a:	d05a      	beq.n	8004d42 <HAL_TIM_ConfigClockSource+0x1aa>
 8004c8c:	e062      	b.n	8004d54 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c9e:	f000 fc67 	bl	8005570 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004cb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	609a      	str	r2, [r3, #8]
      break;
 8004cba:	e04f      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ccc:	f000 fc50 	bl	8005570 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689a      	ldr	r2, [r3, #8]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004cde:	609a      	str	r2, [r3, #8]
      break;
 8004ce0:	e03c      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cee:	461a      	mov	r2, r3
 8004cf0:	f000 fbc0 	bl	8005474 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2150      	movs	r1, #80	@ 0x50
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 fc1a 	bl	8005534 <TIM_ITRx_SetConfig>
      break;
 8004d00:	e02c      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d0e:	461a      	mov	r2, r3
 8004d10:	f000 fbdf 	bl	80054d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2160      	movs	r1, #96	@ 0x60
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 fc0a 	bl	8005534 <TIM_ITRx_SetConfig>
      break;
 8004d20:	e01c      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d2e:	461a      	mov	r2, r3
 8004d30:	f000 fba0 	bl	8005474 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2140      	movs	r1, #64	@ 0x40
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 fbfa 	bl	8005534 <TIM_ITRx_SetConfig>
      break;
 8004d40:	e00c      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	f000 fbf1 	bl	8005534 <TIM_ITRx_SetConfig>
      break;
 8004d52:	e003      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	73fb      	strb	r3, [r7, #15]
      break;
 8004d58:	e000      	b.n	8004d5c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8004d5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	ffceff88 	.word	0xffceff88
 8004d7c:	00100040 	.word	0x00100040
 8004d80:	00100030 	.word	0x00100030
 8004d84:	00100020 	.word	0x00100020

08004d88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a43      	ldr	r2, [pc, #268]	@ (8004ea8 <TIM_Base_SetConfig+0x120>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d013      	beq.n	8004dc8 <TIM_Base_SetConfig+0x40>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004da6:	d00f      	beq.n	8004dc8 <TIM_Base_SetConfig+0x40>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a40      	ldr	r2, [pc, #256]	@ (8004eac <TIM_Base_SetConfig+0x124>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d00b      	beq.n	8004dc8 <TIM_Base_SetConfig+0x40>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a3f      	ldr	r2, [pc, #252]	@ (8004eb0 <TIM_Base_SetConfig+0x128>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d007      	beq.n	8004dc8 <TIM_Base_SetConfig+0x40>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a3e      	ldr	r2, [pc, #248]	@ (8004eb4 <TIM_Base_SetConfig+0x12c>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d003      	beq.n	8004dc8 <TIM_Base_SetConfig+0x40>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a3d      	ldr	r2, [pc, #244]	@ (8004eb8 <TIM_Base_SetConfig+0x130>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d108      	bne.n	8004dda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a32      	ldr	r2, [pc, #200]	@ (8004ea8 <TIM_Base_SetConfig+0x120>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d01f      	beq.n	8004e22 <TIM_Base_SetConfig+0x9a>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004de8:	d01b      	beq.n	8004e22 <TIM_Base_SetConfig+0x9a>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a2f      	ldr	r2, [pc, #188]	@ (8004eac <TIM_Base_SetConfig+0x124>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d017      	beq.n	8004e22 <TIM_Base_SetConfig+0x9a>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a2e      	ldr	r2, [pc, #184]	@ (8004eb0 <TIM_Base_SetConfig+0x128>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d013      	beq.n	8004e22 <TIM_Base_SetConfig+0x9a>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a2d      	ldr	r2, [pc, #180]	@ (8004eb4 <TIM_Base_SetConfig+0x12c>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d00f      	beq.n	8004e22 <TIM_Base_SetConfig+0x9a>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a2c      	ldr	r2, [pc, #176]	@ (8004eb8 <TIM_Base_SetConfig+0x130>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d00b      	beq.n	8004e22 <TIM_Base_SetConfig+0x9a>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a2b      	ldr	r2, [pc, #172]	@ (8004ebc <TIM_Base_SetConfig+0x134>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d007      	beq.n	8004e22 <TIM_Base_SetConfig+0x9a>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a2a      	ldr	r2, [pc, #168]	@ (8004ec0 <TIM_Base_SetConfig+0x138>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d003      	beq.n	8004e22 <TIM_Base_SetConfig+0x9a>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a29      	ldr	r2, [pc, #164]	@ (8004ec4 <TIM_Base_SetConfig+0x13c>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d108      	bne.n	8004e34 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	689a      	ldr	r2, [r3, #8]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a14      	ldr	r2, [pc, #80]	@ (8004ea8 <TIM_Base_SetConfig+0x120>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d00f      	beq.n	8004e7a <TIM_Base_SetConfig+0xf2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a16      	ldr	r2, [pc, #88]	@ (8004eb8 <TIM_Base_SetConfig+0x130>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d00b      	beq.n	8004e7a <TIM_Base_SetConfig+0xf2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a15      	ldr	r2, [pc, #84]	@ (8004ebc <TIM_Base_SetConfig+0x134>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d007      	beq.n	8004e7a <TIM_Base_SetConfig+0xf2>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a14      	ldr	r2, [pc, #80]	@ (8004ec0 <TIM_Base_SetConfig+0x138>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d003      	beq.n	8004e7a <TIM_Base_SetConfig+0xf2>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a13      	ldr	r2, [pc, #76]	@ (8004ec4 <TIM_Base_SetConfig+0x13c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d103      	bne.n	8004e82 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	691a      	ldr	r2, [r3, #16]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f043 0204 	orr.w	r2, r3, #4
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2201      	movs	r2, #1
 8004e92:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	601a      	str	r2, [r3, #0]
}
 8004e9a:	bf00      	nop
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	40010000 	.word	0x40010000
 8004eac:	40000400 	.word	0x40000400
 8004eb0:	40000800 	.word	0x40000800
 8004eb4:	40000c00 	.word	0x40000c00
 8004eb8:	40010400 	.word	0x40010400
 8004ebc:	40014000 	.word	0x40014000
 8004ec0:	40014400 	.word	0x40014400
 8004ec4:	40014800 	.word	0x40014800

08004ec8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b087      	sub	sp, #28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	f023 0201 	bic.w	r2, r3, #1
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	4b37      	ldr	r3, [pc, #220]	@ (8004fd0 <TIM_OC1_SetConfig+0x108>)
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 0303 	bic.w	r3, r3, #3
 8004efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f023 0302 	bic.w	r3, r3, #2
 8004f10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a2d      	ldr	r2, [pc, #180]	@ (8004fd4 <TIM_OC1_SetConfig+0x10c>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d00f      	beq.n	8004f44 <TIM_OC1_SetConfig+0x7c>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a2c      	ldr	r2, [pc, #176]	@ (8004fd8 <TIM_OC1_SetConfig+0x110>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d00b      	beq.n	8004f44 <TIM_OC1_SetConfig+0x7c>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a2b      	ldr	r2, [pc, #172]	@ (8004fdc <TIM_OC1_SetConfig+0x114>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d007      	beq.n	8004f44 <TIM_OC1_SetConfig+0x7c>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a2a      	ldr	r2, [pc, #168]	@ (8004fe0 <TIM_OC1_SetConfig+0x118>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d003      	beq.n	8004f44 <TIM_OC1_SetConfig+0x7c>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a29      	ldr	r2, [pc, #164]	@ (8004fe4 <TIM_OC1_SetConfig+0x11c>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d10c      	bne.n	8004f5e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f023 0308 	bic.w	r3, r3, #8
 8004f4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f023 0304 	bic.w	r3, r3, #4
 8004f5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a1c      	ldr	r2, [pc, #112]	@ (8004fd4 <TIM_OC1_SetConfig+0x10c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d00f      	beq.n	8004f86 <TIM_OC1_SetConfig+0xbe>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a1b      	ldr	r2, [pc, #108]	@ (8004fd8 <TIM_OC1_SetConfig+0x110>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d00b      	beq.n	8004f86 <TIM_OC1_SetConfig+0xbe>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a1a      	ldr	r2, [pc, #104]	@ (8004fdc <TIM_OC1_SetConfig+0x114>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d007      	beq.n	8004f86 <TIM_OC1_SetConfig+0xbe>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a19      	ldr	r2, [pc, #100]	@ (8004fe0 <TIM_OC1_SetConfig+0x118>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d003      	beq.n	8004f86 <TIM_OC1_SetConfig+0xbe>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a18      	ldr	r2, [pc, #96]	@ (8004fe4 <TIM_OC1_SetConfig+0x11c>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d111      	bne.n	8004faa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	621a      	str	r2, [r3, #32]
}
 8004fc4:	bf00      	nop
 8004fc6:	371c      	adds	r7, #28
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	fffeff8f 	.word	0xfffeff8f
 8004fd4:	40010000 	.word	0x40010000
 8004fd8:	40010400 	.word	0x40010400
 8004fdc:	40014000 	.word	0x40014000
 8004fe0:	40014400 	.word	0x40014400
 8004fe4:	40014800 	.word	0x40014800

08004fe8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b087      	sub	sp, #28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	f023 0210 	bic.w	r2, r3, #16
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	4b34      	ldr	r3, [pc, #208]	@ (80050e4 <TIM_OC2_SetConfig+0xfc>)
 8005014:	4013      	ands	r3, r2
 8005016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800501e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	021b      	lsls	r3, r3, #8
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	4313      	orrs	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f023 0320 	bic.w	r3, r3, #32
 8005032:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	011b      	lsls	r3, r3, #4
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	4313      	orrs	r3, r2
 800503e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a29      	ldr	r2, [pc, #164]	@ (80050e8 <TIM_OC2_SetConfig+0x100>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d003      	beq.n	8005050 <TIM_OC2_SetConfig+0x68>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a28      	ldr	r2, [pc, #160]	@ (80050ec <TIM_OC2_SetConfig+0x104>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d10d      	bne.n	800506c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005056:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	011b      	lsls	r3, r3, #4
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	4313      	orrs	r3, r2
 8005062:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800506a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a1e      	ldr	r2, [pc, #120]	@ (80050e8 <TIM_OC2_SetConfig+0x100>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d00f      	beq.n	8005094 <TIM_OC2_SetConfig+0xac>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a1d      	ldr	r2, [pc, #116]	@ (80050ec <TIM_OC2_SetConfig+0x104>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d00b      	beq.n	8005094 <TIM_OC2_SetConfig+0xac>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a1c      	ldr	r2, [pc, #112]	@ (80050f0 <TIM_OC2_SetConfig+0x108>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d007      	beq.n	8005094 <TIM_OC2_SetConfig+0xac>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a1b      	ldr	r2, [pc, #108]	@ (80050f4 <TIM_OC2_SetConfig+0x10c>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d003      	beq.n	8005094 <TIM_OC2_SetConfig+0xac>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a1a      	ldr	r2, [pc, #104]	@ (80050f8 <TIM_OC2_SetConfig+0x110>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d113      	bne.n	80050bc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800509a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685a      	ldr	r2, [r3, #4]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	621a      	str	r2, [r3, #32]
}
 80050d6:	bf00      	nop
 80050d8:	371c      	adds	r7, #28
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	feff8fff 	.word	0xfeff8fff
 80050e8:	40010000 	.word	0x40010000
 80050ec:	40010400 	.word	0x40010400
 80050f0:	40014000 	.word	0x40014000
 80050f4:	40014400 	.word	0x40014400
 80050f8:	40014800 	.word	0x40014800

080050fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	4b33      	ldr	r3, [pc, #204]	@ (80051f4 <TIM_OC3_SetConfig+0xf8>)
 8005128:	4013      	ands	r3, r2
 800512a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f023 0303 	bic.w	r3, r3, #3
 8005132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	4313      	orrs	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005144:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	021b      	lsls	r3, r3, #8
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	4313      	orrs	r3, r2
 8005150:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a28      	ldr	r2, [pc, #160]	@ (80051f8 <TIM_OC3_SetConfig+0xfc>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d003      	beq.n	8005162 <TIM_OC3_SetConfig+0x66>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a27      	ldr	r2, [pc, #156]	@ (80051fc <TIM_OC3_SetConfig+0x100>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d10d      	bne.n	800517e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005168:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	021b      	lsls	r3, r3, #8
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	4313      	orrs	r3, r2
 8005174:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800517c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a1d      	ldr	r2, [pc, #116]	@ (80051f8 <TIM_OC3_SetConfig+0xfc>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d00f      	beq.n	80051a6 <TIM_OC3_SetConfig+0xaa>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a1c      	ldr	r2, [pc, #112]	@ (80051fc <TIM_OC3_SetConfig+0x100>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d00b      	beq.n	80051a6 <TIM_OC3_SetConfig+0xaa>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a1b      	ldr	r2, [pc, #108]	@ (8005200 <TIM_OC3_SetConfig+0x104>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d007      	beq.n	80051a6 <TIM_OC3_SetConfig+0xaa>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a1a      	ldr	r2, [pc, #104]	@ (8005204 <TIM_OC3_SetConfig+0x108>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d003      	beq.n	80051a6 <TIM_OC3_SetConfig+0xaa>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a19      	ldr	r2, [pc, #100]	@ (8005208 <TIM_OC3_SetConfig+0x10c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d113      	bne.n	80051ce <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80051b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	011b      	lsls	r3, r3, #4
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	4313      	orrs	r3, r2
 80051c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	011b      	lsls	r3, r3, #4
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	621a      	str	r2, [r3, #32]
}
 80051e8:	bf00      	nop
 80051ea:	371c      	adds	r7, #28
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr
 80051f4:	fffeff8f 	.word	0xfffeff8f
 80051f8:	40010000 	.word	0x40010000
 80051fc:	40010400 	.word	0x40010400
 8005200:	40014000 	.word	0x40014000
 8005204:	40014400 	.word	0x40014400
 8005208:	40014800 	.word	0x40014800

0800520c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800520c:	b480      	push	{r7}
 800520e:	b087      	sub	sp, #28
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	4b24      	ldr	r3, [pc, #144]	@ (80052c8 <TIM_OC4_SetConfig+0xbc>)
 8005238:	4013      	ands	r3, r2
 800523a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005242:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	021b      	lsls	r3, r3, #8
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	4313      	orrs	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005256:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	031b      	lsls	r3, r3, #12
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	4313      	orrs	r3, r2
 8005262:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a19      	ldr	r2, [pc, #100]	@ (80052cc <TIM_OC4_SetConfig+0xc0>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d00f      	beq.n	800528c <TIM_OC4_SetConfig+0x80>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a18      	ldr	r2, [pc, #96]	@ (80052d0 <TIM_OC4_SetConfig+0xc4>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d00b      	beq.n	800528c <TIM_OC4_SetConfig+0x80>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a17      	ldr	r2, [pc, #92]	@ (80052d4 <TIM_OC4_SetConfig+0xc8>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d007      	beq.n	800528c <TIM_OC4_SetConfig+0x80>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a16      	ldr	r2, [pc, #88]	@ (80052d8 <TIM_OC4_SetConfig+0xcc>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d003      	beq.n	800528c <TIM_OC4_SetConfig+0x80>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a15      	ldr	r2, [pc, #84]	@ (80052dc <TIM_OC4_SetConfig+0xd0>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d109      	bne.n	80052a0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005292:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	019b      	lsls	r3, r3, #6
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	4313      	orrs	r3, r2
 800529e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	621a      	str	r2, [r3, #32]
}
 80052ba:	bf00      	nop
 80052bc:	371c      	adds	r7, #28
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	feff8fff 	.word	0xfeff8fff
 80052cc:	40010000 	.word	0x40010000
 80052d0:	40010400 	.word	0x40010400
 80052d4:	40014000 	.word	0x40014000
 80052d8:	40014400 	.word	0x40014400
 80052dc:	40014800 	.word	0x40014800

080052e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b087      	sub	sp, #28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	4b21      	ldr	r3, [pc, #132]	@ (8005390 <TIM_OC5_SetConfig+0xb0>)
 800530c:	4013      	ands	r3, r2
 800530e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	4313      	orrs	r3, r2
 8005318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005320:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	041b      	lsls	r3, r3, #16
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	4313      	orrs	r3, r2
 800532c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a18      	ldr	r2, [pc, #96]	@ (8005394 <TIM_OC5_SetConfig+0xb4>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d00f      	beq.n	8005356 <TIM_OC5_SetConfig+0x76>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a17      	ldr	r2, [pc, #92]	@ (8005398 <TIM_OC5_SetConfig+0xb8>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00b      	beq.n	8005356 <TIM_OC5_SetConfig+0x76>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a16      	ldr	r2, [pc, #88]	@ (800539c <TIM_OC5_SetConfig+0xbc>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d007      	beq.n	8005356 <TIM_OC5_SetConfig+0x76>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a15      	ldr	r2, [pc, #84]	@ (80053a0 <TIM_OC5_SetConfig+0xc0>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d003      	beq.n	8005356 <TIM_OC5_SetConfig+0x76>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a14      	ldr	r2, [pc, #80]	@ (80053a4 <TIM_OC5_SetConfig+0xc4>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d109      	bne.n	800536a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800535c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	021b      	lsls	r3, r3, #8
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	4313      	orrs	r3, r2
 8005368:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	621a      	str	r2, [r3, #32]
}
 8005384:	bf00      	nop
 8005386:	371c      	adds	r7, #28
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	fffeff8f 	.word	0xfffeff8f
 8005394:	40010000 	.word	0x40010000
 8005398:	40010400 	.word	0x40010400
 800539c:	40014000 	.word	0x40014000
 80053a0:	40014400 	.word	0x40014400
 80053a4:	40014800 	.word	0x40014800

080053a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b087      	sub	sp, #28
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	4b22      	ldr	r3, [pc, #136]	@ (800545c <TIM_OC6_SetConfig+0xb4>)
 80053d4:	4013      	ands	r3, r2
 80053d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	021b      	lsls	r3, r3, #8
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80053ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	051b      	lsls	r3, r3, #20
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a19      	ldr	r2, [pc, #100]	@ (8005460 <TIM_OC6_SetConfig+0xb8>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d00f      	beq.n	8005420 <TIM_OC6_SetConfig+0x78>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a18      	ldr	r2, [pc, #96]	@ (8005464 <TIM_OC6_SetConfig+0xbc>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d00b      	beq.n	8005420 <TIM_OC6_SetConfig+0x78>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a17      	ldr	r2, [pc, #92]	@ (8005468 <TIM_OC6_SetConfig+0xc0>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d007      	beq.n	8005420 <TIM_OC6_SetConfig+0x78>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a16      	ldr	r2, [pc, #88]	@ (800546c <TIM_OC6_SetConfig+0xc4>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d003      	beq.n	8005420 <TIM_OC6_SetConfig+0x78>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a15      	ldr	r2, [pc, #84]	@ (8005470 <TIM_OC6_SetConfig+0xc8>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d109      	bne.n	8005434 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005426:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	029b      	lsls	r3, r3, #10
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	4313      	orrs	r3, r2
 8005432:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	621a      	str	r2, [r3, #32]
}
 800544e:	bf00      	nop
 8005450:	371c      	adds	r7, #28
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	feff8fff 	.word	0xfeff8fff
 8005460:	40010000 	.word	0x40010000
 8005464:	40010400 	.word	0x40010400
 8005468:	40014000 	.word	0x40014000
 800546c:	40014400 	.word	0x40014400
 8005470:	40014800 	.word	0x40014800

08005474 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005474:	b480      	push	{r7}
 8005476:	b087      	sub	sp, #28
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	f023 0201 	bic.w	r2, r3, #1
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800549e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	011b      	lsls	r3, r3, #4
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f023 030a 	bic.w	r3, r3, #10
 80054b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	621a      	str	r2, [r3, #32]
}
 80054c6:	bf00      	nop
 80054c8:	371c      	adds	r7, #28
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b087      	sub	sp, #28
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	60f8      	str	r0, [r7, #12]
 80054da:	60b9      	str	r1, [r7, #8]
 80054dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	f023 0210 	bic.w	r2, r3, #16
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	031b      	lsls	r3, r3, #12
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	4313      	orrs	r3, r2
 8005506:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800550e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	011b      	lsls	r3, r3, #4
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	4313      	orrs	r3, r2
 8005518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	621a      	str	r2, [r3, #32]
}
 8005526:	bf00      	nop
 8005528:	371c      	adds	r7, #28
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
	...

08005534 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005534:	b480      	push	{r7}
 8005536:	b085      	sub	sp, #20
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	4b09      	ldr	r3, [pc, #36]	@ (800556c <TIM_ITRx_SetConfig+0x38>)
 8005548:	4013      	ands	r3, r2
 800554a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4313      	orrs	r3, r2
 8005552:	f043 0307 	orr.w	r3, r3, #7
 8005556:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	609a      	str	r2, [r3, #8]
}
 800555e:	bf00      	nop
 8005560:	3714      	adds	r7, #20
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	ffcfff8f 	.word	0xffcfff8f

08005570 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005570:	b480      	push	{r7}
 8005572:	b087      	sub	sp, #28
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
 800557c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800558a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	021a      	lsls	r2, r3, #8
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	431a      	orrs	r2, r3
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	4313      	orrs	r3, r2
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	4313      	orrs	r3, r2
 800559c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	609a      	str	r2, [r3, #8]
}
 80055a4:	bf00      	nop
 80055a6:	371c      	adds	r7, #28
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b087      	sub	sp, #28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f003 031f 	and.w	r3, r3, #31
 80055c2:	2201      	movs	r2, #1
 80055c4:	fa02 f303 	lsl.w	r3, r2, r3
 80055c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6a1a      	ldr	r2, [r3, #32]
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	43db      	mvns	r3, r3
 80055d2:	401a      	ands	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6a1a      	ldr	r2, [r3, #32]
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	f003 031f 	and.w	r3, r3, #31
 80055e2:	6879      	ldr	r1, [r7, #4]
 80055e4:	fa01 f303 	lsl.w	r3, r1, r3
 80055e8:	431a      	orrs	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	621a      	str	r2, [r3, #32]
}
 80055ee:	bf00      	nop
 80055f0:	371c      	adds	r7, #28
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
	...

080055fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800560c:	2b01      	cmp	r3, #1
 800560e:	d101      	bne.n	8005614 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005610:	2302      	movs	r3, #2
 8005612:	e06d      	b.n	80056f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2202      	movs	r2, #2
 8005620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a30      	ldr	r2, [pc, #192]	@ (80056fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d004      	beq.n	8005648 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a2f      	ldr	r2, [pc, #188]	@ (8005700 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d108      	bne.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800564e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	4313      	orrs	r3, r2
 8005658:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005660:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	4313      	orrs	r3, r2
 800566a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a20      	ldr	r2, [pc, #128]	@ (80056fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d022      	beq.n	80056c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005686:	d01d      	beq.n	80056c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a1d      	ldr	r2, [pc, #116]	@ (8005704 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d018      	beq.n	80056c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a1c      	ldr	r2, [pc, #112]	@ (8005708 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d013      	beq.n	80056c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a1a      	ldr	r2, [pc, #104]	@ (800570c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d00e      	beq.n	80056c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a15      	ldr	r2, [pc, #84]	@ (8005700 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d009      	beq.n	80056c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a16      	ldr	r2, [pc, #88]	@ (8005710 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d004      	beq.n	80056c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a15      	ldr	r2, [pc, #84]	@ (8005714 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d10c      	bne.n	80056de <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3714      	adds	r7, #20
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	40010000 	.word	0x40010000
 8005700:	40010400 	.word	0x40010400
 8005704:	40000400 	.word	0x40000400
 8005708:	40000800 	.word	0x40000800
 800570c:	40000c00 	.word	0x40000c00
 8005710:	40001800 	.word	0x40001800
 8005714:	40014000 	.word	0x40014000

08005718 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005722:	2300      	movs	r3, #0
 8005724:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800572c:	2b01      	cmp	r3, #1
 800572e:	d101      	bne.n	8005734 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005730:	2302      	movs	r3, #2
 8005732:	e065      	b.n	8005800 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	4313      	orrs	r3, r2
 8005748:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	4313      	orrs	r3, r2
 8005756:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	4313      	orrs	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4313      	orrs	r3, r2
 8005772:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	4313      	orrs	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	4313      	orrs	r3, r2
 800578e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800579a:	4313      	orrs	r3, r2
 800579c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	041b      	lsls	r3, r3, #16
 80057aa:	4313      	orrs	r3, r2
 80057ac:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a16      	ldr	r2, [pc, #88]	@ (800580c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d004      	beq.n	80057c2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a14      	ldr	r2, [pc, #80]	@ (8005810 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d115      	bne.n	80057ee <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057cc:	051b      	lsls	r3, r3, #20
 80057ce:	4313      	orrs	r3, r2
 80057d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	69db      	ldr	r3, [r3, #28]
 80057dc:	4313      	orrs	r3, r2
 80057de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	40010000 	.word	0x40010000
 8005810:	40010400 	.word	0x40010400

08005814 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e042      	b.n	80058ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800582c:	2b00      	cmp	r3, #0
 800582e:	d106      	bne.n	800583e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f7fb fc53 	bl	80010e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2224      	movs	r2, #36	@ 0x24
 8005842:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f022 0201 	bic.w	r2, r2, #1
 8005854:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800585a:	2b00      	cmp	r3, #0
 800585c:	d002      	beq.n	8005864 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 fee6 	bl	8006630 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 f97b 	bl	8005b60 <UART_SetConfig>
 800586a:	4603      	mov	r3, r0
 800586c:	2b01      	cmp	r3, #1
 800586e:	d101      	bne.n	8005874 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e01b      	b.n	80058ac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	685a      	ldr	r2, [r3, #4]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005882:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689a      	ldr	r2, [r3, #8]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005892:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f042 0201 	orr.w	r2, r2, #1
 80058a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 ff65 	bl	8006774 <UART_CheckIdleState>
 80058aa:	4603      	mov	r3, r0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3708      	adds	r7, #8
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b08a      	sub	sp, #40	@ 0x28
 80058b8:	af02      	add	r7, sp, #8
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	603b      	str	r3, [r7, #0]
 80058c0:	4613      	mov	r3, r2
 80058c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ca:	2b20      	cmp	r3, #32
 80058cc:	d17b      	bne.n	80059c6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d002      	beq.n	80058da <HAL_UART_Transmit+0x26>
 80058d4:	88fb      	ldrh	r3, [r7, #6]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e074      	b.n	80059c8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2221      	movs	r2, #33	@ 0x21
 80058ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058ee:	f7fb fd2b 	bl	8001348 <HAL_GetTick>
 80058f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	88fa      	ldrh	r2, [r7, #6]
 80058f8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	88fa      	ldrh	r2, [r7, #6]
 8005900:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800590c:	d108      	bne.n	8005920 <HAL_UART_Transmit+0x6c>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d104      	bne.n	8005920 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005916:	2300      	movs	r3, #0
 8005918:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	61bb      	str	r3, [r7, #24]
 800591e:	e003      	b.n	8005928 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005924:	2300      	movs	r3, #0
 8005926:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005928:	e030      	b.n	800598c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	9300      	str	r3, [sp, #0]
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	2200      	movs	r2, #0
 8005932:	2180      	movs	r1, #128	@ 0x80
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f000 ffc7 	bl	80068c8 <UART_WaitOnFlagUntilTimeout>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d005      	beq.n	800594c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2220      	movs	r2, #32
 8005944:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e03d      	b.n	80059c8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10b      	bne.n	800596a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	881b      	ldrh	r3, [r3, #0]
 8005956:	461a      	mov	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005960:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	3302      	adds	r3, #2
 8005966:	61bb      	str	r3, [r7, #24]
 8005968:	e007      	b.n	800597a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	781a      	ldrb	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	3301      	adds	r3, #1
 8005978:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005980:	b29b      	uxth	r3, r3
 8005982:	3b01      	subs	r3, #1
 8005984:	b29a      	uxth	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005992:	b29b      	uxth	r3, r3
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1c8      	bne.n	800592a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	9300      	str	r3, [sp, #0]
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	2200      	movs	r2, #0
 80059a0:	2140      	movs	r1, #64	@ 0x40
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f000 ff90 	bl	80068c8 <UART_WaitOnFlagUntilTimeout>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d005      	beq.n	80059ba <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2220      	movs	r2, #32
 80059b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e006      	b.n	80059c8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2220      	movs	r2, #32
 80059be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80059c2:	2300      	movs	r3, #0
 80059c4:	e000      	b.n	80059c8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80059c6:	2302      	movs	r3, #2
  }
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3720      	adds	r7, #32
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b08a      	sub	sp, #40	@ 0x28
 80059d4:	af02      	add	r7, sp, #8
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	603b      	str	r3, [r7, #0]
 80059dc:	4613      	mov	r3, r2
 80059de:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059e6:	2b20      	cmp	r3, #32
 80059e8:	f040 80b5 	bne.w	8005b56 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d002      	beq.n	80059f8 <HAL_UART_Receive+0x28>
 80059f2:	88fb      	ldrh	r3, [r7, #6]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d101      	bne.n	80059fc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e0ad      	b.n	8005b58 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2222      	movs	r2, #34	@ 0x22
 8005a08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a12:	f7fb fc99 	bl	8001348 <HAL_GetTick>
 8005a16:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	88fa      	ldrh	r2, [r7, #6]
 8005a1c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	88fa      	ldrh	r2, [r7, #6]
 8005a24:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a30:	d10e      	bne.n	8005a50 <HAL_UART_Receive+0x80>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d105      	bne.n	8005a46 <HAL_UART_Receive+0x76>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005a40:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005a44:	e02d      	b.n	8005aa2 <HAL_UART_Receive+0xd2>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	22ff      	movs	r2, #255	@ 0xff
 8005a4a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005a4e:	e028      	b.n	8005aa2 <HAL_UART_Receive+0xd2>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10d      	bne.n	8005a74 <HAL_UART_Receive+0xa4>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d104      	bne.n	8005a6a <HAL_UART_Receive+0x9a>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	22ff      	movs	r2, #255	@ 0xff
 8005a64:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005a68:	e01b      	b.n	8005aa2 <HAL_UART_Receive+0xd2>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	227f      	movs	r2, #127	@ 0x7f
 8005a6e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005a72:	e016      	b.n	8005aa2 <HAL_UART_Receive+0xd2>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a7c:	d10d      	bne.n	8005a9a <HAL_UART_Receive+0xca>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d104      	bne.n	8005a90 <HAL_UART_Receive+0xc0>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	227f      	movs	r2, #127	@ 0x7f
 8005a8a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005a8e:	e008      	b.n	8005aa2 <HAL_UART_Receive+0xd2>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	223f      	movs	r2, #63	@ 0x3f
 8005a94:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005a98:	e003      	b.n	8005aa2 <HAL_UART_Receive+0xd2>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005aa8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ab2:	d108      	bne.n	8005ac6 <HAL_UART_Receive+0xf6>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d104      	bne.n	8005ac6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005abc:	2300      	movs	r3, #0
 8005abe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	61bb      	str	r3, [r7, #24]
 8005ac4:	e003      	b.n	8005ace <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005aca:	2300      	movs	r3, #0
 8005acc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005ace:	e036      	b.n	8005b3e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	9300      	str	r3, [sp, #0]
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	2120      	movs	r1, #32
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f000 fef4 	bl	80068c8 <UART_WaitOnFlagUntilTimeout>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d005      	beq.n	8005af2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2220      	movs	r2, #32
 8005aea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e032      	b.n	8005b58 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d10c      	bne.n	8005b12 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	8a7b      	ldrh	r3, [r7, #18]
 8005b02:	4013      	ands	r3, r2
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	3302      	adds	r3, #2
 8005b0e:	61bb      	str	r3, [r7, #24]
 8005b10:	e00c      	b.n	8005b2c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b18:	b2da      	uxtb	r2, r3
 8005b1a:	8a7b      	ldrh	r3, [r7, #18]
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	4013      	ands	r3, r2
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	3b01      	subs	r3, #1
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1c2      	bne.n	8005ad0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2220      	movs	r2, #32
 8005b4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8005b52:	2300      	movs	r3, #0
 8005b54:	e000      	b.n	8005b58 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8005b56:	2302      	movs	r3, #2
  }
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3720      	adds	r7, #32
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b64:	b092      	sub	sp, #72	@ 0x48
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	69db      	ldr	r3, [r3, #28]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	4bbe      	ldr	r3, [pc, #760]	@ (8005e88 <UART_SetConfig+0x328>)
 8005b90:	4013      	ands	r3, r2
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	6812      	ldr	r2, [r2, #0]
 8005b96:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005b98:	430b      	orrs	r3, r1
 8005b9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	68da      	ldr	r2, [r3, #12]
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4ab3      	ldr	r2, [pc, #716]	@ (8005e8c <UART_SetConfig+0x32c>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d004      	beq.n	8005bcc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	689a      	ldr	r2, [r3, #8]
 8005bd2:	4baf      	ldr	r3, [pc, #700]	@ (8005e90 <UART_SetConfig+0x330>)
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	6812      	ldr	r2, [r2, #0]
 8005bda:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005bdc:	430b      	orrs	r3, r1
 8005bde:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be6:	f023 010f 	bic.w	r1, r3, #15
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4aa6      	ldr	r2, [pc, #664]	@ (8005e94 <UART_SetConfig+0x334>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d177      	bne.n	8005cf0 <UART_SetConfig+0x190>
 8005c00:	4ba5      	ldr	r3, [pc, #660]	@ (8005e98 <UART_SetConfig+0x338>)
 8005c02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c08:	2b28      	cmp	r3, #40	@ 0x28
 8005c0a:	d86d      	bhi.n	8005ce8 <UART_SetConfig+0x188>
 8005c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c14 <UART_SetConfig+0xb4>)
 8005c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c12:	bf00      	nop
 8005c14:	08005cb9 	.word	0x08005cb9
 8005c18:	08005ce9 	.word	0x08005ce9
 8005c1c:	08005ce9 	.word	0x08005ce9
 8005c20:	08005ce9 	.word	0x08005ce9
 8005c24:	08005ce9 	.word	0x08005ce9
 8005c28:	08005ce9 	.word	0x08005ce9
 8005c2c:	08005ce9 	.word	0x08005ce9
 8005c30:	08005ce9 	.word	0x08005ce9
 8005c34:	08005cc1 	.word	0x08005cc1
 8005c38:	08005ce9 	.word	0x08005ce9
 8005c3c:	08005ce9 	.word	0x08005ce9
 8005c40:	08005ce9 	.word	0x08005ce9
 8005c44:	08005ce9 	.word	0x08005ce9
 8005c48:	08005ce9 	.word	0x08005ce9
 8005c4c:	08005ce9 	.word	0x08005ce9
 8005c50:	08005ce9 	.word	0x08005ce9
 8005c54:	08005cc9 	.word	0x08005cc9
 8005c58:	08005ce9 	.word	0x08005ce9
 8005c5c:	08005ce9 	.word	0x08005ce9
 8005c60:	08005ce9 	.word	0x08005ce9
 8005c64:	08005ce9 	.word	0x08005ce9
 8005c68:	08005ce9 	.word	0x08005ce9
 8005c6c:	08005ce9 	.word	0x08005ce9
 8005c70:	08005ce9 	.word	0x08005ce9
 8005c74:	08005cd1 	.word	0x08005cd1
 8005c78:	08005ce9 	.word	0x08005ce9
 8005c7c:	08005ce9 	.word	0x08005ce9
 8005c80:	08005ce9 	.word	0x08005ce9
 8005c84:	08005ce9 	.word	0x08005ce9
 8005c88:	08005ce9 	.word	0x08005ce9
 8005c8c:	08005ce9 	.word	0x08005ce9
 8005c90:	08005ce9 	.word	0x08005ce9
 8005c94:	08005cd9 	.word	0x08005cd9
 8005c98:	08005ce9 	.word	0x08005ce9
 8005c9c:	08005ce9 	.word	0x08005ce9
 8005ca0:	08005ce9 	.word	0x08005ce9
 8005ca4:	08005ce9 	.word	0x08005ce9
 8005ca8:	08005ce9 	.word	0x08005ce9
 8005cac:	08005ce9 	.word	0x08005ce9
 8005cb0:	08005ce9 	.word	0x08005ce9
 8005cb4:	08005ce1 	.word	0x08005ce1
 8005cb8:	2301      	movs	r3, #1
 8005cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cbe:	e222      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005cc0:	2304      	movs	r3, #4
 8005cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cc6:	e21e      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005cc8:	2308      	movs	r3, #8
 8005cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cce:	e21a      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005cd0:	2310      	movs	r3, #16
 8005cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cd6:	e216      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005cd8:	2320      	movs	r3, #32
 8005cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cde:	e212      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005ce0:	2340      	movs	r3, #64	@ 0x40
 8005ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ce6:	e20e      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005ce8:	2380      	movs	r3, #128	@ 0x80
 8005cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cee:	e20a      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a69      	ldr	r2, [pc, #420]	@ (8005e9c <UART_SetConfig+0x33c>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d130      	bne.n	8005d5c <UART_SetConfig+0x1fc>
 8005cfa:	4b67      	ldr	r3, [pc, #412]	@ (8005e98 <UART_SetConfig+0x338>)
 8005cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cfe:	f003 0307 	and.w	r3, r3, #7
 8005d02:	2b05      	cmp	r3, #5
 8005d04:	d826      	bhi.n	8005d54 <UART_SetConfig+0x1f4>
 8005d06:	a201      	add	r2, pc, #4	@ (adr r2, 8005d0c <UART_SetConfig+0x1ac>)
 8005d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0c:	08005d25 	.word	0x08005d25
 8005d10:	08005d2d 	.word	0x08005d2d
 8005d14:	08005d35 	.word	0x08005d35
 8005d18:	08005d3d 	.word	0x08005d3d
 8005d1c:	08005d45 	.word	0x08005d45
 8005d20:	08005d4d 	.word	0x08005d4d
 8005d24:	2300      	movs	r3, #0
 8005d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d2a:	e1ec      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005d2c:	2304      	movs	r3, #4
 8005d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d32:	e1e8      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005d34:	2308      	movs	r3, #8
 8005d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d3a:	e1e4      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005d3c:	2310      	movs	r3, #16
 8005d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d42:	e1e0      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005d44:	2320      	movs	r3, #32
 8005d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d4a:	e1dc      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005d4c:	2340      	movs	r3, #64	@ 0x40
 8005d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d52:	e1d8      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005d54:	2380      	movs	r3, #128	@ 0x80
 8005d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d5a:	e1d4      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a4f      	ldr	r2, [pc, #316]	@ (8005ea0 <UART_SetConfig+0x340>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d130      	bne.n	8005dc8 <UART_SetConfig+0x268>
 8005d66:	4b4c      	ldr	r3, [pc, #304]	@ (8005e98 <UART_SetConfig+0x338>)
 8005d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d6a:	f003 0307 	and.w	r3, r3, #7
 8005d6e:	2b05      	cmp	r3, #5
 8005d70:	d826      	bhi.n	8005dc0 <UART_SetConfig+0x260>
 8005d72:	a201      	add	r2, pc, #4	@ (adr r2, 8005d78 <UART_SetConfig+0x218>)
 8005d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d78:	08005d91 	.word	0x08005d91
 8005d7c:	08005d99 	.word	0x08005d99
 8005d80:	08005da1 	.word	0x08005da1
 8005d84:	08005da9 	.word	0x08005da9
 8005d88:	08005db1 	.word	0x08005db1
 8005d8c:	08005db9 	.word	0x08005db9
 8005d90:	2300      	movs	r3, #0
 8005d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d96:	e1b6      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005d98:	2304      	movs	r3, #4
 8005d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d9e:	e1b2      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005da0:	2308      	movs	r3, #8
 8005da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005da6:	e1ae      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005da8:	2310      	movs	r3, #16
 8005daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dae:	e1aa      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005db0:	2320      	movs	r3, #32
 8005db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005db6:	e1a6      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005db8:	2340      	movs	r3, #64	@ 0x40
 8005dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dbe:	e1a2      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005dc0:	2380      	movs	r3, #128	@ 0x80
 8005dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dc6:	e19e      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a35      	ldr	r2, [pc, #212]	@ (8005ea4 <UART_SetConfig+0x344>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d130      	bne.n	8005e34 <UART_SetConfig+0x2d4>
 8005dd2:	4b31      	ldr	r3, [pc, #196]	@ (8005e98 <UART_SetConfig+0x338>)
 8005dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dd6:	f003 0307 	and.w	r3, r3, #7
 8005dda:	2b05      	cmp	r3, #5
 8005ddc:	d826      	bhi.n	8005e2c <UART_SetConfig+0x2cc>
 8005dde:	a201      	add	r2, pc, #4	@ (adr r2, 8005de4 <UART_SetConfig+0x284>)
 8005de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de4:	08005dfd 	.word	0x08005dfd
 8005de8:	08005e05 	.word	0x08005e05
 8005dec:	08005e0d 	.word	0x08005e0d
 8005df0:	08005e15 	.word	0x08005e15
 8005df4:	08005e1d 	.word	0x08005e1d
 8005df8:	08005e25 	.word	0x08005e25
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e02:	e180      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005e04:	2304      	movs	r3, #4
 8005e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e0a:	e17c      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005e0c:	2308      	movs	r3, #8
 8005e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e12:	e178      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005e14:	2310      	movs	r3, #16
 8005e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e1a:	e174      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005e1c:	2320      	movs	r3, #32
 8005e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e22:	e170      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005e24:	2340      	movs	r3, #64	@ 0x40
 8005e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e2a:	e16c      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005e2c:	2380      	movs	r3, #128	@ 0x80
 8005e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e32:	e168      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a1b      	ldr	r2, [pc, #108]	@ (8005ea8 <UART_SetConfig+0x348>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d142      	bne.n	8005ec4 <UART_SetConfig+0x364>
 8005e3e:	4b16      	ldr	r3, [pc, #88]	@ (8005e98 <UART_SetConfig+0x338>)
 8005e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e42:	f003 0307 	and.w	r3, r3, #7
 8005e46:	2b05      	cmp	r3, #5
 8005e48:	d838      	bhi.n	8005ebc <UART_SetConfig+0x35c>
 8005e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e50 <UART_SetConfig+0x2f0>)
 8005e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e50:	08005e69 	.word	0x08005e69
 8005e54:	08005e71 	.word	0x08005e71
 8005e58:	08005e79 	.word	0x08005e79
 8005e5c:	08005e81 	.word	0x08005e81
 8005e60:	08005ead 	.word	0x08005ead
 8005e64:	08005eb5 	.word	0x08005eb5
 8005e68:	2300      	movs	r3, #0
 8005e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e6e:	e14a      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005e70:	2304      	movs	r3, #4
 8005e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e76:	e146      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005e78:	2308      	movs	r3, #8
 8005e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e7e:	e142      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005e80:	2310      	movs	r3, #16
 8005e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e86:	e13e      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005e88:	cfff69f3 	.word	0xcfff69f3
 8005e8c:	58000c00 	.word	0x58000c00
 8005e90:	11fff4ff 	.word	0x11fff4ff
 8005e94:	40011000 	.word	0x40011000
 8005e98:	58024400 	.word	0x58024400
 8005e9c:	40004400 	.word	0x40004400
 8005ea0:	40004800 	.word	0x40004800
 8005ea4:	40004c00 	.word	0x40004c00
 8005ea8:	40005000 	.word	0x40005000
 8005eac:	2320      	movs	r3, #32
 8005eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eb2:	e128      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005eb4:	2340      	movs	r3, #64	@ 0x40
 8005eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eba:	e124      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005ebc:	2380      	movs	r3, #128	@ 0x80
 8005ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ec2:	e120      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4acb      	ldr	r2, [pc, #812]	@ (80061f8 <UART_SetConfig+0x698>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d176      	bne.n	8005fbc <UART_SetConfig+0x45c>
 8005ece:	4bcb      	ldr	r3, [pc, #812]	@ (80061fc <UART_SetConfig+0x69c>)
 8005ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ed2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ed6:	2b28      	cmp	r3, #40	@ 0x28
 8005ed8:	d86c      	bhi.n	8005fb4 <UART_SetConfig+0x454>
 8005eda:	a201      	add	r2, pc, #4	@ (adr r2, 8005ee0 <UART_SetConfig+0x380>)
 8005edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee0:	08005f85 	.word	0x08005f85
 8005ee4:	08005fb5 	.word	0x08005fb5
 8005ee8:	08005fb5 	.word	0x08005fb5
 8005eec:	08005fb5 	.word	0x08005fb5
 8005ef0:	08005fb5 	.word	0x08005fb5
 8005ef4:	08005fb5 	.word	0x08005fb5
 8005ef8:	08005fb5 	.word	0x08005fb5
 8005efc:	08005fb5 	.word	0x08005fb5
 8005f00:	08005f8d 	.word	0x08005f8d
 8005f04:	08005fb5 	.word	0x08005fb5
 8005f08:	08005fb5 	.word	0x08005fb5
 8005f0c:	08005fb5 	.word	0x08005fb5
 8005f10:	08005fb5 	.word	0x08005fb5
 8005f14:	08005fb5 	.word	0x08005fb5
 8005f18:	08005fb5 	.word	0x08005fb5
 8005f1c:	08005fb5 	.word	0x08005fb5
 8005f20:	08005f95 	.word	0x08005f95
 8005f24:	08005fb5 	.word	0x08005fb5
 8005f28:	08005fb5 	.word	0x08005fb5
 8005f2c:	08005fb5 	.word	0x08005fb5
 8005f30:	08005fb5 	.word	0x08005fb5
 8005f34:	08005fb5 	.word	0x08005fb5
 8005f38:	08005fb5 	.word	0x08005fb5
 8005f3c:	08005fb5 	.word	0x08005fb5
 8005f40:	08005f9d 	.word	0x08005f9d
 8005f44:	08005fb5 	.word	0x08005fb5
 8005f48:	08005fb5 	.word	0x08005fb5
 8005f4c:	08005fb5 	.word	0x08005fb5
 8005f50:	08005fb5 	.word	0x08005fb5
 8005f54:	08005fb5 	.word	0x08005fb5
 8005f58:	08005fb5 	.word	0x08005fb5
 8005f5c:	08005fb5 	.word	0x08005fb5
 8005f60:	08005fa5 	.word	0x08005fa5
 8005f64:	08005fb5 	.word	0x08005fb5
 8005f68:	08005fb5 	.word	0x08005fb5
 8005f6c:	08005fb5 	.word	0x08005fb5
 8005f70:	08005fb5 	.word	0x08005fb5
 8005f74:	08005fb5 	.word	0x08005fb5
 8005f78:	08005fb5 	.word	0x08005fb5
 8005f7c:	08005fb5 	.word	0x08005fb5
 8005f80:	08005fad 	.word	0x08005fad
 8005f84:	2301      	movs	r3, #1
 8005f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f8a:	e0bc      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005f8c:	2304      	movs	r3, #4
 8005f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f92:	e0b8      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005f94:	2308      	movs	r3, #8
 8005f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f9a:	e0b4      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005f9c:	2310      	movs	r3, #16
 8005f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fa2:	e0b0      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005fa4:	2320      	movs	r3, #32
 8005fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005faa:	e0ac      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005fac:	2340      	movs	r3, #64	@ 0x40
 8005fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fb2:	e0a8      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005fb4:	2380      	movs	r3, #128	@ 0x80
 8005fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fba:	e0a4      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a8f      	ldr	r2, [pc, #572]	@ (8006200 <UART_SetConfig+0x6a0>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d130      	bne.n	8006028 <UART_SetConfig+0x4c8>
 8005fc6:	4b8d      	ldr	r3, [pc, #564]	@ (80061fc <UART_SetConfig+0x69c>)
 8005fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fca:	f003 0307 	and.w	r3, r3, #7
 8005fce:	2b05      	cmp	r3, #5
 8005fd0:	d826      	bhi.n	8006020 <UART_SetConfig+0x4c0>
 8005fd2:	a201      	add	r2, pc, #4	@ (adr r2, 8005fd8 <UART_SetConfig+0x478>)
 8005fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd8:	08005ff1 	.word	0x08005ff1
 8005fdc:	08005ff9 	.word	0x08005ff9
 8005fe0:	08006001 	.word	0x08006001
 8005fe4:	08006009 	.word	0x08006009
 8005fe8:	08006011 	.word	0x08006011
 8005fec:	08006019 	.word	0x08006019
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ff6:	e086      	b.n	8006106 <UART_SetConfig+0x5a6>
 8005ff8:	2304      	movs	r3, #4
 8005ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ffe:	e082      	b.n	8006106 <UART_SetConfig+0x5a6>
 8006000:	2308      	movs	r3, #8
 8006002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006006:	e07e      	b.n	8006106 <UART_SetConfig+0x5a6>
 8006008:	2310      	movs	r3, #16
 800600a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800600e:	e07a      	b.n	8006106 <UART_SetConfig+0x5a6>
 8006010:	2320      	movs	r3, #32
 8006012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006016:	e076      	b.n	8006106 <UART_SetConfig+0x5a6>
 8006018:	2340      	movs	r3, #64	@ 0x40
 800601a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800601e:	e072      	b.n	8006106 <UART_SetConfig+0x5a6>
 8006020:	2380      	movs	r3, #128	@ 0x80
 8006022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006026:	e06e      	b.n	8006106 <UART_SetConfig+0x5a6>
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a75      	ldr	r2, [pc, #468]	@ (8006204 <UART_SetConfig+0x6a4>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d130      	bne.n	8006094 <UART_SetConfig+0x534>
 8006032:	4b72      	ldr	r3, [pc, #456]	@ (80061fc <UART_SetConfig+0x69c>)
 8006034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006036:	f003 0307 	and.w	r3, r3, #7
 800603a:	2b05      	cmp	r3, #5
 800603c:	d826      	bhi.n	800608c <UART_SetConfig+0x52c>
 800603e:	a201      	add	r2, pc, #4	@ (adr r2, 8006044 <UART_SetConfig+0x4e4>)
 8006040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006044:	0800605d 	.word	0x0800605d
 8006048:	08006065 	.word	0x08006065
 800604c:	0800606d 	.word	0x0800606d
 8006050:	08006075 	.word	0x08006075
 8006054:	0800607d 	.word	0x0800607d
 8006058:	08006085 	.word	0x08006085
 800605c:	2300      	movs	r3, #0
 800605e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006062:	e050      	b.n	8006106 <UART_SetConfig+0x5a6>
 8006064:	2304      	movs	r3, #4
 8006066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800606a:	e04c      	b.n	8006106 <UART_SetConfig+0x5a6>
 800606c:	2308      	movs	r3, #8
 800606e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006072:	e048      	b.n	8006106 <UART_SetConfig+0x5a6>
 8006074:	2310      	movs	r3, #16
 8006076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800607a:	e044      	b.n	8006106 <UART_SetConfig+0x5a6>
 800607c:	2320      	movs	r3, #32
 800607e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006082:	e040      	b.n	8006106 <UART_SetConfig+0x5a6>
 8006084:	2340      	movs	r3, #64	@ 0x40
 8006086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800608a:	e03c      	b.n	8006106 <UART_SetConfig+0x5a6>
 800608c:	2380      	movs	r3, #128	@ 0x80
 800608e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006092:	e038      	b.n	8006106 <UART_SetConfig+0x5a6>
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a5b      	ldr	r2, [pc, #364]	@ (8006208 <UART_SetConfig+0x6a8>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d130      	bne.n	8006100 <UART_SetConfig+0x5a0>
 800609e:	4b57      	ldr	r3, [pc, #348]	@ (80061fc <UART_SetConfig+0x69c>)
 80060a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060a2:	f003 0307 	and.w	r3, r3, #7
 80060a6:	2b05      	cmp	r3, #5
 80060a8:	d826      	bhi.n	80060f8 <UART_SetConfig+0x598>
 80060aa:	a201      	add	r2, pc, #4	@ (adr r2, 80060b0 <UART_SetConfig+0x550>)
 80060ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b0:	080060c9 	.word	0x080060c9
 80060b4:	080060d1 	.word	0x080060d1
 80060b8:	080060d9 	.word	0x080060d9
 80060bc:	080060e1 	.word	0x080060e1
 80060c0:	080060e9 	.word	0x080060e9
 80060c4:	080060f1 	.word	0x080060f1
 80060c8:	2302      	movs	r3, #2
 80060ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ce:	e01a      	b.n	8006106 <UART_SetConfig+0x5a6>
 80060d0:	2304      	movs	r3, #4
 80060d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060d6:	e016      	b.n	8006106 <UART_SetConfig+0x5a6>
 80060d8:	2308      	movs	r3, #8
 80060da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060de:	e012      	b.n	8006106 <UART_SetConfig+0x5a6>
 80060e0:	2310      	movs	r3, #16
 80060e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060e6:	e00e      	b.n	8006106 <UART_SetConfig+0x5a6>
 80060e8:	2320      	movs	r3, #32
 80060ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ee:	e00a      	b.n	8006106 <UART_SetConfig+0x5a6>
 80060f0:	2340      	movs	r3, #64	@ 0x40
 80060f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060f6:	e006      	b.n	8006106 <UART_SetConfig+0x5a6>
 80060f8:	2380      	movs	r3, #128	@ 0x80
 80060fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060fe:	e002      	b.n	8006106 <UART_SetConfig+0x5a6>
 8006100:	2380      	movs	r3, #128	@ 0x80
 8006102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a3f      	ldr	r2, [pc, #252]	@ (8006208 <UART_SetConfig+0x6a8>)
 800610c:	4293      	cmp	r3, r2
 800610e:	f040 80f8 	bne.w	8006302 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006112:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006116:	2b20      	cmp	r3, #32
 8006118:	dc46      	bgt.n	80061a8 <UART_SetConfig+0x648>
 800611a:	2b02      	cmp	r3, #2
 800611c:	f2c0 8082 	blt.w	8006224 <UART_SetConfig+0x6c4>
 8006120:	3b02      	subs	r3, #2
 8006122:	2b1e      	cmp	r3, #30
 8006124:	d87e      	bhi.n	8006224 <UART_SetConfig+0x6c4>
 8006126:	a201      	add	r2, pc, #4	@ (adr r2, 800612c <UART_SetConfig+0x5cc>)
 8006128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612c:	080061af 	.word	0x080061af
 8006130:	08006225 	.word	0x08006225
 8006134:	080061b7 	.word	0x080061b7
 8006138:	08006225 	.word	0x08006225
 800613c:	08006225 	.word	0x08006225
 8006140:	08006225 	.word	0x08006225
 8006144:	080061c7 	.word	0x080061c7
 8006148:	08006225 	.word	0x08006225
 800614c:	08006225 	.word	0x08006225
 8006150:	08006225 	.word	0x08006225
 8006154:	08006225 	.word	0x08006225
 8006158:	08006225 	.word	0x08006225
 800615c:	08006225 	.word	0x08006225
 8006160:	08006225 	.word	0x08006225
 8006164:	080061d7 	.word	0x080061d7
 8006168:	08006225 	.word	0x08006225
 800616c:	08006225 	.word	0x08006225
 8006170:	08006225 	.word	0x08006225
 8006174:	08006225 	.word	0x08006225
 8006178:	08006225 	.word	0x08006225
 800617c:	08006225 	.word	0x08006225
 8006180:	08006225 	.word	0x08006225
 8006184:	08006225 	.word	0x08006225
 8006188:	08006225 	.word	0x08006225
 800618c:	08006225 	.word	0x08006225
 8006190:	08006225 	.word	0x08006225
 8006194:	08006225 	.word	0x08006225
 8006198:	08006225 	.word	0x08006225
 800619c:	08006225 	.word	0x08006225
 80061a0:	08006225 	.word	0x08006225
 80061a4:	08006217 	.word	0x08006217
 80061a8:	2b40      	cmp	r3, #64	@ 0x40
 80061aa:	d037      	beq.n	800621c <UART_SetConfig+0x6bc>
 80061ac:	e03a      	b.n	8006224 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80061ae:	f7fd fdf7 	bl	8003da0 <HAL_RCCEx_GetD3PCLK1Freq>
 80061b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80061b4:	e03c      	b.n	8006230 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7fd fe06 	bl	8003dcc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80061c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061c4:	e034      	b.n	8006230 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061c6:	f107 0318 	add.w	r3, r7, #24
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7fd ff52 	bl	8004074 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061d4:	e02c      	b.n	8006230 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061d6:	4b09      	ldr	r3, [pc, #36]	@ (80061fc <UART_SetConfig+0x69c>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0320 	and.w	r3, r3, #32
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d016      	beq.n	8006210 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80061e2:	4b06      	ldr	r3, [pc, #24]	@ (80061fc <UART_SetConfig+0x69c>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	08db      	lsrs	r3, r3, #3
 80061e8:	f003 0303 	and.w	r3, r3, #3
 80061ec:	4a07      	ldr	r2, [pc, #28]	@ (800620c <UART_SetConfig+0x6ac>)
 80061ee:	fa22 f303 	lsr.w	r3, r2, r3
 80061f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80061f4:	e01c      	b.n	8006230 <UART_SetConfig+0x6d0>
 80061f6:	bf00      	nop
 80061f8:	40011400 	.word	0x40011400
 80061fc:	58024400 	.word	0x58024400
 8006200:	40007800 	.word	0x40007800
 8006204:	40007c00 	.word	0x40007c00
 8006208:	58000c00 	.word	0x58000c00
 800620c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006210:	4b9d      	ldr	r3, [pc, #628]	@ (8006488 <UART_SetConfig+0x928>)
 8006212:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006214:	e00c      	b.n	8006230 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006216:	4b9d      	ldr	r3, [pc, #628]	@ (800648c <UART_SetConfig+0x92c>)
 8006218:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800621a:	e009      	b.n	8006230 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800621c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006220:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006222:	e005      	b.n	8006230 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006224:	2300      	movs	r3, #0
 8006226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800622e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006232:	2b00      	cmp	r3, #0
 8006234:	f000 81de 	beq.w	80065f4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800623c:	4a94      	ldr	r2, [pc, #592]	@ (8006490 <UART_SetConfig+0x930>)
 800623e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006242:	461a      	mov	r2, r3
 8006244:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006246:	fbb3 f3f2 	udiv	r3, r3, r2
 800624a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	685a      	ldr	r2, [r3, #4]
 8006250:	4613      	mov	r3, r2
 8006252:	005b      	lsls	r3, r3, #1
 8006254:	4413      	add	r3, r2
 8006256:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006258:	429a      	cmp	r2, r3
 800625a:	d305      	bcc.n	8006268 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006262:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006264:	429a      	cmp	r2, r3
 8006266:	d903      	bls.n	8006270 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800626e:	e1c1      	b.n	80065f4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006270:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006272:	2200      	movs	r2, #0
 8006274:	60bb      	str	r3, [r7, #8]
 8006276:	60fa      	str	r2, [r7, #12]
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800627c:	4a84      	ldr	r2, [pc, #528]	@ (8006490 <UART_SetConfig+0x930>)
 800627e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006282:	b29b      	uxth	r3, r3
 8006284:	2200      	movs	r2, #0
 8006286:	603b      	str	r3, [r7, #0]
 8006288:	607a      	str	r2, [r7, #4]
 800628a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800628e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006292:	f7fa f875 	bl	8000380 <__aeabi_uldivmod>
 8006296:	4602      	mov	r2, r0
 8006298:	460b      	mov	r3, r1
 800629a:	4610      	mov	r0, r2
 800629c:	4619      	mov	r1, r3
 800629e:	f04f 0200 	mov.w	r2, #0
 80062a2:	f04f 0300 	mov.w	r3, #0
 80062a6:	020b      	lsls	r3, r1, #8
 80062a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80062ac:	0202      	lsls	r2, r0, #8
 80062ae:	6979      	ldr	r1, [r7, #20]
 80062b0:	6849      	ldr	r1, [r1, #4]
 80062b2:	0849      	lsrs	r1, r1, #1
 80062b4:	2000      	movs	r0, #0
 80062b6:	460c      	mov	r4, r1
 80062b8:	4605      	mov	r5, r0
 80062ba:	eb12 0804 	adds.w	r8, r2, r4
 80062be:	eb43 0905 	adc.w	r9, r3, r5
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	469a      	mov	sl, r3
 80062ca:	4693      	mov	fp, r2
 80062cc:	4652      	mov	r2, sl
 80062ce:	465b      	mov	r3, fp
 80062d0:	4640      	mov	r0, r8
 80062d2:	4649      	mov	r1, r9
 80062d4:	f7fa f854 	bl	8000380 <__aeabi_uldivmod>
 80062d8:	4602      	mov	r2, r0
 80062da:	460b      	mov	r3, r1
 80062dc:	4613      	mov	r3, r2
 80062de:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062e6:	d308      	bcc.n	80062fa <UART_SetConfig+0x79a>
 80062e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062ee:	d204      	bcs.n	80062fa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80062f6:	60da      	str	r2, [r3, #12]
 80062f8:	e17c      	b.n	80065f4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006300:	e178      	b.n	80065f4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800630a:	f040 80c5 	bne.w	8006498 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800630e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006312:	2b20      	cmp	r3, #32
 8006314:	dc48      	bgt.n	80063a8 <UART_SetConfig+0x848>
 8006316:	2b00      	cmp	r3, #0
 8006318:	db7b      	blt.n	8006412 <UART_SetConfig+0x8b2>
 800631a:	2b20      	cmp	r3, #32
 800631c:	d879      	bhi.n	8006412 <UART_SetConfig+0x8b2>
 800631e:	a201      	add	r2, pc, #4	@ (adr r2, 8006324 <UART_SetConfig+0x7c4>)
 8006320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006324:	080063af 	.word	0x080063af
 8006328:	080063b7 	.word	0x080063b7
 800632c:	08006413 	.word	0x08006413
 8006330:	08006413 	.word	0x08006413
 8006334:	080063bf 	.word	0x080063bf
 8006338:	08006413 	.word	0x08006413
 800633c:	08006413 	.word	0x08006413
 8006340:	08006413 	.word	0x08006413
 8006344:	080063cf 	.word	0x080063cf
 8006348:	08006413 	.word	0x08006413
 800634c:	08006413 	.word	0x08006413
 8006350:	08006413 	.word	0x08006413
 8006354:	08006413 	.word	0x08006413
 8006358:	08006413 	.word	0x08006413
 800635c:	08006413 	.word	0x08006413
 8006360:	08006413 	.word	0x08006413
 8006364:	080063df 	.word	0x080063df
 8006368:	08006413 	.word	0x08006413
 800636c:	08006413 	.word	0x08006413
 8006370:	08006413 	.word	0x08006413
 8006374:	08006413 	.word	0x08006413
 8006378:	08006413 	.word	0x08006413
 800637c:	08006413 	.word	0x08006413
 8006380:	08006413 	.word	0x08006413
 8006384:	08006413 	.word	0x08006413
 8006388:	08006413 	.word	0x08006413
 800638c:	08006413 	.word	0x08006413
 8006390:	08006413 	.word	0x08006413
 8006394:	08006413 	.word	0x08006413
 8006398:	08006413 	.word	0x08006413
 800639c:	08006413 	.word	0x08006413
 80063a0:	08006413 	.word	0x08006413
 80063a4:	08006405 	.word	0x08006405
 80063a8:	2b40      	cmp	r3, #64	@ 0x40
 80063aa:	d02e      	beq.n	800640a <UART_SetConfig+0x8aa>
 80063ac:	e031      	b.n	8006412 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063ae:	f7fc fac1 	bl	8002934 <HAL_RCC_GetPCLK1Freq>
 80063b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80063b4:	e033      	b.n	800641e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063b6:	f7fc fad3 	bl	8002960 <HAL_RCC_GetPCLK2Freq>
 80063ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80063bc:	e02f      	b.n	800641e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7fd fd02 	bl	8003dcc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80063c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063cc:	e027      	b.n	800641e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063ce:	f107 0318 	add.w	r3, r7, #24
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7fd fe4e 	bl	8004074 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063dc:	e01f      	b.n	800641e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063de:	4b2d      	ldr	r3, [pc, #180]	@ (8006494 <UART_SetConfig+0x934>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0320 	and.w	r3, r3, #32
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d009      	beq.n	80063fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80063ea:	4b2a      	ldr	r3, [pc, #168]	@ (8006494 <UART_SetConfig+0x934>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	08db      	lsrs	r3, r3, #3
 80063f0:	f003 0303 	and.w	r3, r3, #3
 80063f4:	4a24      	ldr	r2, [pc, #144]	@ (8006488 <UART_SetConfig+0x928>)
 80063f6:	fa22 f303 	lsr.w	r3, r2, r3
 80063fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063fc:	e00f      	b.n	800641e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80063fe:	4b22      	ldr	r3, [pc, #136]	@ (8006488 <UART_SetConfig+0x928>)
 8006400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006402:	e00c      	b.n	800641e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006404:	4b21      	ldr	r3, [pc, #132]	@ (800648c <UART_SetConfig+0x92c>)
 8006406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006408:	e009      	b.n	800641e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800640a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800640e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006410:	e005      	b.n	800641e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006412:	2300      	movs	r3, #0
 8006414:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800641c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800641e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 80e7 	beq.w	80065f4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800642a:	4a19      	ldr	r2, [pc, #100]	@ (8006490 <UART_SetConfig+0x930>)
 800642c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006430:	461a      	mov	r2, r3
 8006432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006434:	fbb3 f3f2 	udiv	r3, r3, r2
 8006438:	005a      	lsls	r2, r3, #1
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	085b      	lsrs	r3, r3, #1
 8006440:	441a      	add	r2, r3
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	fbb2 f3f3 	udiv	r3, r2, r3
 800644a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800644c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800644e:	2b0f      	cmp	r3, #15
 8006450:	d916      	bls.n	8006480 <UART_SetConfig+0x920>
 8006452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006454:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006458:	d212      	bcs.n	8006480 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800645a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800645c:	b29b      	uxth	r3, r3
 800645e:	f023 030f 	bic.w	r3, r3, #15
 8006462:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006466:	085b      	lsrs	r3, r3, #1
 8006468:	b29b      	uxth	r3, r3
 800646a:	f003 0307 	and.w	r3, r3, #7
 800646e:	b29a      	uxth	r2, r3
 8006470:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006472:	4313      	orrs	r3, r2
 8006474:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800647c:	60da      	str	r2, [r3, #12]
 800647e:	e0b9      	b.n	80065f4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006486:	e0b5      	b.n	80065f4 <UART_SetConfig+0xa94>
 8006488:	03d09000 	.word	0x03d09000
 800648c:	003d0900 	.word	0x003d0900
 8006490:	08007da0 	.word	0x08007da0
 8006494:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006498:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800649c:	2b20      	cmp	r3, #32
 800649e:	dc49      	bgt.n	8006534 <UART_SetConfig+0x9d4>
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	db7c      	blt.n	800659e <UART_SetConfig+0xa3e>
 80064a4:	2b20      	cmp	r3, #32
 80064a6:	d87a      	bhi.n	800659e <UART_SetConfig+0xa3e>
 80064a8:	a201      	add	r2, pc, #4	@ (adr r2, 80064b0 <UART_SetConfig+0x950>)
 80064aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ae:	bf00      	nop
 80064b0:	0800653b 	.word	0x0800653b
 80064b4:	08006543 	.word	0x08006543
 80064b8:	0800659f 	.word	0x0800659f
 80064bc:	0800659f 	.word	0x0800659f
 80064c0:	0800654b 	.word	0x0800654b
 80064c4:	0800659f 	.word	0x0800659f
 80064c8:	0800659f 	.word	0x0800659f
 80064cc:	0800659f 	.word	0x0800659f
 80064d0:	0800655b 	.word	0x0800655b
 80064d4:	0800659f 	.word	0x0800659f
 80064d8:	0800659f 	.word	0x0800659f
 80064dc:	0800659f 	.word	0x0800659f
 80064e0:	0800659f 	.word	0x0800659f
 80064e4:	0800659f 	.word	0x0800659f
 80064e8:	0800659f 	.word	0x0800659f
 80064ec:	0800659f 	.word	0x0800659f
 80064f0:	0800656b 	.word	0x0800656b
 80064f4:	0800659f 	.word	0x0800659f
 80064f8:	0800659f 	.word	0x0800659f
 80064fc:	0800659f 	.word	0x0800659f
 8006500:	0800659f 	.word	0x0800659f
 8006504:	0800659f 	.word	0x0800659f
 8006508:	0800659f 	.word	0x0800659f
 800650c:	0800659f 	.word	0x0800659f
 8006510:	0800659f 	.word	0x0800659f
 8006514:	0800659f 	.word	0x0800659f
 8006518:	0800659f 	.word	0x0800659f
 800651c:	0800659f 	.word	0x0800659f
 8006520:	0800659f 	.word	0x0800659f
 8006524:	0800659f 	.word	0x0800659f
 8006528:	0800659f 	.word	0x0800659f
 800652c:	0800659f 	.word	0x0800659f
 8006530:	08006591 	.word	0x08006591
 8006534:	2b40      	cmp	r3, #64	@ 0x40
 8006536:	d02e      	beq.n	8006596 <UART_SetConfig+0xa36>
 8006538:	e031      	b.n	800659e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800653a:	f7fc f9fb 	bl	8002934 <HAL_RCC_GetPCLK1Freq>
 800653e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006540:	e033      	b.n	80065aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006542:	f7fc fa0d 	bl	8002960 <HAL_RCC_GetPCLK2Freq>
 8006546:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006548:	e02f      	b.n	80065aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800654a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800654e:	4618      	mov	r0, r3
 8006550:	f7fd fc3c 	bl	8003dcc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006558:	e027      	b.n	80065aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800655a:	f107 0318 	add.w	r3, r7, #24
 800655e:	4618      	mov	r0, r3
 8006560:	f7fd fd88 	bl	8004074 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006568:	e01f      	b.n	80065aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800656a:	4b2d      	ldr	r3, [pc, #180]	@ (8006620 <UART_SetConfig+0xac0>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0320 	and.w	r3, r3, #32
 8006572:	2b00      	cmp	r3, #0
 8006574:	d009      	beq.n	800658a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006576:	4b2a      	ldr	r3, [pc, #168]	@ (8006620 <UART_SetConfig+0xac0>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	08db      	lsrs	r3, r3, #3
 800657c:	f003 0303 	and.w	r3, r3, #3
 8006580:	4a28      	ldr	r2, [pc, #160]	@ (8006624 <UART_SetConfig+0xac4>)
 8006582:	fa22 f303 	lsr.w	r3, r2, r3
 8006586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006588:	e00f      	b.n	80065aa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800658a:	4b26      	ldr	r3, [pc, #152]	@ (8006624 <UART_SetConfig+0xac4>)
 800658c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800658e:	e00c      	b.n	80065aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006590:	4b25      	ldr	r3, [pc, #148]	@ (8006628 <UART_SetConfig+0xac8>)
 8006592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006594:	e009      	b.n	80065aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006596:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800659a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800659c:	e005      	b.n	80065aa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800659e:	2300      	movs	r3, #0
 80065a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80065a8:	bf00      	nop
    }

    if (pclk != 0U)
 80065aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d021      	beq.n	80065f4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b4:	4a1d      	ldr	r2, [pc, #116]	@ (800662c <UART_SetConfig+0xacc>)
 80065b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065ba:	461a      	mov	r2, r3
 80065bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065be:	fbb3 f2f2 	udiv	r2, r3, r2
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	085b      	lsrs	r3, r3, #1
 80065c8:	441a      	add	r2, r3
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80065d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d6:	2b0f      	cmp	r3, #15
 80065d8:	d909      	bls.n	80065ee <UART_SetConfig+0xa8e>
 80065da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065e0:	d205      	bcs.n	80065ee <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e4:	b29a      	uxth	r2, r3
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	60da      	str	r2, [r3, #12]
 80065ec:	e002      	b.n	80065f4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	2201      	movs	r2, #1
 8006600:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	2200      	movs	r2, #0
 8006608:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	2200      	movs	r2, #0
 800660e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006610:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006614:	4618      	mov	r0, r3
 8006616:	3748      	adds	r7, #72	@ 0x48
 8006618:	46bd      	mov	sp, r7
 800661a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800661e:	bf00      	nop
 8006620:	58024400 	.word	0x58024400
 8006624:	03d09000 	.word	0x03d09000
 8006628:	003d0900 	.word	0x003d0900
 800662c:	08007da0 	.word	0x08007da0

08006630 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800663c:	f003 0308 	and.w	r3, r3, #8
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00a      	beq.n	800665a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	430a      	orrs	r2, r1
 8006658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800665e:	f003 0301 	and.w	r3, r3, #1
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00a      	beq.n	800667c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	430a      	orrs	r2, r1
 800667a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006680:	f003 0302 	and.w	r3, r3, #2
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00a      	beq.n	800669e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066a2:	f003 0304 	and.w	r3, r3, #4
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00a      	beq.n	80066c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	430a      	orrs	r2, r1
 80066be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c4:	f003 0310 	and.w	r3, r3, #16
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00a      	beq.n	80066e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	430a      	orrs	r2, r1
 80066e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e6:	f003 0320 	and.w	r3, r3, #32
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00a      	beq.n	8006704 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	430a      	orrs	r2, r1
 8006702:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800670c:	2b00      	cmp	r3, #0
 800670e:	d01a      	beq.n	8006746 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	430a      	orrs	r2, r1
 8006724:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800672a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800672e:	d10a      	bne.n	8006746 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	430a      	orrs	r2, r1
 8006744:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800674a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00a      	beq.n	8006768 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	430a      	orrs	r2, r1
 8006766:	605a      	str	r2, [r3, #4]
  }
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b098      	sub	sp, #96	@ 0x60
 8006778:	af02      	add	r7, sp, #8
 800677a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006784:	f7fa fde0 	bl	8001348 <HAL_GetTick>
 8006788:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0308 	and.w	r3, r3, #8
 8006794:	2b08      	cmp	r3, #8
 8006796:	d12f      	bne.n	80067f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006798:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067a0:	2200      	movs	r2, #0
 80067a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f88e 	bl	80068c8 <UART_WaitOnFlagUntilTimeout>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d022      	beq.n	80067f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ba:	e853 3f00 	ldrex	r3, [r3]
 80067be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	461a      	mov	r2, r3
 80067ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80067d2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067d8:	e841 2300 	strex	r3, r2, [r1]
 80067dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d1e6      	bne.n	80067b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2220      	movs	r2, #32
 80067e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e063      	b.n	80068c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0304 	and.w	r3, r3, #4
 8006802:	2b04      	cmp	r3, #4
 8006804:	d149      	bne.n	800689a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006806:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800680a:	9300      	str	r3, [sp, #0]
 800680c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800680e:	2200      	movs	r2, #0
 8006810:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 f857 	bl	80068c8 <UART_WaitOnFlagUntilTimeout>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d03c      	beq.n	800689a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006828:	e853 3f00 	ldrex	r3, [r3]
 800682c:	623b      	str	r3, [r7, #32]
   return(result);
 800682e:	6a3b      	ldr	r3, [r7, #32]
 8006830:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006834:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	461a      	mov	r2, r3
 800683c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800683e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006840:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006842:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006844:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006846:	e841 2300 	strex	r3, r2, [r1]
 800684a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800684c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1e6      	bne.n	8006820 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	3308      	adds	r3, #8
 8006858:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	e853 3f00 	ldrex	r3, [r3]
 8006860:	60fb      	str	r3, [r7, #12]
   return(result);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f023 0301 	bic.w	r3, r3, #1
 8006868:	64bb      	str	r3, [r7, #72]	@ 0x48
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	3308      	adds	r3, #8
 8006870:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006872:	61fa      	str	r2, [r7, #28]
 8006874:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006876:	69b9      	ldr	r1, [r7, #24]
 8006878:	69fa      	ldr	r2, [r7, #28]
 800687a:	e841 2300 	strex	r3, r2, [r1]
 800687e:	617b      	str	r3, [r7, #20]
   return(result);
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1e5      	bne.n	8006852 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2220      	movs	r2, #32
 800688a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e012      	b.n	80068c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2220      	movs	r2, #32
 800689e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2220      	movs	r2, #32
 80068a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3758      	adds	r7, #88	@ 0x58
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	603b      	str	r3, [r7, #0]
 80068d4:	4613      	mov	r3, r2
 80068d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068d8:	e04f      	b.n	800697a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e0:	d04b      	beq.n	800697a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068e2:	f7fa fd31 	bl	8001348 <HAL_GetTick>
 80068e6:	4602      	mov	r2, r0
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	69ba      	ldr	r2, [r7, #24]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d302      	bcc.n	80068f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d101      	bne.n	80068fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80068f8:	2303      	movs	r3, #3
 80068fa:	e04e      	b.n	800699a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0304 	and.w	r3, r3, #4
 8006906:	2b00      	cmp	r3, #0
 8006908:	d037      	beq.n	800697a <UART_WaitOnFlagUntilTimeout+0xb2>
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	2b80      	cmp	r3, #128	@ 0x80
 800690e:	d034      	beq.n	800697a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	2b40      	cmp	r3, #64	@ 0x40
 8006914:	d031      	beq.n	800697a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	69db      	ldr	r3, [r3, #28]
 800691c:	f003 0308 	and.w	r3, r3, #8
 8006920:	2b08      	cmp	r3, #8
 8006922:	d110      	bne.n	8006946 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2208      	movs	r2, #8
 800692a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f000 f839 	bl	80069a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2208      	movs	r2, #8
 8006936:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e029      	b.n	800699a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	69db      	ldr	r3, [r3, #28]
 800694c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006950:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006954:	d111      	bne.n	800697a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800695e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f000 f81f 	bl	80069a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2220      	movs	r2, #32
 800696a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e00f      	b.n	800699a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	69da      	ldr	r2, [r3, #28]
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	4013      	ands	r3, r2
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	429a      	cmp	r2, r3
 8006988:	bf0c      	ite	eq
 800698a:	2301      	moveq	r3, #1
 800698c:	2300      	movne	r3, #0
 800698e:	b2db      	uxtb	r3, r3
 8006990:	461a      	mov	r2, r3
 8006992:	79fb      	ldrb	r3, [r7, #7]
 8006994:	429a      	cmp	r2, r3
 8006996:	d0a0      	beq.n	80068da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
	...

080069a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b095      	sub	sp, #84	@ 0x54
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069b4:	e853 3f00 	ldrex	r3, [r3]
 80069b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80069ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	461a      	mov	r2, r3
 80069c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80069cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80069d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80069d2:	e841 2300 	strex	r3, r2, [r1]
 80069d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80069d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1e6      	bne.n	80069ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	3308      	adds	r3, #8
 80069e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e6:	6a3b      	ldr	r3, [r7, #32]
 80069e8:	e853 3f00 	ldrex	r3, [r3]
 80069ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80069ee:	69fa      	ldr	r2, [r7, #28]
 80069f0:	4b1e      	ldr	r3, [pc, #120]	@ (8006a6c <UART_EndRxTransfer+0xc8>)
 80069f2:	4013      	ands	r3, r2
 80069f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	3308      	adds	r3, #8
 80069fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a06:	e841 2300 	strex	r3, r2, [r1]
 8006a0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1e5      	bne.n	80069de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d118      	bne.n	8006a4c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	e853 3f00 	ldrex	r3, [r3]
 8006a26:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	f023 0310 	bic.w	r3, r3, #16
 8006a2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	461a      	mov	r2, r3
 8006a36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a38:	61bb      	str	r3, [r7, #24]
 8006a3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3c:	6979      	ldr	r1, [r7, #20]
 8006a3e:	69ba      	ldr	r2, [r7, #24]
 8006a40:	e841 2300 	strex	r3, r2, [r1]
 8006a44:	613b      	str	r3, [r7, #16]
   return(result);
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d1e6      	bne.n	8006a1a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006a60:	bf00      	nop
 8006a62:	3754      	adds	r7, #84	@ 0x54
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr
 8006a6c:	effffffe 	.word	0xeffffffe

08006a70 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d101      	bne.n	8006a86 <HAL_UARTEx_DisableFifoMode+0x16>
 8006a82:	2302      	movs	r3, #2
 8006a84:	e027      	b.n	8006ad6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2224      	movs	r2, #36	@ 0x24
 8006a92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f022 0201 	bic.w	r2, r2, #1
 8006aac:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006ab4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2220      	movs	r2, #32
 8006ac8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3714      	adds	r7, #20
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b084      	sub	sp, #16
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
 8006aea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d101      	bne.n	8006afa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006af6:	2302      	movs	r3, #2
 8006af8:	e02d      	b.n	8006b56 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2201      	movs	r2, #1
 8006afe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2224      	movs	r2, #36	@ 0x24
 8006b06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f022 0201 	bic.w	r2, r2, #1
 8006b20:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	683a      	ldr	r2, [r7, #0]
 8006b32:	430a      	orrs	r2, r1
 8006b34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 f850 	bl	8006bdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2220      	movs	r2, #32
 8006b48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b084      	sub	sp, #16
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
 8006b66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d101      	bne.n	8006b76 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006b72:	2302      	movs	r3, #2
 8006b74:	e02d      	b.n	8006bd2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2224      	movs	r2, #36	@ 0x24
 8006b82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f022 0201 	bic.w	r2, r2, #1
 8006b9c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	683a      	ldr	r2, [r7, #0]
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f812 	bl	8006bdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2220      	movs	r2, #32
 8006bc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
	...

08006bdc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b085      	sub	sp, #20
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d108      	bne.n	8006bfe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006bfc:	e031      	b.n	8006c62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006bfe:	2310      	movs	r3, #16
 8006c00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006c02:	2310      	movs	r3, #16
 8006c04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	0e5b      	lsrs	r3, r3, #25
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	f003 0307 	and.w	r3, r3, #7
 8006c14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	0f5b      	lsrs	r3, r3, #29
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	f003 0307 	and.w	r3, r3, #7
 8006c24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c26:	7bbb      	ldrb	r3, [r7, #14]
 8006c28:	7b3a      	ldrb	r2, [r7, #12]
 8006c2a:	4911      	ldr	r1, [pc, #68]	@ (8006c70 <UARTEx_SetNbDataToProcess+0x94>)
 8006c2c:	5c8a      	ldrb	r2, [r1, r2]
 8006c2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006c32:	7b3a      	ldrb	r2, [r7, #12]
 8006c34:	490f      	ldr	r1, [pc, #60]	@ (8006c74 <UARTEx_SetNbDataToProcess+0x98>)
 8006c36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c38:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c44:	7bfb      	ldrb	r3, [r7, #15]
 8006c46:	7b7a      	ldrb	r2, [r7, #13]
 8006c48:	4909      	ldr	r1, [pc, #36]	@ (8006c70 <UARTEx_SetNbDataToProcess+0x94>)
 8006c4a:	5c8a      	ldrb	r2, [r1, r2]
 8006c4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006c50:	7b7a      	ldrb	r2, [r7, #13]
 8006c52:	4908      	ldr	r1, [pc, #32]	@ (8006c74 <UARTEx_SetNbDataToProcess+0x98>)
 8006c54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c56:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006c62:	bf00      	nop
 8006c64:	3714      	adds	r7, #20
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	08007db8 	.word	0x08007db8
 8006c74:	08007dc0 	.word	0x08007dc0

08006c78 <std>:
 8006c78:	2300      	movs	r3, #0
 8006c7a:	b510      	push	{r4, lr}
 8006c7c:	4604      	mov	r4, r0
 8006c7e:	e9c0 3300 	strd	r3, r3, [r0]
 8006c82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c86:	6083      	str	r3, [r0, #8]
 8006c88:	8181      	strh	r1, [r0, #12]
 8006c8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006c8c:	81c2      	strh	r2, [r0, #14]
 8006c8e:	6183      	str	r3, [r0, #24]
 8006c90:	4619      	mov	r1, r3
 8006c92:	2208      	movs	r2, #8
 8006c94:	305c      	adds	r0, #92	@ 0x5c
 8006c96:	f000 f9f9 	bl	800708c <memset>
 8006c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006cd0 <std+0x58>)
 8006c9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8006cd4 <std+0x5c>)
 8006ca0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8006cd8 <std+0x60>)
 8006ca4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8006cdc <std+0x64>)
 8006ca8:	6323      	str	r3, [r4, #48]	@ 0x30
 8006caa:	4b0d      	ldr	r3, [pc, #52]	@ (8006ce0 <std+0x68>)
 8006cac:	6224      	str	r4, [r4, #32]
 8006cae:	429c      	cmp	r4, r3
 8006cb0:	d006      	beq.n	8006cc0 <std+0x48>
 8006cb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006cb6:	4294      	cmp	r4, r2
 8006cb8:	d002      	beq.n	8006cc0 <std+0x48>
 8006cba:	33d0      	adds	r3, #208	@ 0xd0
 8006cbc:	429c      	cmp	r4, r3
 8006cbe:	d105      	bne.n	8006ccc <std+0x54>
 8006cc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cc8:	f000 ba58 	b.w	800717c <__retarget_lock_init_recursive>
 8006ccc:	bd10      	pop	{r4, pc}
 8006cce:	bf00      	nop
 8006cd0:	08006edd 	.word	0x08006edd
 8006cd4:	08006eff 	.word	0x08006eff
 8006cd8:	08006f37 	.word	0x08006f37
 8006cdc:	08006f5b 	.word	0x08006f5b
 8006ce0:	24000174 	.word	0x24000174

08006ce4 <stdio_exit_handler>:
 8006ce4:	4a02      	ldr	r2, [pc, #8]	@ (8006cf0 <stdio_exit_handler+0xc>)
 8006ce6:	4903      	ldr	r1, [pc, #12]	@ (8006cf4 <stdio_exit_handler+0x10>)
 8006ce8:	4803      	ldr	r0, [pc, #12]	@ (8006cf8 <stdio_exit_handler+0x14>)
 8006cea:	f000 b869 	b.w	8006dc0 <_fwalk_sglue>
 8006cee:	bf00      	nop
 8006cf0:	24000010 	.word	0x24000010
 8006cf4:	08007a19 	.word	0x08007a19
 8006cf8:	24000020 	.word	0x24000020

08006cfc <cleanup_stdio>:
 8006cfc:	6841      	ldr	r1, [r0, #4]
 8006cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8006d30 <cleanup_stdio+0x34>)
 8006d00:	4299      	cmp	r1, r3
 8006d02:	b510      	push	{r4, lr}
 8006d04:	4604      	mov	r4, r0
 8006d06:	d001      	beq.n	8006d0c <cleanup_stdio+0x10>
 8006d08:	f000 fe86 	bl	8007a18 <_fflush_r>
 8006d0c:	68a1      	ldr	r1, [r4, #8]
 8006d0e:	4b09      	ldr	r3, [pc, #36]	@ (8006d34 <cleanup_stdio+0x38>)
 8006d10:	4299      	cmp	r1, r3
 8006d12:	d002      	beq.n	8006d1a <cleanup_stdio+0x1e>
 8006d14:	4620      	mov	r0, r4
 8006d16:	f000 fe7f 	bl	8007a18 <_fflush_r>
 8006d1a:	68e1      	ldr	r1, [r4, #12]
 8006d1c:	4b06      	ldr	r3, [pc, #24]	@ (8006d38 <cleanup_stdio+0x3c>)
 8006d1e:	4299      	cmp	r1, r3
 8006d20:	d004      	beq.n	8006d2c <cleanup_stdio+0x30>
 8006d22:	4620      	mov	r0, r4
 8006d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d28:	f000 be76 	b.w	8007a18 <_fflush_r>
 8006d2c:	bd10      	pop	{r4, pc}
 8006d2e:	bf00      	nop
 8006d30:	24000174 	.word	0x24000174
 8006d34:	240001dc 	.word	0x240001dc
 8006d38:	24000244 	.word	0x24000244

08006d3c <global_stdio_init.part.0>:
 8006d3c:	b510      	push	{r4, lr}
 8006d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8006d6c <global_stdio_init.part.0+0x30>)
 8006d40:	4c0b      	ldr	r4, [pc, #44]	@ (8006d70 <global_stdio_init.part.0+0x34>)
 8006d42:	4a0c      	ldr	r2, [pc, #48]	@ (8006d74 <global_stdio_init.part.0+0x38>)
 8006d44:	601a      	str	r2, [r3, #0]
 8006d46:	4620      	mov	r0, r4
 8006d48:	2200      	movs	r2, #0
 8006d4a:	2104      	movs	r1, #4
 8006d4c:	f7ff ff94 	bl	8006c78 <std>
 8006d50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006d54:	2201      	movs	r2, #1
 8006d56:	2109      	movs	r1, #9
 8006d58:	f7ff ff8e 	bl	8006c78 <std>
 8006d5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006d60:	2202      	movs	r2, #2
 8006d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d66:	2112      	movs	r1, #18
 8006d68:	f7ff bf86 	b.w	8006c78 <std>
 8006d6c:	240002ac 	.word	0x240002ac
 8006d70:	24000174 	.word	0x24000174
 8006d74:	08006ce5 	.word	0x08006ce5

08006d78 <__sfp_lock_acquire>:
 8006d78:	4801      	ldr	r0, [pc, #4]	@ (8006d80 <__sfp_lock_acquire+0x8>)
 8006d7a:	f000 ba00 	b.w	800717e <__retarget_lock_acquire_recursive>
 8006d7e:	bf00      	nop
 8006d80:	240002b5 	.word	0x240002b5

08006d84 <__sfp_lock_release>:
 8006d84:	4801      	ldr	r0, [pc, #4]	@ (8006d8c <__sfp_lock_release+0x8>)
 8006d86:	f000 b9fb 	b.w	8007180 <__retarget_lock_release_recursive>
 8006d8a:	bf00      	nop
 8006d8c:	240002b5 	.word	0x240002b5

08006d90 <__sinit>:
 8006d90:	b510      	push	{r4, lr}
 8006d92:	4604      	mov	r4, r0
 8006d94:	f7ff fff0 	bl	8006d78 <__sfp_lock_acquire>
 8006d98:	6a23      	ldr	r3, [r4, #32]
 8006d9a:	b11b      	cbz	r3, 8006da4 <__sinit+0x14>
 8006d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006da0:	f7ff bff0 	b.w	8006d84 <__sfp_lock_release>
 8006da4:	4b04      	ldr	r3, [pc, #16]	@ (8006db8 <__sinit+0x28>)
 8006da6:	6223      	str	r3, [r4, #32]
 8006da8:	4b04      	ldr	r3, [pc, #16]	@ (8006dbc <__sinit+0x2c>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1f5      	bne.n	8006d9c <__sinit+0xc>
 8006db0:	f7ff ffc4 	bl	8006d3c <global_stdio_init.part.0>
 8006db4:	e7f2      	b.n	8006d9c <__sinit+0xc>
 8006db6:	bf00      	nop
 8006db8:	08006cfd 	.word	0x08006cfd
 8006dbc:	240002ac 	.word	0x240002ac

08006dc0 <_fwalk_sglue>:
 8006dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dc4:	4607      	mov	r7, r0
 8006dc6:	4688      	mov	r8, r1
 8006dc8:	4614      	mov	r4, r2
 8006dca:	2600      	movs	r6, #0
 8006dcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006dd0:	f1b9 0901 	subs.w	r9, r9, #1
 8006dd4:	d505      	bpl.n	8006de2 <_fwalk_sglue+0x22>
 8006dd6:	6824      	ldr	r4, [r4, #0]
 8006dd8:	2c00      	cmp	r4, #0
 8006dda:	d1f7      	bne.n	8006dcc <_fwalk_sglue+0xc>
 8006ddc:	4630      	mov	r0, r6
 8006dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006de2:	89ab      	ldrh	r3, [r5, #12]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d907      	bls.n	8006df8 <_fwalk_sglue+0x38>
 8006de8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006dec:	3301      	adds	r3, #1
 8006dee:	d003      	beq.n	8006df8 <_fwalk_sglue+0x38>
 8006df0:	4629      	mov	r1, r5
 8006df2:	4638      	mov	r0, r7
 8006df4:	47c0      	blx	r8
 8006df6:	4306      	orrs	r6, r0
 8006df8:	3568      	adds	r5, #104	@ 0x68
 8006dfa:	e7e9      	b.n	8006dd0 <_fwalk_sglue+0x10>

08006dfc <iprintf>:
 8006dfc:	b40f      	push	{r0, r1, r2, r3}
 8006dfe:	b507      	push	{r0, r1, r2, lr}
 8006e00:	4906      	ldr	r1, [pc, #24]	@ (8006e1c <iprintf+0x20>)
 8006e02:	ab04      	add	r3, sp, #16
 8006e04:	6808      	ldr	r0, [r1, #0]
 8006e06:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e0a:	6881      	ldr	r1, [r0, #8]
 8006e0c:	9301      	str	r3, [sp, #4]
 8006e0e:	f000 fadb 	bl	80073c8 <_vfiprintf_r>
 8006e12:	b003      	add	sp, #12
 8006e14:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e18:	b004      	add	sp, #16
 8006e1a:	4770      	bx	lr
 8006e1c:	2400001c 	.word	0x2400001c

08006e20 <_puts_r>:
 8006e20:	6a03      	ldr	r3, [r0, #32]
 8006e22:	b570      	push	{r4, r5, r6, lr}
 8006e24:	6884      	ldr	r4, [r0, #8]
 8006e26:	4605      	mov	r5, r0
 8006e28:	460e      	mov	r6, r1
 8006e2a:	b90b      	cbnz	r3, 8006e30 <_puts_r+0x10>
 8006e2c:	f7ff ffb0 	bl	8006d90 <__sinit>
 8006e30:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e32:	07db      	lsls	r3, r3, #31
 8006e34:	d405      	bmi.n	8006e42 <_puts_r+0x22>
 8006e36:	89a3      	ldrh	r3, [r4, #12]
 8006e38:	0598      	lsls	r0, r3, #22
 8006e3a:	d402      	bmi.n	8006e42 <_puts_r+0x22>
 8006e3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e3e:	f000 f99e 	bl	800717e <__retarget_lock_acquire_recursive>
 8006e42:	89a3      	ldrh	r3, [r4, #12]
 8006e44:	0719      	lsls	r1, r3, #28
 8006e46:	d502      	bpl.n	8006e4e <_puts_r+0x2e>
 8006e48:	6923      	ldr	r3, [r4, #16]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d135      	bne.n	8006eba <_puts_r+0x9a>
 8006e4e:	4621      	mov	r1, r4
 8006e50:	4628      	mov	r0, r5
 8006e52:	f000 f8c5 	bl	8006fe0 <__swsetup_r>
 8006e56:	b380      	cbz	r0, 8006eba <_puts_r+0x9a>
 8006e58:	f04f 35ff 	mov.w	r5, #4294967295
 8006e5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e5e:	07da      	lsls	r2, r3, #31
 8006e60:	d405      	bmi.n	8006e6e <_puts_r+0x4e>
 8006e62:	89a3      	ldrh	r3, [r4, #12]
 8006e64:	059b      	lsls	r3, r3, #22
 8006e66:	d402      	bmi.n	8006e6e <_puts_r+0x4e>
 8006e68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e6a:	f000 f989 	bl	8007180 <__retarget_lock_release_recursive>
 8006e6e:	4628      	mov	r0, r5
 8006e70:	bd70      	pop	{r4, r5, r6, pc}
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	da04      	bge.n	8006e80 <_puts_r+0x60>
 8006e76:	69a2      	ldr	r2, [r4, #24]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	dc17      	bgt.n	8006eac <_puts_r+0x8c>
 8006e7c:	290a      	cmp	r1, #10
 8006e7e:	d015      	beq.n	8006eac <_puts_r+0x8c>
 8006e80:	6823      	ldr	r3, [r4, #0]
 8006e82:	1c5a      	adds	r2, r3, #1
 8006e84:	6022      	str	r2, [r4, #0]
 8006e86:	7019      	strb	r1, [r3, #0]
 8006e88:	68a3      	ldr	r3, [r4, #8]
 8006e8a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	60a3      	str	r3, [r4, #8]
 8006e92:	2900      	cmp	r1, #0
 8006e94:	d1ed      	bne.n	8006e72 <_puts_r+0x52>
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	da11      	bge.n	8006ebe <_puts_r+0x9e>
 8006e9a:	4622      	mov	r2, r4
 8006e9c:	210a      	movs	r1, #10
 8006e9e:	4628      	mov	r0, r5
 8006ea0:	f000 f85f 	bl	8006f62 <__swbuf_r>
 8006ea4:	3001      	adds	r0, #1
 8006ea6:	d0d7      	beq.n	8006e58 <_puts_r+0x38>
 8006ea8:	250a      	movs	r5, #10
 8006eaa:	e7d7      	b.n	8006e5c <_puts_r+0x3c>
 8006eac:	4622      	mov	r2, r4
 8006eae:	4628      	mov	r0, r5
 8006eb0:	f000 f857 	bl	8006f62 <__swbuf_r>
 8006eb4:	3001      	adds	r0, #1
 8006eb6:	d1e7      	bne.n	8006e88 <_puts_r+0x68>
 8006eb8:	e7ce      	b.n	8006e58 <_puts_r+0x38>
 8006eba:	3e01      	subs	r6, #1
 8006ebc:	e7e4      	b.n	8006e88 <_puts_r+0x68>
 8006ebe:	6823      	ldr	r3, [r4, #0]
 8006ec0:	1c5a      	adds	r2, r3, #1
 8006ec2:	6022      	str	r2, [r4, #0]
 8006ec4:	220a      	movs	r2, #10
 8006ec6:	701a      	strb	r2, [r3, #0]
 8006ec8:	e7ee      	b.n	8006ea8 <_puts_r+0x88>
	...

08006ecc <puts>:
 8006ecc:	4b02      	ldr	r3, [pc, #8]	@ (8006ed8 <puts+0xc>)
 8006ece:	4601      	mov	r1, r0
 8006ed0:	6818      	ldr	r0, [r3, #0]
 8006ed2:	f7ff bfa5 	b.w	8006e20 <_puts_r>
 8006ed6:	bf00      	nop
 8006ed8:	2400001c 	.word	0x2400001c

08006edc <__sread>:
 8006edc:	b510      	push	{r4, lr}
 8006ede:	460c      	mov	r4, r1
 8006ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ee4:	f000 f8fc 	bl	80070e0 <_read_r>
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	bfab      	itete	ge
 8006eec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006eee:	89a3      	ldrhlt	r3, [r4, #12]
 8006ef0:	181b      	addge	r3, r3, r0
 8006ef2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006ef6:	bfac      	ite	ge
 8006ef8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006efa:	81a3      	strhlt	r3, [r4, #12]
 8006efc:	bd10      	pop	{r4, pc}

08006efe <__swrite>:
 8006efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f02:	461f      	mov	r7, r3
 8006f04:	898b      	ldrh	r3, [r1, #12]
 8006f06:	05db      	lsls	r3, r3, #23
 8006f08:	4605      	mov	r5, r0
 8006f0a:	460c      	mov	r4, r1
 8006f0c:	4616      	mov	r6, r2
 8006f0e:	d505      	bpl.n	8006f1c <__swrite+0x1e>
 8006f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f14:	2302      	movs	r3, #2
 8006f16:	2200      	movs	r2, #0
 8006f18:	f000 f8d0 	bl	80070bc <_lseek_r>
 8006f1c:	89a3      	ldrh	r3, [r4, #12]
 8006f1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f26:	81a3      	strh	r3, [r4, #12]
 8006f28:	4632      	mov	r2, r6
 8006f2a:	463b      	mov	r3, r7
 8006f2c:	4628      	mov	r0, r5
 8006f2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f32:	f000 b8e7 	b.w	8007104 <_write_r>

08006f36 <__sseek>:
 8006f36:	b510      	push	{r4, lr}
 8006f38:	460c      	mov	r4, r1
 8006f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f3e:	f000 f8bd 	bl	80070bc <_lseek_r>
 8006f42:	1c43      	adds	r3, r0, #1
 8006f44:	89a3      	ldrh	r3, [r4, #12]
 8006f46:	bf15      	itete	ne
 8006f48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006f4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006f4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006f52:	81a3      	strheq	r3, [r4, #12]
 8006f54:	bf18      	it	ne
 8006f56:	81a3      	strhne	r3, [r4, #12]
 8006f58:	bd10      	pop	{r4, pc}

08006f5a <__sclose>:
 8006f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f5e:	f000 b89d 	b.w	800709c <_close_r>

08006f62 <__swbuf_r>:
 8006f62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f64:	460e      	mov	r6, r1
 8006f66:	4614      	mov	r4, r2
 8006f68:	4605      	mov	r5, r0
 8006f6a:	b118      	cbz	r0, 8006f74 <__swbuf_r+0x12>
 8006f6c:	6a03      	ldr	r3, [r0, #32]
 8006f6e:	b90b      	cbnz	r3, 8006f74 <__swbuf_r+0x12>
 8006f70:	f7ff ff0e 	bl	8006d90 <__sinit>
 8006f74:	69a3      	ldr	r3, [r4, #24]
 8006f76:	60a3      	str	r3, [r4, #8]
 8006f78:	89a3      	ldrh	r3, [r4, #12]
 8006f7a:	071a      	lsls	r2, r3, #28
 8006f7c:	d501      	bpl.n	8006f82 <__swbuf_r+0x20>
 8006f7e:	6923      	ldr	r3, [r4, #16]
 8006f80:	b943      	cbnz	r3, 8006f94 <__swbuf_r+0x32>
 8006f82:	4621      	mov	r1, r4
 8006f84:	4628      	mov	r0, r5
 8006f86:	f000 f82b 	bl	8006fe0 <__swsetup_r>
 8006f8a:	b118      	cbz	r0, 8006f94 <__swbuf_r+0x32>
 8006f8c:	f04f 37ff 	mov.w	r7, #4294967295
 8006f90:	4638      	mov	r0, r7
 8006f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f94:	6823      	ldr	r3, [r4, #0]
 8006f96:	6922      	ldr	r2, [r4, #16]
 8006f98:	1a98      	subs	r0, r3, r2
 8006f9a:	6963      	ldr	r3, [r4, #20]
 8006f9c:	b2f6      	uxtb	r6, r6
 8006f9e:	4283      	cmp	r3, r0
 8006fa0:	4637      	mov	r7, r6
 8006fa2:	dc05      	bgt.n	8006fb0 <__swbuf_r+0x4e>
 8006fa4:	4621      	mov	r1, r4
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	f000 fd36 	bl	8007a18 <_fflush_r>
 8006fac:	2800      	cmp	r0, #0
 8006fae:	d1ed      	bne.n	8006f8c <__swbuf_r+0x2a>
 8006fb0:	68a3      	ldr	r3, [r4, #8]
 8006fb2:	3b01      	subs	r3, #1
 8006fb4:	60a3      	str	r3, [r4, #8]
 8006fb6:	6823      	ldr	r3, [r4, #0]
 8006fb8:	1c5a      	adds	r2, r3, #1
 8006fba:	6022      	str	r2, [r4, #0]
 8006fbc:	701e      	strb	r6, [r3, #0]
 8006fbe:	6962      	ldr	r2, [r4, #20]
 8006fc0:	1c43      	adds	r3, r0, #1
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d004      	beq.n	8006fd0 <__swbuf_r+0x6e>
 8006fc6:	89a3      	ldrh	r3, [r4, #12]
 8006fc8:	07db      	lsls	r3, r3, #31
 8006fca:	d5e1      	bpl.n	8006f90 <__swbuf_r+0x2e>
 8006fcc:	2e0a      	cmp	r6, #10
 8006fce:	d1df      	bne.n	8006f90 <__swbuf_r+0x2e>
 8006fd0:	4621      	mov	r1, r4
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	f000 fd20 	bl	8007a18 <_fflush_r>
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	d0d9      	beq.n	8006f90 <__swbuf_r+0x2e>
 8006fdc:	e7d6      	b.n	8006f8c <__swbuf_r+0x2a>
	...

08006fe0 <__swsetup_r>:
 8006fe0:	b538      	push	{r3, r4, r5, lr}
 8006fe2:	4b29      	ldr	r3, [pc, #164]	@ (8007088 <__swsetup_r+0xa8>)
 8006fe4:	4605      	mov	r5, r0
 8006fe6:	6818      	ldr	r0, [r3, #0]
 8006fe8:	460c      	mov	r4, r1
 8006fea:	b118      	cbz	r0, 8006ff4 <__swsetup_r+0x14>
 8006fec:	6a03      	ldr	r3, [r0, #32]
 8006fee:	b90b      	cbnz	r3, 8006ff4 <__swsetup_r+0x14>
 8006ff0:	f7ff fece 	bl	8006d90 <__sinit>
 8006ff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ff8:	0719      	lsls	r1, r3, #28
 8006ffa:	d422      	bmi.n	8007042 <__swsetup_r+0x62>
 8006ffc:	06da      	lsls	r2, r3, #27
 8006ffe:	d407      	bmi.n	8007010 <__swsetup_r+0x30>
 8007000:	2209      	movs	r2, #9
 8007002:	602a      	str	r2, [r5, #0]
 8007004:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007008:	81a3      	strh	r3, [r4, #12]
 800700a:	f04f 30ff 	mov.w	r0, #4294967295
 800700e:	e033      	b.n	8007078 <__swsetup_r+0x98>
 8007010:	0758      	lsls	r0, r3, #29
 8007012:	d512      	bpl.n	800703a <__swsetup_r+0x5a>
 8007014:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007016:	b141      	cbz	r1, 800702a <__swsetup_r+0x4a>
 8007018:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800701c:	4299      	cmp	r1, r3
 800701e:	d002      	beq.n	8007026 <__swsetup_r+0x46>
 8007020:	4628      	mov	r0, r5
 8007022:	f000 f8af 	bl	8007184 <_free_r>
 8007026:	2300      	movs	r3, #0
 8007028:	6363      	str	r3, [r4, #52]	@ 0x34
 800702a:	89a3      	ldrh	r3, [r4, #12]
 800702c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007030:	81a3      	strh	r3, [r4, #12]
 8007032:	2300      	movs	r3, #0
 8007034:	6063      	str	r3, [r4, #4]
 8007036:	6923      	ldr	r3, [r4, #16]
 8007038:	6023      	str	r3, [r4, #0]
 800703a:	89a3      	ldrh	r3, [r4, #12]
 800703c:	f043 0308 	orr.w	r3, r3, #8
 8007040:	81a3      	strh	r3, [r4, #12]
 8007042:	6923      	ldr	r3, [r4, #16]
 8007044:	b94b      	cbnz	r3, 800705a <__swsetup_r+0x7a>
 8007046:	89a3      	ldrh	r3, [r4, #12]
 8007048:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800704c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007050:	d003      	beq.n	800705a <__swsetup_r+0x7a>
 8007052:	4621      	mov	r1, r4
 8007054:	4628      	mov	r0, r5
 8007056:	f000 fd2d 	bl	8007ab4 <__smakebuf_r>
 800705a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800705e:	f013 0201 	ands.w	r2, r3, #1
 8007062:	d00a      	beq.n	800707a <__swsetup_r+0x9a>
 8007064:	2200      	movs	r2, #0
 8007066:	60a2      	str	r2, [r4, #8]
 8007068:	6962      	ldr	r2, [r4, #20]
 800706a:	4252      	negs	r2, r2
 800706c:	61a2      	str	r2, [r4, #24]
 800706e:	6922      	ldr	r2, [r4, #16]
 8007070:	b942      	cbnz	r2, 8007084 <__swsetup_r+0xa4>
 8007072:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007076:	d1c5      	bne.n	8007004 <__swsetup_r+0x24>
 8007078:	bd38      	pop	{r3, r4, r5, pc}
 800707a:	0799      	lsls	r1, r3, #30
 800707c:	bf58      	it	pl
 800707e:	6962      	ldrpl	r2, [r4, #20]
 8007080:	60a2      	str	r2, [r4, #8]
 8007082:	e7f4      	b.n	800706e <__swsetup_r+0x8e>
 8007084:	2000      	movs	r0, #0
 8007086:	e7f7      	b.n	8007078 <__swsetup_r+0x98>
 8007088:	2400001c 	.word	0x2400001c

0800708c <memset>:
 800708c:	4402      	add	r2, r0
 800708e:	4603      	mov	r3, r0
 8007090:	4293      	cmp	r3, r2
 8007092:	d100      	bne.n	8007096 <memset+0xa>
 8007094:	4770      	bx	lr
 8007096:	f803 1b01 	strb.w	r1, [r3], #1
 800709a:	e7f9      	b.n	8007090 <memset+0x4>

0800709c <_close_r>:
 800709c:	b538      	push	{r3, r4, r5, lr}
 800709e:	4d06      	ldr	r5, [pc, #24]	@ (80070b8 <_close_r+0x1c>)
 80070a0:	2300      	movs	r3, #0
 80070a2:	4604      	mov	r4, r0
 80070a4:	4608      	mov	r0, r1
 80070a6:	602b      	str	r3, [r5, #0]
 80070a8:	f7f9 fda4 	bl	8000bf4 <_close>
 80070ac:	1c43      	adds	r3, r0, #1
 80070ae:	d102      	bne.n	80070b6 <_close_r+0x1a>
 80070b0:	682b      	ldr	r3, [r5, #0]
 80070b2:	b103      	cbz	r3, 80070b6 <_close_r+0x1a>
 80070b4:	6023      	str	r3, [r4, #0]
 80070b6:	bd38      	pop	{r3, r4, r5, pc}
 80070b8:	240002b0 	.word	0x240002b0

080070bc <_lseek_r>:
 80070bc:	b538      	push	{r3, r4, r5, lr}
 80070be:	4d07      	ldr	r5, [pc, #28]	@ (80070dc <_lseek_r+0x20>)
 80070c0:	4604      	mov	r4, r0
 80070c2:	4608      	mov	r0, r1
 80070c4:	4611      	mov	r1, r2
 80070c6:	2200      	movs	r2, #0
 80070c8:	602a      	str	r2, [r5, #0]
 80070ca:	461a      	mov	r2, r3
 80070cc:	f7f9 fdb9 	bl	8000c42 <_lseek>
 80070d0:	1c43      	adds	r3, r0, #1
 80070d2:	d102      	bne.n	80070da <_lseek_r+0x1e>
 80070d4:	682b      	ldr	r3, [r5, #0]
 80070d6:	b103      	cbz	r3, 80070da <_lseek_r+0x1e>
 80070d8:	6023      	str	r3, [r4, #0]
 80070da:	bd38      	pop	{r3, r4, r5, pc}
 80070dc:	240002b0 	.word	0x240002b0

080070e0 <_read_r>:
 80070e0:	b538      	push	{r3, r4, r5, lr}
 80070e2:	4d07      	ldr	r5, [pc, #28]	@ (8007100 <_read_r+0x20>)
 80070e4:	4604      	mov	r4, r0
 80070e6:	4608      	mov	r0, r1
 80070e8:	4611      	mov	r1, r2
 80070ea:	2200      	movs	r2, #0
 80070ec:	602a      	str	r2, [r5, #0]
 80070ee:	461a      	mov	r2, r3
 80070f0:	f7f9 fd63 	bl	8000bba <_read>
 80070f4:	1c43      	adds	r3, r0, #1
 80070f6:	d102      	bne.n	80070fe <_read_r+0x1e>
 80070f8:	682b      	ldr	r3, [r5, #0]
 80070fa:	b103      	cbz	r3, 80070fe <_read_r+0x1e>
 80070fc:	6023      	str	r3, [r4, #0]
 80070fe:	bd38      	pop	{r3, r4, r5, pc}
 8007100:	240002b0 	.word	0x240002b0

08007104 <_write_r>:
 8007104:	b538      	push	{r3, r4, r5, lr}
 8007106:	4d07      	ldr	r5, [pc, #28]	@ (8007124 <_write_r+0x20>)
 8007108:	4604      	mov	r4, r0
 800710a:	4608      	mov	r0, r1
 800710c:	4611      	mov	r1, r2
 800710e:	2200      	movs	r2, #0
 8007110:	602a      	str	r2, [r5, #0]
 8007112:	461a      	mov	r2, r3
 8007114:	f7fa f850 	bl	80011b8 <_write>
 8007118:	1c43      	adds	r3, r0, #1
 800711a:	d102      	bne.n	8007122 <_write_r+0x1e>
 800711c:	682b      	ldr	r3, [r5, #0]
 800711e:	b103      	cbz	r3, 8007122 <_write_r+0x1e>
 8007120:	6023      	str	r3, [r4, #0]
 8007122:	bd38      	pop	{r3, r4, r5, pc}
 8007124:	240002b0 	.word	0x240002b0

08007128 <__errno>:
 8007128:	4b01      	ldr	r3, [pc, #4]	@ (8007130 <__errno+0x8>)
 800712a:	6818      	ldr	r0, [r3, #0]
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop
 8007130:	2400001c 	.word	0x2400001c

08007134 <__libc_init_array>:
 8007134:	b570      	push	{r4, r5, r6, lr}
 8007136:	4d0d      	ldr	r5, [pc, #52]	@ (800716c <__libc_init_array+0x38>)
 8007138:	4c0d      	ldr	r4, [pc, #52]	@ (8007170 <__libc_init_array+0x3c>)
 800713a:	1b64      	subs	r4, r4, r5
 800713c:	10a4      	asrs	r4, r4, #2
 800713e:	2600      	movs	r6, #0
 8007140:	42a6      	cmp	r6, r4
 8007142:	d109      	bne.n	8007158 <__libc_init_array+0x24>
 8007144:	4d0b      	ldr	r5, [pc, #44]	@ (8007174 <__libc_init_array+0x40>)
 8007146:	4c0c      	ldr	r4, [pc, #48]	@ (8007178 <__libc_init_array+0x44>)
 8007148:	f000 fd22 	bl	8007b90 <_init>
 800714c:	1b64      	subs	r4, r4, r5
 800714e:	10a4      	asrs	r4, r4, #2
 8007150:	2600      	movs	r6, #0
 8007152:	42a6      	cmp	r6, r4
 8007154:	d105      	bne.n	8007162 <__libc_init_array+0x2e>
 8007156:	bd70      	pop	{r4, r5, r6, pc}
 8007158:	f855 3b04 	ldr.w	r3, [r5], #4
 800715c:	4798      	blx	r3
 800715e:	3601      	adds	r6, #1
 8007160:	e7ee      	b.n	8007140 <__libc_init_array+0xc>
 8007162:	f855 3b04 	ldr.w	r3, [r5], #4
 8007166:	4798      	blx	r3
 8007168:	3601      	adds	r6, #1
 800716a:	e7f2      	b.n	8007152 <__libc_init_array+0x1e>
 800716c:	08007e04 	.word	0x08007e04
 8007170:	08007e04 	.word	0x08007e04
 8007174:	08007e04 	.word	0x08007e04
 8007178:	08007e08 	.word	0x08007e08

0800717c <__retarget_lock_init_recursive>:
 800717c:	4770      	bx	lr

0800717e <__retarget_lock_acquire_recursive>:
 800717e:	4770      	bx	lr

08007180 <__retarget_lock_release_recursive>:
 8007180:	4770      	bx	lr
	...

08007184 <_free_r>:
 8007184:	b538      	push	{r3, r4, r5, lr}
 8007186:	4605      	mov	r5, r0
 8007188:	2900      	cmp	r1, #0
 800718a:	d041      	beq.n	8007210 <_free_r+0x8c>
 800718c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007190:	1f0c      	subs	r4, r1, #4
 8007192:	2b00      	cmp	r3, #0
 8007194:	bfb8      	it	lt
 8007196:	18e4      	addlt	r4, r4, r3
 8007198:	f000 f8e0 	bl	800735c <__malloc_lock>
 800719c:	4a1d      	ldr	r2, [pc, #116]	@ (8007214 <_free_r+0x90>)
 800719e:	6813      	ldr	r3, [r2, #0]
 80071a0:	b933      	cbnz	r3, 80071b0 <_free_r+0x2c>
 80071a2:	6063      	str	r3, [r4, #4]
 80071a4:	6014      	str	r4, [r2, #0]
 80071a6:	4628      	mov	r0, r5
 80071a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071ac:	f000 b8dc 	b.w	8007368 <__malloc_unlock>
 80071b0:	42a3      	cmp	r3, r4
 80071b2:	d908      	bls.n	80071c6 <_free_r+0x42>
 80071b4:	6820      	ldr	r0, [r4, #0]
 80071b6:	1821      	adds	r1, r4, r0
 80071b8:	428b      	cmp	r3, r1
 80071ba:	bf01      	itttt	eq
 80071bc:	6819      	ldreq	r1, [r3, #0]
 80071be:	685b      	ldreq	r3, [r3, #4]
 80071c0:	1809      	addeq	r1, r1, r0
 80071c2:	6021      	streq	r1, [r4, #0]
 80071c4:	e7ed      	b.n	80071a2 <_free_r+0x1e>
 80071c6:	461a      	mov	r2, r3
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	b10b      	cbz	r3, 80071d0 <_free_r+0x4c>
 80071cc:	42a3      	cmp	r3, r4
 80071ce:	d9fa      	bls.n	80071c6 <_free_r+0x42>
 80071d0:	6811      	ldr	r1, [r2, #0]
 80071d2:	1850      	adds	r0, r2, r1
 80071d4:	42a0      	cmp	r0, r4
 80071d6:	d10b      	bne.n	80071f0 <_free_r+0x6c>
 80071d8:	6820      	ldr	r0, [r4, #0]
 80071da:	4401      	add	r1, r0
 80071dc:	1850      	adds	r0, r2, r1
 80071de:	4283      	cmp	r3, r0
 80071e0:	6011      	str	r1, [r2, #0]
 80071e2:	d1e0      	bne.n	80071a6 <_free_r+0x22>
 80071e4:	6818      	ldr	r0, [r3, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	6053      	str	r3, [r2, #4]
 80071ea:	4408      	add	r0, r1
 80071ec:	6010      	str	r0, [r2, #0]
 80071ee:	e7da      	b.n	80071a6 <_free_r+0x22>
 80071f0:	d902      	bls.n	80071f8 <_free_r+0x74>
 80071f2:	230c      	movs	r3, #12
 80071f4:	602b      	str	r3, [r5, #0]
 80071f6:	e7d6      	b.n	80071a6 <_free_r+0x22>
 80071f8:	6820      	ldr	r0, [r4, #0]
 80071fa:	1821      	adds	r1, r4, r0
 80071fc:	428b      	cmp	r3, r1
 80071fe:	bf04      	itt	eq
 8007200:	6819      	ldreq	r1, [r3, #0]
 8007202:	685b      	ldreq	r3, [r3, #4]
 8007204:	6063      	str	r3, [r4, #4]
 8007206:	bf04      	itt	eq
 8007208:	1809      	addeq	r1, r1, r0
 800720a:	6021      	streq	r1, [r4, #0]
 800720c:	6054      	str	r4, [r2, #4]
 800720e:	e7ca      	b.n	80071a6 <_free_r+0x22>
 8007210:	bd38      	pop	{r3, r4, r5, pc}
 8007212:	bf00      	nop
 8007214:	240002bc 	.word	0x240002bc

08007218 <sbrk_aligned>:
 8007218:	b570      	push	{r4, r5, r6, lr}
 800721a:	4e0f      	ldr	r6, [pc, #60]	@ (8007258 <sbrk_aligned+0x40>)
 800721c:	460c      	mov	r4, r1
 800721e:	6831      	ldr	r1, [r6, #0]
 8007220:	4605      	mov	r5, r0
 8007222:	b911      	cbnz	r1, 800722a <sbrk_aligned+0x12>
 8007224:	f000 fca4 	bl	8007b70 <_sbrk_r>
 8007228:	6030      	str	r0, [r6, #0]
 800722a:	4621      	mov	r1, r4
 800722c:	4628      	mov	r0, r5
 800722e:	f000 fc9f 	bl	8007b70 <_sbrk_r>
 8007232:	1c43      	adds	r3, r0, #1
 8007234:	d103      	bne.n	800723e <sbrk_aligned+0x26>
 8007236:	f04f 34ff 	mov.w	r4, #4294967295
 800723a:	4620      	mov	r0, r4
 800723c:	bd70      	pop	{r4, r5, r6, pc}
 800723e:	1cc4      	adds	r4, r0, #3
 8007240:	f024 0403 	bic.w	r4, r4, #3
 8007244:	42a0      	cmp	r0, r4
 8007246:	d0f8      	beq.n	800723a <sbrk_aligned+0x22>
 8007248:	1a21      	subs	r1, r4, r0
 800724a:	4628      	mov	r0, r5
 800724c:	f000 fc90 	bl	8007b70 <_sbrk_r>
 8007250:	3001      	adds	r0, #1
 8007252:	d1f2      	bne.n	800723a <sbrk_aligned+0x22>
 8007254:	e7ef      	b.n	8007236 <sbrk_aligned+0x1e>
 8007256:	bf00      	nop
 8007258:	240002b8 	.word	0x240002b8

0800725c <_malloc_r>:
 800725c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007260:	1ccd      	adds	r5, r1, #3
 8007262:	f025 0503 	bic.w	r5, r5, #3
 8007266:	3508      	adds	r5, #8
 8007268:	2d0c      	cmp	r5, #12
 800726a:	bf38      	it	cc
 800726c:	250c      	movcc	r5, #12
 800726e:	2d00      	cmp	r5, #0
 8007270:	4606      	mov	r6, r0
 8007272:	db01      	blt.n	8007278 <_malloc_r+0x1c>
 8007274:	42a9      	cmp	r1, r5
 8007276:	d904      	bls.n	8007282 <_malloc_r+0x26>
 8007278:	230c      	movs	r3, #12
 800727a:	6033      	str	r3, [r6, #0]
 800727c:	2000      	movs	r0, #0
 800727e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007282:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007358 <_malloc_r+0xfc>
 8007286:	f000 f869 	bl	800735c <__malloc_lock>
 800728a:	f8d8 3000 	ldr.w	r3, [r8]
 800728e:	461c      	mov	r4, r3
 8007290:	bb44      	cbnz	r4, 80072e4 <_malloc_r+0x88>
 8007292:	4629      	mov	r1, r5
 8007294:	4630      	mov	r0, r6
 8007296:	f7ff ffbf 	bl	8007218 <sbrk_aligned>
 800729a:	1c43      	adds	r3, r0, #1
 800729c:	4604      	mov	r4, r0
 800729e:	d158      	bne.n	8007352 <_malloc_r+0xf6>
 80072a0:	f8d8 4000 	ldr.w	r4, [r8]
 80072a4:	4627      	mov	r7, r4
 80072a6:	2f00      	cmp	r7, #0
 80072a8:	d143      	bne.n	8007332 <_malloc_r+0xd6>
 80072aa:	2c00      	cmp	r4, #0
 80072ac:	d04b      	beq.n	8007346 <_malloc_r+0xea>
 80072ae:	6823      	ldr	r3, [r4, #0]
 80072b0:	4639      	mov	r1, r7
 80072b2:	4630      	mov	r0, r6
 80072b4:	eb04 0903 	add.w	r9, r4, r3
 80072b8:	f000 fc5a 	bl	8007b70 <_sbrk_r>
 80072bc:	4581      	cmp	r9, r0
 80072be:	d142      	bne.n	8007346 <_malloc_r+0xea>
 80072c0:	6821      	ldr	r1, [r4, #0]
 80072c2:	1a6d      	subs	r5, r5, r1
 80072c4:	4629      	mov	r1, r5
 80072c6:	4630      	mov	r0, r6
 80072c8:	f7ff ffa6 	bl	8007218 <sbrk_aligned>
 80072cc:	3001      	adds	r0, #1
 80072ce:	d03a      	beq.n	8007346 <_malloc_r+0xea>
 80072d0:	6823      	ldr	r3, [r4, #0]
 80072d2:	442b      	add	r3, r5
 80072d4:	6023      	str	r3, [r4, #0]
 80072d6:	f8d8 3000 	ldr.w	r3, [r8]
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	bb62      	cbnz	r2, 8007338 <_malloc_r+0xdc>
 80072de:	f8c8 7000 	str.w	r7, [r8]
 80072e2:	e00f      	b.n	8007304 <_malloc_r+0xa8>
 80072e4:	6822      	ldr	r2, [r4, #0]
 80072e6:	1b52      	subs	r2, r2, r5
 80072e8:	d420      	bmi.n	800732c <_malloc_r+0xd0>
 80072ea:	2a0b      	cmp	r2, #11
 80072ec:	d917      	bls.n	800731e <_malloc_r+0xc2>
 80072ee:	1961      	adds	r1, r4, r5
 80072f0:	42a3      	cmp	r3, r4
 80072f2:	6025      	str	r5, [r4, #0]
 80072f4:	bf18      	it	ne
 80072f6:	6059      	strne	r1, [r3, #4]
 80072f8:	6863      	ldr	r3, [r4, #4]
 80072fa:	bf08      	it	eq
 80072fc:	f8c8 1000 	streq.w	r1, [r8]
 8007300:	5162      	str	r2, [r4, r5]
 8007302:	604b      	str	r3, [r1, #4]
 8007304:	4630      	mov	r0, r6
 8007306:	f000 f82f 	bl	8007368 <__malloc_unlock>
 800730a:	f104 000b 	add.w	r0, r4, #11
 800730e:	1d23      	adds	r3, r4, #4
 8007310:	f020 0007 	bic.w	r0, r0, #7
 8007314:	1ac2      	subs	r2, r0, r3
 8007316:	bf1c      	itt	ne
 8007318:	1a1b      	subne	r3, r3, r0
 800731a:	50a3      	strne	r3, [r4, r2]
 800731c:	e7af      	b.n	800727e <_malloc_r+0x22>
 800731e:	6862      	ldr	r2, [r4, #4]
 8007320:	42a3      	cmp	r3, r4
 8007322:	bf0c      	ite	eq
 8007324:	f8c8 2000 	streq.w	r2, [r8]
 8007328:	605a      	strne	r2, [r3, #4]
 800732a:	e7eb      	b.n	8007304 <_malloc_r+0xa8>
 800732c:	4623      	mov	r3, r4
 800732e:	6864      	ldr	r4, [r4, #4]
 8007330:	e7ae      	b.n	8007290 <_malloc_r+0x34>
 8007332:	463c      	mov	r4, r7
 8007334:	687f      	ldr	r7, [r7, #4]
 8007336:	e7b6      	b.n	80072a6 <_malloc_r+0x4a>
 8007338:	461a      	mov	r2, r3
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	42a3      	cmp	r3, r4
 800733e:	d1fb      	bne.n	8007338 <_malloc_r+0xdc>
 8007340:	2300      	movs	r3, #0
 8007342:	6053      	str	r3, [r2, #4]
 8007344:	e7de      	b.n	8007304 <_malloc_r+0xa8>
 8007346:	230c      	movs	r3, #12
 8007348:	6033      	str	r3, [r6, #0]
 800734a:	4630      	mov	r0, r6
 800734c:	f000 f80c 	bl	8007368 <__malloc_unlock>
 8007350:	e794      	b.n	800727c <_malloc_r+0x20>
 8007352:	6005      	str	r5, [r0, #0]
 8007354:	e7d6      	b.n	8007304 <_malloc_r+0xa8>
 8007356:	bf00      	nop
 8007358:	240002bc 	.word	0x240002bc

0800735c <__malloc_lock>:
 800735c:	4801      	ldr	r0, [pc, #4]	@ (8007364 <__malloc_lock+0x8>)
 800735e:	f7ff bf0e 	b.w	800717e <__retarget_lock_acquire_recursive>
 8007362:	bf00      	nop
 8007364:	240002b4 	.word	0x240002b4

08007368 <__malloc_unlock>:
 8007368:	4801      	ldr	r0, [pc, #4]	@ (8007370 <__malloc_unlock+0x8>)
 800736a:	f7ff bf09 	b.w	8007180 <__retarget_lock_release_recursive>
 800736e:	bf00      	nop
 8007370:	240002b4 	.word	0x240002b4

08007374 <__sfputc_r>:
 8007374:	6893      	ldr	r3, [r2, #8]
 8007376:	3b01      	subs	r3, #1
 8007378:	2b00      	cmp	r3, #0
 800737a:	b410      	push	{r4}
 800737c:	6093      	str	r3, [r2, #8]
 800737e:	da08      	bge.n	8007392 <__sfputc_r+0x1e>
 8007380:	6994      	ldr	r4, [r2, #24]
 8007382:	42a3      	cmp	r3, r4
 8007384:	db01      	blt.n	800738a <__sfputc_r+0x16>
 8007386:	290a      	cmp	r1, #10
 8007388:	d103      	bne.n	8007392 <__sfputc_r+0x1e>
 800738a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800738e:	f7ff bde8 	b.w	8006f62 <__swbuf_r>
 8007392:	6813      	ldr	r3, [r2, #0]
 8007394:	1c58      	adds	r0, r3, #1
 8007396:	6010      	str	r0, [r2, #0]
 8007398:	7019      	strb	r1, [r3, #0]
 800739a:	4608      	mov	r0, r1
 800739c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073a0:	4770      	bx	lr

080073a2 <__sfputs_r>:
 80073a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073a4:	4606      	mov	r6, r0
 80073a6:	460f      	mov	r7, r1
 80073a8:	4614      	mov	r4, r2
 80073aa:	18d5      	adds	r5, r2, r3
 80073ac:	42ac      	cmp	r4, r5
 80073ae:	d101      	bne.n	80073b4 <__sfputs_r+0x12>
 80073b0:	2000      	movs	r0, #0
 80073b2:	e007      	b.n	80073c4 <__sfputs_r+0x22>
 80073b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073b8:	463a      	mov	r2, r7
 80073ba:	4630      	mov	r0, r6
 80073bc:	f7ff ffda 	bl	8007374 <__sfputc_r>
 80073c0:	1c43      	adds	r3, r0, #1
 80073c2:	d1f3      	bne.n	80073ac <__sfputs_r+0xa>
 80073c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080073c8 <_vfiprintf_r>:
 80073c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073cc:	460d      	mov	r5, r1
 80073ce:	b09d      	sub	sp, #116	@ 0x74
 80073d0:	4614      	mov	r4, r2
 80073d2:	4698      	mov	r8, r3
 80073d4:	4606      	mov	r6, r0
 80073d6:	b118      	cbz	r0, 80073e0 <_vfiprintf_r+0x18>
 80073d8:	6a03      	ldr	r3, [r0, #32]
 80073da:	b90b      	cbnz	r3, 80073e0 <_vfiprintf_r+0x18>
 80073dc:	f7ff fcd8 	bl	8006d90 <__sinit>
 80073e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073e2:	07d9      	lsls	r1, r3, #31
 80073e4:	d405      	bmi.n	80073f2 <_vfiprintf_r+0x2a>
 80073e6:	89ab      	ldrh	r3, [r5, #12]
 80073e8:	059a      	lsls	r2, r3, #22
 80073ea:	d402      	bmi.n	80073f2 <_vfiprintf_r+0x2a>
 80073ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073ee:	f7ff fec6 	bl	800717e <__retarget_lock_acquire_recursive>
 80073f2:	89ab      	ldrh	r3, [r5, #12]
 80073f4:	071b      	lsls	r3, r3, #28
 80073f6:	d501      	bpl.n	80073fc <_vfiprintf_r+0x34>
 80073f8:	692b      	ldr	r3, [r5, #16]
 80073fa:	b99b      	cbnz	r3, 8007424 <_vfiprintf_r+0x5c>
 80073fc:	4629      	mov	r1, r5
 80073fe:	4630      	mov	r0, r6
 8007400:	f7ff fdee 	bl	8006fe0 <__swsetup_r>
 8007404:	b170      	cbz	r0, 8007424 <_vfiprintf_r+0x5c>
 8007406:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007408:	07dc      	lsls	r4, r3, #31
 800740a:	d504      	bpl.n	8007416 <_vfiprintf_r+0x4e>
 800740c:	f04f 30ff 	mov.w	r0, #4294967295
 8007410:	b01d      	add	sp, #116	@ 0x74
 8007412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007416:	89ab      	ldrh	r3, [r5, #12]
 8007418:	0598      	lsls	r0, r3, #22
 800741a:	d4f7      	bmi.n	800740c <_vfiprintf_r+0x44>
 800741c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800741e:	f7ff feaf 	bl	8007180 <__retarget_lock_release_recursive>
 8007422:	e7f3      	b.n	800740c <_vfiprintf_r+0x44>
 8007424:	2300      	movs	r3, #0
 8007426:	9309      	str	r3, [sp, #36]	@ 0x24
 8007428:	2320      	movs	r3, #32
 800742a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800742e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007432:	2330      	movs	r3, #48	@ 0x30
 8007434:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80075e4 <_vfiprintf_r+0x21c>
 8007438:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800743c:	f04f 0901 	mov.w	r9, #1
 8007440:	4623      	mov	r3, r4
 8007442:	469a      	mov	sl, r3
 8007444:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007448:	b10a      	cbz	r2, 800744e <_vfiprintf_r+0x86>
 800744a:	2a25      	cmp	r2, #37	@ 0x25
 800744c:	d1f9      	bne.n	8007442 <_vfiprintf_r+0x7a>
 800744e:	ebba 0b04 	subs.w	fp, sl, r4
 8007452:	d00b      	beq.n	800746c <_vfiprintf_r+0xa4>
 8007454:	465b      	mov	r3, fp
 8007456:	4622      	mov	r2, r4
 8007458:	4629      	mov	r1, r5
 800745a:	4630      	mov	r0, r6
 800745c:	f7ff ffa1 	bl	80073a2 <__sfputs_r>
 8007460:	3001      	adds	r0, #1
 8007462:	f000 80a7 	beq.w	80075b4 <_vfiprintf_r+0x1ec>
 8007466:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007468:	445a      	add	r2, fp
 800746a:	9209      	str	r2, [sp, #36]	@ 0x24
 800746c:	f89a 3000 	ldrb.w	r3, [sl]
 8007470:	2b00      	cmp	r3, #0
 8007472:	f000 809f 	beq.w	80075b4 <_vfiprintf_r+0x1ec>
 8007476:	2300      	movs	r3, #0
 8007478:	f04f 32ff 	mov.w	r2, #4294967295
 800747c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007480:	f10a 0a01 	add.w	sl, sl, #1
 8007484:	9304      	str	r3, [sp, #16]
 8007486:	9307      	str	r3, [sp, #28]
 8007488:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800748c:	931a      	str	r3, [sp, #104]	@ 0x68
 800748e:	4654      	mov	r4, sl
 8007490:	2205      	movs	r2, #5
 8007492:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007496:	4853      	ldr	r0, [pc, #332]	@ (80075e4 <_vfiprintf_r+0x21c>)
 8007498:	f7f8 ff22 	bl	80002e0 <memchr>
 800749c:	9a04      	ldr	r2, [sp, #16]
 800749e:	b9d8      	cbnz	r0, 80074d8 <_vfiprintf_r+0x110>
 80074a0:	06d1      	lsls	r1, r2, #27
 80074a2:	bf44      	itt	mi
 80074a4:	2320      	movmi	r3, #32
 80074a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074aa:	0713      	lsls	r3, r2, #28
 80074ac:	bf44      	itt	mi
 80074ae:	232b      	movmi	r3, #43	@ 0x2b
 80074b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074b4:	f89a 3000 	ldrb.w	r3, [sl]
 80074b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80074ba:	d015      	beq.n	80074e8 <_vfiprintf_r+0x120>
 80074bc:	9a07      	ldr	r2, [sp, #28]
 80074be:	4654      	mov	r4, sl
 80074c0:	2000      	movs	r0, #0
 80074c2:	f04f 0c0a 	mov.w	ip, #10
 80074c6:	4621      	mov	r1, r4
 80074c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074cc:	3b30      	subs	r3, #48	@ 0x30
 80074ce:	2b09      	cmp	r3, #9
 80074d0:	d94b      	bls.n	800756a <_vfiprintf_r+0x1a2>
 80074d2:	b1b0      	cbz	r0, 8007502 <_vfiprintf_r+0x13a>
 80074d4:	9207      	str	r2, [sp, #28]
 80074d6:	e014      	b.n	8007502 <_vfiprintf_r+0x13a>
 80074d8:	eba0 0308 	sub.w	r3, r0, r8
 80074dc:	fa09 f303 	lsl.w	r3, r9, r3
 80074e0:	4313      	orrs	r3, r2
 80074e2:	9304      	str	r3, [sp, #16]
 80074e4:	46a2      	mov	sl, r4
 80074e6:	e7d2      	b.n	800748e <_vfiprintf_r+0xc6>
 80074e8:	9b03      	ldr	r3, [sp, #12]
 80074ea:	1d19      	adds	r1, r3, #4
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	9103      	str	r1, [sp, #12]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	bfbb      	ittet	lt
 80074f4:	425b      	neglt	r3, r3
 80074f6:	f042 0202 	orrlt.w	r2, r2, #2
 80074fa:	9307      	strge	r3, [sp, #28]
 80074fc:	9307      	strlt	r3, [sp, #28]
 80074fe:	bfb8      	it	lt
 8007500:	9204      	strlt	r2, [sp, #16]
 8007502:	7823      	ldrb	r3, [r4, #0]
 8007504:	2b2e      	cmp	r3, #46	@ 0x2e
 8007506:	d10a      	bne.n	800751e <_vfiprintf_r+0x156>
 8007508:	7863      	ldrb	r3, [r4, #1]
 800750a:	2b2a      	cmp	r3, #42	@ 0x2a
 800750c:	d132      	bne.n	8007574 <_vfiprintf_r+0x1ac>
 800750e:	9b03      	ldr	r3, [sp, #12]
 8007510:	1d1a      	adds	r2, r3, #4
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	9203      	str	r2, [sp, #12]
 8007516:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800751a:	3402      	adds	r4, #2
 800751c:	9305      	str	r3, [sp, #20]
 800751e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80075f4 <_vfiprintf_r+0x22c>
 8007522:	7821      	ldrb	r1, [r4, #0]
 8007524:	2203      	movs	r2, #3
 8007526:	4650      	mov	r0, sl
 8007528:	f7f8 feda 	bl	80002e0 <memchr>
 800752c:	b138      	cbz	r0, 800753e <_vfiprintf_r+0x176>
 800752e:	9b04      	ldr	r3, [sp, #16]
 8007530:	eba0 000a 	sub.w	r0, r0, sl
 8007534:	2240      	movs	r2, #64	@ 0x40
 8007536:	4082      	lsls	r2, r0
 8007538:	4313      	orrs	r3, r2
 800753a:	3401      	adds	r4, #1
 800753c:	9304      	str	r3, [sp, #16]
 800753e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007542:	4829      	ldr	r0, [pc, #164]	@ (80075e8 <_vfiprintf_r+0x220>)
 8007544:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007548:	2206      	movs	r2, #6
 800754a:	f7f8 fec9 	bl	80002e0 <memchr>
 800754e:	2800      	cmp	r0, #0
 8007550:	d03f      	beq.n	80075d2 <_vfiprintf_r+0x20a>
 8007552:	4b26      	ldr	r3, [pc, #152]	@ (80075ec <_vfiprintf_r+0x224>)
 8007554:	bb1b      	cbnz	r3, 800759e <_vfiprintf_r+0x1d6>
 8007556:	9b03      	ldr	r3, [sp, #12]
 8007558:	3307      	adds	r3, #7
 800755a:	f023 0307 	bic.w	r3, r3, #7
 800755e:	3308      	adds	r3, #8
 8007560:	9303      	str	r3, [sp, #12]
 8007562:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007564:	443b      	add	r3, r7
 8007566:	9309      	str	r3, [sp, #36]	@ 0x24
 8007568:	e76a      	b.n	8007440 <_vfiprintf_r+0x78>
 800756a:	fb0c 3202 	mla	r2, ip, r2, r3
 800756e:	460c      	mov	r4, r1
 8007570:	2001      	movs	r0, #1
 8007572:	e7a8      	b.n	80074c6 <_vfiprintf_r+0xfe>
 8007574:	2300      	movs	r3, #0
 8007576:	3401      	adds	r4, #1
 8007578:	9305      	str	r3, [sp, #20]
 800757a:	4619      	mov	r1, r3
 800757c:	f04f 0c0a 	mov.w	ip, #10
 8007580:	4620      	mov	r0, r4
 8007582:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007586:	3a30      	subs	r2, #48	@ 0x30
 8007588:	2a09      	cmp	r2, #9
 800758a:	d903      	bls.n	8007594 <_vfiprintf_r+0x1cc>
 800758c:	2b00      	cmp	r3, #0
 800758e:	d0c6      	beq.n	800751e <_vfiprintf_r+0x156>
 8007590:	9105      	str	r1, [sp, #20]
 8007592:	e7c4      	b.n	800751e <_vfiprintf_r+0x156>
 8007594:	fb0c 2101 	mla	r1, ip, r1, r2
 8007598:	4604      	mov	r4, r0
 800759a:	2301      	movs	r3, #1
 800759c:	e7f0      	b.n	8007580 <_vfiprintf_r+0x1b8>
 800759e:	ab03      	add	r3, sp, #12
 80075a0:	9300      	str	r3, [sp, #0]
 80075a2:	462a      	mov	r2, r5
 80075a4:	4b12      	ldr	r3, [pc, #72]	@ (80075f0 <_vfiprintf_r+0x228>)
 80075a6:	a904      	add	r1, sp, #16
 80075a8:	4630      	mov	r0, r6
 80075aa:	f3af 8000 	nop.w
 80075ae:	4607      	mov	r7, r0
 80075b0:	1c78      	adds	r0, r7, #1
 80075b2:	d1d6      	bne.n	8007562 <_vfiprintf_r+0x19a>
 80075b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075b6:	07d9      	lsls	r1, r3, #31
 80075b8:	d405      	bmi.n	80075c6 <_vfiprintf_r+0x1fe>
 80075ba:	89ab      	ldrh	r3, [r5, #12]
 80075bc:	059a      	lsls	r2, r3, #22
 80075be:	d402      	bmi.n	80075c6 <_vfiprintf_r+0x1fe>
 80075c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075c2:	f7ff fddd 	bl	8007180 <__retarget_lock_release_recursive>
 80075c6:	89ab      	ldrh	r3, [r5, #12]
 80075c8:	065b      	lsls	r3, r3, #25
 80075ca:	f53f af1f 	bmi.w	800740c <_vfiprintf_r+0x44>
 80075ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075d0:	e71e      	b.n	8007410 <_vfiprintf_r+0x48>
 80075d2:	ab03      	add	r3, sp, #12
 80075d4:	9300      	str	r3, [sp, #0]
 80075d6:	462a      	mov	r2, r5
 80075d8:	4b05      	ldr	r3, [pc, #20]	@ (80075f0 <_vfiprintf_r+0x228>)
 80075da:	a904      	add	r1, sp, #16
 80075dc:	4630      	mov	r0, r6
 80075de:	f000 f879 	bl	80076d4 <_printf_i>
 80075e2:	e7e4      	b.n	80075ae <_vfiprintf_r+0x1e6>
 80075e4:	08007dc8 	.word	0x08007dc8
 80075e8:	08007dd2 	.word	0x08007dd2
 80075ec:	00000000 	.word	0x00000000
 80075f0:	080073a3 	.word	0x080073a3
 80075f4:	08007dce 	.word	0x08007dce

080075f8 <_printf_common>:
 80075f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075fc:	4616      	mov	r6, r2
 80075fe:	4698      	mov	r8, r3
 8007600:	688a      	ldr	r2, [r1, #8]
 8007602:	690b      	ldr	r3, [r1, #16]
 8007604:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007608:	4293      	cmp	r3, r2
 800760a:	bfb8      	it	lt
 800760c:	4613      	movlt	r3, r2
 800760e:	6033      	str	r3, [r6, #0]
 8007610:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007614:	4607      	mov	r7, r0
 8007616:	460c      	mov	r4, r1
 8007618:	b10a      	cbz	r2, 800761e <_printf_common+0x26>
 800761a:	3301      	adds	r3, #1
 800761c:	6033      	str	r3, [r6, #0]
 800761e:	6823      	ldr	r3, [r4, #0]
 8007620:	0699      	lsls	r1, r3, #26
 8007622:	bf42      	ittt	mi
 8007624:	6833      	ldrmi	r3, [r6, #0]
 8007626:	3302      	addmi	r3, #2
 8007628:	6033      	strmi	r3, [r6, #0]
 800762a:	6825      	ldr	r5, [r4, #0]
 800762c:	f015 0506 	ands.w	r5, r5, #6
 8007630:	d106      	bne.n	8007640 <_printf_common+0x48>
 8007632:	f104 0a19 	add.w	sl, r4, #25
 8007636:	68e3      	ldr	r3, [r4, #12]
 8007638:	6832      	ldr	r2, [r6, #0]
 800763a:	1a9b      	subs	r3, r3, r2
 800763c:	42ab      	cmp	r3, r5
 800763e:	dc26      	bgt.n	800768e <_printf_common+0x96>
 8007640:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007644:	6822      	ldr	r2, [r4, #0]
 8007646:	3b00      	subs	r3, #0
 8007648:	bf18      	it	ne
 800764a:	2301      	movne	r3, #1
 800764c:	0692      	lsls	r2, r2, #26
 800764e:	d42b      	bmi.n	80076a8 <_printf_common+0xb0>
 8007650:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007654:	4641      	mov	r1, r8
 8007656:	4638      	mov	r0, r7
 8007658:	47c8      	blx	r9
 800765a:	3001      	adds	r0, #1
 800765c:	d01e      	beq.n	800769c <_printf_common+0xa4>
 800765e:	6823      	ldr	r3, [r4, #0]
 8007660:	6922      	ldr	r2, [r4, #16]
 8007662:	f003 0306 	and.w	r3, r3, #6
 8007666:	2b04      	cmp	r3, #4
 8007668:	bf02      	ittt	eq
 800766a:	68e5      	ldreq	r5, [r4, #12]
 800766c:	6833      	ldreq	r3, [r6, #0]
 800766e:	1aed      	subeq	r5, r5, r3
 8007670:	68a3      	ldr	r3, [r4, #8]
 8007672:	bf0c      	ite	eq
 8007674:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007678:	2500      	movne	r5, #0
 800767a:	4293      	cmp	r3, r2
 800767c:	bfc4      	itt	gt
 800767e:	1a9b      	subgt	r3, r3, r2
 8007680:	18ed      	addgt	r5, r5, r3
 8007682:	2600      	movs	r6, #0
 8007684:	341a      	adds	r4, #26
 8007686:	42b5      	cmp	r5, r6
 8007688:	d11a      	bne.n	80076c0 <_printf_common+0xc8>
 800768a:	2000      	movs	r0, #0
 800768c:	e008      	b.n	80076a0 <_printf_common+0xa8>
 800768e:	2301      	movs	r3, #1
 8007690:	4652      	mov	r2, sl
 8007692:	4641      	mov	r1, r8
 8007694:	4638      	mov	r0, r7
 8007696:	47c8      	blx	r9
 8007698:	3001      	adds	r0, #1
 800769a:	d103      	bne.n	80076a4 <_printf_common+0xac>
 800769c:	f04f 30ff 	mov.w	r0, #4294967295
 80076a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076a4:	3501      	adds	r5, #1
 80076a6:	e7c6      	b.n	8007636 <_printf_common+0x3e>
 80076a8:	18e1      	adds	r1, r4, r3
 80076aa:	1c5a      	adds	r2, r3, #1
 80076ac:	2030      	movs	r0, #48	@ 0x30
 80076ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80076b2:	4422      	add	r2, r4
 80076b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80076b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80076bc:	3302      	adds	r3, #2
 80076be:	e7c7      	b.n	8007650 <_printf_common+0x58>
 80076c0:	2301      	movs	r3, #1
 80076c2:	4622      	mov	r2, r4
 80076c4:	4641      	mov	r1, r8
 80076c6:	4638      	mov	r0, r7
 80076c8:	47c8      	blx	r9
 80076ca:	3001      	adds	r0, #1
 80076cc:	d0e6      	beq.n	800769c <_printf_common+0xa4>
 80076ce:	3601      	adds	r6, #1
 80076d0:	e7d9      	b.n	8007686 <_printf_common+0x8e>
	...

080076d4 <_printf_i>:
 80076d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076d8:	7e0f      	ldrb	r7, [r1, #24]
 80076da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80076dc:	2f78      	cmp	r7, #120	@ 0x78
 80076de:	4691      	mov	r9, r2
 80076e0:	4680      	mov	r8, r0
 80076e2:	460c      	mov	r4, r1
 80076e4:	469a      	mov	sl, r3
 80076e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80076ea:	d807      	bhi.n	80076fc <_printf_i+0x28>
 80076ec:	2f62      	cmp	r7, #98	@ 0x62
 80076ee:	d80a      	bhi.n	8007706 <_printf_i+0x32>
 80076f0:	2f00      	cmp	r7, #0
 80076f2:	f000 80d1 	beq.w	8007898 <_printf_i+0x1c4>
 80076f6:	2f58      	cmp	r7, #88	@ 0x58
 80076f8:	f000 80b8 	beq.w	800786c <_printf_i+0x198>
 80076fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007700:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007704:	e03a      	b.n	800777c <_printf_i+0xa8>
 8007706:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800770a:	2b15      	cmp	r3, #21
 800770c:	d8f6      	bhi.n	80076fc <_printf_i+0x28>
 800770e:	a101      	add	r1, pc, #4	@ (adr r1, 8007714 <_printf_i+0x40>)
 8007710:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007714:	0800776d 	.word	0x0800776d
 8007718:	08007781 	.word	0x08007781
 800771c:	080076fd 	.word	0x080076fd
 8007720:	080076fd 	.word	0x080076fd
 8007724:	080076fd 	.word	0x080076fd
 8007728:	080076fd 	.word	0x080076fd
 800772c:	08007781 	.word	0x08007781
 8007730:	080076fd 	.word	0x080076fd
 8007734:	080076fd 	.word	0x080076fd
 8007738:	080076fd 	.word	0x080076fd
 800773c:	080076fd 	.word	0x080076fd
 8007740:	0800787f 	.word	0x0800787f
 8007744:	080077ab 	.word	0x080077ab
 8007748:	08007839 	.word	0x08007839
 800774c:	080076fd 	.word	0x080076fd
 8007750:	080076fd 	.word	0x080076fd
 8007754:	080078a1 	.word	0x080078a1
 8007758:	080076fd 	.word	0x080076fd
 800775c:	080077ab 	.word	0x080077ab
 8007760:	080076fd 	.word	0x080076fd
 8007764:	080076fd 	.word	0x080076fd
 8007768:	08007841 	.word	0x08007841
 800776c:	6833      	ldr	r3, [r6, #0]
 800776e:	1d1a      	adds	r2, r3, #4
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	6032      	str	r2, [r6, #0]
 8007774:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007778:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800777c:	2301      	movs	r3, #1
 800777e:	e09c      	b.n	80078ba <_printf_i+0x1e6>
 8007780:	6833      	ldr	r3, [r6, #0]
 8007782:	6820      	ldr	r0, [r4, #0]
 8007784:	1d19      	adds	r1, r3, #4
 8007786:	6031      	str	r1, [r6, #0]
 8007788:	0606      	lsls	r6, r0, #24
 800778a:	d501      	bpl.n	8007790 <_printf_i+0xbc>
 800778c:	681d      	ldr	r5, [r3, #0]
 800778e:	e003      	b.n	8007798 <_printf_i+0xc4>
 8007790:	0645      	lsls	r5, r0, #25
 8007792:	d5fb      	bpl.n	800778c <_printf_i+0xb8>
 8007794:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007798:	2d00      	cmp	r5, #0
 800779a:	da03      	bge.n	80077a4 <_printf_i+0xd0>
 800779c:	232d      	movs	r3, #45	@ 0x2d
 800779e:	426d      	negs	r5, r5
 80077a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077a4:	4858      	ldr	r0, [pc, #352]	@ (8007908 <_printf_i+0x234>)
 80077a6:	230a      	movs	r3, #10
 80077a8:	e011      	b.n	80077ce <_printf_i+0xfa>
 80077aa:	6821      	ldr	r1, [r4, #0]
 80077ac:	6833      	ldr	r3, [r6, #0]
 80077ae:	0608      	lsls	r0, r1, #24
 80077b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80077b4:	d402      	bmi.n	80077bc <_printf_i+0xe8>
 80077b6:	0649      	lsls	r1, r1, #25
 80077b8:	bf48      	it	mi
 80077ba:	b2ad      	uxthmi	r5, r5
 80077bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80077be:	4852      	ldr	r0, [pc, #328]	@ (8007908 <_printf_i+0x234>)
 80077c0:	6033      	str	r3, [r6, #0]
 80077c2:	bf14      	ite	ne
 80077c4:	230a      	movne	r3, #10
 80077c6:	2308      	moveq	r3, #8
 80077c8:	2100      	movs	r1, #0
 80077ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80077ce:	6866      	ldr	r6, [r4, #4]
 80077d0:	60a6      	str	r6, [r4, #8]
 80077d2:	2e00      	cmp	r6, #0
 80077d4:	db05      	blt.n	80077e2 <_printf_i+0x10e>
 80077d6:	6821      	ldr	r1, [r4, #0]
 80077d8:	432e      	orrs	r6, r5
 80077da:	f021 0104 	bic.w	r1, r1, #4
 80077de:	6021      	str	r1, [r4, #0]
 80077e0:	d04b      	beq.n	800787a <_printf_i+0x1a6>
 80077e2:	4616      	mov	r6, r2
 80077e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80077e8:	fb03 5711 	mls	r7, r3, r1, r5
 80077ec:	5dc7      	ldrb	r7, [r0, r7]
 80077ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80077f2:	462f      	mov	r7, r5
 80077f4:	42bb      	cmp	r3, r7
 80077f6:	460d      	mov	r5, r1
 80077f8:	d9f4      	bls.n	80077e4 <_printf_i+0x110>
 80077fa:	2b08      	cmp	r3, #8
 80077fc:	d10b      	bne.n	8007816 <_printf_i+0x142>
 80077fe:	6823      	ldr	r3, [r4, #0]
 8007800:	07df      	lsls	r7, r3, #31
 8007802:	d508      	bpl.n	8007816 <_printf_i+0x142>
 8007804:	6923      	ldr	r3, [r4, #16]
 8007806:	6861      	ldr	r1, [r4, #4]
 8007808:	4299      	cmp	r1, r3
 800780a:	bfde      	ittt	le
 800780c:	2330      	movle	r3, #48	@ 0x30
 800780e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007812:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007816:	1b92      	subs	r2, r2, r6
 8007818:	6122      	str	r2, [r4, #16]
 800781a:	f8cd a000 	str.w	sl, [sp]
 800781e:	464b      	mov	r3, r9
 8007820:	aa03      	add	r2, sp, #12
 8007822:	4621      	mov	r1, r4
 8007824:	4640      	mov	r0, r8
 8007826:	f7ff fee7 	bl	80075f8 <_printf_common>
 800782a:	3001      	adds	r0, #1
 800782c:	d14a      	bne.n	80078c4 <_printf_i+0x1f0>
 800782e:	f04f 30ff 	mov.w	r0, #4294967295
 8007832:	b004      	add	sp, #16
 8007834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007838:	6823      	ldr	r3, [r4, #0]
 800783a:	f043 0320 	orr.w	r3, r3, #32
 800783e:	6023      	str	r3, [r4, #0]
 8007840:	4832      	ldr	r0, [pc, #200]	@ (800790c <_printf_i+0x238>)
 8007842:	2778      	movs	r7, #120	@ 0x78
 8007844:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007848:	6823      	ldr	r3, [r4, #0]
 800784a:	6831      	ldr	r1, [r6, #0]
 800784c:	061f      	lsls	r7, r3, #24
 800784e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007852:	d402      	bmi.n	800785a <_printf_i+0x186>
 8007854:	065f      	lsls	r7, r3, #25
 8007856:	bf48      	it	mi
 8007858:	b2ad      	uxthmi	r5, r5
 800785a:	6031      	str	r1, [r6, #0]
 800785c:	07d9      	lsls	r1, r3, #31
 800785e:	bf44      	itt	mi
 8007860:	f043 0320 	orrmi.w	r3, r3, #32
 8007864:	6023      	strmi	r3, [r4, #0]
 8007866:	b11d      	cbz	r5, 8007870 <_printf_i+0x19c>
 8007868:	2310      	movs	r3, #16
 800786a:	e7ad      	b.n	80077c8 <_printf_i+0xf4>
 800786c:	4826      	ldr	r0, [pc, #152]	@ (8007908 <_printf_i+0x234>)
 800786e:	e7e9      	b.n	8007844 <_printf_i+0x170>
 8007870:	6823      	ldr	r3, [r4, #0]
 8007872:	f023 0320 	bic.w	r3, r3, #32
 8007876:	6023      	str	r3, [r4, #0]
 8007878:	e7f6      	b.n	8007868 <_printf_i+0x194>
 800787a:	4616      	mov	r6, r2
 800787c:	e7bd      	b.n	80077fa <_printf_i+0x126>
 800787e:	6833      	ldr	r3, [r6, #0]
 8007880:	6825      	ldr	r5, [r4, #0]
 8007882:	6961      	ldr	r1, [r4, #20]
 8007884:	1d18      	adds	r0, r3, #4
 8007886:	6030      	str	r0, [r6, #0]
 8007888:	062e      	lsls	r6, r5, #24
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	d501      	bpl.n	8007892 <_printf_i+0x1be>
 800788e:	6019      	str	r1, [r3, #0]
 8007890:	e002      	b.n	8007898 <_printf_i+0x1c4>
 8007892:	0668      	lsls	r0, r5, #25
 8007894:	d5fb      	bpl.n	800788e <_printf_i+0x1ba>
 8007896:	8019      	strh	r1, [r3, #0]
 8007898:	2300      	movs	r3, #0
 800789a:	6123      	str	r3, [r4, #16]
 800789c:	4616      	mov	r6, r2
 800789e:	e7bc      	b.n	800781a <_printf_i+0x146>
 80078a0:	6833      	ldr	r3, [r6, #0]
 80078a2:	1d1a      	adds	r2, r3, #4
 80078a4:	6032      	str	r2, [r6, #0]
 80078a6:	681e      	ldr	r6, [r3, #0]
 80078a8:	6862      	ldr	r2, [r4, #4]
 80078aa:	2100      	movs	r1, #0
 80078ac:	4630      	mov	r0, r6
 80078ae:	f7f8 fd17 	bl	80002e0 <memchr>
 80078b2:	b108      	cbz	r0, 80078b8 <_printf_i+0x1e4>
 80078b4:	1b80      	subs	r0, r0, r6
 80078b6:	6060      	str	r0, [r4, #4]
 80078b8:	6863      	ldr	r3, [r4, #4]
 80078ba:	6123      	str	r3, [r4, #16]
 80078bc:	2300      	movs	r3, #0
 80078be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078c2:	e7aa      	b.n	800781a <_printf_i+0x146>
 80078c4:	6923      	ldr	r3, [r4, #16]
 80078c6:	4632      	mov	r2, r6
 80078c8:	4649      	mov	r1, r9
 80078ca:	4640      	mov	r0, r8
 80078cc:	47d0      	blx	sl
 80078ce:	3001      	adds	r0, #1
 80078d0:	d0ad      	beq.n	800782e <_printf_i+0x15a>
 80078d2:	6823      	ldr	r3, [r4, #0]
 80078d4:	079b      	lsls	r3, r3, #30
 80078d6:	d413      	bmi.n	8007900 <_printf_i+0x22c>
 80078d8:	68e0      	ldr	r0, [r4, #12]
 80078da:	9b03      	ldr	r3, [sp, #12]
 80078dc:	4298      	cmp	r0, r3
 80078de:	bfb8      	it	lt
 80078e0:	4618      	movlt	r0, r3
 80078e2:	e7a6      	b.n	8007832 <_printf_i+0x15e>
 80078e4:	2301      	movs	r3, #1
 80078e6:	4632      	mov	r2, r6
 80078e8:	4649      	mov	r1, r9
 80078ea:	4640      	mov	r0, r8
 80078ec:	47d0      	blx	sl
 80078ee:	3001      	adds	r0, #1
 80078f0:	d09d      	beq.n	800782e <_printf_i+0x15a>
 80078f2:	3501      	adds	r5, #1
 80078f4:	68e3      	ldr	r3, [r4, #12]
 80078f6:	9903      	ldr	r1, [sp, #12]
 80078f8:	1a5b      	subs	r3, r3, r1
 80078fa:	42ab      	cmp	r3, r5
 80078fc:	dcf2      	bgt.n	80078e4 <_printf_i+0x210>
 80078fe:	e7eb      	b.n	80078d8 <_printf_i+0x204>
 8007900:	2500      	movs	r5, #0
 8007902:	f104 0619 	add.w	r6, r4, #25
 8007906:	e7f5      	b.n	80078f4 <_printf_i+0x220>
 8007908:	08007dd9 	.word	0x08007dd9
 800790c:	08007dea 	.word	0x08007dea

08007910 <__sflush_r>:
 8007910:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007918:	0716      	lsls	r6, r2, #28
 800791a:	4605      	mov	r5, r0
 800791c:	460c      	mov	r4, r1
 800791e:	d454      	bmi.n	80079ca <__sflush_r+0xba>
 8007920:	684b      	ldr	r3, [r1, #4]
 8007922:	2b00      	cmp	r3, #0
 8007924:	dc02      	bgt.n	800792c <__sflush_r+0x1c>
 8007926:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007928:	2b00      	cmp	r3, #0
 800792a:	dd48      	ble.n	80079be <__sflush_r+0xae>
 800792c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800792e:	2e00      	cmp	r6, #0
 8007930:	d045      	beq.n	80079be <__sflush_r+0xae>
 8007932:	2300      	movs	r3, #0
 8007934:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007938:	682f      	ldr	r7, [r5, #0]
 800793a:	6a21      	ldr	r1, [r4, #32]
 800793c:	602b      	str	r3, [r5, #0]
 800793e:	d030      	beq.n	80079a2 <__sflush_r+0x92>
 8007940:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007942:	89a3      	ldrh	r3, [r4, #12]
 8007944:	0759      	lsls	r1, r3, #29
 8007946:	d505      	bpl.n	8007954 <__sflush_r+0x44>
 8007948:	6863      	ldr	r3, [r4, #4]
 800794a:	1ad2      	subs	r2, r2, r3
 800794c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800794e:	b10b      	cbz	r3, 8007954 <__sflush_r+0x44>
 8007950:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007952:	1ad2      	subs	r2, r2, r3
 8007954:	2300      	movs	r3, #0
 8007956:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007958:	6a21      	ldr	r1, [r4, #32]
 800795a:	4628      	mov	r0, r5
 800795c:	47b0      	blx	r6
 800795e:	1c43      	adds	r3, r0, #1
 8007960:	89a3      	ldrh	r3, [r4, #12]
 8007962:	d106      	bne.n	8007972 <__sflush_r+0x62>
 8007964:	6829      	ldr	r1, [r5, #0]
 8007966:	291d      	cmp	r1, #29
 8007968:	d82b      	bhi.n	80079c2 <__sflush_r+0xb2>
 800796a:	4a2a      	ldr	r2, [pc, #168]	@ (8007a14 <__sflush_r+0x104>)
 800796c:	40ca      	lsrs	r2, r1
 800796e:	07d6      	lsls	r6, r2, #31
 8007970:	d527      	bpl.n	80079c2 <__sflush_r+0xb2>
 8007972:	2200      	movs	r2, #0
 8007974:	6062      	str	r2, [r4, #4]
 8007976:	04d9      	lsls	r1, r3, #19
 8007978:	6922      	ldr	r2, [r4, #16]
 800797a:	6022      	str	r2, [r4, #0]
 800797c:	d504      	bpl.n	8007988 <__sflush_r+0x78>
 800797e:	1c42      	adds	r2, r0, #1
 8007980:	d101      	bne.n	8007986 <__sflush_r+0x76>
 8007982:	682b      	ldr	r3, [r5, #0]
 8007984:	b903      	cbnz	r3, 8007988 <__sflush_r+0x78>
 8007986:	6560      	str	r0, [r4, #84]	@ 0x54
 8007988:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800798a:	602f      	str	r7, [r5, #0]
 800798c:	b1b9      	cbz	r1, 80079be <__sflush_r+0xae>
 800798e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007992:	4299      	cmp	r1, r3
 8007994:	d002      	beq.n	800799c <__sflush_r+0x8c>
 8007996:	4628      	mov	r0, r5
 8007998:	f7ff fbf4 	bl	8007184 <_free_r>
 800799c:	2300      	movs	r3, #0
 800799e:	6363      	str	r3, [r4, #52]	@ 0x34
 80079a0:	e00d      	b.n	80079be <__sflush_r+0xae>
 80079a2:	2301      	movs	r3, #1
 80079a4:	4628      	mov	r0, r5
 80079a6:	47b0      	blx	r6
 80079a8:	4602      	mov	r2, r0
 80079aa:	1c50      	adds	r0, r2, #1
 80079ac:	d1c9      	bne.n	8007942 <__sflush_r+0x32>
 80079ae:	682b      	ldr	r3, [r5, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d0c6      	beq.n	8007942 <__sflush_r+0x32>
 80079b4:	2b1d      	cmp	r3, #29
 80079b6:	d001      	beq.n	80079bc <__sflush_r+0xac>
 80079b8:	2b16      	cmp	r3, #22
 80079ba:	d11e      	bne.n	80079fa <__sflush_r+0xea>
 80079bc:	602f      	str	r7, [r5, #0]
 80079be:	2000      	movs	r0, #0
 80079c0:	e022      	b.n	8007a08 <__sflush_r+0xf8>
 80079c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079c6:	b21b      	sxth	r3, r3
 80079c8:	e01b      	b.n	8007a02 <__sflush_r+0xf2>
 80079ca:	690f      	ldr	r7, [r1, #16]
 80079cc:	2f00      	cmp	r7, #0
 80079ce:	d0f6      	beq.n	80079be <__sflush_r+0xae>
 80079d0:	0793      	lsls	r3, r2, #30
 80079d2:	680e      	ldr	r6, [r1, #0]
 80079d4:	bf08      	it	eq
 80079d6:	694b      	ldreq	r3, [r1, #20]
 80079d8:	600f      	str	r7, [r1, #0]
 80079da:	bf18      	it	ne
 80079dc:	2300      	movne	r3, #0
 80079de:	eba6 0807 	sub.w	r8, r6, r7
 80079e2:	608b      	str	r3, [r1, #8]
 80079e4:	f1b8 0f00 	cmp.w	r8, #0
 80079e8:	dde9      	ble.n	80079be <__sflush_r+0xae>
 80079ea:	6a21      	ldr	r1, [r4, #32]
 80079ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80079ee:	4643      	mov	r3, r8
 80079f0:	463a      	mov	r2, r7
 80079f2:	4628      	mov	r0, r5
 80079f4:	47b0      	blx	r6
 80079f6:	2800      	cmp	r0, #0
 80079f8:	dc08      	bgt.n	8007a0c <__sflush_r+0xfc>
 80079fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a02:	81a3      	strh	r3, [r4, #12]
 8007a04:	f04f 30ff 	mov.w	r0, #4294967295
 8007a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a0c:	4407      	add	r7, r0
 8007a0e:	eba8 0800 	sub.w	r8, r8, r0
 8007a12:	e7e7      	b.n	80079e4 <__sflush_r+0xd4>
 8007a14:	20400001 	.word	0x20400001

08007a18 <_fflush_r>:
 8007a18:	b538      	push	{r3, r4, r5, lr}
 8007a1a:	690b      	ldr	r3, [r1, #16]
 8007a1c:	4605      	mov	r5, r0
 8007a1e:	460c      	mov	r4, r1
 8007a20:	b913      	cbnz	r3, 8007a28 <_fflush_r+0x10>
 8007a22:	2500      	movs	r5, #0
 8007a24:	4628      	mov	r0, r5
 8007a26:	bd38      	pop	{r3, r4, r5, pc}
 8007a28:	b118      	cbz	r0, 8007a32 <_fflush_r+0x1a>
 8007a2a:	6a03      	ldr	r3, [r0, #32]
 8007a2c:	b90b      	cbnz	r3, 8007a32 <_fflush_r+0x1a>
 8007a2e:	f7ff f9af 	bl	8006d90 <__sinit>
 8007a32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d0f3      	beq.n	8007a22 <_fflush_r+0xa>
 8007a3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007a3c:	07d0      	lsls	r0, r2, #31
 8007a3e:	d404      	bmi.n	8007a4a <_fflush_r+0x32>
 8007a40:	0599      	lsls	r1, r3, #22
 8007a42:	d402      	bmi.n	8007a4a <_fflush_r+0x32>
 8007a44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a46:	f7ff fb9a 	bl	800717e <__retarget_lock_acquire_recursive>
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	4621      	mov	r1, r4
 8007a4e:	f7ff ff5f 	bl	8007910 <__sflush_r>
 8007a52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a54:	07da      	lsls	r2, r3, #31
 8007a56:	4605      	mov	r5, r0
 8007a58:	d4e4      	bmi.n	8007a24 <_fflush_r+0xc>
 8007a5a:	89a3      	ldrh	r3, [r4, #12]
 8007a5c:	059b      	lsls	r3, r3, #22
 8007a5e:	d4e1      	bmi.n	8007a24 <_fflush_r+0xc>
 8007a60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a62:	f7ff fb8d 	bl	8007180 <__retarget_lock_release_recursive>
 8007a66:	e7dd      	b.n	8007a24 <_fflush_r+0xc>

08007a68 <__swhatbuf_r>:
 8007a68:	b570      	push	{r4, r5, r6, lr}
 8007a6a:	460c      	mov	r4, r1
 8007a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a70:	2900      	cmp	r1, #0
 8007a72:	b096      	sub	sp, #88	@ 0x58
 8007a74:	4615      	mov	r5, r2
 8007a76:	461e      	mov	r6, r3
 8007a78:	da0d      	bge.n	8007a96 <__swhatbuf_r+0x2e>
 8007a7a:	89a3      	ldrh	r3, [r4, #12]
 8007a7c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007a80:	f04f 0100 	mov.w	r1, #0
 8007a84:	bf14      	ite	ne
 8007a86:	2340      	movne	r3, #64	@ 0x40
 8007a88:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007a8c:	2000      	movs	r0, #0
 8007a8e:	6031      	str	r1, [r6, #0]
 8007a90:	602b      	str	r3, [r5, #0]
 8007a92:	b016      	add	sp, #88	@ 0x58
 8007a94:	bd70      	pop	{r4, r5, r6, pc}
 8007a96:	466a      	mov	r2, sp
 8007a98:	f000 f848 	bl	8007b2c <_fstat_r>
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	dbec      	blt.n	8007a7a <__swhatbuf_r+0x12>
 8007aa0:	9901      	ldr	r1, [sp, #4]
 8007aa2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007aa6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007aaa:	4259      	negs	r1, r3
 8007aac:	4159      	adcs	r1, r3
 8007aae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007ab2:	e7eb      	b.n	8007a8c <__swhatbuf_r+0x24>

08007ab4 <__smakebuf_r>:
 8007ab4:	898b      	ldrh	r3, [r1, #12]
 8007ab6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ab8:	079d      	lsls	r5, r3, #30
 8007aba:	4606      	mov	r6, r0
 8007abc:	460c      	mov	r4, r1
 8007abe:	d507      	bpl.n	8007ad0 <__smakebuf_r+0x1c>
 8007ac0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007ac4:	6023      	str	r3, [r4, #0]
 8007ac6:	6123      	str	r3, [r4, #16]
 8007ac8:	2301      	movs	r3, #1
 8007aca:	6163      	str	r3, [r4, #20]
 8007acc:	b003      	add	sp, #12
 8007ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ad0:	ab01      	add	r3, sp, #4
 8007ad2:	466a      	mov	r2, sp
 8007ad4:	f7ff ffc8 	bl	8007a68 <__swhatbuf_r>
 8007ad8:	9f00      	ldr	r7, [sp, #0]
 8007ada:	4605      	mov	r5, r0
 8007adc:	4639      	mov	r1, r7
 8007ade:	4630      	mov	r0, r6
 8007ae0:	f7ff fbbc 	bl	800725c <_malloc_r>
 8007ae4:	b948      	cbnz	r0, 8007afa <__smakebuf_r+0x46>
 8007ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aea:	059a      	lsls	r2, r3, #22
 8007aec:	d4ee      	bmi.n	8007acc <__smakebuf_r+0x18>
 8007aee:	f023 0303 	bic.w	r3, r3, #3
 8007af2:	f043 0302 	orr.w	r3, r3, #2
 8007af6:	81a3      	strh	r3, [r4, #12]
 8007af8:	e7e2      	b.n	8007ac0 <__smakebuf_r+0xc>
 8007afa:	89a3      	ldrh	r3, [r4, #12]
 8007afc:	6020      	str	r0, [r4, #0]
 8007afe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b02:	81a3      	strh	r3, [r4, #12]
 8007b04:	9b01      	ldr	r3, [sp, #4]
 8007b06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007b0a:	b15b      	cbz	r3, 8007b24 <__smakebuf_r+0x70>
 8007b0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b10:	4630      	mov	r0, r6
 8007b12:	f000 f81d 	bl	8007b50 <_isatty_r>
 8007b16:	b128      	cbz	r0, 8007b24 <__smakebuf_r+0x70>
 8007b18:	89a3      	ldrh	r3, [r4, #12]
 8007b1a:	f023 0303 	bic.w	r3, r3, #3
 8007b1e:	f043 0301 	orr.w	r3, r3, #1
 8007b22:	81a3      	strh	r3, [r4, #12]
 8007b24:	89a3      	ldrh	r3, [r4, #12]
 8007b26:	431d      	orrs	r5, r3
 8007b28:	81a5      	strh	r5, [r4, #12]
 8007b2a:	e7cf      	b.n	8007acc <__smakebuf_r+0x18>

08007b2c <_fstat_r>:
 8007b2c:	b538      	push	{r3, r4, r5, lr}
 8007b2e:	4d07      	ldr	r5, [pc, #28]	@ (8007b4c <_fstat_r+0x20>)
 8007b30:	2300      	movs	r3, #0
 8007b32:	4604      	mov	r4, r0
 8007b34:	4608      	mov	r0, r1
 8007b36:	4611      	mov	r1, r2
 8007b38:	602b      	str	r3, [r5, #0]
 8007b3a:	f7f9 f867 	bl	8000c0c <_fstat>
 8007b3e:	1c43      	adds	r3, r0, #1
 8007b40:	d102      	bne.n	8007b48 <_fstat_r+0x1c>
 8007b42:	682b      	ldr	r3, [r5, #0]
 8007b44:	b103      	cbz	r3, 8007b48 <_fstat_r+0x1c>
 8007b46:	6023      	str	r3, [r4, #0]
 8007b48:	bd38      	pop	{r3, r4, r5, pc}
 8007b4a:	bf00      	nop
 8007b4c:	240002b0 	.word	0x240002b0

08007b50 <_isatty_r>:
 8007b50:	b538      	push	{r3, r4, r5, lr}
 8007b52:	4d06      	ldr	r5, [pc, #24]	@ (8007b6c <_isatty_r+0x1c>)
 8007b54:	2300      	movs	r3, #0
 8007b56:	4604      	mov	r4, r0
 8007b58:	4608      	mov	r0, r1
 8007b5a:	602b      	str	r3, [r5, #0]
 8007b5c:	f7f9 f866 	bl	8000c2c <_isatty>
 8007b60:	1c43      	adds	r3, r0, #1
 8007b62:	d102      	bne.n	8007b6a <_isatty_r+0x1a>
 8007b64:	682b      	ldr	r3, [r5, #0]
 8007b66:	b103      	cbz	r3, 8007b6a <_isatty_r+0x1a>
 8007b68:	6023      	str	r3, [r4, #0]
 8007b6a:	bd38      	pop	{r3, r4, r5, pc}
 8007b6c:	240002b0 	.word	0x240002b0

08007b70 <_sbrk_r>:
 8007b70:	b538      	push	{r3, r4, r5, lr}
 8007b72:	4d06      	ldr	r5, [pc, #24]	@ (8007b8c <_sbrk_r+0x1c>)
 8007b74:	2300      	movs	r3, #0
 8007b76:	4604      	mov	r4, r0
 8007b78:	4608      	mov	r0, r1
 8007b7a:	602b      	str	r3, [r5, #0]
 8007b7c:	f7f9 f86e 	bl	8000c5c <_sbrk>
 8007b80:	1c43      	adds	r3, r0, #1
 8007b82:	d102      	bne.n	8007b8a <_sbrk_r+0x1a>
 8007b84:	682b      	ldr	r3, [r5, #0]
 8007b86:	b103      	cbz	r3, 8007b8a <_sbrk_r+0x1a>
 8007b88:	6023      	str	r3, [r4, #0]
 8007b8a:	bd38      	pop	{r3, r4, r5, pc}
 8007b8c:	240002b0 	.word	0x240002b0

08007b90 <_init>:
 8007b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b92:	bf00      	nop
 8007b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b96:	bc08      	pop	{r3}
 8007b98:	469e      	mov	lr, r3
 8007b9a:	4770      	bx	lr

08007b9c <_fini>:
 8007b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b9e:	bf00      	nop
 8007ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ba2:	bc08      	pop	{r3}
 8007ba4:	469e      	mov	lr, r3
 8007ba6:	4770      	bx	lr
